안녕하세요, 포프입니다.

Junction 편에서 Single Point of Truth 얘기하면서 '회사에서 사용하는 모든 repo들을 그냥 한 폴더 안에 제대로 넣어 갖고 할 수 없을까?', '로컬 컴퓨터에서 개발 환경을 통합시키자' 그런 얘기를 했어요. 똑같은 개념을 Git에 MonoRepo로 만들면 권한 설정이 어려운 문제도 있겠지만, MonoRepo와 비슷하게 모든 걸 합쳐 놓은 병합된 긴 repo에도 적용이 가능합니다.

예를 들어서 회사에서 권한이 있는 사람들만 접근이 가능한 어떤 긴 repo가 있다고 생각을 해봐요. 근데 이게 자잘하게 나뉜 repo가 아니라 MonoRepo가 이렇게 되어 있다고 생각을 해봐요. 그러다 보면 특정 폴더의 어떤 것들을 남들이 수정하게 만들고 싶은 경우들이 당연히 있겠죠? 그럼 '이럴 때 이제 어떻게 하냐?' 이 문제예요. 여태까지 있던 Git에서 가장 만만하게 사용할 수 있는 건 Submodule입니다. 근데 Submodule을 사용하는 순간 Git repo가 복잡해져요. 그리고 Submodule이 Submodule로만 있는 게 아니라 그 자체가 긴 repo이기 때문에 권한부터 시작해서 관리가 힘들어져요. 저희도 많이 고민을 해봤는데, 일반적으로 누군가가 일시적으로 일부 권한을 가져야 하는 경우가 꽤 많습니다. '우리가 왜 이 고생을 하면서 권한 관리를 해야 할까?'하는 생각을 많이 했어요.

그러다가 우리 회사에서 생각해 낸 방식은 '그냥 slicer란 개념을 만들자'라는 거로 왔어요. 무슨 의미냐면, 어떤 긴 repo가 쫙 있어요. 그리고 폴더 A라는 게 어딘가 있고, 누구한테 A의 권한을 주고 싶어요. 그러면 이 용도로만 사용할 수 있는 repo를 한번 만들고요, 그 repo에 여기 있는 파일을 그냥 다 복사해서 commit을 해버려요. 그리고 그 사람한테 '이거를 고쳐서 주세요'라고 얘기해요. 일반적으로 말했을 때 외주를 맡기거나, 잠시 시간상으로 짧은 일들을 할 때 얘기죠? 이거를 끝나면 다시 repo로 가져와서 그거를 commit으로 하나하나 만들어서 replay 해서 commit을 할 수도 있고, 그냥 통째로 갖고 와서 하나 통째로 체크인할 수도 있죠. 회사 따라 다르겠고 일 크기 따라 다르겠지만 이렇게 할 수가 있습니다. 이걸 만드는 것만으로 저희는 많은 걸 해결했어요.

결과적으로 우리는 이거를 'slicer'라고 불러요. 'slicer'가 뭐냐? 어떤 MonoRepo, 누군가 권한을 가지고 있는 MonoRepo A에 있는 것을 이 서브 폴더만 다른 repo에 복사해서 새로운 repo를 만들고, 누군가 다 고친 다음에 다시 병합해서 올리는 방식이에요. 이 방식으로 하면 일단은 폴더별 권한 관리는 해결돼요. 그럼 'Git history가 모든 게 유지가 안 된다'라고 얘기할 수 있지만, 충분히 툴을 만들어서 처리할 수가 있습니다. 그리고 이 툴이 굉장히 범용적이기 때문에 저희가 외주를 주거나 남한테 일을 맡기기가 굉장히 편해졌어요. 만약 '툴을 만들기 싫다'거나 '통째로 받아서 그냥 한 번에 올릴 거다'라고 하시는 분들은 폴더 동기화 프로그램들이 있거든요? Free File Sync를 사용하시면 폴더별로 동기화가 돼요. 그러면 저건 누군가 외주 주는 Git Private repo 하나 두고, 이건 우리 MonoRepo 두고 얘네 둘만 동기화시키면 되는 거예요. 근데 이렇게 할 때 남한테 맡기는 건 브랜치 관리만 잘하면 훨씬 더 병합이 쉽긴 하겠죠? 단발성 외주라면 이런 식으로 하는 게 훨씬 편합니다. zip 파일 보내는 것보다도 훨씬 편해요. 왜냐면 일단 history가 남기 때문이에요. 그리고 내가 리뷰도 볼 수 있고요. 그래서 회사 안에서 모든 게 MonoRepo로 되는 것도 slicer만 만들면 충분히 가능한 일이에요. 다만 그냥 브랜치끼리 병합하고 하는 것들이 원래 한 repo에 있으면 훨씬 더 매끄럽게 도는데 얘는 조금 더 일이 많아질 수 있어요. 특히 양쪽에서 동일한 걸 건드리고 나서 병합할 때 충돌 나는 거 해결하기가 조금은 더 어려울 수는 있어요. 근데 이것도 브랜치 잘 나눠놓고 외주 주는 브랜치에서 이쪽으로 복사하고, 내 메인 브랜치는 여기 있고, 외주 거 repo 갖고 온 다음에 병합하는 거랑 사실은 별 차이는 없어요. 차라리 이렇게 구성을 하는 게 회사에서 MonoRepo 쓰면서 굉장히 간단하게 관리할 수 있고, 외부에서 다른 권한 줘야 하면 slicer 해서 보내는 게 되게 편하고 저희도 많이 쓰고 있는 방식입니다.

MonoRepo를 갈 때 폴더별 권한이 안 돼서 막 Submodule 쓰고 이런 거 되게 많이 하다가 최종적으로 저희가 내린 결정은 뭐였냐면 'Submodule은 외부에 존재하는 오픈소스 라이브러리를 그대로 동기화해서 우리가 그걸 버전별로 compile 해서 사용할 때나 존재하는 게 Submodule이지, 회사 내부에서 사용하는 것들을 Submodule로 만들지 말자'라는 게 저희 결론이었고요, 그래서 MonoRepo로 가고 있어요. 그리고 '만약에 우리가 딴 사람들한테 뭔가 일을 맡기거나 할 때는 slicer라는 걸 만들어서 쓰자'라는 게 현재 저희 회사의 방향이에요.

근데 Submodule이 점점 없어지고 있는 게 이제는 패키지 관리자가 발전하면서 외부 라이브러리를 그대로 가져다가 컴파일하는 일들이 점점 줄어들고 있어요. C, C++은 옛날에 굉장히 많았는데, 이것도 굉장히 많이 줄어들고 있어요. 그래서 더더욱 Submodule을 쓸 일이 없어지고 있더라고요. 약간 이외의 용도로 Submodule이 남용을 많이 했던 것 같죠? 예전에 MonoRepo가 제대로 지원이 안 될 때 MonoRepo처럼 하려고 Submodule 나누고 뭐하고 했는데 commit 두 번 해야 되고 뭐 해야 되고 오히려 되게 관리가 복잡해지면서 Git의 장점을 많이 까먹는 게 있었는데, 결론적으로 저희는 slicer + MonoRepo로 꽤 많은 것을 해결하고 있습니다.

나름 좋은 꿀팁이 됐길 바라며, 이 얘기를 저번 에피소드하고 연결해서 했던 이유는 MonoRepo 하나에 모든 게 있다, Single Point of Truth 내 repo 하나에 모든 게 들어가는 굉장히 좋은 방식이죠, 이거 하나로 들어가면. 나중에 코드 찾을 때도 거기만 찾으면 되거든요? repo 돌아다니면 찾는 거 생각보다 되게 오래 걸려요. 코드 제일 빨리 찾는 법? 로딩되어 있는 내 솔루션에서 전체 검색하고 찾는 게 제일 빠릅니다. 그게 안 되면 repo 다 복제해서 거기서 찾거나, Web DashBorder에서 찾거나 검색되는 거 찾거나 이런 식으로 해야 되죠? 생각보다 코드 repo 검색이 잘 되는 데가 별로 없어요. Github도 코드 repo 검색을 되게 못하는 편이긴 해요. 차라리 Azure Devops가 코드 repo 검색은 잘해요. 그렇지만 이것들보다도 로컬 검색이 훨씬 빠르고 가장 좋습니다. 그렇기 때문에 여러 가지 효용성을 방해하는 것들을 걷어내려면 MonoRepo가 확실히 좋기는 한데, 'MonoRepo의 권한 관리 문제 그런 것들은 slicer로 해결하자'. 그 외에도 partial clone이 안 되는 문제도 있는데, 그건 또 다음에 얘기할게요. 어쨌든 slicer라는 개념 나름 저희 잘 사용하고 있고, 많은 회사에 도움이 될 것 같아요.

포프였습니다.