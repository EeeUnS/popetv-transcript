안녕하세요. 포프입니다. 제가 예전에 'E0547. 남이 날 주니어 프로그래머로 보는 이유' 비디오를 하나 만들었었죠. Junior와 Intermediate를 판단하는 기준에서 보통 보는 것은, Intermediate가 되기 위한 조건들이 있고, 그중에 하나라도 충족 안 되면
너는 Junior다. 그런 하나가 무엇인지 볼 수 있는 몇 가지 판단 기준들을 자잘한 디오로 만든다고 말했어요. 오늘 그거 하나 만들겠습니다.

되게 간단한 판단 기준이에요. Junior라고 했으니까 일단 회사에서 일하고 있는 사람이겠죠. 회사 경력이 6개월, 1년 더 될 수도 있고, 10년, 20년짜리 Junior도 있어요. 간단한 질문이에요. '내가 작성하고 있는 코드, 만들고 있는 제품, 사용하는 라이브러리 다 포함해서 내가 모든 버그는 고칠 수 있다. 이 제품에서 버그가 나왔다면 모두 다 고칠 수 있다'라면 Intermediate입니다. 그중에 하나라도 못 고치는 게 있다면 Junior입니다. 되게 간단합니다. 물론 Junior, Intermediate, Senior 기준은 사람마다 다르지만, 업계 중 괜찮은 회사에서 일반적으로 보는 그런 기준이 이겁니다: Intermediate이시라면 어떤 제품이 나오는 버그를 다 고칠 줄 알아야 합니다. 그걸 못 같은 양 자체가 아직 안 됐다는 거예요. 되게 간단하죠. 그런데 '다른 라이브 있는 문제는 뭐 이런 문제가 있지 않나요? 이걸 내가 어떻게 고치나요?' 그러면 그 라이브러리가 많이 오픈소스라면 소스 까서 보시고요. 그게 아니라면 여러 가지 데이터 넣어보신 다음에 거기서 잘못된 문제를 찾아내서, 그 데이터가 들어가는 부분을 막으면 됩니다. 반면에 그 코드를 가지고 있지 않고, live를 가져다 쓰고 있는데 그게 Managed 언어라면, 디컴파일해서 보면서 다 버그 찾을 수 있습니다. 찾아야 합니다. 하지만 이렇게는 얘기할 수 있어요. 결과적으로 intermediate이 무엇이냐 하면, 어떤 문제가 생겨도 그것을 고치는 법은 찾을 수 있어요. 지금 모를 순 있어도, 찾아서 고칠 수 있습니다. '고치는 방법이 올바른지? 좀 더 유지보수가 되게 만드는지? 효율적인지?' 이것들은 Intermediate의 영역은 아니에요. Senior의 영역이에요. Intermediate는 문제가 뭐든 고칠 수 있답니다. Junior는 못 고치는 문제가 있다는 거고, 그 이유가 뭐냐면 아직도 컴퓨터가 어떻게 도든지 이해 못 하는 거죠. 컴퓨터가 어떻게 도는지 이해한다면 어떤 제품에 문제가 생길 때, 가설을 세우고 검증하고 Repro Steps를 따라가고, 데이터를 넣어 보는 방식으로 문제를 재현할 수 있어요. 문제가 재현됐다면, 그 문제가 일어나지 않기 위해서 내가 코드를 만들어서 고칠 수 있어야 하는 겁니다. 그것 때문에 또 다른 버그가 발생하기도 해요. 왜냐하면 아직 효율적으로 고치는 법을 모르고, 실수를 막으면서 고치는 법을 몰라요. 그래서 내가 A라는 버그를 고치는 코드 B를 짰는데, B에서 C라는 버그가 나오는 거죠. 충분히 가능한 일입니다. 하지만 그 버그가 나와도 내가 고칠 줄 알아야 한다는 거죠. 그게 Intermediate입니다. 안 되면 Junior 고요.

Junior 비유를 들어 볼까요? 제가 만약에 흔히 드는 비유인데, 인테리어 업자를 불렀어요. 뭔가를 고치고 싶어요. 인테리어도 급이 있겠죠? 어떤 인테리어 업자는 마감도 깨끗하고 작업을 잘해요. 내가 A라고만 말해도 알아듣고, 실제 내가 못
보고 있는 더 좋은 것까지 다 만들고, 내가 원하는 걸 만들면서도 뭔가 깔끔하고 예쁘고 더 좋은 기능도 들어가죠. Senior 같죠? 반면 다른 인테리어 업자는 내가 A를 하라 했어요. 그러면 일하긴 하는데 뭔가 좀 마감이 더럽고, 뭔가 문제도 있고
시켰던 A를 하기는 , 문제가 있어서 업자를 다시 호출하죠. 고쳐 달라고 해서 고쳐요. 고치긴 했는데 떡칠을 한 것 같아요. 기능도 하긴 하죠. 그래도 약간의 문제가 있는 듯하지만 잘 모르겠어요. 어쨌든 작동은 하니깐요. 이 업자는 Intermediate이시죠. 다시 다른 업자를 불렀어요. A를 해달라고 했어요. 업자는 C를 합니다. "아니 이건 A가 아니라 C잖아요!" "A를 하는 법은 모릅니다." "그러면 당신이 왜 여기서 돈을 받고 있죠?" 이게 Junior입니다. 이런 차이예요.

프로그래머가 어떤 일을 못 하는데 Intermediate이라면? 그건 아니에요. 물론 버그 고치는 게 아니라 어떤 시스템을 만드는 거죠. 예를 들어서 갑자기 카카오톡을 만들어야 하는 상황이 왔어요. 동시 접속을 몇백만 명을 처리해야 해요. 그 뒤에 들어가는 시스템 설계가 매우 커요. 그리고 경력이 꽤 많지 않으면, 그리고 이 오랜 기간 동안 이것저것 보고 이것저것 시도해보지 않으면 올바른 선택지를 못 고를 순 있어요. 그런 것 때문에 뭔가를 새로 구현 하는 단계에서, Intermediate와 Senior가 할 수 있는 게 달라질 수는 있습니다. 하지만 Intermediate이라면 이미 구조가 잡혀 있는 시스템에서 버그를 찾아 고치는 것은 누구나 할 수 있어야 하는 겁니다. 그렇게 보시는 게 맞아요.

그리고 잠깐 구현 얘기도 나왔으니 이것만 하고 끝낼게요. 만약에 내가 데스크탑 프로그램 정도를 구현하는 거라면, Intermediate는 구현 못 하는 게 없습니다. 내가 당장은 모르더라도 찾아보다 만들 수 있어요. 떡칠해서라도 비효율적으로라도 만들 수 있어야 해요. 그게 안 되면 Junior 맞습니다. 심지어 Junior가 안 될 수도 있어요. Desktop 환경은 워낙 그만큼 다들 잘 이해하고 있고 쉽게 만들 수 있는 공간이기 때문이에요. 하지만 그것은 판단기준이 애매모호할 수 있어요. 제가 이 비디오에서 말하고자 했던 것은, 못 고치는 버그가 하나라도 있으면 당신은 Junior입니다. 끝. 간단하죠? 포프였습니다.
