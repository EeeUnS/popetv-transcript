안녕하세요 포프입니다. 오늘은 오픈소스 관련 얘기를 좀 해 볼게요. 사실 오픈소스 하고 관련 없는데 예전에 한동안 지금부터 한 4~5년 된 이야기 같은데 요즘도 그 얘기하시는 분도 있겠지만, 엄청 약 팔던 거 중의 하나가 오픈소스 공헌 한 기록, 특히 깃허브에 공헌한 기록이 있어야 면접을 보고 취업을 할 수 있다 라는 얘기를 한 적이 있어요. 팩트 체크부터 해드리면 사실은 No입니다. 물론 이게 도움이 되는 경우부터 먼저 얘기하고 그다음에는 실제 업계에서 굉장히 일을 잘하는 사람들이 오픈소스 공헌을 하기가 되게 어려운 이유를 제가 예전에 겪었던 사례로 사례로 설명을 드릴게요.

그러면 이 오픈소스 얘기가 왜 나왔냐? 한동안 깃허브가 흥하면서 오픈소스가 최고네 마네 이런 약간 정신적인 승리들을 많이 했어요. 그거에다 더 붙여 갖고 막 했던 거 같은데, 사람들 선동하려고 결과적으로 말하면 제가 만약에 학교를 졸업한 입장이라면 회사에 지원을 할 때 내 코드 샘플을 보여 줄 수 있으면 당연히 그 사람들이 고려를 하고 최소한 제 코드에 대한 검증을 한번 하고 저를 좀 더 좋게 볼 수 있다는 장점은 있어요. 깃허브 같은 게 있기 전에는 그게 보통은 포트폴리오 사이트 만들어서 내 코드 샘플 올려놓고 다운로드할 수 있게 하는 거였고, 깃허브가 생긴 이후에는 '내 저장소(repository)니까 언제든 자유롭게 보세요. 이 작업은 내가 학교에서 한 겁니다' 아니면 '학교에 있는 동안 다른 사이트 프로젝트한 겁니다'라고 올려 둘 수가 있죠. 하지만 그게 반드시 깃허브에 있는 다른 오픈소스의 공헌을 의미하지는 않습니다. 물론 경력자나 이런 사람들도 오픈소스에 기여한 게 있으면 당연히 보여줄 수 있고 좋은 것은 맞아요. 근데 그거 갖고 면접을 하냐 마냐를 결정하는 경우는 제가 다니는 회사에는 없었습니다. 남들보다 나아 보일 수 있는 뭔가가 있으면 보여 주는 거였지 그게 없다고 해서 그 사람이 오픈소스 공헌 한 사람보다 훨씬 후지다? 나쁘다는 생각을 면접관은 거의 하지 않았어요. 제가 다닌 회사들에서. 그러면 왜 그러면 사람들은 오픈소스에 공헌을 안 하나요?라고 물어볼 수가 있어요.

그럼 제가 말하려고 했던 두 가지 얘기를 해 드릴게요. 아주 간단하게 말씀을 드리면 실무에선 날고 계시는 분들 그분도 오픈소스 공헌을 못하거나 안 하는 경우가 굉장히 많습니다. 제가 꽤 많은 괜찮은 회사들 다니면서 느꼈던 게 정말 거기서 잘하시는 분들 중에 오픈소스 하시는 분들은 제 생각에는 10% 미만이었요. 여러 가지 이유들이 있는데 일단은 한 2~3가지 정도로 제가 말하면 될 것 같아요. 첫 번째 이유 이 사람들이 회사 일에 올인을 하는 경우들이 굉장히 많습니다. 그냥 나는 회사 일이 전부 다 올인이고, 난 회사일만 할 거야... 근데 회사 일을 하는 도중에 제가 작성한 코드는 회사 소유예요. 그게 당연히 오픈소스 라이선스 때문에 이거를 배포할 때 다시 오픈소스로 풀어야 되는 법적인 이유들은 있지만 그런 오픈소스 라이선스가 아니라면은 그런 내부에서만 쓰는 도구거나 아니면 MIT계열의 라이선스라면 제가 소스 코드를 배포하거나 이런 경우가 아니라면은 다시 오픈소스를 공헌할 이유가 없거든요? 그럼 회사에서는 이미 내가 회사가 돈을 주고 뭐 이 사람 연봉 10만 불이든 20만 불이든 주고 작성한 코드는 회사 자체의 소유권이에요. 그 소유권을 직원 마음대로 오픈소스로 풀 수가 없습니다. 첫 번째 그거예요.

그리고 그 첫 번째랑 같은 얘기는 직원은 그냥 회사 일을 즐겁게 하고 재밌게 하고 그거에만 올인을 하기 때문에 내가 이거로 오픈소스로 풀어야겠다 생각을 못 하는 경우도 있어요. '그럼 집에 와서 하면 되잖아?' 얘기할 수 있어요. 이런 사람들은 기본적으로 회사 일을 집에서까지 생각하시는 분들이거든요? 그 외에 다른 걸로 별로 생각하고 싶지도 않고 연락도 없으신 분이거나 그 외에는 가족하고 보낼 수도 있어요. 근데 그 외 코딩을 안 하시는 분들, 정말 회사일로 실력으로만 빵을 올리고 그것만으로 만족하시는 분들 이런 분들은 보통 회사에 오래 남아있기도 해요. 그래서 그런 것 때문에 그 사람들이 
현실상 기여하기가 어려운 게 아니라면 사이드 프로젝트로 당연히 오픈소스 다른 거를 가져다가 공헌하시는 분들 있죠. 그런 분들은 할 수 있어요.

두 번째 얘기는 뭐냐면 제가 실제 회사를 다니면서 오픈소스의 공헌을 한 적이 있어요. 게임 회사 다닐 때 렐릭엔터테인먼트 지금은 SEGA 소속일 거예요. 저때는 THQ라고 전 세계 5위권 안에 드는 퍼블리셔의 소속된 회사였어요. 저희가 하는 일이 게임 제작이기 때문에 텍스쳐 압축 이런 걸 많이 했거든요? 그때 MVTT라고 NVIDIA Texture Tools라고 그 당시에 엔비디아에 계시던 그래픽스 프로그래머 사실은 렐릭에서 있다가 가신분이에요. 저는 직접 만난 적은 없어요. 그분이 이제 거기서 MVTT라는 툴을 만들어서 그거를 오픈소스로 공개하고 있었어요. 엔비디아 같은 경우는 그래픽 카드 제휴 사니까 그런 거를 공개해서 사람들이 더 많이 쓰면 좋으니까 그 사람이 쓰던 것 중에 제가 넣어야 되었던 코드가 뭐냐면은 여기에 blur 필터도 있고, sharpening 필터... 그건 없었을 거 같아... blur 필터가 있고 무슨 필터가 있는데 제가 정말 원하는 그 이미지 프로세싱 필터들이 있거든요? 굉장히 쉽고 흔하게 지원하는 거? 근데 이게 MVTT에서 지원을 안 했어요. 그래서 그런 거를 독자적인 다른 필터로 넣기보다는 Generic filter 범용적인 필터 함수로 만들어서 내가 Kenel, 행렬(matrix) 행렬만 어떻게든 넣으면 그렇게 알아서 이미지를 필터링하게 해 주자 그래서 그거를 제가 코드를 만들어서 실제 내부에서 썼고 내부에 쓴 경우에 이제 '아 이것 정도면 다른 팀들도 사용하면 좋겠다' 그래서 공헌을 하기로 마음을 먹었어요. 근데 공헌을 하려면 아까 말씀드렸듯이 회사 소유기 때문에 회사의 허락을 받아야 됩니다. 그래서 제가 처음에 했던 거는 렐릭 테크니컬 디렉터 그 사람한테 이거를 공헌해도 되겠냐고 물어봤고, 그 사람이 내가 결정할 건 아니고 우리 모회사 THQ 한마디로 말하면 우리는 조그만 산하 스튜디오인데 직원이 200명 규모 스튜디오 한 50개 거느리고 있는 모회사 법무팀에 허락을 받아야 된대요. 법무팀에 올라갔어요. 거기에 있는 치프 테크놀로지 오피서까지 검토를 하고 막 물어봐요. 이거를 왜 왜 공헌을 해야 되며... 이런 얘기들을 다 물어봅니다. 그러면 그걸 제가 쓸데없이 대답을 해주고 있었어야 했어요. 그거 허락받는 데 걸리는 기간이 꽤 걸렸는데, 그쪽 위에서는 굳이 우리가 만든 코드를 공개하고 싶지 않다는 분위기가 강했습니다. 하지만 제가 했던 얘기는 이거는 "이미 존재하는 텍스쳐 툴에 우리가 추가적으로 패치를 만든 건데, 앞으로 저 MVTT 도구라는 건 더 발전을 할 거다... 그때마다 우리 패치를 다시 적용하는 거에 드는 비용이 우리가 오픈소스로 공헌해버리고 그거를 그냥 걔네가 그 뒤로부터 유지보수해 주는 게 더 우리한테는 노력이 덜 들 거다"란 얘기를 했던 게 있어요. 결과적으로 허락받고 공헌을 했습니다. 그래서 이 공헌하는 과정을 한번 해 보고 나니까 은근히 귀찮은 거야... 은근히. '아이씨.... 뭐지?' 이런 생각을 했어요. 저같이 이렇게 어려움을 느끼기 때문에 그냥 공헌을 안 하신 분 들 꽤 있을 겁니다 사실은.

그리고 그다음에 또 다른 제가 공헌한 케이스는 이거는 제가 실제 제 스타트업을 하다가 벡터 렌더링을 해야 했어요. 벡터를 png로 똑같이 뽑고, 웹에서 보여준 svg 파일 이게 폰트 기반으로 텍스트를 그린 걸 수도 있고 이미지를 그린 걸 수도 있어요. 그거를 그대로 픽셀 하나 안 틀리고 색상 하나도 안 틀리고 png로 뽑아낼 수 있는 기술을 제가 지금 만든 게 있거든요? 벡터 렌더링 기술이고 폰트 렌더링 기술이라고 하는데 이거를 할 때 내부적으로 중간에 사용했던 라이브러리 하나가 있어요. 중간 레이어 하나에... 그게 svg.net입니다. 요거를 제가 하다가 버그를 찾았어요. 그래서 버그를 고치고 
공헌을 하는 과정이 또 수월 하지 않았던 게 뭐냐면, 이 오픈소스 프로젝트를 제가 받아 왔는데 이 프로젝트가 솔직히 완성이 된 프로젝트가 아니어서 Nuget 패키지로 쓸 수가 없었어요. 소스코드 가져와서 저희가 컴파일에서 고치면 사용할 수밖에 없는 그 정도의 오픈소스였는데 그걸 고치다 보니까 여기에 사용하는 코딩 스타일 자체가 일단은 저희 회사 코딩 스타일하고는 굉장히 많이 다르고. NET 쪽에서 사용하는 코딩 스타일하고도 좀 다르긴 해요 해서 코드를 건드리다 보니까 자꾸만 우리 스타일 쪽으로 있던 코드도 바꾸게 되는데 큰 실수였던 거죠. 제가 만든 버그 수정을 걔네 쪽에 올려야 돼요. 그러면 걔네 코딩 스타일에 맞춰 줘야 되거든요? 그래서 그거를 또 코딩 스타일 맞춰가지고 바꿔주는데 시간들이고 병합(merge)하고 다시 우리 꺼 메인 받아 오고 또 우리 코딩 스타일로 바꾸고 이게 너무 일이 많더라고요. 그런 것도 약간 문제가 있긴 있었어요. 이건 큰 문제는 아니었죠.

세 번째 말할 문제가 더 큰 거예요 사실은. 제가 정적 사이트 생성기(Static Site Generator, SSG)를 많이 써요. 웹 사이트 만들려고 Jekyll을 쓰기도 하고 Hugo를 쓰기도 해요. 제가 원래 Hugo를 좋아하다가 이 사건 이후로 사실 Jekyll로 갈아탄 계기가 있어요. Hugo가 굉장히 좋아요. 전 Jekyll보다 좋다고 생각을 했는데 Hugo를 쓰다 보니까 걔네들이 기본적으로 사용할 기본 테마가 있거든요 Hugo 새로운 버전이 나오면서 어떤 변수(variable)가 없어져서 깨졌어요 사실은. 그래서 사이트가 제대로 나오지 않아요. 그래서 그거를 제가 고치는 코드를 넣고 이제 full request를 쐈습니다. 근데 그게 병합이 안 됐을 거예요. 왜냐? 그거 담당하시는 분이 유지보수(maintenance) 하시는 분이 리뷰를 늦게 보기도 했고, 늦게 보는 순간에 자기는 실제 테스트도 안 돌려봤고 최신 버전을 써 보지도 않았나 봐요. 저한테 묻는 거예요. 이게 왜 깨지는 건지 증거를 보여 달라는 거야 나보고... 아니 그냥 새로운 버전 올리면 깨진다고 내가 했거든요? 근데 그거를 무슨 문서에서 이게 어디가 적혀 있고 이런 걸 찾아오래요. 이미 나는 시간이 어느 정도 지났고 그리고 나는 이게 올바른 fix라는 걸 알아요. 내 홈페이지를 그렇게 돌리고 있으니까 그럼 그 순간에 내가 그걸 또 찾아갖고 증거를 찾기가 귀찮더라고요. 그리고 그 순간에 이미 병합처리 잘 안 해주는 거 보고 '아 Hugo는 좀 문제가 있는 것 같다. 테마 만드신 분의 문제일 수도 있지만, Hugo 보다는 좀 사람들이 이제 더 많이 쓰는 Jekyll 쪽으로 가 보자'라고 마음을 먹었기 때문에 제가 그냥 답변을 안 했어요. 제 시간이 아까워서 그래서 안 했습니다.

그러면 지금까지 보면은 제가 진짜 큰 회사에서 일할 때 오픈소스 공헌할 때 약간의 문제가 있었던 것들, 귀찮은 것들 물로 회사 정책(policy) 자체가 무조건 '마음껏 공헌하세요' 이런 곳이 있을 수 있을지도 모르겠는데, 제 생각에는 큰 회사는 잘 없을 거라고 생각을 합니다. 그런 불편한 점, 그리고 유지가 잘 안 되는 오픈소스에 코드 넣으면서 이제 내가 코딩 스타일을 걔네들에 맞춰서 바꿔 주고 하는 게 굉장히 대의를 품지 않는 이상 귀찮은 일이라는 거... 그리고 세 번째 오픈소스 유지보수하시는 분이 이제 누가 검증을 하냐의 문제인데 저는 이미 검증을 했거든요? 그럼 이제 그쪽에서 내가 검증한 거를 다 보여 줘야 된다는 거 자체가 조금 문서를 찾아갖고 뒤져줘야 한다는 것 자체가 제 느낌에는 그냥 내가 공헌해주는 거거든요? '잘못된 거 고치세요... 확인해보고 넣으세요'인데 그 확인까지 내가 해야 되는 순간 저는 이제 또 안 할 수도 있다는 거... 그래서 이런 여러 가지 구조적인, 사람적인 그런 문제들 때문에 복잡한 것들이 많았어요 생각보다. 그래서 이제 오픈소스를 이런 거 귀찮아하시는 분들 되게 많거든요? 그래서 실제 그렇게 오픈소스 공헌 자체가 면접을 받고 말고 특히 경력자에게 엄청나게 좌지우지되진 않아요. 내가 만약에 위지스 같은 서비스의 오픈소스를 공헌했다면 위지스가 나를 채용해 갈 순 있겠지만, 그거가 아니더라도 이미 면접을 보고 채용해 갈 수도 있다고 저는 생각을 합니다. 그래서 회사에서 면접관 볼 때도 그렇게 오픈소스 중요하게 보지 않았으니까 그런 헛소리는 많이 안 믿으셔도 됩니다. 그리고 지금은 이제 그런 소리를 하시는 분이 솔직히 많이 없어졌죠. 그래서 좀 뒤늦은 비디오 기도한데 그만큼 논란이 적겠죠? 요 정도로 할게요 포프였습니다.