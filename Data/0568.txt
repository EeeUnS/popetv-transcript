안녕하세요 포프입니다. 

오늘은 클린코드 때문에 취업 실패한 썰을 하나 풀어 드릴게요. 참고로 2개 말씀드릴게요. 클린코드를 한다고 면접에서 광탈한다는 얘기가 아닙니다. 요즘 트렌드가 클린코드를 미끼로 쓰는 트렌드가 보이기 시작한다는 말씀을 드리려고 하는 거고 그래서 이건 면접관을 잘 만나야 하는 거죠. 어떤 면접관이 들어오냐 따라 내가 클린코드를 아냐 마냐에 따라 당락이 결정되는 경우도 있어요. 그리고 두 번째는 실화를 바탕으로 누가 전해 주신 거예요. 제가 라이브 할 때 이런 부분으로 사용될 수 있는 우려가 있다, 왜냐면 옛날에 디자인패턴 그렇게 장난을 쳤었고, TDD도 그렇게 장난을 쳤었고, TDD는 한국에서 그런지 모르겠지만 해외에서는 그렇게 장난을 쳤고 지금은 클린 코드 쪽이 그런 문제들이 충분히 있을 수 있다라는 얘기를 라이브로 지나가듯이 얘기했는데 그 일이 실제로 일어났습니다. 경력자인데 내가 클린코드 안다고 했다가 면접 떨어졌다라고. 자 그 실화를 그분의 썰을 빌려서 들려 드릴게요.

뭐였냐면 이 분이 경력이 좀 되시는 분입니다. 일명 '경력자'예요. 그래서 디자인 아키텍처 이런 부분에 신경 써야 되는 그런 경력자죠. 이 분이 지금 있는 회사의 대우가 나쁘지 않고 충분히 만족하는데 좀 더 복지가 좋은 회사, 투자금도 많이 들어온 힙하고 그런 회사, 그리고 누구나 알만한 부모님도 아시는 '성공했네'라고 하는 그런 인지도 있는 회사에 가고 싶었답니다. 자기 일에 큰 불만은 없지만 '더 큰 물로 가서 놀아보자' 이런 식의 마음을 가지셨던 거죠. 그래서 그 회사 공고를 봤는데 거기 그렇게 쓰여 있더라고 합니다, '클린코드 하시는 분 우대' 이런 식으로. 그 '클린 코드'라는 게 '클린 코드'란 책이 있잖아요? '클린 아키텍처' 그 책이 있다는 것도 알고 대충 읽어 봤었지만 한 번 더 정독을 했답니다. 그래서 꼼꼼히 외워서 거기에서 동의하지 않는 부분도 솔직히 꽤 있었지만 어쨌든 간에 그 면접 준비를 하고 가신 거예요. 그래서 실제 면접에 들어갔어요. 면접에서 얘기하다가 이것저것 다 얘기하고 거의 마지막쯤에 나오는 질문이 클린코드 관련 얘기가 나왔답니다. 그래서 책에서 본 내용을 정말 제대로 확실하게 언급을 하면서 막 열정적으로 얘기를 했다는 거예요. 그리고 시간이 지났는데 면접은 탈락. 이 사람은 약간 이해가 안 됐대요. 왜냐면은 코딩면접 굉장히 잘 봤고 앞에 경력도 굉장히 좋았고 문제없었다는 거예요. 너무 화기애애했다는 거예요. 그래서 '이상하다 이게 왜 안 됐지?'라고 해서 그 회사에서 일하는 자기 대학 후배한테 물어봤답니다 넌지시. '이게 뭐냐?' 그리고 그 면접을 봤던 팀이 그 대학 후배 소속 팀이었데요. 그 대학후배 그러더라고요. 왜 먼저 연락을 안 했냐고, 자기 면접 본다고. '아니 회사 지원하는데 너한테 연락할게 뭐가 있냐? 내가 면접 봐서 들어가면 되는 거지' 그랬더니 그 후배가 그러더라는 거예요. '아이 형, 형은 함정에 빠진 거예요. 저희 팀이니까 면접관 누구누구 누구죠? 클린코드 한다고 하면 저희 회사 저희 팀에서 굉장히 안 좋게 봐요.' 딱 그렇게 얘기하는 거예요. 그래서 '무슨 소리야?' 그러니까 클린 코드라는 개념 자체가 사실 개념은 좋은 거예요. 당연히 깨끗해야죠 코드는. 그런데 요즘 클린코드라는 어떤 책이랑 동급으로 얘기하잖아요?. 그 책에 대해서 회사에서 굉장히 안 좋은 인식이 있다는 거예요. 그게 흔히 제가 말하는 약팔이 식으로 많이 팔아 놓고 실제 거기 나온 내용들이 실무에서 인상을 찌푸리게 만드는 내용들이 꽤 많은데 그래서 그 팀에서 원하는 거는 그 책이 있다는 걸 알고 그 책이 말하는 내용이 뭔지도 알고 이 책에서 얘기하는 것 중에 문제점이 뭔지도 알고, 그 문제점을 어떻게 회피해 갈지도 아는 사람을 대우해 준다는 게 '클린코드 아는 분은 우대한다'는 얘기라고 써 놓은 거예요. 한마디로 이런 얘기를 안 하면 클린코드에 있는 거를 그대로, 실무에 적용 가능한 게 절반 정도 된다고 보면 클린코드를 100% 그대로 따라 하겠다는 사람들이 자꾸만 들어와서 팀 분위기를 망친다던가, 그리고 실제 그것 때문에 우리가 겪는 소프트웨어 품질 등의 문제들이 있다. 그래서 그런 검증을 자기가 스스로 하지 않고 올바른 판단을 내리지 않는, 유명하다는 책 몇 권만 보고 들어 오는 사람들을 거르기 위해서 약간의 함정을 깔아 둔 거다라고 얘기하더라고요. 그 회사에서 원하는 내용은 아까 말했듯이 이거에 문제점이 뭔지 알고 어떤 거를 쓰고, 어떤 걸 안 쓰고 그런 자기 판단할 수 있는 프로그래머가 필요했다는 얘기고, 이 면접 보신 분은 조금 황당했죠. 왜냐면 자기 생각이 원래 그랬거든요. 그리고 이 후배도 그걸 알거든요. 이 형이 어떤 사람인지 잘 아는 사람이라는 걸 근데 불행히도 함정에 빠졌다는 거죠. 요거는 그 사람의 얘기고 실제 면접관이 이 사람이 냄새가 나서 싫어하는지는 전 몰라요. 어쨌든 간에 거기서 나온 얘기는 그 정도고 그 외 이야기는 몰라요. 제가 들은 얘기는 여기까지입니다.

근데 저는 이게 충분히 사실이라고 생각이 드는 이유가 업계에서 이런 똑같은 함정을 여러 군데 써 왔어요. 그리고 참 재밌는 거는 이 함정을 깔아야 되는 유명한 약팔이, 유명한 책들이 거의 언제나 동일한 사람들이 써 온 책 때문이라는 것에 있습니다. 누군진 얘기 안 할게요. 근데 처음에 2000년대 초반 아니고 2000년대 중반, 2008~9년 정도에 가서 북미에서 가장 많은 함정을 깔았던 게 디자인 패턴. '디자인 패턴 잘하는 사람 우대'라고 써놓고 디자인 패턴의 책을 되읊고 있는 사람들을 무조건 떨어뜨린 회사들이 있었어요. 역시 이것도 case by case라는 겁니다. 그 회사가 어떤 사람을 좋아하느냐 따라 달라져요. 어떤 사람은 책 내용대로 디자인 패턴 얘기를 하면 좋아서 뽑을 수도 있어요. 그리고 회사 기조는 이런데 각 면접관의 기조가 다를 수도 있어요. 한 마디로 운인 거죠. 그런 게 있었고 그다음에 2010년 대 초반 그때는 TDD를 똑같이 했습니다. 그래서 '테스트를 잘하는 사람, 테스트 코드를 잘 작성하는 사람 우대' 해 놓고 그 사람이 와서 TDD를 얘기하고 있다 그러면 떨어트리는 회사들이 꽤 있었습니다. 그래서 이 두 가지 함정을 거쳐서 클린코드 함정은 여기서 나오지 않았어요. 왜냐면 클린코드가 그렇게 큰 영향을 못 일으켰다고 할까요? 그 이유가 제 생각에는 클린코드 전에 2010년 초반까지는 이런 책들이 정보를 흡수하는 굉장히 큰 수단이었고 개발자 커뮤니티가 온라인에서 활성화가 많이 안 되어 있었는데 클린 코드가 나올 때는 Reddit이라던가 Stack Overflow가 굉장히 활성화되어있어서 이 클린 코드의 문제점을 비판하는 사람들이 꽤 많았던 거 같아요. 그래서 클린코드가 그렇게 엄청난 반향을 일으키진 않았고 실무자들 사이에서 한번 읽어 보는 정도지, 그거 가지고 반드시 이걸 해야 된다라는 약간 광신도적인 믿음이 꽤 적었던 것 같긴 해요 사실. 그래서 면접관들이 나서서 클린코드를 읽어 봤으면 이런 함정을 까는 일이 거의 없었어요. 그래서 북미에서는 일어나지 않은 일인데 그게 한국에서 일어나고 있다는 게 조금 놀랍긴 하지만 한국에서 클린코드 열풍이 좀 한번 불었으니깐 당연한 결과라고 생각을 해요.

제가 3대 함정 얘기했었죠? 또 하나 함정은 C++에 특화된 얘긴데 예전에 C++ 03이 나오고 11 나오기 전까지는 C++ 03 스펙이 굉장히 많이 이상했습니다. 그래서 거기서 나왔던 컨테이너라던가 이런 쪽 이야기들. 그런 쪽의 함정을 까는 경우들이 있었어요. 'C++ 03에 대해 얼마나 잘 알고 있느냐?' 그럼 '거기서 템플릿 프로그래밍 얼마나 잘 알고 있느냐?' 그러면 '이거 너무 좋고 이거 써야 됩니다'하는 사람들도 떨어뜨리는 함정들이 있었습니다. 그건 다행히 지금 많이 없어졌어요. 왜냐하면 정리가 어느 정도 됐거든요 사실은. 그리고 최근 나오는 C++ 표준을 보니깐 C++ 커뮤니티 자체가 정신을 차린 거 같아요. 그 이유는 제 생각에는 실제 C++을 사용하는 업계들이 커뮤니티에 침투해서 활약하고 있는 거 같아요. '이건 안 된다', '저건 안 된다'. C++ 커뮤니티는 그거를 느끼지 못할 수도 있는데, 그쪽에서 충분히 피드백을 주고 충분히 좋은 방향을 잡아가고 있고 그리고 최근에 CppCon 2022 영상을 보니까 bjarne stroustrup도 여태까지는 '새로운 기능 이런 거였어'라고 하다가 이번에 기조를 완전히 바꾸셨더라고요. '업계에서는 이렇게 쓰니까 너는 이렇게 이해하는 건 잘못된 거야'라는 식으로 지적을 다 하고 '업계에서는 이렇게 쓰기 때문에 이건 당연히 해야 되는 거고, C++은 이렇게 해야 되는 거다'라고 그 당시 업계가 비판을 많이 하던 C++ 표준에 대해서 그거를 본인이 직접 발표를 하시더라고요. 여태까지는 그거를 모르셨던 거 같진 않고 굳이 건드리고 싶지 않으셨던 것 같은데 언젠가 본인이 한 번 말을 하고 넘어가야겠다고 생각을 하신 거 같아요 제 생각에는. 그게 '커뮤니티의 자정 작용에 도움이 된다 최소한 내 말은 누군가는 잘 들으니까' 이런 생각을 하셨던 게 아닌가 추측해요.

어쨌든 간에 얘기가 또 샜지만 핵심 내용은 앞에 있으니까 다 봤다고 생각하신 분들은 진작에 끄셨을 테고. 그래서 클린코드, 디자인패턴, TDD 아니면은 C++의 특이한 스펙들 이런 것들을 함정으로 깔아 두고 그거를 얼마나 비판적으로 잘 이해하는 프로그래머인지 확인하는 경우들이 있었다. 그래서 약팔이가 되는 환경에서는 굉장히 이상한 복병들이 나온다 그렇게 말씀을 드릴게요. 포프였습니다.