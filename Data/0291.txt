예, 안녕하세요 Pope 입니다.
오늘 말할거는
노말맵 (Normal Map)
노말맵 (Normal Map) 은 왜 파란가?
노말맵을 보신 분들은 많죠?
범프 맵핑 (Bumpped Mapping) 이라고도 하고
물체가 울퉁 불퉁한거 보여주기 위해서
모델 위에 씌여지는 특별한 텍스쳐맵이 있어요.
노멀맵을 보면 언제나 파래요
그냥 우리보고 파랗구나
"(어맛!) 노말이야" 생각을 해요.
근데 왜 파랗냐?
사실은 예전에
제 쉐이더 책
베스트 셀러인, 그 쉐이더 책에 써놓은 내용이기도 해요.
그거를 "한번쯤 비디오로 다시 만들면서 책광고를 해도 나쁘지 않겠다" 생각을 해서 만드는거에요.
노말맵이 왜 파랗냐?
그럼 일단 노말 맵핑이 작동하는 방법을 알면 이해가 쉬워요.
기본적으로 노말 맵핑이 뭐냐면
저희는 3D 에서 물체를 만들잖아요
3D 물체를 만드는데
뭐랄까 울퉁 불퉁한 면이 있다고 생각해봐요. 벽돌처럼.
그러면,
벽돌을 울퉁 불퉁하게 만들고,  거기서 조명 계산을 제대로 하려면
벽돌이 하나씩 있고, 심이 있잖아요. 틈새
틈새가 들어가있는 경우가 많잖아요
그럼 그걸, 모델 하나씩 하나씩 만들어 줘야만 올바른 조명 계산이 되겠죠.
그러면,
뭐라고 그럴까,  너무나
폴리곤 수가 많아지는거야
그래서 그 대신에 그냥 사각형 하나를 그냥 만들어 두고,
여기서 그냥, 여기 픽셀이
표면이 정면을 가리키고 있는게 아니라 "약간 아래쪽을 가리켜요". 라고 표현을 하고 싶은거에요.
그거를 해주는게 노말맵이에요.
예를 들면, 노말맵이 있어요.
이게 평면이면, 모든 그.
표면의 방향? 픽셀의 방향을 앞으로, 직각으로 뽑는거죠.
그죠? 이렇게?
근데, 이게 가다가 아까 말한것 처럼
뭐랄까, 블락 (Block)  이라면,
처음에는 직선으로 가다가
홈이 들어간 곳에는 약간 아래쪽으로 내려가겠죠
이렇게 내려가다가, 다시 직선으로 가다가
다시 홈이 나와야하니까 약간 올라가겠죠?
그리고 나와서 다시 직선으로 그러면 내려가죠.
그래서 그런 정보를 그림으로 집어 넣은게 노말맵이에요.
그러면, 왜 노말 맵은 파랗까?
이거잖아요?
그거는 그냥 규약이에요.
어떤 규약이냐?
표면이 이렇게 있다고 그랬죠?
표면의 바깥쪽으로 나가는 걸 우리가 이걸 XYZ 에서 3D 좌표에서 Z로 둔거에요.
그러면 Z 로 밖으로 나가니까, 1로 하자.
100% 0% 생각하면 편해요.
0 부터 1 이면,  0 부터 100% 니까.
이게 100% 에요.
그렇죠?
그러면 뒤로가는건?
뒤로가는 건 -100% 로 하자.
그러면 -1 부터 1이 되는거에요.
말이되죠
그러면, 표면에 있는 이게 Z 라고 하면,
Y 와 X 는 그냥 표면을 따라 그리면 되요.
X 는 이쪽 방향 Y 는 위로 하고 이런 식으로
X, Y, Z 이렇게 되는거에요.
근데 생각을해봐요?
표면이 있잖아요. 이게 바깥면이야.
그러면 노말이 어디로 가겠어요?
아니, Z 가
아무리 어디로 가더라도 최대로 가봤자 이 앞이거나
그죠?
아니면 아래쪽으로 가도
이렇게 되지 뒤로 돌아가진 안잖아요
이게 표면이 이미 내가 이쪽을 바라보고 있는 표면이니까
위로 가거나 아래로 가거나 직각까지 가겠지만
절대 뒤로가진 않아요
그럼 마이너스로는 안간다는 이야기죠
잠깐 생각을 해봐요
-1 부터 1 을
Z 라고 했잖아요
그러면 이미지에서도 RGB 채널이 있어요. 레드 그린 블루
빨강 녹색, 연두죠? 연두, 파랑.
이렇게 있잖아요. 그럼 XYZ 를 RGB 에 대입을 한거에요.
그러면, Z 가 B 가 되는거에요.
근데 아까 말했죠? -1 부터 1 사이라고
그거를,
이미지는 0 부터 255 까지잖아요
그 한 채널당
0 부터 255
아니면 0 부터 100% 라고 하잖아요
-1 값이 없으니까
거기는
그러면, -1 부터 1 을 0 에서 255 에 집어넣는 거에요.
1 이면 255, -1 이면 0 으로 RGB 에 넣을 때에는
그러면, 아까 말했듯이  Z 는 죽어도 마이너스가 안돼요.
그쵸?
마이너스가 안돼면,
0 부터 1 사이란 값이죠?
그러면 -1 이 실제 블루 채널에 왔을 때 0 이였으니까
그리고, 1 이 블루 채널에 넣을 때에는 255 였으니까
0 은 128 이나 127 정도가 되는거에요
그래서, 언제나 노말맵에서는
Z 가 127 이상이여야만 되는거에요
왜냐면 바깥면을 가리키는 거니까
뭐 이거를 정말 미친듯이 뒤돌리면 조명계산이 바뀔 수 도 있겠죠
근데 우리가 흔히 보는 표면은 언제나 밖을 향하고 아무리 아래를 향해도 밑으로 90 도니까
그 Z 는 언제나 절반은 있고, 127 이니까. 그래서 언제나 노말맵은 파랗게 보이는 거에요
재밌죠
또 하나!
그러면
이거는 이제 코드 가독성 말한거랑 상관이 있는 이야기인데
실제 노말맵을 보면 대충 노말맵의 패턴이 보여요
아 이게 울퉁 불퉁한 모양이구나
그 이유가 파란색은 있더라도,
X 가 좌우 Y 가 위 아래라고 했잖아요?
그러면, 이 면이 이 쪽을 향할테니까
벽돌이 가다가 갑자기 움푹 들어간다거나
그러면 가다가
X 를 보죠
X 가 이렇게 가다가
움푹 들어가고 하니까 X 도 반대쪽으로 꺾이거든요?
그리고 다시 나올 때 이렇게 꺾이죠
그래서 그 X 값이나 Y 값이 바뀌는거에 따라도
X 는 레드에 들어가잖아요
그럼 빨간색 휴가 생겨요
빨간색이 하이라이트가 있는 부분이 있고 없는 부분이 있고
X 가 이쪽방향을 가리키고 있으면,
이게 플러스라고 가정하면
빨간색 하이라이트가 보일거고
X 가 이쪽 (왼쪽) 을 가리킨다고 그러면 이쪽이 마이너스 방향이라면 빨간색 하이라이트가 사라질거에요.
그래서 실제로 좌우 평면에
빨간색이
없으므로 인해서 어두워 보이고 빨간색이 있으므로 인해서 하이라이트가 보여요
빨간색이 강해져요 그것을 보는 것 만으로, 아!
빛이 이쪽에서 들어오고 있겠구나라는 착각을 주게되요
왜냐하면 우리가 3D 로 버튼을 만들때도 밑에 쉐도우 넣고 위에 하이라이트 넣잖아요
그런 개념으로 하이라이트가 있는 부분에서 "이쪽에서 빛이 들어오는 거구나" 라고 생각을 많이해요
X 는 재미있는데 Y 는 되게 재미있어지는게 뭐냐면 (?)
가끔 노말맵 보면
벽돌이여서 벽돌 부분이 튀어나와야 하는데
노말맵에서 이렇게 들어가게 보이는 경우 본적 있을 거에요
보면서 "이건 왜 튀어나와있지 않고 들어와 있지?"
근데 실제 랜더링을 하면, 튀어나오게 잘 보여 조명이
그게, 원래 들어가 보이는게 수학적으로, 수학적이라기 보다는
일반적인 컨벤션 (관습이지만 전통으로 이해하세요) 으로는 맞는건데,
이거는 저희가 아티스트를 위해서 뒤집어서 위에 하이라이트까지 그려지게 하는 경우가 있어요
그게 무슨 경우냐면
아까 벽돌이 있다고 그랬잖아요
벽돌이 가다가, 아래서부터 올라오다가 튀어나오고 이렇게 들어간다고 생각해봐요
그러면 튀어나오고 들어가는 부분이 있죠
그러면 여기서 볼때, Y 값이
과연 하이라이트가 그려져야하냐? 안그려져야 하냐? 이 얘기가 있어요 사실
근데, 실제 저희가 계산하는 과정에서는 보통
이렇게 가면, Z 에서 가니까
Y 가 이렇게 있었잖아요
엄지를 Y 라고 하고 Z 를 검지라고 해보죠
그러면 가다가
넘어가잖아요
그 순간에 Y 가
사실은 작아져야하냐?
뭐, 그래요
내가 잘못생각하고 있나(?)
그러니까 이게, 좌표를
XYZ 를 봤을 때 Y 가 위로 올라가냐? 양이
Y 가 아래로 내려 가는거에 따라 하이라이트가 뒤바뀌어요. 왜냐하면,
이제
뭐라고 그러지,
Y 가 위로가는거랑 Y 가 아래로 향하는거랑 정 반대잖아요?
그래서 실제는 저희가 보통 계산하는 노말맵 계산에서 흔히 쓰는 방법은
이렇게 위가 튀어나왔을 때
이 Y 부분이 하이라이트가 적어져요. 양으로 가요.
그래서 Y 부분이, 아니 음으로 가요!
그래서 Y 가 음으로 가면은,
아까 말했듯이, 원래는 그린(Green) 하이라이트가 있어야 할 부분에 그린이 없어지면서 어두워지거든요. 위가?
그리고 반대로 아래를 향하는 부분에 가면, Y 가 커지면서 거기에 하이라이트가 생겨요
그래서 보면은,
그 하이라이트가 아래에 있다고 해서 솔직히 헷갈려야할 문제는 없는데,
사람의 눈이라는게 언제나 모든
모든 물건을 볼 때 하이라이트가 위에서 들어오는걸 되게 익숙해 하거든요?
해가 위에 있으니까?
그래서 벽돌을 보든 버튼을 보든 언제나 하이라이트를 위에 그리는게 그 이유에요
'왼쪽에서부터', '오른쪽에서부터' 는 신경을 안써요
위 아래만은
사람의 눈이 하도 하이라이트가 위에 있는거만 봐와서
익숙해져서
하이라이트가 아래에 있으면
그게
빛이 아래서 들어오면 말이 돼요
그것도 볼록 튀어나온거야
근데 그거를 인식을 못하고 들어갔다고 생각을 하게되요
그래서 아티스트가 헷갈려하고 그래서 보통
저희가 했던 그런 랜더링 엔진에서는
일부러 텍스쳐는 뒤집어 놓고
쉐이더에서 다시 Y 를 -1 으로 곱해서 제대로 돌려서 계산을 하는 경우가 꽤 많죠
그냥 뭐 노말맵은 왜 파란가? 얘기하다가 가독성하고 관련이 있다고 한 얘기는 뭐냐면
사람들이 다들 익숙해하는 방향으로
뭔가 표준을 만들어야 작업을 하는 프로세스가 편해지거든요?
이거갖고 가끔 랜더링 프로그래머 중에 "이게 옳은 방법이니까 너네 아티스트가 그냥 들어가보여도 그렇게 써!"
라고 했는데,
제가 일했던 회사에서는 언제나 뒤집어 줬어요.
왜냐면 그게 작업 프로세스가 훨씬 좋고
그리고 실제 저희 쉐이더에서 드는 비용은
곱하기에서 플러스하는...
곱하기 하는게 전부죠. 멀티플라이 (Muliply) 하나 정도니까 솔직히 그렇게 큰 차이는 없어요.
성능에서
언제나 이런 그래픽쪽 얘기를 하다 보면
어떻게 끝낼지가 헷갈려지는데,
(결심)
정리부터 하죠
노말맵이 파란 이유는 "언제나 Z 컴포넌트가 블루 채널이고 언제나 0 이상이여서!"
컬러 채널에서 0.5 이상이여서
그리고 레드 하이라이트가 어느쪽에 생기는지에 따라 노말 X 방향이 어딘지도 알고
그린 하이라이트가 어느 방향으로 생기는지에 따라 노말의 Y 방향도 알 수 있는데
일반적으로는
일반적인지는 모르겠지만,
아티스트를 위해서는
Y 컴포넌트 하이라이트를 뒤집어서, '아티스트가 보기 쉽게 해준다'
정도 까지 이야기 하면 될거 같아요
와- Pope 였습니다.
