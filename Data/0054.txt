예 안녕하세요 포프입니다
오늘 비디오는 이미 현업에 계신 분들?
현업에 계신 프로그래머들분보다는
새롭게 프로그래밍 시작하시는 분들이나
아니면은 학생들을 위한 비디오가 될 것 같아요
뭔 얘기를 할려고 그러냐면
뭐 주제는 간단해요
그..
소스 컨트롤 시스템
(Source Control System)이라고도 하고
아니면 뭐 리비전 컨트롤 시스템
(Revision Control System)이라고도 하고
요즘 이제 버전 컨트롤 시스템
(Version Control System)이라고 많이 하는 것 같은데
버전 컨트롤 시스템을 반드시 쓰라는
말씀을 드리고 싶어요
저도 이제 학교 다닐 때 상당히 안 썼던 것 중의 하나인데
아 뭐, 필요해? 이런 개념인데
개인 프로그래밍을 할 때도 상당히 버전 컨트롤 시스템이
유용하다는 생각을 저는 많이 하거든요
그래서 일단 버전 컨트롤 시스템이 뭐냐
그 프로그래밍 하시는 분들은 그런 거 있을 거에요
프로그래밍뿐만이 아니라
아트 하시는 분들이나 글 쓰시는 분도 똑같은데
예를 들어서 제가 코드를 짜요
코드를 텍스트 파일에 짜죠
짜다가
오늘 이렇게 이렇게 짜다가 저장을 해 놨어요
그리고 내일 딱 봤는데 어 이 코드는 좀 이상해
코드를 또 고치고 막 이렇게 해 갖고 또 저장을 해 놨어요
근데 사흘 뒤에 생각을 딱 해 보니까
어 내가 처음에 한 방법이 맞아
어 그럼 어쩌지 이미 다 지웠는데
돌아갈 건가?
돌아가야죠
근데 어떻게 돌아갈 거에요? 방법이 없잖아요
그럼 또 다시 또 처음부터 짜는 거에요
그렇게 여러 번 갈팡질팡하는 경우도 있고
그리고 또
어떤 경우에는
코드를 다 짜놨어요 근데 하드가 날아갔어 다음날
그럼 어떻게 해요 처음부터 또 짜야지
그런 문제도 있죠
그래서
뭐 이건 아트 하시는 분들도 똑같은 얘기고
글 쓰는 분들도 똑같은 얘기죠
그래서 그런 분들 하시는 거 옛날에 보면은
매일매일 이 파일을 저장해서 압축해 갖고
무슨 뭐 1, 2, 3, 4 이렇게 막 이름을 매겨 놓는다거나
날짜를 매겨 둔다거나
저 아는 아티스트 옛날에 하던 친구는 아트를 매번 저장할
때마다 1, 2, 3, 4 이렇게 저장하는 사람도 있었어요
그래서..
그건 문제는 뭐냐
파일 수가 너무 많아지고
뭐 많아지는 건 문제가 아닌데
상당히 좀 manual process잖아요
손으로 일일이 해야 되는 프로세스
그걸 자동적으로 해 줄 수 있는 게
뭐 자동적이지는 않지만 좀 더 편하게 해 줄 수 있는 게
버전 컨트롤 시스템이라고 보시면 돼요
개념이 뭐냐면
일반적으로 버전 컨트롤 시스템은
제가 쓰는 컴퓨터가 있고요 그게 보통 클라이언트라고
하죠 그리고 버전 컨트롤 서버가 따로 있어요
그 서버가 같은 컴퓨터에 돌고 있을 수도 있고
그 같은 컴퓨터의 같은 하드 드라이브에서 돌 수도 있고
다른 하드 드라이브에서 돌 수도 있고
안정성을 위해서는 다른 하드 드라이브가 낫죠
아니면 말 그대로 내 컴퓨터가 아닌
다른 컴퓨터에서 서버를 돌릴 수도 있고
개념은 매우 간단해요
어떤 개념이냐면
뭐 버전 컨트롤 시스템마다 약간씩 다르긴 한데
일단 파일 하나만 가지고 얘기를 해 볼게요
예전에 제가..
예를 들면 제가 짜고 있는 파일이 있어요 main.cpp라고
그럼 그걸 짜다가
오늘 그걸 집어넣어요 그러면 버전 컨트롤 시스템에 그냥
그거를 저장해 두는 거에요 버전1으로
그리고 다음날 제가 뭐 짜다가 또 저장을 하면은
이 버전을 거기다 또 버전2로 저장을 하는 거에요
나중에 제가 원하는 버전이 있을 때
언제나 돌아갈 수 있고
그뿐만이 아니라 제가 심지어는 버전1에서 버전2가
뭐가 바뀌었는지도 볼 수가 있는 거에요
물론 코드 쪽에 한해서 텍스트 쪽에 한해서 보기가 쉽죠
그래픽 쪽은 약간 복잡해져요
Max 같은 경우에는 쉽게 볼 수 있는 방법은 없고
이미지 같은 거야 이미지 diff가 가능하니까
그것도 볼 수는 있어요
근데 버전 컨트롤 시스템에서 diff 기능은 가장 편한 게
이제 텍스트 기반이 가장 편하죠
그래서 그것도 볼 수가 있기 때문에
또 여러 명이 공동 작업을 할 때는
그거를 코드 리뷰도 가능한 거에요 그거를 통해서
그런 장점도 있고
또 여러 명이 같이 작업할 때 그런 것도 있잖아요
텍스트 파일 기반이라면
main.cpp가 있는데 저는 이 윗부분을 고치고 있고
다른 사람은 아랫부분을 고치고 있어요
그리고
근데 이걸 두 개를 어떻게 merging할 거야
두 개를 합쳐야 될 거 아니에요 따로따로 고친 거를
그러면 서로 얘기해서 고치기가 그렇잖아요
근데 이제 버전 컨트롤 시스템 같은 경우는
그런 merge 기능도 갖추고 있는 경우가 있어서
버전 컨트롤 시스템 자체의 기능도 있지만
에디터의 기능일 수도 있죠
그래서 그런 경우도 처리를 해 준다는 거죠
어느 정도까지는
물론 정말 해결 안 되는 경우는
손으로 일일이 풀어 주기는 해야 돼요
그렇기 때문에 버전 컨트롤 시스템은
반드시 쓰라고 권해 드리고 싶어요
최소한 내 백업용이라는 목적으로
아니면은 최소한 한 두 명 세 명이 같이 일을 하더라도
공동 작업을 좀 더 편하게 하기 위해서
그런 부분에서 정말 좋다고 생각을 해요
그래서 아직까지 안 쓰셨던 분들은
버전 컨트롤 시스템을 사용해 보시라고 권하고 싶고요
사실은 제가 그러면
버전 컨트롤 시스템을 쓰라고 말씀드렸으니까
그럼 어떤 버전 컨트롤 시스템을 쓸 거냐
라는 걸 말씀을 드려야 돼요
물론..
제가 여러 가지를 비교 분석해서 뭐 이게 좋습니다
저게 좋습니다 이렇게 말씀드릴 수도 있는데
너무 많아요! 그럼 비디오에서 할 얘기도 많고
한 30분 넘어갈 것 같고
그래서 제가..
일단 찾아 보세요
찾아 보시라고 권해드리고 싶어요 본인이 찾아 보고
뭐는 어떻다라고 알아야 뭘 집어넣잖아요
일단..
개인적으로 쓸 거니까
개인적으로 쓰면은
제가 원하는 버전 컨트롤 시스템은 그거에요
물론 제 서버에 제가 버전 컨트롤 시스템을 깔아서
거기다 집어넣을 수도 있지만
저는 그것보다는..
그런 귀찮은 거 하기 싫거든요?
그냥 인터넷에서 공짜로 제공하는
호스팅 서비스가 있으면 좋겠다..
있죠
그런 걸 쓰고 싶기 때문에
그거 위주로 보시는 게 좋을 것 같아요
그래서 그냥..
호스팅 서비스는 당연히
버전 컨트롤 시스템 중에 여러 가지가 있으니까
그 중의 하나나 두 개 정도를 지원하죠
각 호스팅 서비스에서
그래서 일단
버전 컨트롤 시스템으로 유명한 것들 한번 리서치해 보고
생각해 보실 것들을 몇 개 알려 드릴게요
첫 번째는, 서브버전(Subversion)이에요
SVN이라고도 해요
그것도 한번 살펴 보시고 이건 중앙처리방식
그리고 퍼포스(Perforce)라는 게 사실은
게임계에서 엄청 많이 써요 한국 쪽 말고 이쪽에서
근데 그거는 되게 비싸요
개인이 쓰면 물론 공짜이긴 한데
근데 얘네는 호스팅 서비스가
없어요 아직 제가 알기로는
뭐 아니
있는데 돈을 받을 수도 있고
근데 서브버전(Subversion) 같은 경우는 공짜로 호스팅
해 주는 데가 있거든요 그래서 쓸 만은 하고
퍼포스(Perforce)도 한번 살펴는 보시고
그리고 이제
서브버전(Subversion)하고 퍼포스(Perforce)가
가장 큰 거였죠 한동안
근데 그 뒤에 이제
분산 버전 컨트롤 시스템이라고 해서
서버를..
그니까 개념이 이거에요
서버가 있는데 내 컴퓨터에서 자동으로 서버가 돌아요
그래서 굳이 인터넷 커넥션이 없어도
제 쪽에서 막 체크인..
그니까 코드 집어넣고 빼고 마음대로 하다가
어느 순간 그래 내 서버하고, 숨어있는 서버
그거하고 실제 서버하고 둘이 동기화시켜라
그럼 둘이 알아서 해결해 갖고
서로 똑같은 히스토리를 가지게
그런 식으로 하는 게 분산 버전 컨트롤 시스템인데
깃이라는 게 있고요 git
머큐리얼(Mercurial)이라는 게 있어요
두 가지가 가장 요즘 유명해요
저는 윈도우즈(Windows)에서 주로 개발을 하기 때문에
저 개인적인 취향은 깃(git)보다는
머큐리얼(Mercurial) 좋아하거든요?
그래서
어쨌든 요 네 가지를 한번 살펴보시고
어떤 게 좋은지를 보시는 게 좋을 것 같아요
저는 앞으로 버전 컨트롤 얘기를 좀 더 하면은
주로 머큐리얼(Mercurial) 쪽으로 얘기를 할 것 같아요
왜냐하면 제가 지금 쓰고 있고 가장 많이 쓰고
저는 회사에서는 퍼포스(Perforce)를 주로 썼죠 계속
아마도 계속 쓸 것 같고
하지만 개인적으로 코딩할 때는
저는 머큐리얼(Mercurial)을 가장 좋아하기 때문에
머큐리얼(Mercurial)을
나중에 얘기를 좀 더 할게요
그래서 요 네 가지 버전 컨트롤 시스템을
한번 살펴보시고
호스팅 서비스가 필요하시면은
퍼포스(Perforce)는 없다고 말씀드렸고요
서브브전(Subversion)은 옛날에 몇 개 봤어요
근데 제가 기억이 잘 안 나요
subversion free hosting이라고 찾아보세요
중요한 거는 free hosting인데도
공개적으로 보여지는 코드 저장소가 있고
아니면은 제가 private으로
비밀로 해 갖고 숨겨 놓을 수 있는 게 있죠
비밀로 해서 제공하는 데를 찾으셔야 개인 프로젝트할 땐
좋으실 거에요 남들이 다 보는 건 별로니까
그래서 찾아보시고
깃(git)하고 머큐리얼(Mercurial)은
이미 호스팅 서비스가 꽤 있죠
깃허브(GitHub)라고 해서
공짜인 거는
그런 개인 코드 저장소는 안 되지만
public으로 해서 사람들이 오픈소스 프로젝트를
많이 하는 데가 깃허브(GitHub)에요
깃(git)은 거기가 있고
그 다음에 이제
머큐리얼(Mercurial)하고 깃(git)을 둘 다 지원하는 거는
빗버켓이라고 있어요 Bitbucket
여기는 재밌는 게
공짜에요
그리고 팀원 여섯 명인가 다섯 명까지도 공짜에요
private repo, 그니까 private이라면 개인 거거든요?
남들이 못 보는 거?
그것도 공짜에요
용량도 제한이 일단 없다고 하는데
어느 정도 되면은 태클을 건다고는 알고 있어요
한 1기가 정도였나? repo당?
뭐 그래서
정말 혼자 private으로 숨어 갖고 뭐 만들 거면
빗버켓(Bitbucket) 괜찮아요
이거는 머큐리얼(Mercurial)하고
깃(git)하고 둘 다 지원하고요
근데 정말 제가 요즘
제가 쓰고 제가 좋아하는 거는
킬른이라고 있어요 Kiln이라고
그 Trello 아시죠 Trello
Trello 만든 회사에서 만든 건데
예전에는 머큐리얼(Mercurial)만 지원을 했는데
요즘은 깃(git)도 지원을 한대요
내부적으로는 머큐리얼(Mercurial) 같아요
그래서 여기는 재밌는 게 뭐냐면
뭐 나중에 좀 더 자세히 말씀드릴 건데
일단 binary file 처리도 좀 더 잘하고요 여기는
그리고
용량 무제한이고
그리고 개인 repo도 돼요
근데
단 두 명까지만
그니까 개인적으로 쓸 거면은
거기서 만드는 게 저는 제일 나은 것 같아요
뭐 여러 가지 extension도 잘 만들어 와 갖고
머큐리얼(Mercurial)이 들어가는 extension
거기서 좀 더 편한 것도 있고
그래서
호스팅 서비스는
서브버전(Subversion) 호스팅을 찾아보시거나
아니면은 깃허브(GitHub)나 빗버켓(Bitbucket)
아니면 킬른(Kiln)
근데 제가 생각할 때는
혼자 쓸 때는 킬른(Kiln)이 제일 좋고요
뭐 대여섯 명까지 할 때는
빗버켓(Bitbucket)도 나쁘지 않아요
깃허브(GitHub)는 public으로 열 때만
좀 괜찮은 것 같아요 공짜로 쓰실려면
다들 공짜 좋아하시니까
그래서
둘러보세요
어떤지
한 번쯤 둘러보시고
오늘 하고 싶은 얘기는 그냥
코드 처음 하시는 분들이면은 반드시 그렇게
리비전 컨트롤(Revision Control) 만들어서
소스 컨트롤 서버(Source Control Server)를 돌리면서
아니면 호스팅을 하면서
그거로 해 갖고 이제 코드 히스토리를 보관해 두라는
말씀을 드리고 싶었어요
또
아 맞다
그리고
아 몰라!
그러면 이 정도로 하고요
소스 컨트롤 시스템?
버전 컨트롤 시스템에 대해서는
나중에 이제 제가 머큐리얼(Mercurial) 쪽으로 얘기를
조금 하면서 몇 가지 더 말씀을 드릴게요
언젠가는 뭐 시간 되면
버전 컨트롤 시스템의 기본적인 개념
오퍼레이션이 있는데 그 안에 뭐 할 수 있는 것들
그런 개념도 좀 설명을 드릴 수 있으면 드리고
근데 제 생각에는 안 드리기가 쉬울 것 같아요
제가 워낙 비디오를 생각나는 것만
빨리빨리 전달하고 말자라는 주의라서
오늘은 그럼 그 정도로 줄이고
아직도 버전 컨트롤 시스템 안 쓰고 계신
프로그래머 지망생들 있으면 반드시 쓰시도록 해요
예 포프였습니다
