안녕하세요. 포프입니다. 오늘 비디오는 이미 현업에 계신 프로그래머들분보다 새롭게 프로그래밍 시작하시는 분, 그리고 학생들을 위한 비디오가 될 것 같아요. 무슨 얘기를 하려고 그러냐면, 주제는 간단해요. Source Control System이라고도 하고, 아니면 Revision Control System이라고도 하고, 요즘은 Version Control System이라고 많이 하는 것 같은데요. 버전 컨트롤 시스템을 반드시 쓰라는 말씀을 드리고 싶어요. 저도 이제 학교 다닐 때 상당히 안 썼던 것 중의 하나였고, '굳이 이게 필요해?'이런 개념인데, 저는 개인 프로그래밍을 할 때도 상당히 버전 컨트롤 시스템이 유용하다는 생각을 많이 하거든요.

일단 버전 컨트롤 시스템이 뭐냐? 프로그래밍하시는 분들은 그런 거 있을 거예요. 예를 들어서 제가 코드를 텍스트 파일에 짰다고 하죠. 오늘은 이렇게 이렇게 짜다가 저장을 해 놨어요. 그리고 다음 날 봤는데 '이 코드는 좀 이상해.' 하면서 코드를 또 고치고 해서 또 저장을 해 놨어요. 근데 사흘 뒤에 코드를 보면서 생각해보니까, '어 내가 처음에 한 방법이 맞네? 그럼 어쩌지 이미 다 지웠는데? 돌아갈 건가?' 돌아가야죠. 근데 어떻게 돌아갈 거예요? 방법이 없잖아요. 그럼 다시 처음부터 코드를 짜는 거예요. 그렇게 여러 번 갈팡질팡하는 경우도 있고요. 어떤 경우에는 코드를 다 짜 놨어요. 근데 하드 디스크가 날아간 거죠. 그럼 어떻게 해요? 처음부터 또 짜야죠. 그런 문제들이 있죠. 이건 프로그래머뿐만이 아니라 Artist나 Writer분들도 해당되는 얘기죠. 옛날에 보면 매일매일 이 파일을 저장해서 압축한 뒤 파일 명 끝에 1, 2, 3, 4... 이렇게 번호를 매기고, 날짜를 매기곤 했죠. 실제로 제가 아는, Art를 옛날에 하던 친구는 아트 파일을 저장할 때마다 1, 2, 3, 4 이렇게 저장하는 사람이 있었어요. 그 문제는 뭐냐? 파일 수가 너무 많아지고, (많아지는 건 문제가 아닌데) 상당히 좀 Manual Process(수작업 프로세스)잖아요. 그걸 자동적으로 해 줄 수 있는 게 ( 자동적이지는 않지만 좀 더 편하게 해 줄 수 있는 게) 버전 컨트롤 시스템이라고 보시면 돼요.

개념이 뭐냐면, 일반적으로 버전 컨트롤 시스템은요. 제가 쓰는 컴퓨터가 있는데 이걸 클라이언트라고 하죠. 그리고 버전 컨트롤 서버가 따로 있어요. 그 서버가 같은 컴퓨터에 돌고 있을 수도 있고, 그 같은 컴퓨터의 같은 하드 드라이브에서 돌 수도 있고요. 그리고 다른 하드 드라이브에서 돌 수도 있는데, 안정성을 위해서는 다른 하드 드라이브가 낫죠. 아니면 내 컴퓨터가 아닌 다른 컴퓨터에서 서버를 돌릴 수도 있고요. 개념은 매우 간단해요. 버전 컨트롤 시스템마다 약간씩 다르긴 한데, 일단 파일 하나를 예시로 얘기를 해 볼게요. 제가 짜고 있는 `main.cpp` 파일이 있어요. 그 코드를 짜다가 오늘 그걸 버전 컨트롤 시스템에 버전 1로 저장해놓아요. 다음 날, 제가 코드를 짜다가 또 저장을 하면 이 버전 1을 버전 2로 저장하는 거죠. 이러면 나중에 제가 원하는 버전으로 언제나 돌아갈 수 있고, 그뿐만이 아니라 제가 심지어는 버전 1에서 버전 2가 뭐가 바뀌었는지도(diff) 볼 수가 있는 거예요. 물론 프로그래밍 코드나 텍스트 쪽에 한해서 보기가 쉽죠. 그래픽 쪽은 약간 복잡해져요. 3D Max 같은 경우에는 쉽게 볼 수 있는 방법은 없고요. 2D 이미지의 경우는 diff가 가능하니까 그것도 볼 수는 있어요. 그렇지만 버전 컨트롤 시스템에서 diff 기능이 가장 편한 건 아무래도 텍스트 기반이죠. 그래서 여러 명이 공동 작업을 할 때는 텍스트에 대해 코드 리뷰도 가능해요. 그런 장점도 있고요. 여러 명이 같이 작업할 때 그런 것도 있잖아요? 텍스트 파일 기반이라면 `main.cpp`가 있는데 저는 이 파일의 윗부분을 고치고 있고, 다른 사람은 아랫부분을 고치고 있어요. 한 파일 안에서 따로따로 수정한 두 파트를 나중에 합쳐야(merge) 하잖아요? 그러면 서로 얘기해서 고치기가 불편하고 그렇잖아요. 버전 컨트롤 시스템은 Merge 기능을 가지고 있어요. 버전 컨트롤 시스템 자체의 기능이겠지만, 에디터의 기능일 수도 있죠. 어느 정도까지는 Merge가 되지만, Conflict 때문에 Merge가 안 되는 경우도 있는데 이 때는 손으로 일일이 풀어 줘야 하는 단점이 있죠. 그래도 이런 편리한 기능들이 있으니 버전 컨트롤 시스템은 반드시 쓰라고 권해 드리고 싶어요. 최소한 내 백업용이라는 목적으로, 아니면 최소한 2~3명이 같이 공동 작업을 좀 더 편하게 하기 위해서 버전 컨트롤 시스템이 정말 좋다고 생각해요. 아직까지 안 쓰셨던 분들은 버전 컨트롤 시스템을 사용해 보시라고 권하고 싶고요.
 
사실은 제가 그러면 버전 컨트롤 시스템을 쓰라고 말씀드렸으니까, 그럼 어떤 버전 컨트롤 시스템을 쓸 거냐는 걸 말씀을 드려야 해요. 물론 제가 여러 가지를 비교 분석해서 이게 좋고 저게 좋다고 이렇게 말씀드릴 수도 있는데, 너무 많아요! 그럼 비디오에서 할 얘기도 많고 길이도 30분이 넘어갈 것 같아요. 일단 스스로 찾아보세요. 찾아보시라고 권해드리고 싶어요. 본인이 찾아보고 뭐는 어떻다고 알아야 파일을 집어넣잖아요. 일단 개인 목적으로 쓸 거라면, 제가 원하는 버전 컨트롤 시스템은 이거예요. 제가 만든 서버에 제가 버전 컨트롤 시스템을 설치해서 파일을 집어넣을 수도 있지만, 저는 그런 귀찮은 거 하기 싫거든요? 차라리 인터넷에서 공짜로 제공하는 호스팅 서비스가 있는 걸 좋아하죠. 그런 걸 쓰고 싶기 때문에, 그거 위주로 보시는 게 좋을 것 같아요. 호스팅 서비스는 버전 컨트롤 시스템 중에 여러 가지 있으니까, 각 호스팅 서비스에서 그중에 1~2개 정도는 지원하죠. 일단 버전 컨트롤 시스템으로 유명한 것들 한번 리서치해 보시고요. 생각해 보실 것들을 몇 개 알려 드릴게요.

1. Subversion이에요. SVN이라고도 해요. 중앙 처리방식인데 한번 살펴보시고요. 그리고 Perforce라는 게 사실은 게임업계에서 엄청 많이 써요. 한국 쪽 말고 미국 쪽에서요. 근데 이건 되게 비싸요. 개인이 쓰면 물론 공짜이긴 해요. 근데 제가 알기로는 퍼포스는 아직 호스팅 서비스가 없어요. 사실 있는데 돈을 받을 수도 있고요. 근데 Subversion의 경우는 공짜로 호스팅 해 주는 데가 있거든요? 그래서 쓸 만하니, Perforce도 한번 살펴는 보시고요. 한동안은 Subversion와 Perforce가 가장 큰 거였죠.

2. 나중에는 Distributed Version Control System(분산 버전 컨트롤 시스템)이라고 해서, 자기 컴퓨터에서 자동으로 서버가 돌아요. 그래서 굳이 인터넷 커넥션이 없어도 제 쪽에서 Check-in 하고 코드 집어넣고 빼고 마음대로 하다가, 어느 순간 내 서버 하고, 숨어있는 실제 서버하고 둘이 동기화시킬 수 있어요. 그럼 둘이 알아서 동기화한 뒤 서로 똑같은 히스토리를 가지게 하는 게 분산 버전 컨트롤 시스템인데요. 대표적으로 Git과 Mercurial이라는 게 있어요. 두 개가 가장 요즘 유명해요. 저는 Windows에서 주로 개발을 하기 때문에, 저 개인적인 취향은 Git보다는 Mercurial 좋아하거든요? 그래서 어쨌든 이 네 가지를 한번 살펴보시고, 어떤 게 좋은지 보시는 게 좋을 것 같아요.

저는 앞으로 버전 컨트롤 얘기를 좀 더 하면, 주로 Mercurial 쪽으로 얘기를 할 것 같아요. 왜냐하면 제가 지금도 가장 많이 쓰고 있어요. 회사에서는 계속 Perforce를 주로 썼죠. 앞으로도 계속 쓸 것 같고요. 하지만 저는 개인적으로 코딩할 때 Mercurial을 가장 좋아하기 때문에, Mercurial을 나중에 얘기를 좀 더 할게요. 4가지 버전 컨트롤 시스템을 한번 살펴보시고, 호스팅 서비스도 있는지 찾아보시고요. Perforce는 없다고 앞에서 말씀드렸어요. Subversion은 옛날에 몇 개 봤는데 기억이 잘 안 나요. 'subversion free hosting'이라고 검색해보세요.

중요한 건 free hosting인데도 공개적으로 보이는 코드 저장소가 있고 아니면은 제가 private으로 비밀로 해 갖고 숨겨 놓을 수 있는 게 있죠. 비밀로 해서 제공하는 데를 찾으셔야 개인 프로젝트할 땐 좋으실 거예요. 남들이 다 보는 건 별로니까요. Git 하고 Mercurial은 이미 호스팅 서비스가 꽤 있죠. 대표적으로 GitHub라고 있어요. 공짜인 거는 그런 개인 코드 저장소는 안 되지만, public으로 해서 사람들이 오픈소스 프로젝트를 많이 하는 데가 GitHub에요. (시간이 지나 Microsoft가 GitHub를 인수 한 뒤 private repo를 무료로 만들 수 있습니다.) 다음으로 Mercurial과 Git을 둘 다 지원하는 서비스인 Bitbucket이라고 있어요. 여기는 재밌는 게 공짜예요. private repo에서 팀원 여섯 명인가 다섯 명까지도 공짜예요. private은 나, 팀원 이외에는 남들이 못 보거든요? 용량도 제한이 없다고는 하는데, 어느 정도 되면 태클을 건다고는 알고 있어요. Repository당 1GB 정도였을까요? 혼자 숨어서 private으로 만들 거면 Bitbucket 괜찮아요. 다시 말씀드리지만, Mercurial와 Git을 둘 다 지원하고요. 그리고 제가 좋아하는 거는 Kiln이라고 있어요. Trello 만든 회사에서 만든 건데요. 예전에는 Kiln이 Mercurial만 지원했는데, 요즘은 Git도 지원한대요. 내부적으로는 Mercurial 같아요. 여기는 재밌는 게 뭐냐면 (나중에 좀 더 자세히 말씀드릴 건데) Binary 파일 처리도 좀 더 잘하고요. 또 용량이 무제한이고 개인 repo도 팀원이 2명까지 돼요. 개인적으로 쓸 거면 Kiln에서 만드는 게 저는 제일 나은 것 같아요. Mercurial의 여러 가지 Extension도 잘 만들어서 쓰기 더 편한 것도 있고요. 정리하면 호스팅 서비스는 Subversion 호스팅, GitHub, Bitbucket, Kiln 찾아보세요. 제가 생각할 때 혼자 쓸 때는 Kiln이 제일 좋고요. 대여섯 명까지 할 때는 Bitbucket도 나쁘지 않아요. 다들 공짜 좋아하시니까 한 번씩은 잘 둘러보세요.

오늘 하고 싶은 얘기는 그냥 코드 처음 하시는 분들이면은 반드시 그렇게 리비전 컨트롤(Revision Control) 만들어서 소스 컨트롤 서버(Source Control Server)를 돌리거나, 호스팅을 사용해서 코드 히스토리를 보관해 두라는 말씀을 드리고 싶었어요. 버전 컨트롤 시스템에 대해서는 제가 Mercurial 쪽으로 얘기를 조금 하면서 몇 가지 더 말씀드릴게요. 언젠가는 시간 되면 버전 컨트롤 시스템의 기본적인 개념 오퍼레이션이 있는데 그 안에서 할 수 있는 것들, 그런 개념도 좀 설명을 드릴 수 있으면 드릴 거고요. 근데 제 생각에는 설명 안 드리기가 쉬울 것 같아요. 제가 워낙 비디오를 생각나는 것만 빨리빨리 전달하고 말자라는 주의라서요. 오늘은 이 정도로 줄이고요. 아직도 버전 컨트롤 시스템 안 쓰고 계신 프로그래머 지망생들 있으면 반드시 쓰시도록 하세요. 포프였습니다.
