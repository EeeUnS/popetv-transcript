어떤 bd 언제 모르겠는데 전에 어떤 비디오 만들다가 제가 그런 얘기
했어요
그 언어가 된거 가
언어 디자인을 잘 했냐 안했냐 할까 뭐 언어라고 굉장히 많은 영어가
아니라 그 프로그램의 언어 디자인을 잘 했냐 디자인이 어떠냐 설계를 잘
했냐 만 않냐 라는 걸 판단할 때는 디폴트 baby 굉장히 중요하다 고
말씀해 주셨어요
그 디폴트 b 에 비해 라고 하면은 뭐라고 기본동작 기본 작동 문법 예를
들어서 뭐 어떤 코드를 가스 내부적으로 어떤 게 기본이고 그거를 그 기본
디폴트 그 비애를 바꾸려면 새로운 함수를 호출해 되고 이런 것들이
있잖아요 그거를 말 말하는 건데 일단 제가 생각하는 훌륭한 아머 디자인
의 기본적인 거는 프로그램의 코드를 짜 쓸 때 그 코드가 실제 어떻게
컴퓨터에서 도움 거야 라는 걸 대충 판단이 가능한 생각을 하거든요
뭐 그래서 저같이 이제 좀 오래 프로그램이 한 사람들 예전부터 하드웨어
쪽에서 가깝게 프로그램 하는 사람들은
씨를 좋아하는 이유가 그것 은 사실 c 4 c 플러스 그래서 굉장히
좋아하는 이유가 코드를 딱 봤을때 이 코드가 어떻게 어셈블리로 갈 지를
알고 어셈블리 라는게 기계어 인스트럭션 이잖아요 그래서 각 그 기계마다
지원하는 그 가장 낮은 수준의 명령어 거든요
뭐 그래서 그거를 보면서 대충 판단이 되는 거죠 아 이런 하드웨어 에서는
이게 어느 정도 빨리 될 꺼고
어떤 문제가 있을 거고 기타 등 더 이제 그 다음에 나온 언어들 보면 뭐
여러 가지 언어가 있지만 여전히 그런게 깔끔하게 보이기 디자인 아오 가
있고 그런거 완벽 임웅 끌어들여서 초 개 됐죠 어떤 식으로 작동 할지
모르게 하는 그런 어딨어
부채가 그 스크립터 늘 쓰긴 쓰는데 스크립트 언어가 굉장히 맘에 안드는
것 중에 하나는 반지 스프리트 언어라서 그런건 아니죠 사실은 그 총리
정해져 있지 않은 거 있잖아요 타입 타입이 언제나 바꿀 수 있는 그런 *
걸 별로 안 좋아요
그래서 시작 같은 경우엔 해봐 나시 플러스 플러스 에는 이제 오토 같은게
나오면서
그런것에 타입을 출연은 가능하지만 바꿀 수는 없게 하는 것으 추 롱타입
들어가 있는 타입은 아니라 정해야 되는
좀 그게 굉장히 뭐 좋아하는 이유도 그 중 하나였다 봤을 때 어떤 식으로
메모리에서 이게 어떻게 들어가 코딩 어떻게도 건지를 판단이 가능하고
타입이 바뀔 때 과연 내가 뒤에서 뭐라 할지 저는 그거 한데 감이 안
오니까
그럼 워크웨어 옵티마이저 전 이런 얘기도 있구요 네 원래 말하고 려고
했던 그 본론으로 돌아가서 그때 그 얘기 할 때 어제 제가 뭐 스위프트
얘기도 잠깐 했고 많이 얘기했는데
떡은 사람이 댓글로 스위프트 좀 까다가 그랬거든요
그래서 오늘 처리 얘길 하는 김에 그거를 하려고 해요
아 제가 볼땐 스위프트 c 샵 그리고 따른 언어까지 얘기를 할 것 같은데
일단 기본 비해 비어 가 디폴트 베이 뷰 에 대해서 좀 더 생각을 해
볼게 모든 말에 씨 나 c 플러스 펄스 보면은
뭐 뭐 상당히 버그가 많았다고 하긴 어려운데 그
알아야 되는 규칙이 굉장히 많았어요 어떻게 보면 예를 들어서 뭐 한국말로
승격 이라고 하나 그 만약에
숫자를 사이트 차에 숫자를 놓았고 계산을 해 왔고
이걸 인테 해놓으면 은 이게 인 태조의 자동으로 되는지 아니면 앞에 무
슬 브래킷 놓았고 이것을 인 트 라고 해마 바뀌는지 인테리어 차로 갈 땐
어떤지 이런 여러가지 룰이 있잖아요
어찌보면 비투스 노풍 으로 올라간다 뭐 이건 좋은 얘기인데 목
뭐 이해도 되고 가끔 애매한 경우도 있구요 사실을
그럼 이제 그런데 서버가 생기는 것도 가 또는 있어요 이제 먼 쌓인
데이터나 인 트 간의 어떻게 왔다갔다 하는 이런 것부터 시작해서
네모 씨나 c 플러스 플러스 는 상당히
그 뭐라 그래 잠재적인 그런 규칙이 많아요
까 딱 봤을 때 확실하게 이렇게 작동한다는 게 아니라
이게 내부적으로 습할 땐 있어요 근데 그냥 코드만 보고 나서 아니
상식적으로 생각해서 그게 그렇게 작동한다고 판단하기 어려운 부분이 있죠
그래서 시나 c 플러스 플러스 가 굉장히 어려운 언어 중의 한 아기는
해요 그런 의미에서
그걸 굉장히 많이 고 쳤던 언어 중의 하나가
이제 뭐 뭐 중간에 다른 언어가 있었지만 그 대파 2대 좀 그런 비슷한
이루었다고 생각을 하는데 그 델파이 개발자가 서 만든 것이 # 이잖아요
그거 시상을 보면은 시작 초기 안 모 1 이나 2
이점 10 1 3.0 까지 때만 해도 굉장히
깔끔했어요 코드를 보면 은 딱 감이 와 아 이게 씨하고 비슷할 수 있지만
대충 어떻게 돌게 끝날 감히 오면서도
결과적으로 머시 에서 조금 위험하다고 여겨졌던 포인터 라든가 이런걸 많이
뺏고 물론 지원은 가능하지만 기본적으로 빠져 있죠 뭐 그 외에 포인터가
없어지는 대신 이 잡아 처럼 모든 게 레퍼런스 타입으로 전달이 되는데
아베 쏜 스타 입이 아니라 벨리 타입으로 되는건 이제 기본 형들 하고
스트라우 트
그럼 오인태 져 라던가 뭐 쇼트 이런거 있잖아요 그런거 다 기본 형들은
다 이번 졸업 값으로 카필 하죠
레퍼런스 카피하는 것은 레퍼런스가 p 1 같은 의미에요 근데 포인터의
직접 접근을 못하는 것 뿐이죠 그게 근데 이제 그런 레퍼런스가 배려하고
차이가 생기다 보니까 한가지 디폴트 bab 어를 처음으로 도입 을 해야만
됐어요 그게 뭐냐면 은
스튜어트 니까 물이 뭐 ccnp 클래스 하고 스트랩 타 그걸 차이가
없잖아요
근데 아시 샵에서는 스튜어트는 언제나 벨르 타입이에요
스트로 들어가는 것은 수첩 스를 그냥 함수에 전달할 때 이건 가수다
복사를 해요
뒤에서 얘기하면 뭐냐 오브젝트를 찍어보는 건 똑같죠 그리고 이 시에서는
아크 ls 라는 게 있잖아요 그걸 꺼리지
티셔츠는 개념 똑같아요 클래스 는 근데 이제 클래스에 있는 거 없 이젝터
를 그냥 함수로 전달할 때는 이거는
암시적으로 해야겠죠 인플레 슷하게 알아서 포인터로 역할을 번 쓰고 전달
하죠 그래서 거기서 한가지 우리 생각나 생각 생겨난 거에요
아 모든 오브젝트 클래스 를 만든 오브젝트는 몇 번 스타 입으로 들어간다
그리고 모든 스튜어트는 벨리타 로 들어간다
사실 시작을 전에 몰랐던 사람들이라면 g+ 한 사람들 하면 이게 코드만
보고 나올 수는 알 수는 없는 규칙의 사실을
근데 결과적으로 나중에 알게 되고 그래서 요 한 가지 규칙이 생겼어요
그렇게 외우기 힘든 기체는 아니죠
그리고 뭐 이스트 렇다고 클래스 사이를 왔다 갔다 할 때가 있잖아요 예를
들어서 뭐 뭐 인테 저도 클래스 향해 이렇게 제가 있어요 c 샵 에서 를
마찬가지이기 로스 컨테이너에 들어갈 때도 오브젝트로 만 바꿔야 되는
경우도 있고 뭐 요즘은 안 쓰지만 잘 그래서
그런게 생기면서 이제 거기 상하는 퍼포먼스 이슈 에 문제가 생기기
시작했어요 근데 그거는 말 그대로 규칙은 영어 가니까 이야기 아쉬웠죠
다 좋았는데
이제 제 생각에는 시 샵을 원래 만들 수 있는 분이 아마 그 팀을 더
이상은 미드 하지 않는게 아닌가 싶은 생각 들고
버전이 쪼금 더 높아 가면서 새로운 것들을 막 추하게 시작했거든요 그
가장
몰 링크드 그때 추가 된거고 뭐 에이스 잉크 라는 것도 그때 추가 된거고
뭐 패러럴 태스크 등으로 추가 된거고 개인적으로 패널을 팀은 굉장히
뛰어난 이라 했다고 생각해서 그거는 제가 굉장히 좋아하고 굉장히 깔끔하게
아더 생각하고
뭐 잡 시스템 안좋으신 분들은 패럴 태스크 cf 써보면 아 이거 정말
제대로 만들었고
뭐 실수 할수 있죠 근데 굉장히 잘 만났다 생각들어요 보면서
문제는 제가 최근에 발견한 것 중 하나에요 예매 프로그램 하다보니까
레이싱카 뭐 이런걸 쓸 있어서 아직도 개념이 뭐 100% 확실하지 않지만
a 싱크가 굉장히 문제가 많더라구요
그의 이씽 그 잡을 하면서 보통 뭐 그런거 있잖아요 태스크 해야 하고
이제 웨이트 할 때 o 에이트 하는 것이 잘 해서 아시는 분들 아시겠지만
그 업데이트할 때 특히 왜
웹기반 에서가 문제인거 같아요 이제 그 어떤 잡을 하는 거 웨이트 할 때
이게 테스가 짝 나갔다가 끝나고 돌아올 때 있잖아요
그러면 이게 기본 동작이 되겠구요
기본 동작이 이 잡을 시작을 했던 컨텍스트 이 모임이 있잖아요
그러면 2a 싱크 잡을 실행을 하면서 이게 끝냈을 때 원래 컨텍스트 로
돌아오려고 하는게 기본동작 이에요 그러니까 한마디로 뭐 컨텍 쓰라고
생각하고 양뜰아 대해서 버너가 내가 일본에서 이것을 시작했다면 끈 나와서
1번으로 돌아오려고 하는 그런
작동을 그걸 기본 작동으로 해요 근데 그럴 필요가 없는 경악의 대부분
이거든요
저는 저는 왜 그런 표가 있는지도 잘 몰랐는데 열심히 뒤지다 보니까
ui 쪽에선 그래야만 한데요 그래서 저도 모터 개입하지 나왔어요 유아 1
할 일이 없어서 그래서 c 샵 에서 ui 에서 그런데 이 싱크를 막 할
때 필요하잖아요 아무래도 ui 를 막으면 안 되니까
그러면 그때 원래 컨텐츠로 돌아와야만 원래 ui 를 업데이트 하고 이런게
있나 봐요 뭐
wpf 에 얘기할 수도 있고 실버라이트 이길 수 있는데 정확히 어디에 이
유아인 지 모르겠어요
그거를 위해 기본 동작을 돌아옴 그 원래 컨텍스트 돌아오게 만들었다는데
문제는 이거를 asp 달래 왜 파괴되는 돌리다보면 은 대략 일어날 때가
있어요 예를 들어 이 에러 쉽게 시작되고 떠났는데 돌아오는 순간 이게
원래 컨텐츠를 걸려 하죠 그런데 딸은 이렇게 리퀘스트 코리 있어 갖고 웹
서버 쪽에
그 원래 있던 컨텍스트가 싼 놈을 가주가 딴 놈이 가져와서 뭔가 또
실행을 하다가 해도 어 누군가를 기다리며 데 드라이 걸리는 거에요 그래서
즉 저는 대략 을 페스트 할 때는 안 나오다가 프로덕션 그 서버 에
올렸을 때 그걸 발견했 거든요 제가 짠 코드가 아니고 원래 있던 코드
였는데 프로덕션의 올릴 때 이렇게 막 쓰려 해서 많아지고 뭐 거기 태스크
프리 있잖아요
asd 아래쪽에는 그게 많아지면서 그게 막 되다 2 걸리 시작하는 거예요
뒤지고 뒤진 끝에 차였어요 문제가 뭔지 해결할 만큼 소치 간다 나요
그 다음의 함수를 호출할때 a 싱크 잡을 호출할 때 그 뒤를 다 타나
찍고
컴페어 에이트 어쩌고 함수가 있어요 그것을 뽈 수료 해주면
원래 그 모 태 스카이 아니니까 뭐야 턴 텍스 돌아가려 하지 않는다
그러더라구요
그렇군 대한 m 나들이 아마 컨텍 사로잡아 까도 시행한다고
그래서 그게 핵을 너무 간단한데
문제는 코딩을 짜는 사람 입장에서
왜 그걸 언제나 넣어야 되는지 가 말이 안된다는 거죠
기본적으로 코딩할 때는 사람에서 기본 기본 동작이 아무거나 잘 하고
대답이 없는 상황을 가게 하고 정말 자기가 뭔가 위험한 일을 할 때
데드락 또 발생할 수 있지만 아니며 특히 뭐 ui 쪽에 특별한 그
스페셜한 목적으로 그걸 해야 될 때 그때는 이제 컴퓨팅의 웨이트를 자기가
직접 짜야 줘 그러니까 컴퓨터에 웨이트가 없으면 데드락 없이 그냥 아 뭐
컨텐츠 잡아서 갈 수 있는 그런 개념으로 가고 정말 원래 컨텍스트 로
돌아가야만 하는 특별한 경우라면 그 때 새로운 함수를 뒤 다 붙여야
된다고 생각을 하거든요
그 디자인을 잘못한 거예요 그리고 그것 때문에 실제 저희 프로덕션에서
우리도 있었고 제 생각에는 저희가 아직 모르는 그런 우리가 말할 수
있어요
델라 켄 걸리기 시작하면 보통 맵에서는 어 페 이 지 않으니까 of
아무도 모르잖아요
그럼 새로운 리퀘스트 가서 새로운 거 운 좋게 대대로 안걸리면 그 결과
받아오고
그리고 웹서버에서 계속 되더라 버리는 태스크가 이 쓰고 바로 섬 웹서버가
넘 드려진 다 그래 다시 패팅 하자
이 개념으로 가는 경우도 있을 것 같아요 한마디로 모르는 거죠 그래서
굉장히 위험한 디폴트 기회라고 생각을 하고 그게 기본을 들어 같은게
굉장히 저는 불만스러워 되잖아요
그 그건 하나고 두번째 또 시작된 요즘 안되던 것은 그 2000 리터
같은거 있잖아요 시자 베 아 예를 들어서 링크에서 애가 꼬고
아
링크의 3가 그것을 에테 가끔 어떻게 잡아 하고 새로운 링크 모스 척척
만드는걸 컨테이너 만드는거
이게 시 샵에서 이제 왜 이질 로딩이 라는걸 시작한 건데
한마디로 링크 안에 뭐 3가지 셀렉트 잡을 오갔고 배울 세계를 만들려고
한다고 생각해 봐요
그러면 실제 이 그 데이터를 쓰기 전까지 이 실행 문이 실행이 안되는
거에요 그래서 또 왜 이제 로딩이 되면 언제나 있어왔지만
그 크게 과연 디폴트에 핥다 라는 생각이 배우기 시작하는 거죠
기본적으로 이게 사실은 코딩을 쪘을 때 레이지 로딩이 아니라는 것을
레이지 로딩이 아니 라고 가정하고 코딩을 짜는 게 올바르다 생각을
하거든요 근데 이건 레이즈 로딩은 d4 들어있기 때문에 사람들은 코딩을
짜고 레이지 로딩 으로 나중에 되는거죠
물론 sk 어린 아 이런거 사용할 때는 못 하니 그게 나은 걸 수도
있는데
과연 코딩을 짜는 사람이 이게 짜면서 아 이건 레이즈 어디니 구나 라고
생각을 할까
기본적으로 다들 이것은 곧바로 곧바로 로딩하는
이거 로딩이 라고 줘 이걸 보니까 이제
뭐라 그래 열정적으로 곧바로 고딩 한다고 그때그때 실행 하는거
국외의 저는 일반적인 프로그램을 생각하는 거라고 생각을 해요 근데 레이지
로딩을 그걸 기본으로 기초로 해놨다 보니까
예
또 거기서 몇가지 버그가 이리저리 발생 하더라구요 그 사람들은 당연히 게
이거 로딩 생각하고 썼는데 나중에 보니까 lag 로딩 거야
그래서 뭐 그걸 고치는 부분이 있긴한데 이건 뭐 그거는
레이즈 어디니 필요하면 그냥 그걸 넣으면서 거기는 레이지 라고 써야
되는게 아닐까
다 슬랙 트 레 이 지 모 이런식으로 금이 간 메이지 하나 딱 보이게
그러면 그게 훨씬 좀 깔끔한 코드 라고 생각하거든요
그 기본 베일 어떤거 잘못됐다고 생각을 해요 근데 뭐 아까 말한 컴퓨터에
어딨죠 아주 잘못된 건 아니고 그냥 제
선호 사항에서 잘못됐다고 생각을 하고 여기서 오는 또한 1
버그 사회 발견한 것 등이 웃겼던 게 뭐냐면
링크를 딱히 하고 그러면 셀렉트 문을 그니깐 링크 안에서 셀렉트 에서
언제나 따른 함수를 호출하는 것을 슬랩 들어 있다고 생각해봐요
그러면 이 이 링크를 잡아다가 컨테이너를 포인트를 돌리면서
매트 멤버를 잡다보면 잡을 때마다 그 함수를 호출해 주는 거에요
함수를 호출할 때 그 함수가 일어서 뭐 숫자를 1씩 증가 시켜서 반환을
하는거 다 그런 함수 라면 되게 재미있는게 발생을 하더라구요
링크 스테이트먼트 에 그 슬레이트를 두 번을 해야 하고 있는 거예요
그러면 숫자가 영하고 일이 나오겠죠 결과적으로 그리고 밑에서
그 링크 스테이트 를 돌면서 뽀 he 그 모 모 되 때 말이 없 을 다
잡아주고 뭐 그 안에 까
각 링크 안에 슬리퍼가 2개 들어 왔으니까 2개 만큼 돌리면서 그 값을
잡았고 프린팅을 한다 그러면 화면에
지루하고 원이가 영하고 일이 출력이 되요 그 다음에 또 여기 재밌는 게
이거예요
브링크 스테이트 가까이 있잖아요 그 위에 링크 그 없애 즉 그거를 딱
잡고 프린트를 한번 더 하면서 다 퍼스트 를 하면은
이게 그 다음번 아가 나와요 g12 이렇게 그 게 뭐 이러면 레이지 로딩
뜨네 그렇죠 그 안에 드러낸 셀렉트문은 있고 그 셋팅 4 다른 함수
호출하는 거기 때문에 그것을 한번 한번 호출할 때마다 그렇게 되는 거에요
근데 처음 링크를 캡쳐 했을 때는 우리가 2개를 잡는다고 의미한 왔으니까
2개인 것까지 알고 그것을 보고 위치를 돌릴 순 있어요
근데 그게 나온 경우에 이미 이 두개를 호출 했기 때문에
아 뭐 그 함수가 숙제 하나씩 인가 해서 반응 하는 거잖아요
그럼 선 일까지 반항 거에요 그러면 여기 여기에 호출하고 다음 포인트가
인류가 있는 건데 아직 아무것도 없는거 여기서 이 상황에서
아 그래 이것 되게 돌려 가든지 뒤로하고 원을 보였으니까 그럼 이번에는
처음 것을 다시 보고 싶다 라는 개념으로 하면 어 함수가 버스가 있네
그러면 링크 다 펄스 하면은 그 어레이 생각하고
이게 처음에 거라 생각하잖아요 근데 그 페이지 로딩이 때문에 1st 가
사시는 넥스트 에요
아니면 그 현재 포인터가 리크 인데요 1st 거나 그래서 펄스 하면은
이게 호출 되면서 아직 그 안에 들어가는 값이 없으니까 새로 함수
호출해서
이가 나오더라고요 그래서 는 그 펄 트란은 이즘 자체가 굉장히 불만이
많아요 사실은 모 씨 다른 2000 리터 쓰다보면 자바가 그랬던거 같은데
넥센 아 언제나 저는 4 자바가 넥스팅 가
씨가 넥스트 인가 벌스 안약 에너지는 넥스트 라고 하거든요
이렇게 넥스트 라던가 무브 넥스트 라던가 그러면 개념 있다고 제한 텍스트
니까 이건 그 다음 거 겠구나 라는 그 코드의 확실히 볼 수가 있는데
이것은 버스 다 보니까 진짜 꼼꼼하게 생각하지 않으면
이게 버스 10g 이게 다음 건지 덜튼 헷갈릴 수가 있더라구요 실제 제가
그 버그를 코드에서 받고 딴사람이 짠거 를
이걸 해결하는 방법은 처음에 링크 스테이트 묵호 그 두 개의 캡쳐와
이렇게 세트로 한 다음에
다투어 레이 하면 해결은 돼요 그럼 그때부터 어리니까 첫번째와 두번째 거
보여주고 달 첫번째 거 보여주면 어레이 서 첫 번째 거든요
그럼 또 하나의 문제가 이게 옛날에 stl 같은 경우에서 가끔 나왔던
문제가 그렇게 하는 데 스틸의 개념 자체가 stl 컨테이너 요
게임 자체가 그거 있잖아요
그 인터페이스는 똑같고
행동도 똑같아야 달아야 되니까 행동 2
아 그것까진 잘 모르겠네요 짧아서 쪽에
왜 개념은 그것도 봤거든요 그러니까 예를 들어 어떤 형이 이제 어레인지
모니터 상관없이 그 벌써부터 끝까지 맘들이 처리되면 볼 수 있다면서
버스타면 저는 볼수록 할 수 있는 그런 그 개념의 생각을 했거든요
이것은 순식간에 그 캡쳐 하는게 링크
그 인 유머 골 타이 빈치 아니면 어이 타입인지
이냐에 따라 퍼스트 의 비교적 바뀌는건 생각을 해 곧바로 굉장히
혼란스럽고 또 시샵 같은 경우에서는
변수를 오토 변수가 있잖아요 봐 라고 해서 그냥 어떤 함수 호출에서 이
함수가 인용 레이트를 반 했을 때 그냥 인바 하였고 k 해놓으면
이 형이 뭔지는 코트 안에는 안보이지만 애가 출연해서 아 그래 이게
이념으로 l 그 나고 쓰잖아요
그렇게 되기 시작하면 은 이 액 만약에 그 함수가 바뀌어서
이념으로 2t 를 반환하고 어레이를 반상기 시작하면 은 그 코 자체도
밖에 코 코드 자체에 행동도 바뀐 1회 이거든요
그 차이 둥 간의 인터페이스를 공유하지 않는 게 훨씬 버그를 막을 수
있는 길인데 왜 그랬을까
늦어도 그 또 굉장히 맘에 안 드는 부분이기도 했어요
레이즌 어디니 처음부터 아니 걸린 로딩 이었으며 이런 문제 좀 적어 쓸
거고
레이즈 로딩이 필요한 따온 레이지 로딩이 라고 하면 되는거고
아니면 그 아까 말했던 그 우린 그 힘으로 뭐 그
인터페이스의
1st 라는 이름 자체가 잘못된 게 아니냐 차이 넥스트 라든가 컨트
라든가 이런 이런 이름이 훨씬 나은거 점에서
것도 좀 그렇고 뭐 그 외에도 뭐에 a 싱크 해보려구요 앞에 h 컵
조치가 of 붙이고 몹쓸 굉장히 들어 줬거든요
그 아 이게 어느 순간부터 갑자기 좀 시장이 망가지는 게 보이는 거에요
아아 이게 원래 설계자가 없는게 아닌가 생각이 들 극딜 정도고
시선 얘기는 거의 까지 그 다음에 할 여길 수 있게 되요
수입 뜰을 처음 나왔을때 스페 따 이거 보면서
검토 해 봤어요 일단 오브젝티브 c 보다 훨씬 좋아요
뭐 급도 안 줄 수가 없죠 오직 c 자체가 만 개판 약 냉기 지었으니 건
자체로 늘
일단 뭐 제가 스위프트 같은거 좋아요 mods 씨나 스위트를 다른것도
좋아했던 이유 중에 하나는 그 래 프 카운팅 때문이고요 뭐 전에 웹캠
등이 왜 가비지 컬렉터 돈 아니라는 얘기 하면 뽀얀 않았고
그거는 좋고 굉장히 여러가지 신경을 많이 썼어요 뭐 예를 들어서 아 뭐
성능 향상을 위해서는 아무래도 변수 보다는 상수가 중요하거든요 컨스트럭션
수업이라고 해서 하죠 뭐 그런것도 신경을 많이 썼고 많은 신경 쓰면서 아
굉장히 많은 노력을 했구나 몬 텐션 부터 시작해서
그래 성능 상으로 하니까 자동적으로 오케 마셔서는 하기가 훨씬 좋은
언어의 요
그러면서 사용자가 사용하기에는 그렇게 힘들지 않을 거라고
한가지 단점은 얘 내가 정말 말도 안되는 디폴트 비유를 써서 만든 게
문제였어요
개념이 이해가 안 되는 거야 점점 얘네 왜 이 짓을 했을까
제가 한가지 있다 한가지가 왜 안들어 솔직히 지금 생각으로
뭐냐면
그 어레이 하고 딕셔너리 라고 하나 내내 맵 이라 그러나 해쉬 테이블에
어머나
뭐 어쨌든 c 샵 용어로 야 어레이 하고 아 뭐라 그래
딕셔너리 라고 할게요 어레이 가 있으면 씨 자매는 어이가 오브제 돼요
그래서 어레이를 다른 함수의 가 어린 액션이 똑같이 오브젝트 기 때문에
이것을 따는 함수에 인자로 정천 전해주면 이게 왜 1st 단위로 들어가요
복사가 아니라는 거죠 그래서 그냥 그것을 가져다가 쓰면 되는거고 복사하는
시간 낭비도 없고
그리고 그 값을 바꾸면 원본 이 바뀌는 단점이 있어요
근데 그거를 이미 당연하다고 써 온 사람들이 많고 그로 저는 그게
일반적인 지금 현재 프로그램 패러다임을 보거든요
그렇지 않으면 원래 어레이 에 어떤 값을 추가 하려고 할 때 이걸 함수
전달하는 어떻게 했다는 거야
그쵸 원래 오래 그 원래 어레이 어레이 가 아니라 이거는 뭐
시샤모 용어로는 리스트 라고 해야 될 거고 c 프로스포츠 영어로는 벡터
라고 해야겠죠
stl 벡터 거기에 원래 새로운 값도 추가 해서 그냥 그 원본의 계속
추가하고 싶은데 그 팩터를 계속 전달해주고 싶은 경우 있잖아 맥의 만들어
그러면 그냥 몇 번씩 하기 때문에 편하잖아요 한마디로 뭐 시에서는
포인터로 전달하던 없거나 아니면 입행 긴 맞서고 레퍼런스 된다는 같은
얘기죠
그게 기분 비어 있어요 왜냐면 cc 하면은 분명하게 말하니까 오브젝트는
무조건 래퍼 스타 2 로 전달되고 스튜어트는 무조건 베르테르 전달되기
때문에 오직 그리스도 그랬거든요
제가 알기로 음 근데 얘가 바꾼 거예요 머리하고 딕셔너리 는 이제부터는
모두다 벨리 타입 이래요 그래서 어린아 그것을 딴데 대입을 하거나
패스하면 벨리타 입이 되면서 새로운 카피가 만들어지는 거예요
콜론 스럽죠 음 뭐야 이거
근데 더 혼란스럽게 만들었어요 딕셔너리 는 무조건 벨르 테이블에서 카피가
되는데 어레이는 아니네요
어레이는 패스가 되면 될 타입 이긴한데
복선은 일어나지 않다가 그 어레이 타입의 그 컨테이너 사이즈가 바뀌거나
그 안의 값이 바뀌면 그 때 복사를 안되요
들으면서 이게 무슨 개소리야
이은하 요 이유는 뭐 아까 말들이 복사 맞고 뭐 성능을 빠르게 더 좋은데
다좋은데 문제는
2 그 코드로 봤을 때 보이지 않는 그 온갖 자잘한 규칙을 왜 사람들이
왜 배워야 되는지 모르겠고
그리고 5 제트 에서 이것을 만든 이유가 3 그러니까 아무래도 아이폰 쪽
개발하는 사람 중에도 캐쥬얼한 산이 많다 보니까
dp 날씨 플러스 플러스 처럼 투철하게 프로그래밍한 선도 좀 적고 좀
대충 아는 사람들이 많기 때문에 실수를 많이 할 수 있다는 것때문에
이거를 실수가 적은 맹 기지로 만들려고 구제 3 거거든요
근데 그 사람들이 그 빛으로 어이가 없어
적게 아내 워요 규칙은 말 그대로 한 가지 조건이 뚜렷한 규칙 있고
이유가 있고 언제나 컷이 스턴트 하게 돼야 되는 건데 그게 아니라 그
어레이를 하면 이게 그래 내가 이거 사이즈를 바꾸거나 한번 내용을 바꾸면
그때 복사가 일어나고 그렇잖아요 보그
보면서 2 원어 저도 의욕 t 이게 먹겠다는 생각이 딱 들었어요
더 굉장히 잘 못 설계의 한 부분이고 언어 자체는 그나마 뛰어나요 고
부분이 굉장히 잘 못했어요
올바른 방법은 시세 방법이 옳아요 1 실은 왜냐면 샵에서 말 그대로 제가
뭐 딕셔너리 가 있어요
이것의 사본을 만들고 싶으면 그냥 타투 딕셔너리 뭐 이런식 하면 되요
그러면 사본을 만들어 줘요 아니면 함수를 따로 만드셔야 가 카피 라는
함수를 만들어 주던가
기본적으로는 원래 규칙 쌈 모든 거너 오브젝트는 레퍼런스 타입 이니까
레퍼런스 전달이 되지만 정말 니가 사본이 필요하면 함수 호출에서
다 카피 라던가 다투어 왜 이라던가 이렇게 4번을 받으면 되는 거거든요
그러면 얼마나 깔끔한 내가 복사하고 싶은 복사하고 아니면 말고
이것을 왜 그때 일을 하자 실제 이해가 안되어서 제가 스피드를 건 그건
분이고 사실은 그게 굉장히 만들었어요
그래서 언어 얘기가 나왔으니까 말인데 그럼 요즘 진짜 제대로 언어를
새로운 언어가 몇 개씩 나오거든요 정말 제대로 되지 않아 너는 제가 최근
본 것 중에는
모질라 에서 만들고 있는 러스트 하나 뿐인 것 같아요
뭐 걔네 개념은 이제 웹에서도 는 컴파일 된 언어 거든요
그 외래에서 이제 스케이터 너와 나 둘이 다 보니까 뭐 php 거 철
머신 다 만들고 뭐 php 로 컴파일한 이런게 소리도 하고 근데 걔네들은
아예 컴파일된 언어 만들겠다는 거에요 그래서 엄청 빠르게 볼 수 있는
재미있는 것은 큰 비슷하나 또 하나 있죠
아 구글의 고래 니라고 걔네 피탄 개념을 시작해서 만들었죠 무슨 뭐
예 수치에서 최근에 한거지만 예전에 모 씨 플러스 플러스 나 뭐 이런
그쪽을 디자인했던 건가요 뛰어난 아저씨들이 할아버지 들이 모여서 만든거
다 모여 얘길 하는데
베드 젖 한번 발전 고래가 많이 쓴다 그래서 구글에서 딱 봤는데
보구 튜토리얼 좀 보고 좀 코드가 뻔 짜고 그냥 다녔어요
뭐 짠하게 뭐 뭐
굉장히 us 트위스트 액션을 더 갖고 실수를 못하게 한 했다면 그 의도
자체는 좋은데
힌트 딱 보는 순간 아 이거는
박 70 년대 80 년대 신택스 구나
정말 쓰기 신 텍스 그리고 막 치다보면 손가락에 index
금호 일을 해서 뭐 쉬프트 유리 많다는거 이런 이상한 짓 보면서 저건
아니다 저거는 코드 가독성에 문제가 생기는 언어라고 저한테는 신 색상의
문제로 그래서 저건 제가 절대 상대 기존 시스템 쓰고 저는 죽어도 안
맞을 것 같고 제가 안 만지면 따른 사람도 안 맞을 거라고 봐요
그러고 랭은 그냥 제 생각에는 특화된 분야 구글 좀 더 열심히 쓰다가 뭐
알아서 사장 될 것 같고 제 생각에는
라스트 언어를 보면은 정말 그 수입 스터 하려고 했던 것을 얘 내가 일단
다 했구요 그 모
퇴 적화 가능할 수 있도록 뭐 기본적으로
기본 방식을 대체해서 뭐 모든 변수는 기본적으로 상세 요 일단 테이블
하면은 바꿀수가 없어요
바꾸고 싶으면 변수를 선언할 때 이계삼 수가 아니다 라고 선언을 해야
돼요
상당히 개념적으로 만든 이거든요 어찌 보면은
그러면은 컴파일러가 볼 때 어 상승 건 아름다 컴파일하고 체력 할 수
있는거고 변수를 안하고 그래서 그런것도 잘 되어 있고 이런 그 m 굴을
몸 이미 로인 m 볼 그런 얘긴데 결과적으론
이렇게 값이 변하지 않는 것은 멀리 떨어지는 뽑을 때도 훨씬 안전
하잖아요 값이 바라지 않는게 분명한 5 변할 변 하려면 이제 컴파일러가
알려주니까 이건 변하지 않는 값이 니까 멀티쓰레드 뽑아도 뭐 레이스
컨디션 같은 날 경우도 없고
즉 문법도 되게 깔끔하고 굉장히 못 한 번만 있더라고요 사실 뭐 내가
coc 접하고 비슷한게 엉 커 보이기도 하고 뭐 뭐 옛날 옛날에 이상은
뭐 그런 언어라고 전에 다르고
아직도 열심히 개발중인 거고 아직도 초기 긴 한데 일단 스펙 읽어보고
코드 읽어 볼 때는 보면서 이해가 되요 아 정말 깔끔하구 나 그리고 뭐
채널 어디에 지원하기 시작한 건가 그런거 다 지원하고
제가 볼때는 가장 생각을 열심히 잘 했고
가장
기본 비해 별을 확실하게 만들고 있는 언어 같긴해요
보면서 아 전어가 빨리 좀 나와서 어떻게 메인 스트림이 되면 좋겠다고
생각을 하는데 최근에 삼성 이거를 돕기 시작했다 그래 갖고 안 믿으시는
분들 좀 있더라구요 삼성 하고 모질라 감점이 잡아타고
뭐 그것까진 모르겠고 고 조언을 하려 했던 얘기 그 거에요 언어가 조커
납부 때는 말 그대로 기본 동작이 뭐냐 가 되게 중요한 것 같아요
뭐 제가 예전에 그 마이크로 소프트 포럼 에서 가끔 답답할 때 어떤
학생들은 왜 숫자가 역 일이 아니라 0 부터 시작한 야 어레이 같은거
접근할 때 너무 혼란스럽고 복잡하다 라니 했는데 뭐 10진수를 주로 써온
사람 그리고 일반적으로 이를 첫번째 숫자로 생각하는 경우가 많잖아요
사실은 12345678 이런식으로 우리가 0 1 2 3 다 이렇게 안
하십니까
거기서 오는 혼돈 알겠는데
어레이 접근을 할 때는 이제 멋이 특히 c 플러스 플러스 에서
메모리 포인터 연산 하고 게 또 맞아 떨어지는게 있거든요 그래서
영입 여는 내가 시작하는거 일이면 지금 에서 한 발짝 부터 나아가 안거
이런 개념으로 들어가는 거기 때문에 시작이 00 부터 하는건데
그런 기본 bab 어도 어찌 보면은 보는 사람에 따라 다르게 받을 수가
있는거죠 아 이거 정말 불편하다 정말 편하다
근데 만약 그 사람한테 이렇게 돼서 이것 때문에 우리가 이런 규칙으로
가는거 다는거 확실한 규칙을 보였다면
저는 그건 괜찮은 기본이라고 봐요 오히려 저는 얼이 같은것을 1234 로
가는 것은 나중에 포인트 할 때 마다 숫자 바꾸고 말하는거 따지면 은
오히려 버거를 만들 가능성이 있다고 생각하기 때문에 기본 오늘 제대로
받고 확실한 정리표 정립하고 확실하다 넣을까 가능하지만
정말 말도 안되는 기본 동작은 좀 그만 좀 만들어서 좋겠어요 아까 말이
돼 스위프트 스위프트 에서 그 복사 문제도 그렇고 뭐 시사회에서 몇
가지만 했던거
시 샵은 제가 나쁘게 말할 여지가 많다는 게 최근에 다 부분만 물을 많이
봐서 그래요
그리곤 9 면모가 되게 웃긴게 코어 생기지 쪽보다는
나중에 이제 웹 쪽이나 ui 쪽을 써 포팅을 어떻게 하면서 거기서 억지를
녹기 시작하면서 생긴거 에서 문제가 많이 텐데 때문에 되겠구요
제가 올 때는 다른 팀이 만들었거나 아니면 그걸 이렇게 입자 나온것
같은데
머스트 는 모질라 가 정말 제가 볼때는 기술력은 뛰어난 것 같아요 모비즌
에센스는 좀 안 좋을 지 몰라도
보면서 야 정도 언어를 우리도 만드는구나
물론 오픈 소스 줘 없었어요 그 열심히 같이 만드는 건데
최종 결정은 아무래도 뭐 죄다 쪽 사람들이 하는게 아닐까 싶어요 그쪽에
있는 사람들이 모질라 회사를 라기보단 그쪽에 있는 사람들이
보면서 야 저는 진짜 안 쓰고 싶다는 생각을 하는데
뭐 언어는 사실 툴이 따라 봐야죠 그래서 비주얼스튜디오 말한 툴이 저기에
들어가고 하는 비주얼 스튜디오 마스터 를 지원할 수 있다면 좋겠고 아니면
마소에서 새로운 언어로 만들어 된거 사실
마소에서 시작 정도 만든 걸로 컴파일 되는 언어 없이 서로 컴파일 하려고
하고 있진 하지만 지금 시 #2 좀 많이 들어 워 진 상태라
아 피셔의 대해서는 앞으로 걱정이 좀 많아요 잘 c6 팩 1
3.0 에서 머무르고 2.0 이나 그리고 거기다가 패러렐 라이브러리
정도만 쓰는건 굉장히 깔끔한 코드가 나올 텐데 그 외에 문제가 좀
많더라구요
아 프로그램의 언제나 말이 길어 줘 어 폭스 였습니다
