오늘도 c 플러스 플러스 11 그 이유 적에게 잠깐 할 거에요 제가
오랜만에 c 플러스 플러스 얘기하니까 사람들과 신난다 이룰 수도 있을 것
같은데 아 지금 나온거 로는 거의 동 났어요
제가 말할 것들은 왜냐하면 은 g 플러스 플러스 10일에 나온 것 중에
별로 중요하지 않은 것들은 가능함 쓰지 말아야 하는 것들은 얘기 3 안
하니까 뭐 전에도 말했지만 c 플러스 플러스 제가 비디오 아니 만들면서
거기서 정리하고 나와 떴네요
아니면 제가 잘못 알고 있던 것을 새롭게 알게 된 내용들을 다시 말
하였기 때문에 이런 cg 가 나온 거에요
오늘 얘기할 주제는 컨 스턴트 익스프레션
아 상수 표현 식 이라고 하는게 맞을까
어쨌든 커스티 익스프레스 이렇게도 많이 얘기 많이 하는데 요거 에 대해서
말씀을 드릴께요 제가 커스티 익스프레스가 나오기를 되게 오래 전부터
기다리고 있었어요
그리고 그 이유가 저는 컴파일 하는 도중에 아 스트링 에서 해쉬 값을
뽑아 내기 위한 여기서 그랬고 제 옛날 블로그를 보면 크게 지원이 안되는
상태에서 제가 * 꼼수를 써 왔고 이제 한 그런 기록까지 쭉 나와 있어요
근데 어쨌든 간에 이제 그 컨 스틱스 프레스가 제대로 좀 지원이 되면서
쓸 수가 있어요
아주 좋아졌죠 근데 저는 커스티 익스프레스 에 대한 개념을 제대로 못
잡고 있었어요
이번에 4p 아카데미 이제 준비하면서 아 뭐 폭격과 드니 강좌
그거는 또 비디오 밑에 넣어 놓을 게요 비디오 밑에 설명에 광고 에요
그거를 준비하면서 커스티 익스프레스 섹션을 만들었죠 나는 왜 이걸 기다려
왔고 왜 썼고요 이런 식의 쓸 수 있다라고 해서 이제 자료를 만든 다음에
딱 비디오 녹화 하기 전에 또 검술을 부탁 드렸어요
전에 말씀드린 그 괴 주 프로그램 아
형님은 아이죠 저보다 나이 걸신 지만 어쨌든 형님 이라고 불러서
괜히 이제
제가 나이가 어린 척을 잠깐 해보고 그 괴수 형님한테 예
보여 드려서 설명을 이제 보여 드리는데 강의자료를
보더니 이거 잘못되었다고 딱 찝어 주시더라구요 언니 11 뿔의 해도 뭐
이거 여기서 해결하는 건 이렇게 해결 됐는데 그것은 아닌 것 같다
근데 뭔가 좀 설명 이상하다 2분도 10불 뿔 보다는 c 를 주로 하시는
분이기 때문에
요건 이상하다 정도 확실히 아세요 훌륭한 컴퓨터 프로그래머 니까 보니
정확히 뭐라고 설명은 일단 못하겠다 라고 말씀하셔서
커스티 익스프레션 을 정말 다시 한 번 봤어요 정확히 개념이 뭐였는지
부터 온갖 조사와 나오게 된 배경과 다 연구를 했어요
공부를 하고 찾고 근데 제가 느낀건 뭐냐면은
비디오 강의에서도 말해요 컨테스트 익스프레션 에 대해서 정의를 내리는
사람이 공통되게 다 동의를 하지 않아요
이게 모다 저게 뭐 다 얘긴 다 많고 얘는 이거 다 이해는 엿보다 이
때는 이걸 써야 된다 아니다 경이 분분 해요
그런데 결과적으로 제가 이 모든 사람들이 의견을 다 보고
결과적으로 내릴 수 있는 결론은 딱 하나였어요 4
논리적으로 말이 되는 아 설명 방법을 찾았어요 논리적으로
그래서 그게 이제 제 비디오 강에 들어가 있고
그거를 짧게 줄여서 여기서 잠깐 말을 하려고 해요
자 cost 익스프레션 이란 뭐냐 이게 과연 컨 스트라우 어떻게 다르냐
라는 것이 사실은 커 스 트 가 있었는데 커스티 익스프레션 뭐야
자
커스터 컷팅 스포츠 일단 다른 거야 그거 뭐 커스티 익스프레션 인 변수
함수 말고
변수는 당연히 커 스 트 웨 어
그러나 그게 중요한게 아니라 어쨌든 둘은 다는 다른거 에어컨 스트는 어떤
값이 한번 대입이 되면 변할 수 있냐 없냐
그게 전부야 상수 다 그게 전부인 만면에 컨테스트 익스프레션 뭐냐면요
프로그래머의 의도를 보여주는 거에요
어떤 의도 나는 요 이제 코드 아니면 요 변수
아니면 요 함수 요게 컴파일 도중에
다 실행이 되서 그 결과 값이 컴파일 도중에 결정이 됐으면 좋겠다는
제의도 해요
물론 그 의도가 그 의도가 컴파일러가 완성을 못 시켜도 패 쓰네요
근데 이게 중요한 게 왜 ua 거냐며 는 이 의도가 왜 나왔니 라는건 요
그래서 왜 그걸 굳이 그래야 되는데 라고 생각을 하면은 차실 이거는 제가
별로 안좋게 보는 이제 템플릿 메타 프로그래밍 일하고 있어요
c 플러스 플레이스에서 템플릿 프로그램이 나왔었죠
그의 나오게 대한 이제 제 개인적인 이제 믿음은
주 이유는 당연히 제 내리깐 컨테이너를 지원하기 위해서 나왔다고 생각해요
그런데 씨플러스 플러스가 이제 컴파일을 다 해야 되는 언어다 보니까 그
젠 에리카 어떤 타입도 들어갈 수 있는 컨테이너 목 배럴 같은 거죠 그게
어떤 타입 어떤 타고 들어갈 수 있다는데 그 타입 자체가 컴파일 도중에
결정이 되서
각 타임 마다 맞는 어레이 배열 용 코드를 컴파일을 따로따로 해주는게
템플릿 프로그래밍의 시초를 떨어져 생각을 해요
때 보니까 사람들이 5 템플릿 프로그래밍이 실제 해놓은 컴파일 도중에
결정이 되버린 레코드를 자동으로 만들어 주 4
그러면 내가 코드 한량이 줄 겐 는걸 그 생각을 하면서 이 템플릿
프로그래밍을 정말 엄청난데 마 악용을 했어요
그 악용 한거 일부가 바로 이런거 에요
어떤 함수를 호출해서 그 함수에서 이제 결과를 받아 내고 싶어요
목 대표적인 얘 디버 같이 수열 이런 거죠
피보나치 수열 5가 무슨 값인 야 그러면 나오는 값은 함수를 다 돌리면
결정이 돼요
그러나 이거에 함수를 재귀적으로 출 하다보니까 실행 도중에 제 기적 을
호출하면 시간이 너무 걸린다 차례 컴파일 도중에 이 모든 함수가 실행이
되게 해서 최종 숫자 하나만 딱 나오게 하자
이거를 템플릿 메타 프로그램으로 할 수 가 있었어요
그 제가 템플릿 프로그램이 메타 프로그래밍 는 나쁘다 라는 비디오 였나
거기서 이거에 단점을 중 얘기했죠
그런 단점들이 있기 때문에 이거를 쓰는거 자체가 좀 많이 문제가 있었어요
사실은 가독성도 딸리고 템플릿 메타 프로그램의 한 함수를 실제 실행
도중에 똑같은 함수를 쓰려면 따른 아들도 만들어야 됐고 이런 문제점이
보이니까 이걸 좀 언어적으로 제대로 지원해주고 자 나온게 컨테스트
익스프레션 이라고 저는 일단은 설명을 해요 왜
컨 스틱 스페셜 쓰면 함수를 함수 대로 쓸 수가 있어요 똑같이 참 대로
써요 피부나 참 수 있어요 단 함수 앞에 컨 스틱스 패션을 달아나요
그럼 무슨 의미냐 야 난 이 함수가 실의 컴파일 도중에
실제 최종 값까지 결정될 수 있으면 컴파일 어디가 값을 결정해서 그
마지막 3 수 1 받아야죠
그런데 그게 불가능하다면 예를 들어서 피보나치 에 1 누나 탕에 나오지만
피고 나치 다른 변수로 a 인테 자연 변수
그럼 a 가 뭐가 들어 갈지 모르니까 컴파일 도중에 는 판단이 불가
나거든요
그럼 그런 경우에는 실행 도중에 함수는 실행 시켜 줘
이 두개가 가능 하는게 커스티 익스프레션 해요
즉 이 함수를 실행 중에도 돌려 되는데 난 최대한 가능하나 컴파일 도중에
다이 델 레이 션 해서 최종 값만 줬으면 좋겠어
라는게 컨 스틱스 패션이에요 자 그럼 이렇게 하면 아까 말했던 템플릿
프로그래밍에서 가독성이 딸린 다거나 무슨 디버깅 하기 어렵다는 부부에
컴파일 드리니 함수가 돌아버리는 어디에 브레이크 포인터 그래서 디버깅을
거에요
그러나 이것은 아니거든 실제 함수 기 때문에 브레이크 포인트를 갈 수가
있죠
실행 중에 다른 감도 넣어 보면서 디버깅 가능하고
그래서 함수처럼 진짜 암수 처럼 돌 곡 단 컴파일 도중에 최종 마지막
최종 값을 만들어 질 수 있는 함수를 이제 만들 수가 있게 될 거예요
그래서 이걸 하는 순간 템플릿 프로그래밍 악용하고 나면 마켓 떤 그런
코드 웬만한 거 많이 걷어 낼 수 있어요
골프 철 된거죠 근데 옷은 또 한가지 단점이 생길 수가 있죠
이 함수에서 어떤 이제 값을 면은
요 함수의 출연 결과값이 컴파일 도중에 결정이 될 수도 있고
실행중에 결정이 될 수도 있다고 그러면 저는 컴파일에 고 딴 당연히
컴파일 드린 결정 했다고 생각했는데 아닌 경우도 있잖아요 그럼 내가
생각했던 거랑 똑같은 걸로 안 나오잖아
짜증이 나죠 그래서 이런 것도 또한 방지할 수 있는 방법까지 같이
들어왔어요
그게 뭐냐 피보나치 함수 아까 컨 스틱스 패션이에요
요거 가 함수가 있어요 함수 호출 해요 그럼 반환값이 있죠
그 반환값을 그냥 인 트 an 오면은
두 가지 버전 나더라도 똑같이 돌아요 아까 말했듯이 컴파일 중에 결정에
대해서 am 5 최종 값을 48위 들어온 듯 아니면 실행중에 함수로
추어야 되던 어쨌든 결과는 a 에 들어와요
근데 이때 나는 이 컴 8 함수에서
함수가 컴파일 도중 abra 션 다해서 최적가 만주 개 강요를 하고 싶다
그러면 은 아까 인 트 a l 값을 집어 넣는 변수 앞에 컨 스틱
스프레이 션을 또 붙이면 요
이거는 컴파일 도중에 결과가 안 나오면 컴파일 에러가 에나 버려요 지금
무슨 얘기냐
커스티 익스프레션 인 트 a2 콜 뛰고 나치 모일 했어요
그런 컴파일 중에 다 컴파일이 되고 최종 값을 뽑을 수 있으니까 일이
반환 되면서
문제없이 이제
아 컴파일 되요 그러나 이게 디모 나치 하고 삐 를 넣었어요
어떤 변수를 그러면 이제 함수가 r 삐 가 어떤 값이 결정이 되지도
않았는데 이 함수를 돌려 하고 최저가 스포 할 수가 없잖아요
그러면 애가 그게 불가능하니까 얜 함수 호출 하게 따고 다 나와요 근데
함수 호출에서 결과가 나오는 것을 컨테스트 익스프레스 on 인 트 a 무
집어넣기 때문에 야 남은
니가 이게 컴파일 도중에 이 변수는 반드시 판단되어야 된다는데
이 함수의 체와 그렇게 했기 때문에 불가능해 그러면 이거 내가 할 수
없는 이 컴파일 에러가 나요 그래서 템플릿 메타 프로그램이 하면서 반드시
컴파일러에서 되게 하려고 했던 사람들은 앞에 커스티 익스프레스 만 눈은
되고 그게 아니라 그냥 아
요거는 실행중에 돌아도 괜찮은 건데 그냥 두 버전을 같이 한 함수에 루키
위해서 쓴거 라면은 인테 이만호 됩니다
그래서 그런 식으로 해서 음
이 템플릿 프로그램이 있음 단점을 다 걷어내고 새로 커스티 익스프레스
들어오므로 해서 나올 수 있는 단점까지 도 이제 보안을 1 꽤 괜찮은
훌륭한 그런 께 나왔어요
물론 커스티 익스프레션 처음 나왔을때부터 지금까지 역사를 보면 은
아 버그 있어 갖고 이것저것 좀 고쳤고 좀 문제있는 것도 고쳤고 아직
스펙이 좀 많이 바뀌고 있죠 그만큼 제 생각에는 컨 스틱스 패션을 제대로
이해하는 사람들이 없다는 보기도 해요
그 표준 위원회 도 이게 과연 뭐 하는 건지에 대한 합치가 없는 상황에서
이리저리 만들다가 문제발생 해서 고치고 고치고 이런게 아닐까 생각이
들고요
그래서 어떤 함수 멤버 함수를 뭐 커스티 익스프레션 으로 만들었다
그런데 이거는 뭐 컨 스틱스 푸셔 로 만들어진 멤버 함수를 매트도 줘
이거는 또 커스터드 이런식으로 일단 기본으로 되어 있다가 최근에 또
아니다 로 바뀌었고
여러가지가 많아요 그래서 커스티 익스프레션 컨셉트는 반드시 같이 가지는
않아요 다른건데
딱 컨 스틱 스프레이 션이 컨트롤 보장 할 땐 언제나 면은 변수에 붙을
때 왜 커스티 익스프레션 인 트 이 하고 이제 실행중에 떠서 데이 까지
했다면 이것은 창수 라는 거죠 그래서
음 고거 하나 빼고는 컨 스틱 스프레이 션이 반드시 컨테스트 인 경우는
최신 스펙에서 넘는 것 같고
옛날 한 중간 수 110 일인지 14 의 편지 한 번 있었던 것도 10
일이었던 것 같애
이것은 또 어느 버저 스펙 쓰더라도 왔다 갔다는 약간 좀 애매한 거
그러나 제가 말씀드렸듯이 업계에서도 학계에서 정확히 계모 달하는 모든
동의를 못 내리고 있고 제가 지금 이에 커스티 익스프레션 e 제 스펙이
바뀌어 가는 과정 그리고 정말 과거의 어떤 코드들을 컨 스틱 스페셜 로
바꾸고 있는지를 볼 때는 템플릿 메타 프로그래밍 남용하는 것을 막기
위해서 제대로 들어온 게 커스티 익스프레션 이다 라고 저는 정의할 수
밖에 없어요
원 저자의 목적은 그게 아닐수도 있지만 어쨌든 간에 모든 것은 어떻게
쓰인 야 다하는 거기 때문에
커스티 익스프레션 그렇게 이해하면 은 훨씬 깔끔해요
밤에 편히 잠을 잘수가 있어요 이거 해답 나오기 전까지 줘 잠도 못잤어요
어쨌든 뭐 그렇다 그래서 이렇게 말씀을 드리면
아
찌 플러스 플러스 10 x 11
요거 아니에요 씹 x 라고 해서 고거 에서 이제 커스티 익스프레션 에
관련된 내용은 요정도로 제가 마무리를 지을 수 있을것 같고
혹시라도 이제 다음에 또 c 플러스 플러스 이제 신 스팩에 대해서 새로운
스펙에 대해서 괜찮은 것들이 조금씩 또 보이기 시작하면 설명해드릴게요
근데 스펙의 나오는거 다 쓰지 마세요 않아 80% 정도는 버려질 내용인것
같아요
어깨에서 매년 받았네요 그정도로 설명을 드리고
c 플러스 플러스 얘기 많이 듣다보면 뭐 쓰지마라 써라 이런 얘기 많죠
그거 확실히 알고 싶은 분들은 제 동영상 강의를 보시면 됩니다
보프 였읍니다
