여행에서 폭포입니다 음
오늘 할 얘기는 어제 보면 또 굉장히 오래된 그런 싸움을 다시 만드는 것
같기도 한데
그래픽 쪽에서는 그런게 아니라 있었어요 오픈 gl 진영과 디렉 텍스 였지
진형이 라고 해라
그래서 뭐 왼손잡이 오른손잡이 시스템 근거에 대한 말도 맞고 그 외에
이제 해결하고 팩터를 곱할 때 행렬을 먼저고 파냐 벡터를 행렬을 뭐 앞에
되냐 벡터를 뒤에서야 이런 얘기도 있었고 상당의 얘기가 많았어요
근데 참 재미있는게 일단 저는 개인적으로 제 입장을 밝힌다면
저는 왼손은 주 의 레프트 & 콜드 시스템을 좋아하고요
그녀는 쪽이 더 말씀드릴께요 그리고
행렬도 벡터를 먼저 놓고 해놓은거 좋아요 뭐 그건 어쩌면 d 아텍스 밖은
한 마디에 텍스 의 기본 동작을
뭐 좋아 한다고 봐야겠죠 제가 eu 가 된게 뭐 사람들이 뭐가 기억해서
먼저 만들어서 그런게 아니라고 말할 수 있는데
그래서 높은 지를 먼저 빠졌거든요 근데 뭐 아 뭐라 그럴까
어찌보면 오픈 gl 의 시작 자체가 뭐 수학자들이 쓰는걸 수학의 있던
그런 뭐 기본적인 5 테이션 이까 표기법을 그대로 옮겨 나갔고 수학적으로
맞는게
오픈 주 의 라고 하잖아요 그래서 뭐 그게 뭐 틀린 것 같지는 않네
저는 문제는 제가 보다 그 때 수학을 어떻게 행렬이 먼저고 팬지 벡터를
먼저고 받는 지를 모르겠어요
그래서 그거 때문에 뭐 품질 되니까 또 뭐 그런 말을 엉뚱한 할 수도
있어요 모이게
오픈 소스 고품질 일이니까 뭐 이게 올바른 거고
디오텍 쓴 올바른 게 아니다 이건 마이크로소프트 더 많은 것 망가트린
거다 이런 얘기를 하는데 그건 솔직히 말 자들은 개소리 인것 같고
솔직히 디렉트 자체가 마이크로소프트가 만든 게 아니거든요
원래 따라 회사가 만드는 걸 마이크 속도가 3가지 고품질 을 한때 음악
소프트웨어 품질을 한참 열심히 도 왔어요
그때 처음에 윈도우 스 나올 또 분지를 집어넣었고 어떻게 하려고
그러다가 이제 서 올랐죠
오픈 gl 이 제가 예전에 좀 여러가지 말을 한거 같은데 원래 디자인
자체가 이렇게 뭐 하드웨어 가속을 위해 만들었다고 보다는 좀
클라이언트에서 주로 콜드 워 커맨드 만나면 서버에 전혀 주고 서버 가
그려진 되는 결과를 내 받아준 결과를 받아오는 그런 예전 치 스템의 기반
이었고
하드웨어 3d 하드웨어 가 나오기 전에 열심히 만들던 거기도 하기 때문에
그 하드웨어의 정말 올바른 그런 모 메모리 아키텍처 라던가 이런걸 저런
생각을 안하고 만드는 거였어요 그렇기 때문에 한계가 굉장히 있거든요
뭐 그렇게 되면 지문 익스텐션 만들고 또 빠르게 만드는 것도 있지만
오픈 주 의 른 a 피해 상으로는 굉장히 구리 내 2패 중에 하나에요 그
이유가 실수 할 경우가 너무 많아요
그리고 최적화를 하기 도 굉장히 어려운 것도 많았고
마이크 습득 어느 순간 않았어요 그래서 오픈 죄를
서울 높고 dx 를 샀고 넘어간 거죠
근데 재밌는게 마이크 소프트 오픈 죄로 만들때 고분 죄를 발전이 굉장히
많았어요 마이크로소프트 자 이거 편지를 써야 될 이유가 있었고 만큼 말이
컨츄리 시작했고 게 끝났죠 그대로 오픈 죄를 은 상당히 오랫동안 천천히
퇴보 가 되기 시작을 했어요
그러다가 애플이 라던가 모바일 쪽에 또 자기 자체의 그래픽 ap 가
없으니까
그걸로 품질을 썼고 그렇죠 그래서 포팅 하기 시작하며 또 엄청나게 컨셉이
좀 했거든요
또 bj 또 계속 엄청 내 발전 했어요 느낌의 시스템 쪽이나 이런데서
근데 애플이 솜을 낫죠 똑같은 이유로 애플이 멘탈이 라는 걸 맞는 메탈
메탈 인가 벤타 링가 맨틀은 amd 고
메탈 인가봐요 메탈 년 apl 만든 유도 똑같은 얘기에요
사실은 10시 오픈 컨셉으로 열심히 만들지만 결과적으론 오픈 스펙에서
오는 한계가 있었던 것 같아요 그리고 깨 거다 컴퓨터 빌릿 이라던가 그런
최적화의 문제도 같이 있었고 그래서 정말 성능을 느끼게 자기가 직접
하드를 아니까
자기는 자기를 하이파 등을 만드니까 그 하드웨어 의 곧바로 맞는 곧바로
얘기할 수 있는 굉장히 얇은 레이어의 그래픽의 폐를 만들게 돼서 나온게
메탈이 에요
싸 앞으로 분중에 미래는 저는 조금
아무 할 거라고 봐요 제 풀에 엔지니어가 그만큼 하던걸 즉 얘기 안 할
거니까
구글 구글이 아직은 하겠지만 어느 순간 구워도 손대고 자기네 이렇게 만들
수도 있죠
그래서 그런 모 씨의 있었기 때문에
오픈 주일은 어찌 보면은
뭐 제가 저번 c 언어 얘기할 때도 반역이 같긴 한데 어떤 한 사람의
비전을 가지고 잘만들었다 기보다는
오픈이 까 뭐 처음에는 누군가 만들었어요 또 이렇게 있어주면 나 이렇게
없다 나 걔 내가 만들었다가 오픈 소스로 뽑기 시작하면서 굉장히 많은
사람들의 철학이 들어가면서 오히려 여러가지 복잡해지고 그리고 그 또 철학
중에 하나가 백워드 컴퓨트 led 를 지원하게 되기 때문에 그 옛날에
정말 하드웨어 에 도움 없이 대충 소프트웨어를 그리고 느렸던 그것들을
여행 ap 를 안기는 것도 문제고
그래서 결과적으로 넥스트 앤 드라이 텐트로 돌아 오면 은 내정자도 어디냐
비전 왼손잡이가 저한테 좋은 이유는 단 한가지 예요
뭐 뭐 수학적으로 뭐가 옳고 이런건 없어요 둘 다 옳은 방법이에요
그게 뭐 품질을 하는 사람들 중에 가끔 수학적으로 오른손잡이가 발달한
옮기는 사람도 있는데
수학 책에서 왼손잡이 쓰는데 책도 있고 오른쪽에 쓰는 집도 있어요
그리고 무슨 뭐라 그러더라
5 뭐 xy ge 고까지 구두만 말한 사람들이 많아요 뭐 뭐 이렇게 되면
뭐가 뭐고 저건 뭐 다 소음 예고
어제 수학적으로 말하면 x y z 라는 개념이 옷 자체가 사실은 없는게
마세요 그냥 편하기 위해 쓰는 거지 뭐 그냥 개념 캐내 개념의 선
왼쪽을 향하는 벡터 위를 향하는 벡터 앞을 향하는 벡터 이렇게 하는게
정상적인 로테이션 이지 뭐 그 하고 xy 쓰이고 뭐 이렇게 메시지가 뒤
슈퍼 치고 막 이런 얘기 있잖아요 그건 수지 다음 협력 이고요
아마 이거는 뜰에 d 엔진 디자인 쓰신 분이 아마 그렇게 살았을 거야 제
실제 수학에서는 그런건 다음이 없는 언제고 왼쪽 위쪽 앞쪽이 후면 이게
좀 이게 오히려 6
유일하게 유노 1 논쟁 이라고
무슨 자리가 좋은 이유 전 딱 한가지 에요
오른쪽 위쪽 감이 오죠 저는 화면을 바로 잖아요 그럼 저는 삼은 안 쪽을
바라보고 이 때문에 제가 바라보는 쪽이 양의 수가 되길 바라는 것
뿐이에요
제가 이쪽을 바라 보니까 화살표 대 1로 가야된다 저는 그 정부의 왼쪽
왜냐면 제가 생각하기에 편해요
근데 오른손잡이가 가면은 그 좌표를 그릴 때 뭐 왼쪽 좌표 위쪽 좌표
그리고 뒤쪽 차표를 모르잖아요 뭐 앞쪽 자 프로그램의 그다지 뒤집어야 줘
그러면 뭐 이걸 x y 씨의 맵핑을 하면 x 가 오른쪽을 향하고 y 가
길을 향하고 지가 화면에서 절을 해야 하게 되거든요
저는 그래서 상식적으로 튀어 는 게 이 이 맘에 안들어요 제가 바라보는
방향이 그냥 숫자가 증가하는 방향을 편하겠다 싶어서 그의 전부였어요
그리고 두번째 행렬이 먼저냐 벡터가 먼저냐
이거는 뭐 일단 오픈 gl 에서는 메모리에 이 행렬에 저장되는 부족으로
상권이 있거든요
4 추 조카인 걸음마 따지면 오픈 죄를 일단 일반적으로 분이 자체 ap
에서 제공하는 것은 행위를 먼저 그리고 그 다음에 벡터 에요 그래서
행렬의 가 첫 번째 무너져 팬이 적에 해 나고 벡 타고 파고 두번째 하고
벡터 곱하고 세번째가 고백 타고 파 줘 이게 굉장히
상식적으로 말이 돼야 되는 거거든요 오픈 줄에서 그러면 메모리상에 행렬을
1행 2행 사행 대응을 그냥 메모리 하나의 그냥 뭐랄까 순차적으로 저장을
하면 은 굉장히 메모리 접근이 빨라요 근데 제가 예전에 한번 오픈 gl
스펙을 읽어 봤을 때 이게 아직도 그런지 모르겠네요 전에 읽어 봤을 때는
이게 이렇게 한 행이
그 어른의 1234 저장되는 게 아니라 열을 주장을 해요 열을 이렇게
이렇게 이렇게 이렇게 저장하고 그 다음에 이렇게 6 비록 이렇게 져야
하기 때문에 이렇게 이렇게 곱하기 시작하며 는 속도가 굉장히 너희가
없어져요 메모리 접근이 굉장히 이상해 져요 클릭해 이해가 안되는 그래서
그걸 보고서 아
오픈 gl 흐른 등 안되겠구나 그 함수는 차이 내가 만들어서 했고 생각이
들 정도로 좀 어이가 없었어요 보면서
근데 뭐 제 에프엑스의 가더라도 문제는 뭐 비쌀 수 밖에 없죠 사실
기억될 수도 지울 때 쓰는 제가 볼 때는 이렇게 이렇게 저장을 하는 것
같은데
그것이 잘하겠지 아닐 수 있나
왜 지역 3 이렇게 제한해 11조 제대로 써본적이 아프고 모르겠네요
4 1 x 는 그 반대 없애는 고파도 써서 벡터가 앞에 오고 행렬이 그
다음에 이 때문에 벡터의 첫 벡터 너 하나밖에 없지
벡터와 각 행렬에 열을 고파 줘 그럼 메모에서 10 열로 박아 죽인
안건데 낳을 건데 제가
뒤 start x 매치 x 가 어떻게 구해서 될지 몰라요
본 책이 없어요 근데 잘해도 자랐을까 이 생각만 하는데 전원의 매트릭스
를 만들어 썼거든요 부터 게임 쪽에 있을 때
그래서 아 만약에 이렇게 고 파는거 면은 10 순으로 저장을 해서 곱할
때 곧바로 그 물론 4개를 곱하면 되게
그렇게 왜 이제 벡터 프로세서의 돌릴 수도 있고
4 이것도 떠나서 다 떠나서 제가 그 벡터가 먼저 오는 걸 좋아하는
이유가
그건 것 같아요 그 뭐라 그러지
연산자 순위에 연 혼자 곱하는 순서를 볼 때
그 오픈 gl 에서 이제 벡터 오른쪽에 나오는 거 보면은 행렬이 1 2
3 개 있고 벡터가 있으면
뒤에 붙어 앞으로 바가지 오른쪽에서 왼쪽으로 제일 끝에 나온 행렬을
곱하기 벡터
그 다음에 그 앞엔 행여 곱하기 아까 그 결과 벡터
이런식으로 오픈 에어 근데 그 반대로 아
dr 텍스 방식을 쓰면 벡터 행렬 순서로 나오는거 그럼 벡터 처음 나온거
에다 행렬을 못해요
그리고 그 왼쪽에 부터 시작하는 거죠 그 다음에 오른쪽엔 행렬을 또다시
급해요
그리고 오른쪽에 있는 힘을 또다시 보패 요 채 개념의 30
뭐 제가 수업 책에서 어떻게 되는지 모르겠는데 왼쪽에서 오른쪽으로 곱한다
라는 개념 자체가
저는 굉장히 뭐라 그럴까
저한테는 익숙한 것 같아요 그냥 뭔가 산수유 했어도 그랬고 온갖 수확을
했을 때 그랬고 언제나 왼쪽에서 오른쪽 했거든요 프로그램에서 언제나
그랬던 것 같고 로 프로그래밍에서 씨 같은 경우에서 보통 연산자 우선순위
보면 왼쪽으로 쪽파 잖아요
그때 전 당연히 게 논리 줘 논리적 30.3 시적 이적을 오히려
상식적으로 편하고 말이 된다고 생각을 해요 두 가지 다른 방식을 기억하지
않아도 되니까
근데 고품질의 방식을 하려고 그러면
이렇게 뒤에서 앞으로 가능하기 때문에 굉장히 복잡해 져요
그래서 그런 뭐 생각보다 굉장히 복잡하다 고 안 할 수도 있겠지만 그
어차피 똑같은 곱셈 인데
1 왼쪽에서 못주고 파고 따른 5.5 왼쪽 버는 게임 자체가 전시를
뭐예요 그의 통일되게 한쪽을 하면 좋겠어요 실수를 할 여지도 적어질 것
같고 그래서 저는 개인적으로는
지역 tx 방식으로 상당히 좋아하는 거에요 왜 손잡이 하고 그리고 이제
뭐 10 못 행 야베 토드 다해 나오는거
근데 제가
스페이스마린 그 코드를 4년을 작업 했는데 그때 저희
재미있던 사람 그 사람이 그 반대방향 넘 수가 있어
그래서
거기에 든 작은데 그려 같아요 전하면서 빵을 안들었는데
저는 그래서 이 다른건 뭐 있는데 묻히고 있는 코드 바꿀 수 없어요
그렇게 쓰게 했어요 4 5년 동안
근데 여전히 그렇게 그 때 사온 썼으면 최근에 가장 오래 쓴 보이긴 한데
요즘 임하면 2
그러면 아내가 다른 음식을 좋아하는 하는구나 그 생각이 들었고
그리고 그 회사의 이제 그 사람은 그 회사의 만 되게 오래 있던 사람이다
란 회사를 없었던 나라 따라 회사에서는 그렇게 쓰는거 먹었어요 조직의
게임 쪽에서는 언제나 제가 다녔던 큰 회사 잡으려다 할 것이다
디렉 텍스 방식을 했거든요 나중에 저희가 회사가 커지면 사람들을
받아들이기 시작할 때 사람들이 다들 왜 방향으로 반대로 쓰냐고 다른
반값인 편한데
그런 얘기 들으면서 음 내가 나 혼자 이런 맞게 바꾼 학생 가 있었죠
그때 또 하나 있던 문제중에 하나가 또 뭐냐면 아까 뭐 왼쪽 오른쪽 미백
테런 얘기할 때 있잖아요 그
보내서 컴퓨터 쪽에서는 그니까 뭐 xy 를 평면으로 두고 그 2차원 번만
바닥으로 두고 뒤를 위로 올리는 경우가 있긴 하죠 그게 이제 3ds
max 에서 그렇잖아요
마야 같은거는 그 반대로 xy 가위 고씨가 화면 안쪽으로 가고
근데 거기는 또 맥스 할 수 없기 때문에 당연히 지를 의뢰하고 쓰더라구요
근데 제가 여태까지 다녀본 회사 중에 지를 위로하는 회사는 거의 이랬던
거 같아요
그냥 끝내 이제 그렇게 하면 이제 인발 먼트 아티스트를 그렇게 앞 쓰고
캐릭터 쓰고 이렇게 쓰는데 그 이펙터 아티스트리 좋으면 걔들이 y 가위
갭 위가 되길 또 바라고
되게 재밌는 상황이 있었어요 근데 이거는 뭐 아까 얘기했듯이 결과적으로는
한 팩 년아 만들어서 그냥 고칠 수 있는 문제인데
오히려 게임 에서는 그냥 y 를 위로하고 질 앞으로 했었으나 훨씬 편하게
딴 생각은 언제나 들더라구요 왜냐하면 모아 툴이 어떻게 되던 간에
그냥 실제 게임 쪽으로 넘어오면 은 코드에서 만 어떻게 이 하면 되는
거니까 그 생각 했는데 먹은 저는 딴소리 고
오늘 보니 게다 10가지 어찌 아 모르겠다 모르겠다 모르겠다
그 왼손잡이 오른손잡이 하고 뭐 어느 뭐 행렬을 모파 되는 그 행렬과
벡터 의 곱셈 숨 4 이런 것들
뭐 본인한테 맞는 걸 쓰면 되는데요 그냥 개인적으로 저는 제가 제 방식이
훨씬 낫다 고 말씀드리고 싶어요 그냥
뭐랄까 편해요 생각합니다
제 굳이 암기를 안 해도 어느 순간 해도 아 이런 거지 라고 생각할 수가
있어요 괜히 뭐 예외 상황 이런걸 생각을 하게 돼 편한거
저는 그냥 게을러서 그런거 같아요 그 그렇다고 그 정도로 마무리 하
좋아요
포프 였읍니다
