예 안녕하세요 포프입니다
오늘 할 얘기 는
어찌보면 또 굉장히 오래된 싸움을
다시 만드는 것 같기도 한데
그래픽쪽에서는 그런게 언제나 있었어요
opengl 진영과 directx진영이라고 해야되나?
그래서뭐... 왼손잡이 오른손잡이 시스템
그런거에 대한 말도 많았고
그 외에 이제 행렬하고 벡터를 곱할 때
행렬을 먼저곱하냐 벡터를
행렬을 앞에두냐 벡터를 뒤에두냐
이런 얘기도 있었고
참 재밋는게
일단 저는 개인적으로 제 입장을 밝힌다면
저는 왼손주의
left handed coordinate system을 좋아하고
그 이유는 쫌 있다 말씀드릴게요
그리고 행렬도 벡터를 먼저놓고 행렬 놓는거 좋아해요
한마디로 directx 기본 동작을
좋아한다고 봐야겠죠
제가 이 이유가 된게
사람들이 너가 directx를
먼저 만져서 그런거 아니냐 말할 수 있는데
전 사실 opengl을 먼저 만졌거든요
근데 뭐... 뭐라그럴까
어찌보면 opengl의 시작 자체가
수학자들이 쓰는걸, 수학에 있는 기본적인 notation
그니까 표기법을 그대로 옮겨나가고
수학적으로 만든게
opengl 이라고 하잖아요
그래서 그게 뭐
틀린 것 같지는 않은데
저는 문제는 제가
고등학교때 수학을 어떻게
행렬을 먼저 곱했는지
벡터를 먼저 곱했는지 모르겠어요
그래서 그거때문에 뭐 opengl이니까 또 뭐
그런 말을 엉뚱한 말을 하는 사람들이 있어요
오픈소스고 opengl이니까
이게 올바른거고
directx는 올바른게 아니다
이건 마이크로소프트가 망가트린거다
이런얘기 하는데
그건 솔직히 말도 안되는 개소리인 것 같고
솔직히 directx 자체가 ms가 만든게 아니거든요
원래 다른회사가 만든걸
ms가 산거죠
opengl을...
한때 ms가 opengl을 한참 열심히 도왔어요
그때 처음에 windows 나올때
opengl을 집어넣어서 어떻게 하려고
그러다가 이제 손을 놨죠
아 opengl이 제가 예전에 좀
여러가지 말을 한 것 같은데
원래 디자인 자체가
하드웨어 가속을 위해 만들었다기 보다는
클라이언트에서
draw call, draw command 만든다음에   
   (맞나...?)
서버에 던져주고
서버가 그려준 다음
결과를 받아오는
그런 예전 시스템의 기반이였고
3d 하드웨어가 나오기 전에
열심히 만들던 거기도 하기때문에
그 하드웨어에 올바른
메모리 architecture라던가
이런건 전혀 생각 안하고 만든거였어요
그렇기때문에 한계가 있거든요
그렇기때문에 extension 만드는것도
빠르게 만드는 것도 있지만
opengl은 api 상으로는 굉장히 구린 api 중에 하나에요
그 이유가 실수를 할 경우가 너무 많아요
그리고 최적화를 하기도
굉장히 어려운 것들이 많았고
ms가 그걸 어느 순간 알았어요
그래서 opengl을 손을 놓고
directx를 사서 넘어간거죠
근데 재미있는게
ms가 opengl을 만질 때
opengl에 발전이 굉장히 많았어요
ms도 자기가 opengl을 써야 될 이유가 있었고
그만큼 contribution을 했고
그게 끝났죠
그뒤로 opengl은 상당히 오랫동안
천천히 퇴보가 되기 시작했어요
그러다가 apple이라던가 모바일쪽에서
자기 자체 그래픽 api가 없으니까
그걸 opengl을 써왔고
서포팅하기 시작하면서
엄청나게 contribution 했거든요
opengl이 또 엄창나게 발전을 했어요
특히 임베디드 시스템이나 이쪽에서
근데 애플이 손을 놨죠, 똑같은 이유로
애플이 맨탈이라는걸 메탈??
메탈인가? 맨탈인가?
mantle은 amd고
메탈인가봐요
mental이라는 api를 만든 이유도
똑같은 이유에요 사실은
열심히 opengl contribution을 열심히 만들지만
결과적으론 open스펙에서 오는
한계가 있었던 것 같아요
그리고backward compatibility라던가
그런 최적화의 문제도 여러가지 있었고
그래서 성능을 높이기 위해 자기가 직접
하드웨어를 아니까
자기가 하드웨어를 만드니까
그 하드웨어에 곧바로 만든
곧바로 얘기할 수 있는 굉장히 얇은 layer의
그래픽 api를 만들겠다 해서 나온게 metal이에요
그래서 앞으로 opengl의 미래는
저는 조금 암울할거라고 봐요
애플의 엔지니어들이 하던걸
이제 걔네들이 안할꺼니까
구글이야 지금 하겠지만
어느순간 구글도 손 떼고
자기네 api 만들수도 있죠
그래서 그런게 있었기 때문에
opengl은 어찌보면
제가 저번에 c언어 얘기할때도
한 얘기 같긴 한데
어떤 한 사람이 비전을 가지고 잘 만들었다기보다는
처음엔 누군가 만들었었죠
이름이 ???였나 이름 기억도 안나
걔네가 만들었다가 오픈소스로 뽑기 시작하면서
굉장히 많은 사람들의 철학이 들어가면서
오히려 여러가지 복잡해지고
그리고 또 철학중에 하나가
backward compatibility를 지원하기 때문에
옛날에 하드웨어의 도움 없이
대충 소프트웨어를 그리고 느렸던 그것들을
여전히 api로 남긴다는것도 문제고
그래서 결과적으로 left hand, right hand로 돌아 오면
저한테 왼손잡이가 좋은 이유는 딱 한가지에요
수학적으로 뭐가 옳고 그런건 없어요
둘 다 옳은 방법이에요
그게 opengl을 하는 사람들중에
가끔 수학적으로 오른손잡이가  맞다고
우기는 사람들 있는데
수학책에선 왼손잡이 쓰는 책도 있고
오른손잡이 쓰는 책도 있어요
그리고.... 무슨.... 뭐라그러더라??
xyz 이거 가지고도 말하는사람 많아요
뭐 이렇게되면 뭐가 뭐고...
다 소용없는 얘기고
어짜피 수학적으로 말하면
xyz라는 개념 자체가 사실은 없는게 맞아요
그냥 편하기 위해 쓰는거지
걔네 개념에선
외쪽을 향하는 벡터, 위를 향하는 벡터
앞을 향하는 벡터
이렇게 하는게 정상적인 notation이지,
뭐 그거 갖고 xyz고,  뭐  이렇게 하면 xyz가 뒤집어지고 이런얘기 있잖아요?
그건 솔직히 다 의미없는 얘기고요
아마 이거는 3d엔진 디자인 쓰신분이 아마
그렇게 써놨을거에요 책에
실제 수학에서는
그런건 다 의미없는 논제이고
왼쪽 위쪽 앞쪽 이게 유일하게 유효한 논쟁이고
왼손잡이가 좋은 이유, 딱 한가지에요
오른쪽 위쪽, 감이 오죠?
저는 화면을 바라보잖아요??
그럼 저는 화면 안쪽을 바라보기때문에
제가 바라보는쪽이 양의 수가 되기를 바라는거 뿐이에요
제가 이쪽을 바라보니까
화살표도 이쪽으로 가야된다
저는 그게 전부에요. 왼쪽
왜냐면 제가 생각하기 편해요
근데 오른손잡이로 가면
좌표를 그릴 때
왼쪽좌표 위쪽좌표 그리고 뒤쪽좌표를 그리잖아요
뭐 앞쪽좌표를 그리면 나중에 뒤집어야죠
그러면 이걸 xyz에 맵핑을 하면
x가 오른쪽을 향하고y가 위를향하고
z가 화면에서 저를 향하게 되거든요?
근데 저는 상식적으로 이게 맘에 안들어요
제가 바라보는 방향이
그냥 숫자가 증가하는 방향이면
편하겠다 싶어서 그게 전부였어요
그리고 두번째
행렬이 먼저냐 벡터가 먼저냐
이거는 뭐 일단 opengl에서는
메모리에 이 행렬이 저장되는 구조와도
상관이 있거든요
근데 최적화만 따지면
opengl은 일반적으로 행렬먼저, 그다음에 벡터에요
그래서 행렬의 첫번째 행하고 벡터하고 곱하고
두번째 행하고 벡터하고 곱하고
세번째 행하고 벡터하고 곱하죠
이게 굉장히 상식적으로 말이 되야되는거거든요
opengl에서
그러면 메모리상에 행렬을
한행 두행 세행 네행을
그냥 메모리 하나에 순차적으로 저장하면
굉장히 메모리 접근이 빨라요
근데 제가 예전에 한번
opengl스팩을 읽어봤을 때
이게 아직도 그런지 모르겠는데 예전에 읽어봤을때는
이게 한 행이 그냥 array에 1234 저장되는게 아니라
열을 저장해요
열을 . . . 이렇게 저장하고
그다음에 ...이렇게 저장하기 때문에
이렇게(< ^) 곱하기 시작하면 속도가 굉장히 어이가 없어져요
메모리 접근이 굉장히 이상해져요
로컬리티 이해가 안되는데
그래서 그걸 보고서
아~! opengl행렬은 쓰면 안되겠구나
그 함수는 차라리 내가 만들어 써야겠구나
생각이 들정도로 어이가 없었어요
근데 뭐 directx에 가더라도
문제는 비슷할수밖에 없죠
사실 directx는 ..이렇게 저장을 하는 것 같은데
그렇게 저장을 하겠지?
아닐수도있나?
제가 directx 행렬 함수를
제대로 써본적이 없어서 모르겠네요
근데 directx는 그 반대에요 어쨌든간
곱하는 순서대로 벡터가 앞에오고
행렬이 그 다음에 오기때문에
벡터와 각 행렬의 열을 곱하죠
그럼 메모리에서 열로 박아두는게 나은걸탠데
제가 directx 메트릭스가 어떻게 구현되어있는지 몰라요 ㅎㅎ
본적이 없어요 ㅎㅎㅎㅎㅎ
근데 잘해놓지 않았을까? 이생각만 하는데
저는 메트릭스를 보통 만들어 썼거든요
게임쪽에 있을 때
그래서 ...이렇게 곱하는거면
열순으로 저장을 해서 곱할때
곧바로 float 네개를 곱하면 되게
그렇게하면 벡터 프로세서에 돌릴수도 있고
근데 이거 다 떠나서
제가 벡터가 먼저오는걸 좋아하는 이유가
연산자 곱하는 순서를 볼 때
opengl에서 벡터 오른쪽에 나오는걸 보면
행렬이 하나 둘 세개있고 벡터가 있으면
뒤에부터 앞으로, 아니 왼쪽에서 오른쪽으로
제일 끝에 나온 행렬 곱하기 벡터
그다음에 그 앞에 있는 행렬 곱하기
아까 그 결과 벡터
이런식으로 연산(Operation)을 해요
근데 그 반대로
directx를 쓰면 벡터 행렬 순서로 나오는거
그럼 벡터 처음 나온거에다 행렬을 곱해요
그리고 왼쪽에서부터 시작하는거죠
그리고 오른쪽에있는 행렬을 또다시 곱해요
그리고 오른쪽에 있는 행렬을 또다시 곱해요
제 개념에서는
수학책에서 어떻게 배우는지 모르겠는데
왼쪽에서 오른쪽으로 곱한다는 개념 자체가
저는 굉장히
저한테는 익숙한 것 같아요
그냥 온갖 산술로 했어도 그랬고
온갖 수학을 했어도 그랬고
언제나 저는 왼쪽에서 오른쪽으로 곱했거든요
프로그래밍에서도 언제나 그랬던 것 같고
프로그래밍에서 c같은 경우에서 보통
연산자 우선순위 보면
왼쪽에서 오른쪽으로 곱하잖아요
그렇기때문에 저는 당연히 이게
상식적으로 편하고 말이 된다고 생각을 해요
두가지 다른 방식을 기억하지 않아도 되니까
근데 opengl방식을 하려그러면
이게 뒤에서 앞으로 가는거기때문에
굉장히 복잡해져요
생각보다 복잡하지 않다고 말할 수도 있겠지만
어짜피 같은 곱셉인데
하나는 왼쪽에서 오른쪽으로 곱하고
하나는 오른쪽에서 왼쪽으로 곱한다는
이런 개념 자체가 싫은거에요
그냥 통일되게 한쪽으로 했으면 좋겠어요
실수할 여지도 적어질것 같고
그러서 저는 개인적으로는
directx방식을 상당히 좋아하는거에요
왼손잡이하고 벡터먼저나오고 행렬나오는거
근데 제가 스페이스마린 코드를 4년 작업했는데
그때 제 위에있던 사람이
그 반대방향을 너무 좋아했어요
거기서는 맨날 그래 왔대요
저는 하면서 맘에는 안들었는데
다른 방법이 나은데
멀쩡히 있는 코드를 바꿀 순 없으니까
그렇게 쓰긴 했어요 4,5년동안
근데 여전히 맘에 안들어요
아 내가 다른방식을 좋아하긴 하는구나 생각이 들었고
그리고 그사람은 그 회사에만 되게 오래있던 사람이에요
다른회사에서는 그렇게쓰는거 못봤어요
게임쪽에서는 언제나
제가 다녔던 큰회사 작은회사 할거없이
다 directx방식으로 했거든요
나중에 저희가 회사가 커지면
사람들을 받아들이기 시작할 때
사람들이 왜 방향을 반대로 쓰냐고
다른 방향이 훨씬 편한데
그런얘기 들으면서
나혼자 그런건 아니였구나 그생각을 했었죠
그리고 그때 또하나 있던 문제중에 하나가 뭐였냐면
아까 왼쪽 오른쪽 위벡터 이런얘기 할때
모르겠어요 컴퓨터쪽에서는
xy를 2차원 평면 바닥으로 두고
z를 위로 올리는경우가 있긴 하죠
그게 3ds max에서 그러잖아요
마야같은경우에는 반대로
x, y가 위고 z가 화면 안쪽으로 가고
근데 거기는 또 max만 썼기 때문에
당연히 z를 위라고 쓰더라고요
근데 제가 다녀본 회사중에
z를 위로했던건 거의 유일한 것 같아요
근데 그렇게 하면 envirment 아티스트들은 그렇게 쓰고
character artist들도 그렇게 쓰는데
effect 아티스트들이 들어오면
y가 위가 되길 바라고
되게 재미있는 상황이 있었어요
이거는 아까 말했듯이 결과적으로
행렬하나 만들어서 고칠 수 있는 문제인데
오히려 게임에서는 y를 위로하고
z를 앞으로 했으면 편했겠다는 생각은 들더라고요
왜냐하면, 아트 툴이 어떻게 되던간에
실제 게임쪽으로 넘어오면
코드에서만 어떻게 이해하면 되는거니까
근데 그건 전혀 딴소리고
오늘 뭔얘기하다 여기까지왔지??
모르겠다....모르겠다 모르겠다
왼손잡이하고 오른손잡이하고
행렬과 벡터의 곱셈 순서 이런것들
본인한테 맞는걸 쓰면 되는데요
그냥 개인적으로 저는
제방식이 훨씬 낫다고 말씀드리고 싶어요
그냥 뭐라그럴까 편해요 생각하기가
제가 굳이 암기를 안해도
어느순간에도 이런거지 하고 생각할 수 있어요
괜히 예외상황을 생각 안하기때문에
편한 것 같아요
저는 그냥 게을러서 그런 것 같아요
그렇다고 그정도로 마무리 하죠
포프였습니다!
