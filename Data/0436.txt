예언의 서 포프 입니다 음 여전히 뽀 k 로 찾아가는 포프 tv 새로운
포프 tv 인데요
아 오늘은 새로운 방송을 하고 있으니 다시 예전에 많이 하던 얘기로
돌아가서
코딩 스탠다드 얘기 잠깐 더 할게요 오늘은 남 다 에 대해서 얘기를 할
거에요
이제 시프 퍼레이드 람다 가 들어왔고 c # 에도 람 나가 들어온 지 좀
되죠 그래서 사람들이 암자를 열심히 썼고 마구 썼고 개판을 적고 이런
문제들이 있었어요 그래서 이제 제 코딩 스탠다드 문서가
공개돼 있어요 영어로 되어 있지만 아마 프루프 컨셉이 버스티 나갈 때를
대비해서 이제 한거라 가 점점 진행이 될 거에요
g 샵 용이 있 꼭 싶을 뿐 룡이 있어요 그래서 두 가지가 있는데 그
코딩 스탠다드에 보면은 제가 람다 를
웬만하면 쓰지 말라고 해요 사실은 그럼 그 이유가 뭐냐
일단 실제 시작은 시프 부터 얘기할게요 싶어 의 람다 와 시샵 에 남다른
좀 다르게 봐야 되는 부분이 있어요
남자가 뭐냐 일단 가장 간단하게 얘기하면 은
함수 인데 함수를 따로 쓰지 않고 만들지 않고 그냥 코드 한줄의 함수를
써 같고 그 호출하는 방식을 본 맞아요
그러니까 예전같으면 은 함수 정리 해두고 그 함수를 펌 천 포인터로
전달해서 호출하고 내 짜 나요
4 그 과정을 따로 함수를 만들 필요가 없이 그냥 코드를 짜는 중간에
갑자기 괄호를 열고 아 이게 그 내 뻥 터 야
이러면서 그래서 깰 수 있는 방식 어찌보면 약간 자바스크립트에서 함수와
함수 가 함수를 연결해서 함수를 호출하고 함수를 매개 변수를 전달하는
이런 계란 방법들이 있잖아요 그거 악어 쪼금 비슷한 거라고 건 맞아요
근데 남 다가 장점이 있긴 있어요 특히 사람들이 많이 보는 장점 뭐냐면
한번 밖에 안 쓸 함수를
왜 굳이 함수로 만드냐 그래서 예전부터 제가 코딩 스타드 에서 했던 얘기
기도해요
어차피 함 술 한번 밖에 안 쓸거면 코드 안에 더라 부제 함수 만들지
말아라
근데 이거를 한 발짝 나가면 함수로 만들기 만드는데
그냥 그거를 남자로 만들어서 재활용은 없게 하고 그럼 코드를 그때 축제
읽을수 있다 2 이거든요
뭐 그런 장점이 있긴 있죠
그리고 아까 말했던 것처럼 펑션 포인터 같은건 전달해서 나중에 이제
실행이 곧바로 진행되는 게 아닐까 함수 홈쇼핑 포인터 전에 다중
호출하거나 이럴 때도 좀 유리한 면도 있고 제가 말했던 예전에 방식
그냥 함수를 그냥 코드 안에 집어 넣으라 원래 호출하는 코드 안에
그거는 뒤에 호출하는 방식을 못하니까 그래서 그런 남자의 장점도 있고
아 그리고
음 또는 설치의 뭐 할지 그 정도 마테오 사실 나면 장점은
4 람다 가 단점이 은근히 많아요
단점이 뭐가 낫냐 면 격에 남다를 사람들 얘기 할 때 이름 없는 함수
라고도 많이 불러요
왜냐하면 함수를 작성할 때부터 함수에는 이름을 적자 나염 수명을
내 남다를 작성하게 되면 코드 안에 코드가 들어간 그냥 방식이고
그리고 이제 무명 함수 이름을 내가 함수 이름은 모찌 하니까 그럼 예를
만약에 디버깅을 하고 할때가 오거나 애가 중간에 어디가 크래쉬가 나거나
해서 그 크래쉬 덤프 가 나오고 스택 그 덤프가 나올때
함수 이름이 나올 수가 없어요 그냥 남 다음 수다 주소는 여기 다
이런식으로 나와요 그럼 g 다 를 포함하고 있던 그 부모가 되는 함수
이름을 보고도 유출할 수 있지만 1 암 다가 여러개를 고추 라고 막
이러면 은 딱 콜 스택을 보는 것만으로 아 요기 해서 뻗기 났구나 라는걸
알 수가 없어요
그런 단점이 연아가 있고 그리고 또 이제 남 다 에 또 다른 이제 태그가
한두 가지가 더 이미 하나의 또 단점은
처음엔 제가 코드를 짤 때 당연히 일한다 함수가 다른데서 안 쓰인다 고
가정을 하고 코드를 짠 거에요 근데 하다 보니까 어느 순간 1 한달을
람다 함수를 따는 데 써야 될 일도 있어요
그러면 이 함수 이제 u 그 재활용 성이 생긴 거고 제 사용성이 생긴건데
이렇게 프로그래머 습관의 문제 일수도 있지만 아니면 이제 람 데 익숙하지
않아서 그럴 수도 있지만 그 코드를 훑어 가면서
i 이 함수가 이미 있구나 라는 걸 알기 가 되게 어려워요
특히 남이 짜는 함수의 경우에는 내가 함수 이름만 딱 보고 아 이 함수가
없네 라고 내고 또 추가를 하게 되는데 그게 아니라 모든 함수를
들어가면서 이런 기능이 없나를 살펴 봐야 되는 단점이 있게 되죠
그래서 그런 이제 그래서 가끔 남다를 쓰는 열심히 쓰는 코드 베이스의
보면 똑같은 일을 하는 코드가 중보기도 여기서 또 나오기 시작하네요
람다 라는 이름으로 그것도 찍으면 약간의 단점이 고
암
마지막 저쪽 내몰아 하려고 했지
말하자면 까먹고 썩은 넘어갈게요 그 되게 나머지는 단점은 되게 단순했던
것 같아요
아 그거였다 또 경 났어 나 왜 이럴까
툴 자체의 람다 디버깅을 할 수 있는 툴 자체가 아직 그렇게 뛰어나지
않다는 단점도 있어요
이건 어찌보면 툴이 이제 발전이 되면 고체 문제이기도 한데
옛날 같은 경우에는 이제
템플릿 싶을 뿔에서 템플릿 있어 갖고 함수를 짝이 시작을 하면 은 디버그
브레이크를 거는 순간 입 디버 개 시대를 해야되는데 옛날엔 잘 안되
썼거든요
그 다음에 툴이 좋아져서 거기에 찍어주면 디버깅이 되게 되죠
근데 내가 원했던 템플릿에 버전 하나가 아니라 그 템플릿에 쓰는 모든
함수 모든 코드 브레이킹 포인트를 걸었고 요즘은 그거를 내가 걸어온
다음에 1 2 빼앗고 정말 원하는 버전 원하는 타임용 그 템플릿 3세 만
브레이크 포인트 것으로 많이 좋아졌어요
템플릿 프로그래밍은 이제 1
제가 올 때는 거의 10년 넘게 지나서야 드디어 디버깅이 편해진 고 남
다도 그 위치를 갈 거라고 생각을 해요
마지막 문제는 좀 해결될 문제지만 여전히 처음 두 가지 문제가 남아
있어요
일단 제어 활용성이 보장할수 있는 방법이자 없다
가끔 계속 중복된 코드가 나올 수밖에 없다
그리고 두번째는 디버깅을 하더라도 그런 콜 스택 이름 때문에 기복이 눈에
한번에 확 들어오지 않는다
그러면 이제 그 다음에 이제 코딩 스레드가 나올 수밖에 없는 거에요
그래서 저도 그렇고 이제 제가 예전에 일하던 좀 큰 회사 게임 데이트
게임 이제 코드 베이스의 코딩 스타도 그랬어요
남다를
최대 쓰지 마라 단 써 에 대해 할 때는 썼어도 될 때는 정말 미가
분명히 이건 딱 한번만 쓰인다는 보장이 있을 때 그리고 코드가
정말 단순 할 때 그 예를 개 춤 들면 은 쏠트 함수 같은거에 보면은
보통 쏠 특히 가 있고 그 키에서 이제 어떤 이제 뭐 규칙대로 정렬을 할
거 내가 있어요 그러면 솔트 키가 많이 인테 저처럼 비교가 가능할 거라
면은
뭐 샌딩 솔트 할 때는 작은 숫자 부터 큰 숫자로
d 샌딩 솔 틀어 갈 때는 작은 큰 수첩 작은 숫자대로 비교하는 영양의
만들면 되거든요
그러면 퀵 솔트 나 아니면 뭐 stl 솔트 같은데 들어갈 때 비교하는
함수 를 보통 집었는데 그 함수는
뭐 솔트 키가 a 하고 b 가 있다면 a 가 피보다 잡다한 예삐 북어 b
가 a 보다 작다
요 관계 10만 넣어주면 되 거의 한 줄에 가능해요
그래서 이런 것들 아니면은 그런 어떤
[음악]
이 톱에 이터를 돌리면서 거기서 그냥 어떤 값을 플릿 프린트 하고 싶다
정말 단순한 것들
이런걸 할 때 정말 한줄 두줄 안에 끝나는 이제 남 다 할 경우는 마음껏
쓰라고 이렇게 해요
그러는 약 재활용 2 제안할 것 같아 좀 긴 함수는 어떠냐
그냥 암수 만들라는 거에요 그리고 요즘 대부분 오브젝트 토렌트 프로그램을
하기 때문에 그런 함수들을 프라이빗 함수로 만들어 놓으면 은 크게 문제는
안 된다는 거죠 네 이제 뭐 당연히 함수를 새로 만듬 으로 인해서
그
나중에 이제 핫 실제 레터링 할 때 그 함수가 한몫 밖에 알 수 있는데
이제 이 함수가 있음으로 해서 다시 여러분들을
검토할 문제가 있는 부분도 있어요 사실은 이제 그거는
예전에 따른 코딩 스타일 템 알았고 또 다른 함수에 대해 얘기 했듯이
그런 경우에 함수를 따로 안 만드는 게 맞죠
그러나 이제 이 함수가 언젠가는 이제 쓰이게 워낙 흔한 함수 있어요
언젠가는 반드시 쓰인다고 이제 생각할 수밖에 없는 함수들
그러면 함수가 나와야 되는게 정상 이기 때문에 그런 약간 케이스 바이
케이스 는 맞지만
굳이 람다 를 쓸 바에는 함수를 뽑는게 갔다는 거죠
아니면 남다를 앉더라도 함수를 그냥 코드만 함수가 아니라 그 메인 바디
안에 집어넣고 콜라 함수가 있는데 다
그리고 이 부분을 이제 구역을 딱 치고 싶으면 그 안에 중 가로 2개를
붙이는 것만으로도 4시께 범위가 보이기 때문에 나중에 눈으로 울다가 알고
증가로 있네
이건 뭐지 그리고 그 위에 커 매트가 있겠죠 2
블락 의 코드는 뭐라는 거다 그걸 보고 뽑아낼 수도 있긴 하죠
4 역시 함수가 있는 것보다 못하죠 그래서 프로그래머 코딩을 짤 때 이
함수가 다시 쓰이기 칼은 재활용 성이 있는 야 그거 에 따라 프라이빗한
수라도 꼬마 넘는거 그런 감은 확실히
음
어떻게 해야 될까 제대로 훈련받은 프로그래머 아니면 제 경험이 많고
생각을 많이 하는 프로그래머 그 사람들한테 볼 수 있는거고 그런 생각
없이 모든 걸 그냥 함수를 뽑거나 그런 생 없이 모든 걸 함수로 안
보거나 하는 것은 문제가 생길 수 밖에 없죠 그래서 15% 에서 말하는
남다른 정말 그렇게밖에 말할 수가 없어요 최대한 쓰지 말아라
단 써야 될 때 뭐 아까 말했던 쏠트 같은 이런것 처럼 되게 단순한 비교
전자가 들어갈 때 아니면 은 이제 정말 한 두 줄짜리 코드 죽어도 다시
안 쓸 거 같은 그런 코드 그런거를 이제 만들때 근데 생각보다 이게 별로
없어요
남다를 볼 이는 별로 없어요 40분에서
ccm 남다르고 가면 쭉 음 이기는 달라져 조금 이제 왜 달라진다면 일단
저는 시사회도 남들 쓰는 법 이 두가지가 있어요
그냥 그 쿼리문 쓰듯이 sql 쿼리문 쓰듯이 뭐 플러머 쭉 슬랩 터 쭉
이렇게 하는게 있고 그게 아니라 폴로 언트 api 라고 해서 이 컬렉션이
있으면 거기서 다 찍고 왜 를 한다면 조건 쓰고 다 찍고 무슨 투어 레이
해서 어뢰를 바꾸고 이런 식으로 하는 거지 플로 엔트 api 라고 하고
뭐 빌더 패턴 이라고 하는 것 같아요 다른 ap 에서 그걸 빌더 식으로
많이 쓰기 때문에
그럼 그런걸 일단 전 싹을 남자는 왜냐하면 은
그게 함수의 함수에 함수 호출하는 것 같아서 이젠 한번 꼭 프로그램인
적으로 좀더 는 이해가 쉽기 때문에 자기의 컬렉션 있어
그럼 여기서 이 필터링을 할 거야 이 조건에 맞춰 그 외우고
그럼 그 다음에 니가 여기서 뭐 오더 링을 할꺼면 오더 바 이렇게
있으니까 이제 5 그 다음에 오더를 이렇게 한다 이런 식 한눈에 볼 수가
있는데
sql 쿼리는 약간 그 반대의 방식이에요
옛날 쿼리를 짜는 방식 그래서 있겟지만 이거는 뒤에서부터 앞으로 읽어야
되는 거
보통 코딩을 쨌든 앞에서부터 뒤로 짜기 때문에 저는 플로렌 테잎이 에스라
그래요 그런데 샤벨 않다는 조금 다른게
일단 툴 적인 서포트가 굉장히 좋아요 이제 실제 남다를 집어 놓아도 남
다 아내는 코드 한줄 한줄 그것도 이제 시스템에서 코드 한줄 쫙 쓸 수도
있거든요 막 닻 외에 열 닷 뭐 오더 바이 다 어쩌고 하면 막 한 줄에서
라도
그거를 스테핑 스스로 하면서 사실은 코드 한줄 한줄 볼 수가 있어요
그만큼 시 샤벳 입어 가 많이 발전해 있죠
그렇기 때문에 남다를 조금 더 느슨한 있어도 상관이 없어요
그리고 어찌보면 얘네 이글을 한다는 그 시샵 비자 sql 에서 볼 수
있는 몇가지 오퍼레이션 이 있잖아요
오더를 한다거나 쓰 뭐 이렇게 웨어를 한다거나 그런 것들을 함수 1 1
로 표현한 거고 내 코드를 짤 때 그것을 다슬 새로운 줄의 눈온 인해서
고 오퍼레이션 하나하나가 실제 한눈에 보이게 만들 수도 있기 때문에 그런
코딩 스탠다드를 잘 따르며 는 아무리 람다 식이 좀 조금 복잡해도 읽을
수도 있고 디버깅 드 쉬워요
그리고 시 샵에서 당연히 제 2의 남다를 돌다가 이하의 섹션이 나거나
뻑이 나거나 그러면 디버깅을 보기 힘든 단점은 여전히 있어요
그 부분은 예시 풀뿌리 에서 말한 것처럼 약간 또 지향해야 되는
부분이지만 그게 아니라 굉장히 당연한 것들은 이렇게 남다를 주고 살 수가
있죠
여기에 이제 한 두어 가지 문제가 솔직히 더 색이 있는데 이건 하라는 지
경험해 한거 예전에 되게 잘하는 프로그래머 있었어요 제 회사의
제가 일하던 내 새 제가 가지고 있는 회사가 아니라 러시아 출신인데
진짜 굉장히 유명한 프로젝트에도 이 제공 원자로 되게 듀오 공원 제로
들어가 있을 정도로 대단한 친구였어요
2층과 코드를 짜면 아무도 못 듣겠다고 난리 쳤는데 그 이유가 뭐냐면 은
그 굉장히 많은 걸 남다르다 떡 치 는것 딱히 컬렉션의 들어오는데
거기다가
제 1 20 2 짜리 남다를 써요
쓸 엑트 하고 오더 바이 하고 뭐 하고 뭐 하고 뭐 하고 이런 식으로
근데 사람이 한두 3단계까지 있는데 거기서 만약에 실내 틀에서 모르고
올랐으며 는 그거에 대한 의미를 알기 위해서 이 코드 닭을 거야 되잖아요
제가 눈으로 내 그게 아니라고 씰 액트 까지만 해놓고 아니 왜 어 까지만
해 놓고 그것을 다른 변수에 딱 첫 저번 저장해 주면 은 그 변수 이름이
있을 거 아니에요 예를 들어서 아 뭐냐 만약에 학생들 이름이 들어왔을 때
아 이제 학생 이름이 들어왔고 나는 여기서 김씨를 찾고 싶다 그러면
김씨를 이제 외로 걸은 다음에 그것을 뭐 네임 스탈이 미드 킴 이렇게
되면은 이렇게 김씨를 시작한 이르면 딱 한눈에 보면 알 수 있는데 그걸
안하고 계속 체인을 받다 보니까 사람들이 코드를 읽고 그 디버깅 하려면
은 멍하니 바라면서 계속 하게 되고 그 나중에는 그 친구한테 물어 봤어요
여기 버그가 있는데 이거는 지금 니가 무슨 일이 찰 수 있냐
남들보다는 빠른 내 여전히 그렇게 변수 이름을 잘 짓는 것보다 등
드렸어요 그래서 그런 식으로 그 로지컬 하게 중간중간 변수 이름을 찍는
습관은 되 게 중요해요
그런 부분을 잘 못하면 c 샵에서는 완벽히 산으로 갈 수 있다는 단점이
있어 그런 문제가 있었어요 그래서 그게 제가 c # 쪽에서 이제 또 남
다 에서 문제 생기 방풍 게 하나가 그거 였고 그 다음 문제는
이건 좀 주니어 딴 이나 이제 기본기가 약하네 들에서 나오는 문제인데
예를 들어서 이제 컬렉션을 돌아가면서
여러가지를 할 수가 있잖아요 그 컬렉션을 돌아가면서 그 컬렉션에서 음 뭐
아 여기서 뭐 짝수로 끝나는 아이디는 일로 보내고 홀수로 끝내는 아이디는
절로 보낸다 이렇게 끝 컬렉션을 2개를 나누는 그런 방식이 있잖아요
그러면 저의 일단 제대로 코딩을 배운 애들은 r 긁고 루프를 두 번
돌리는 것 좀 문제가 있으니까
뽀루 프로 한번 돌리면서 efs 를 놓았고 다른 컬렉션의 밀어넣자 라고
생각을 해요 그럼 on 으로 되니까
남 다 익숙해진 애들은 남 다 에서 다 왜요 이렇게 해서 고르는 것들
있잖아요 그게 뽀 문이 된다고 생각을 못하는 것 같아요
아무 생각없이 그거를 봄은 아까 그 컬렉션의 다도 웨어 한 다음에 홀수인
것들은 이 컬렉션 으로 만들어 줘 그리고 한번 다시 원래 컬렉션을
들어가서 외부를 한번 더 해서 짝 쓴건 이 컬렉션의 넣어 줘 이런 식으로
코드를 차요
그 코드 짜다 보면 은 굉장히 비효율적인 코드들이 나오는걸 많이 봤어요
그렇게 한테 물어 봐도 되고 또 모닝 거 아니야 모르는데요 그래 나오는거
아니야 개념이 이런 애들이 있어요 사실 그래서 저는 특히 중이었다 니나
일어 애들한테
남다를 잘 쓰지 말라 그래요 본문으로 되는 웬만해서 뽀 문으로 하라
그래요
특히 이제 물론 암 다가 편한 게 있어요 굉장히 이제 함수형 프로그래밍
처럼 하게 되 게 편한 것들이 있는데 그 저도 자주 쓰는 부분도 있어요
이렇게 컬럼 여러개 나왔을 때 및 데이터 여러개 있는데 이 데이터에서
꿈은 돌려 갖고 새로운 오브젝트 만들어 갔고 다른 컬렉션 소장 하는거 다
슬랙 트 이런걸로 되거든요 사실은 이제 그런거를 단순한 것까지는 쓰라
그러고
어느정도 이제 약간 복잡해 지고 아니면은 그런 비효율적인 코드가 나오기
시작한 애들한테는 이제 쓰지 말라고 얘기 되게 말이에요 그래서 시 샵에서
람다의 문제는 제가 볼땐 아까 말도 체인이 의 너무 체인이 너무 쉽다는
문제 그리고 정용화는 함수가 있다는 거에 문제고 c 북구는 정형화된
이렇게 체인 이름 있지 않잖아요 뿐 놓은 테잎이 할 때
그래서 그렇기 때문에 좀 급우 그 단점은 안보이는 것 같아요
그래서 이거 정리를 하면은 c 샵 을 하나 싶을 뿔을 1
람다 는 아
4 치프 시퍼런 남다를 거의 안 쓰는게 맞아요 그렇게 길게 그냥 되게
단순한 거 죽어도 다시 활용 재활용 하지 않을 코드만
남다를 쓰는 게 맞고 그리고 거기서 만에 코드가 뻑이 나거나 익셉션 이
나거나 이 섹션을 좀 그렇고 너 스 클래식 안하거나 이럴 상황이 보이는
코드 라면은 더 더욱 남다를 안쓰는게 맞아
그러면 코드가 복잡해질수록 뭐 포인터 문제도 생길 수도 있고 그런 암
달아 쓰는 게 맞고 자 이제 전처럼 함수 수가 함수 이름으로 가라 라고
말할 수 밖에 없죠
그러면은 이 그 다음에 나오는 것은
c 샥 c 샵 은 좀 더 여유롭게 써도 되고 너 그렇게 써도 되지만
남자 체인 잉 하는 게 1세 4개가 넘어가는 순간에 한번 좀 생각을
해봐야 되고 그 중간 중간 변수 이름을 뽑아주는 게 딱 그런다고 코드가
그렇게 느려지지 않아요
그렇게 얘길 하면 될 것 같아요 그리고 마지막에 제가 말했던 그 남다를
쓸 때
모아다 뻔 되게 단순하게 한번에 결국 않아 온다 로 생각하지 말고 제가
저수준 의 중요성 에서도 말했지만 이 람다 를 썼을때 밤 다가 없이 내가
코드를 짜면 과연 어떤 코드를 짜야 되는 직
그런 고민을 하다 봄을 좀더 효율성 의 신경을 쓰면 코드 할 수 있을 것
같아요
그 정도 얘기를 하며 는 이제 람다의 문제의 장점 등등 코딩 스터드 까지
얘기를 한 것 같아요
그러면 오늘은 여기서 끝 낼게요 뽑혔습니다
