안녕하세요, 포프입니다

제가 예전부터 'Assert 많이 써라'라고 얘기했어요. '무슨 예외 처리도 있고 오류 코드도 있고 어쩌고저쩌고. TDD도 하고, 테스트도 하고. Assault 안 쓰면 다 필요 없어 Assault가 제일 효율적인 방법이고, Assault만 잘 받는 것만으로도 TDD는 어느 정도 구현도 돼.'. 그래서 'Assault를 정말 잘 써야 한다'고 여러 번 얘기해 왔어요. 근데 Assault를 쓰는 분들은 주니어 때 언제나 이 실수를 한 번쯤 하는 것 같고, 이것 때문에 큰 문제가 생기는 경우들이 있어서 얘기해야 할 것 같았어요.

Assault 로직 보면 간단하잖아요? 'Assault, 그리고 어떤 Boolean 로직, 그리고 이 Boolean 로직이 통과하지 못하면, 거짓이 드러나면 코드가 일단 실행이 멈춘다. 그리고 기본적으로 디버그 빌드에서만 작동한다.' 이게 장점이죠? 이게 왜 장점이냐면 배포용 코드에서는 이 코드 로직 자체를 실행하지 않아서 깔끔하거든요. 성능에 영향을 주지 않고 개발 도중에 문제점을 빨리빨리 파악할 수 있는 방법, 가장 훌륭한 방법 중 하나가 Assault다, '개발 중에 찾는다' 이거였어요.

주니어들이 가끔 실수하는 것들이 뭐냐면 저도 옛날에 했었고 뭐냐면 이런 Assault를 열심히 만들다 보면 가끔은 Assault에서 나오는 어떤 함수 호출하고 나온 Boolean 값을 변수에 대입한 다음에 Assert 넣어놨는데, 릴리스 모드를 빌드할 때는 이 변수가 실제 Assert에서만 사용하는 거니까 사용 안 해서 '사용되지 않는 변수야'라고 오류가 나오거나 경고가 나오는 경우가 있어요. 그러면 '아 그렇구나' 그럼 이 함수 호출 자체를 Assert Boolean 표현식 안에 넣어버려요. 디버그 빌드에서는 기막히게 잘 돌아요. 배포용 빌드 돌리는 순간 그 코드가 사라지거든요? 함수가 호출이 안 돼요. 디버그 모드에서는 호출되는 함수가 릴리스 모드에서 호출이 안 돼서 릴리스 모드에서만 어떤 동작이 제대로 반영이 안 되는 경우들이 있어요. Assert 사용할 때 많이들 하는 실수예요. 그래서 Assert 사용할 때는 이거 되게 조심해야 합니다.

지금 아셔야 할 거는 'Assert 안에 들어가는 동작은 절대 릴리스 모드에서 실행되지 않는다'를 기억하셔야 하고, 아니면 제일 깔끔한 것은 'Assert 내 표현식 안에는 함수 호출을 절대 넣지 않는다.'. 물론 그 함수 이름 자체가 디버그 모드에서만 돌려야 되는 함수 일 순 있어요. 이런 경우는 굉장히 확실하게 함수 이름을 지어 주는 게 좋아요. 예를 들어서 Ensures, '뭔가를 보장한다는 접두사로 시작하는 함수는 어떤 거를 확인하고 디버거 Assert 하는 거니까 상관없다'라던가, 아니면 DBG로 시작하는 함수명을 지어서 'DBG로 시작하는 함수는 언제나 디버거에 돌리는 거니까 들어가도 상관없다'라던가 이런 규칙을 정할 수는 있지만, 규칙이 복잡해지고 많아지면 사람들이 헷갈리거든요? 처음부터 'Assert에 들어가는 조건식은 무조건 단순 변수거나 표현식, 함수를 호출하지 않는다.' 이런 식으로 하면 훨씬 더 실수 확률이 줄어듭니다. 그래서 많이들 하는 실수, 'Assault 안에 로직 코드 넣지 말아라.'. 로직 코드 넣는 순간 컴퓨터 잘 되고 다 했다가 갑자기 고객 컴퓨터에서 깨지는 일들이 나옵니다.

그래서 이거는 한 번쯤은 말해야 할 것 같았어요. 저도 진짜 소싯적에 했던 실수고, 한 번 하고 크게 깨닫고 '아씨 절대 이러지 말아야지.' 했던 기억이 있고 분명히 이 비디오 보시고 있는 분 중에 '맞아요. 저도 그랬어요.' 하실 분들 많을 거예요. 그만큼 생각보다 실수를 많이 합니다. 아까 말했던 것처럼 컴파일러가 오류 줬을 때 '어? 이거 쉽게 고치네?'하고 고치고 넘어갔다가 그거를 그 순간에 까먹은 거죠. 코딩은 꽤 많은 게 복잡하게 이렇게 하고 있는 것들이라 그거를 순간 하나에 꽂히면 놓칠 수 있는 것들이 있거든요? 이런 걸 안 하기 위해서는 괜찮은 습관을 들여놓는 게 좋습니다. 그래서 Assert에서 주의해야 할 것, 간단하게 공유해 봤습니다.

포프였습니다.