얘가 안녕하세요 포프 입니다 음
예전에 먼 비디오에서 디버깅이 개발의 방이라고 얘기를 했던 적이 있어요
음
그러고 나서 이제 또
다양한 사람들과 일을 해 봤는데
요즘 드는 생각은
디버깅이 절반 이상인 것 같아요 거짓이 5부로 나팔수 오빠가 되지 않나
생각을 하는데
이제
그 이유를 곰곰히 생각해보니까
디버깅 이라는게 단순히 버그를 을 잡는 문제보다는
몇가지가 더 있더라구요 일단 은 다른 사람의 코드를 이해할 수 있냐
왜냐하면 은 뭐 제가 만든 코드만 이해하는 건 아니잖아요 나이만 좀
코드를 봐서
거기서 법 으로 고쳐야 될 때도 있고 아니면 은
뭐 아니면 뭐라 그럴까
내가 직접 코드는 었지만 누군가가 말 만든 함수를 쓰는데 뭔가 이상할
경우 그 함수 에 이상한 동작을
[음악]
어떻게 바꿀 수가 없으니까 제대로 쓰는 법 전 디버깅이 과정이라고 생각을
하거든요 그래서 어찌보면 은
뭐라 그럴까
테스트 까지도 같이 하게 되는것 같아요 어떤게 제대로 작동을 하니 안하니
알아 테스트를 하는 과정에서
아 요건은 작동하고 요건 작동한다 네 뭐 워낙 어떤 함수들은 어떤 기능이
든 인 푸른 수만 개가 될 수 있잖아요
그러면 그 수만 개의 인부 중에 과연 어느정도로 내가 캐슬 때 이게
이것은 제대로 작동하고 딴거 4 작동 알 수 있냐 라는 걸 확신할 수
있냐는 것도 어쩌면 올리려 이기도 하거든요
음
그루브 전에 항상 제가 얘기했지만
이제 어떤 문제가 발생하면 은 뭐 문제의 현상을 해결하는 것보다 그
문제가 발생되는 근본적인 원인을 찾아서 고 쳐야만 아까 제가 말했던 방
전에 말했던
그런 얼마나 테스트를 해야 이게 올바르게 돈다고 생각을 할 수 있을까 이
들어가는 것 같아요
또 그런 생각을 하고 다시 이제 처음 들었던 거 이제 남의 코드를 이해할
수 있어야 된다 는 얘기를 잠깐 돌아가며 는 어찌보면 은 제가 코딩을 잘
하게 된 계기도
남의 코드를 보고 저는 뭐 보고 공부하고 분석한다 이런 말 안 좋아요
제피 그래봐야 집중 않았거나 니까 그 남의 구두도 일하게 되면서 그 코드
고치고 잘못된거 찾구 그런 과정들 그리고 남의 코드를 보자마자 뭐 되게
단순한 거면 뭐 금방 2 이해가 되지만 그 전체적인 시스템을 여러번
사용을 하면서 그 점점 월하 전체 시스템이 어떻게 돌아가는 서로 맞물려서
그걸 이해하는 데 까지 좀 시간이 오래 걸리기도 해요 아니 뭐 2주가
걸리기도 하고 뭐 투자 리 걸리기도 하고
근데 저는 이제 뭐 운이 좋았던 재림은 제가 워낙 뭐랄까 참을성이 안
좋아서 여러 회사를 터가 단 어떤건지 모르겠지만
제 생각에는 정말 세상에 존재하는 게임 ng 인 예
대충 패턴들이 있을 거 아니에요 사람들이 생각하는 게 그래도 다들 똑같진
않지만 10개월 2개 정도로 똑같다고 보면 은 그런 패턴을 다 봤고 패턴
에서도
일을 해 봤고 그래서 이제는 어떤 모 게임 엔진 코드 간 솔직히 베라 l
스러운 건 없어요 보면 아 이런거구나 이거였구나 저거랑 비슷해 꾸나
그러면서 이제 그 코드가 내부가 왜 어떻게 돌 곧 그 프로그래머가 어떤
생각을 하고 코드를 짜는 지를 아니까
디버깅 빨라지는 것 같아요 그래서
저는 이제 뭐 어쩔 수 없이 여기저기서 새로운 회사 돌아다니면서 일을
하다보니까 새로운 코드 젊 접하는 속도가 빨라졌고
그로 인해 디버깅을 잘 하게 된거라고 보는데
어쩌면 그 디버깅을 잘 안다 며 자체가 역시 코드를 잘 이해한다는 것
일수도 있고 코드 아까 말했죠 잘 이해하려면 은 음
그리고 말 했잖아요 얼마나 보았어 뭐라고요
가장 근본이 되는 걸 이해하지 못하면 그저 까지 백날 이 해봐야 나중에
새로운 거 나오면 틀리기 때문에 그런 부분이 잤어요
4 재미있는 것은
참고로 1 말하고 싶은걸 프린트 f 는 절대 디 버그는 솔직히 아니에요
근데
디버거 툴이나 이런게 굉장히 후진 환경에서는 그런거 를 통해서 기봉이 할
수 밖에 없죠
이제 이 미모 프린트에 프로 디버깅하는 시절은
벌수 30년은 3차 신염 정도를 지났다고 봐야 정상인 것 같은데 그 뒤에
굉장히 많은 훌륭한 새들이 좋은 기보가 를 만들었어요
그리고 그 디버거를 요즘 저희가 쓰면서 개발을 하고 있고
근데 그 디버거를 사용하지 못하는 사람들은 확실히 기복이 속도가 떨어질
수 밖에 없죠 왜냐하면 은 무슨 문제가 있을 때 이제 뭐 디버 가 단순히
후 지기 때문에 라이브 서버에서 못 입어 가 쉽게 뭐 쓰기 때문에
프린트 frog 꽃아 중에 로 오면서 크기 틀렸군 아 라고 하는 경우가
있거든요 근데 문제는 로그는 미리안 놓으면 나중에 또 놓고 한번 또
디플로이 한 다음에 다시 또 봐야 되는 그런 문제도 있는데
그 다음
일단 게임 쪽에서는
요즘은 디버깅이 굉장히 굉장히 굉장히 굉장히 편해졌어요 한 10년
전만에도 괜찮은 2 들이 많이 나왔고 뭐 한테 소니가 독주 하던 때에는
괜찮 투 드리 없던 경우가 있어 굉장히 이상한 이번 * 하게 됐고
9 어떤 경우에는 디버깅 정보가 없이 디버깅을 해야 했던 때도 있어요
그러면 그때 가면 은 단순히 아까 여러 단계가 있는데 일단 툴을 못쓰면
사람들은 제가 오전에 절대 d 범위를 할 가능성이 없고 자랄 가능성이
없고
두번째는 이제 툴을 사용할 수 있는데 툴을 못 사용하게 할 경우에
과연 디버깅을 잘할 수 있는 사람이 얼마나 있을까
그럼 이제 아까 말했던 것처럼 프린트 앱스 나 이런거 에 의존하는
거거든요
4 제외되지 옛날에 이제 쏜 이쪽이 이제 독식하는 때니까 풀수 투정도
때에는 그런 d 법인 툴이 제대로 돌지 않은 상황을 디버깅 해야 됐을
때가 있어요
물론 개발 도중에 디버깅 툴 애쓰지만 저희가 되게 재미있는 에피소드
해드리면
예전에 이제 ps2 같은 경우에는 뭐 이제 pc 를 꼽고 뭐 하고 다이제
개발을 하고 기범 대충 알 수 있었지만
결과 조건 최종적으로 제품이 나갈 때는 시기에 구워서
제품을 만들어야 됐어요 cd 를 굽는 순간 여기에는
뭐랄까 어떤 디버그 정보도 없어요 그래서 심지어는 뭐 그 당시에는 cd
를 구웠을 때는 디버그 로 퇴치하고 어셈블리를 봇 방법도 없었거든요
어셈블리 수준의 d 범위도 불가능을 불가능한 상태 였어요
프린트 f 도 불가능한 상태 였어요 왜냐하면 은 프린트 앱스를 하는거
자체가 일단 cd 를 굽는 버전이 아니고 그 cd 굽는 버전의 그런게
들어가는 무조건 이제 쏘니 더뮤직 중에 버리거든요
그래서 저희가 가지고 있는 순수 cd 얻는데 재미있는것은 여기서 언제나
나는 벅 않아 가 있었어요 근데 이거를 cd 를 안 걷고 이제 릴리스
빌드 를 구워서 디버깅을 하든 녹화에서 이제 다 필드에서 디버그 버전을
기록인 하던
절대 나지 않는 버그 였어요 뭐 이제
이제 씨앗이 풋볼 쪽에서는 메모리 레이에어 시 약간 바뀌면서 메모리
스톰프 가 사라질 수도 있고 아니면 뭐 그냥 타이밍이 달라져서 생기는
법을 수도 있거든요 그래서 그 승 칸에
저희가 아 이거 디버깅이 어떻게 할까 고민하다가
* 가족은 한 방법이 뭐냐면 어찌 보면은 프린트 애플을 굉장히 익스트림
하게 올린건데
저희가 그 당시 하셨던 방법은 화면에 그림은 그리스 있었어요 게임이니까
그래서 저희가 궁금했던 변수 값들이 있잖아요 아이 변수가 이렇게 바뀌면
이게 문제가 되겠구나 어쩜 프린터 프라스틱 되게 비슷한 거죠 그럼 변수
값을 화면에 출력을 해야 되는데 이게 텍스트 로 출력한 순간 또 뭐랄까
텍스트 웬 더 로 들어가고 거기서 또 폰트 불러오고 마이런 이상하지 새야
되서 그 순간 굉장히 또 많은게 만가지 거든요 그래서 저희 갈 수 있던건
은 이 변수를 화면 제 왼쪽 구석에 놓고 이 변수의 값이 바뀔때 마다 걸
색갈로 표시했던 때가 있어요
그래서 아이의 요 변수 값이 그 정도로 빨간색 가장 강한 거의 변수 값이
거면 뭐 약간 뭐 그린색의 20% 이런식으로 해서
보고싶은 변수를 그 상태를 픽셀 마다하고 밑줄 쫙 박아두고 한 거리
10개 20개 박아두고 이 게임 진행 되는 거 보면서 깨지기 전에 이
변수 값이 어떻게 되냐
그렇게 갖고 결과적으로 잘못된 문제를 찾아서 고친 적이 있어요
그럼 이렇게 얘기하면 이게 되게 프린트 에프랑 같지 않냐 라는 솔직히
얘기를 하는데
결과적으로 그렇군요 모든 툴이 없앤 프린트 f 로 갈 수 밖에 없는데
저는 되게 재밌었던 게 뭐냐면
디버깅 트론 이렇게 프린터 fr 수 있는 일들을 실행중에 목 브레이크
포인터 걸고 변수값을 변하면서 보고 한번 함수 호출이 어디로 가는지 보고
이런 것을 보여주는 둘이 잖아요
이제 그런거 에서 이제 습관이 얻어 잘 들며 는 일단 디버거 툴이
제공하는 기능들이 니까 여기서 어떤 어떠한 어떤 것들을 봐야만 어떤
버그를 잡을 수 있다는 걸 되게 쉽게 알 수가 있어요
그럼 이제 그게 툴을 것 더라도 툴의 미리 해 주던 일을 아 여기서는 이
함수의 호출 되는지 봐야 되니까 그걸 뭐 픽셀 않아 받고 여기서는 무슨
뭐 변수값을 바꾸는지 봐야 될 것도 픽셀로 받고 이런식으로 해서 그 툴이
해주 전거를 조금 뭐랄까 한 10대 수배 느리게 할 수 밖에 없지만 그걸
화면에 찍고 볼 수가 있다는 거죠 그래서
뭐 이게 반드시 논리적으로 만약 틀린 않은 모르겠는데 제가 여태까지 봤던
거 중에는
풀 [ __ ] 디버깅 되게 잘하는 사람들을 일단은 툴을 되게 잘 써요
아마 그 이유가 제 생각에는 그 사람들이 프린트 f 로만 디버깅을 하게
남아 그 사람들의 생각도 너무 빠른거 같아요
그러니까 자기가 실제 버그를 잡는 속도를 도와줄 수 있는 툴을 쓴다는게
첫번째 것 같고 그 투 조차 안 쓰는 사람들은 굉장히 많은 경우가
생각인 양 되셔요 그냥 더욱 디버깅을 자꾸 이거 이거 이거 이고
봐야되는데 어째 프린 탭 한번 찍고 모빌을 타고 다시 돌리고 또 프린트
f 한번 찍고 빌드하고 돌리고 이런 개념으로 가니까
뭐 하나 하나 확인하는게 막 툴로 하면 1분 30초에 대해 확인할 것을
이 사람들만 30분 40분에 확인하는 경우가 일단 30분 구라가 10분
그 정도의 확인할 경우가 있다는 거죠 그래서 그런 사고의 흐름 자체를 좀
뭐 원래 내린 건지 도구를 제대로 왔어 느린 건지 모르겠지만 그렇게 누린
부분이 있고
그리고 툴을 잘 쓰는 사람 중에서 나중에 그 추를 거뒀을 때 이 사람들이
뭐 처음 말했던 프린터 엡슨 사람들 만큼은 잘 하지만 제가 아까 말했던
그렇게 화면에 점을 찍어서 가면서까지 이렇게 뭔가를 보려고 하는 그런
생각까지 다 닭알 다가갈 수 있는 사람은 생각보다 그렇게 많지는 않았어요
어찌 본 건데 겜 창의적인 디버깅 이라고 할 수 밖에 없거든요
흔히 보던 뭐 프린터 fr 고모 브레이크 포인트 팔고 이정도 수준이
아니라
뭐 지금도 는 환경에서 어떻게 상태를 볼 수 있는 방법을 만들어 있다죠
뭐 이걸 뭐 소리로 만들기 숨소리만 들 수 있겠고 아까 막 픽셀로 만들어
만들수도 있죠
그리고 이 중간에 있는 것 중에 나가지 어셈블리 디버깅 이에요
이제 어셈블리 디버깅이
이제 또 두가지가 있어요 제가 보면 그냥 코드를 못 브레이크 포인터 걸어
놓고 갔다 어셈블리가 실행되는지 본다면 그걸 생각하면서 1 따라 가는
방법이 있고
아니라 거기에 왜 지스타 억압이나 이런게 있거든요 그럼 레지스터 값 인한
메모리 값을 실제 메모리 뒤를 봐 가면서 알게 어떤 데이터가 있구나를
수치로 보는 경우가 있고 그외 애니 툴 같은데 잘 진행이 되며 는 잘
지원이 되며 는 이제 비쥬얼 스튜디오 같은 쪽의
그 웻 이스터 에 있는 값을 그냥 어떤 특정 오브젝트를 캐스트를 한
다음에 그럼 오브젝트에 레이아웃은 알려져 있으니까 메모리 레이아웃은 그럼
거기에 들어가 때 리드가 어떤건지 빨리 보는 법도 있거든요 근데 이제
결과적으로 모든게 디버깅이 앉다 어셈블리 내려가고 아까 많은 픽셀 디버깅
까지 가야 되지만 툴을 잘 사용하는 사람들은 이걸 굉장히 빠르게 할 수
있다는 거죠 그 출에 기능을 이용해서
그래서 이게 참 양쪽에 진영으로 좀 이렇게 갈려 있다 고 되게 웃긴데
툴을 쓰는 사람들은 e 처음에 시작할 때 양쪽 진영에서 전에 프린터
포트를 쓰는 상황
툴을 잘 쓰는 사람들은 이미 프린트 앞에 쓰는 사람들 쪽도 다 이해하고
잘할 수 있어요 그건 확실해요
근데 이 처음 시작점이 아니라 나중에 내려가면서 정말 교회 안쓰러워 지는
d 보기까지 가면은
아 p f 를 그냥 쓰는 사람이나 그 사람도 투수들은 3 쪼끔 만난 것
같은데 그 다음에 창의적인 디버깅할 수 있는 생각은 이제 그냥 단순하게
디버깅 하는거 이런거 발달하는 게 아니라
예전에도 흔히 말했다 이제 컴퓨터 내부의 구조를 되게 잘 알고 하드 걸
알지 않으면 되게 하기가 어려워 지는 부분 같아요
그래서 그런 생각이 들고
요즘 그냥 드는 생각이 그 거여서 비디오를 만들어 가세요 제비봉 이
옛날에 반이라고 했는데
수지 디버깅 의 코드를 배우는 능력까지 포함 을 시키면 이건 반 이상이
되지 않을까 그리고 저는 언제나 학습의 기본 이제 모방을 하고 남이
하는걸 보고 배워서 쓰기 된다고 생각하 스타일이기 때문에 그렇게 생각하며
는
코드 보고 디버깅 해보고 뭐 하고 이러는게
음 훈련을 통한 남의 니까 남의 코드를 익히는 걸 되게 돕는 것 같고 참
배우는 것을 그리고 우리가 가끔 말은 이론적인 거 되게 중요한 보긴
하는데
이거는 제가 볼때는
우리가 교육을 제가 잘못하고 있는 것 같아요 그냥 이런 저런 걸 배운
시점 자체가 잘못되지 않았나 생각을 되게 많이 에요
어느 정도 코딩 의 손이 오르고 남의 걸 흉내낼 수 있고 자유롭게 마음껏
할 수 있을 정도의 이론을 배우면서 자리를 잡으면서 이게 좀 더 이렇게
기록해 하면은
뭐랄까 좀더 유지보수 가능한 코드가 나올 수 있다라는 그런 가능성을 보면
좋은데
코딩을 할 지도 모르는 사람들에게 이론부터 가리키며 얘네들은 왜 그런
필요한 지도 모른 체 이론을 배우고
그거 가 유일한 방법인 따라가는게 좀비 뭔가 잘못된것 같아요 그래서
아직까지도 누군가가 저에게 묻는다면 은
코드 만져보고 디버깅 하는게 처음 시작할 때는 제일 중요한 것 같고 그
단일 2년이 지났을 때 뭐 경력 말고 에 코드란 게 일 년 이어 그때
그때쯤에 이론을 좀 올려서 한 단계 업그레이드 하는 게 좋지 않나 생각을
하고
그 다음에 일원이 생각보다 별로 없는것 같아요 사실 되게 프로그래밍
쪽에서 필요한 이론이 되게 좀 적다고 생각하는 주 이기 때문에 굉장히
기본적인 이론을 잘 만 이해하면 나머지는
거기서 확장시키고 이해할 수 있는 부분이라 보거든요 그러니까 대충 읽고
아 이런거구나 하고 넘어갈 수 있는
4
처음부터 좀 너무 공부를 이상하게 한 사람들이 이뤄내 시작해서 이게
이론의 이유도 모른 g2 해도 못한 채 계속 이론 마싸 가니까 사실은
같은거 에서 조금 확장 된건데 전에 다른 거라 생각하고 뭔가 수만가지 를
이렇게 중구난방 적으로
다 배우고 어떤것 있어야 되는 지도 모르는 게 좀 아쉬운것 같아요 그래서
지금 코딩을 하는 사람이 따라하고 싶은 사람이 있다면 그냥 무조건 코드를
만들어 보고 이제 남의 코드 바보고 디버깅 해보는 것을 먼저 하고 그
다음에 어느정도 한 개가 온다고 느꼈을 때 아니면 는데 코드가 너무
부드럽다고 남겼나 그럴 때 그 때 한 번쯤 이렇게 제대로 잡아주는 게
되는 좋지 않을까 생각을 해요
아
그래서 오늘도 디버그 얘기를
포프 였읍니다
