음 저번에 이어 요번에도 프로그래밍 얘기를 좀 하려구요
음 요즘 프로그 제가 프로그램이 얘기를 안 할 때마다
뷰 수가 엄청 올라가요 그러면 이제 오이 좀 뷰스 감았 프로그램이 아닌
얘길 너무 많이 하니까 빅스가 올라가는걸 부담스러워서 프로그램의 얘기를
해 서 비스를 좀 줄여야 될 것 같아요
오늘 할 얘기는 그 뭐 주제 부터 말하면
뭐 행 우선 10 우선 뭐 벡터 매트릭스 이런 얘기 있잖아요
벡터 행렬 이런 것들
저희 제가 쉐이더 책을 쓸 때도 보통 사람들이 통영 하는 그런 언어를
써봤고
아 뭐 헹 기준 10 기준 영어라는 로움 a 줘
어 커버한 메이저 그걸로 해서 이제
설명 썼는데 어느 독자가 제 블로그에 와서 이거 이게 이래서 잘못 쓴 거
아닌가요 2개를 잘못 쓴 거 아닌가요 그래서 생각을 해보니까 잘못 쓴것
같아요
그래서 교정 파에서 고쳐 써 에라 타 에서 거쳤고 나 오타 그 제
블로그에서 유지 하는거 그 다음에 또 누가 왔고 원래 게 맞지 않나요
물어보는데
또 이렇게 내가 원래 게 맞아요 그래서 뭔가 이상해서
10시 차였어요 문화는 이게 정확히 왜 이렇게 되는거고 뭐가 문젠지
그래서 결론적으로 얘기한 것은 그 문맥상 에서 행위 즉 10 기준 이란
말씀은 자체가 말이 안되는 거였어요
그리고 실제 제가 여기저기 사랑을 보니까 다들 헷갈려 하고 있어요
그래서 오늘 좀 이거를 확실히 잡으려 그래요 좀 그러니까 뭐 말 하나가
또 제가 틀릴 수 있어요 워낙 뭔가 헷갈리는 부분이기 때문에 제가 이해한
거에서 확실히 좀 자 볼게요
일단 시작을 어디부터 갈까요
으 헹 기준과 10 기준이 뭐냐
행 비중과 10 기준은 가로 메이저 컬럼 메이저는
정말 백토 와 행렬을 곱하는 순서로 상관이 없고 뭐 행렬이 아프냐 뱉어
가 피냐 이런거 있잖아요
행렬 곱하기 벡터 그러면 벡터 곱하기 행렬 어떤게 많냐
이러한 처리 상관이 없어요 그냥 그 문맥상 에서 10개 중에 생기지
얘기하는 순간 그냥 그냥 포기하세요
그건 전 연말 전쟁 얘기에요 로우 메이저 컬럼 에이즈가 어디서 나오는
거냐 면
메모리에 이게 어떻게 들어가냐 의 얘기예요 사실은 예를 들면 은
뭐 벡터로 얘는 좀 뭐랄까 행렬 얘기할게 행렬로 하면은
행위 내게 알죠 위부터 아래까지
그리고 컬럼의 4개가 있어요 열이라고 그렇죠
좌우로 이렇게 있을 때 그럼 총 16 개 값이 있는것에 4 곱하기 자면
은
그러면 16 개의 값을 어떤 스스로 저장 할 거냐
이게 로우 메이저 컬럼에 잊어요 예를 들어 제일 윗줄에 서 첫 번째 두
번째 세 번째 네 번째 를 플로 널이 내겠다 저장을 하고 그 다음에 두
번째 줄로 넘어가서 두 번째 행으로 넘어가셔도 첫 번째 열 두 번째 열
세 번째 열 네 번째를 5678 로 저장하고 이계로 메이저 요
컬럼 매니저는 그 반대로
첫번째 줄에 첫번째꺼 저장하고 두번째 줄에 첫번째꺼 지나고 세 번 칠을
첫번째꺼 전하고 네 번째 첫 번째 저장한 다음에 다시 첫번째 줄에 두
번째 열을 저장하고
두 번째 두 번째 두 번째 이런 시 관계 컬럼 메이저 요
한마디로 아 한국말로 2 10 기 줄 이게 전부에요
그러면
그
이게 또 오해가 왜 생겼냐 그러면 벡터에서 비슷한 말했어요
벡터를 그 표기할 때 수학 공식 에서 표기할 때 벡터를
왼쪽에서 오른쪽으로 1234 이렇게 편한 경우가 있고 아니요 위에서
아래로 1234 표하는 경우가 있어요
왼쪽으로 오른쪽으로 표현하는 것을 햄 벡터 라고 해요
그냥 로 벡터 에어 로우 메이저 버터가 아니라 그리고
연루 넣는것은 컬럼 벡터 에요 컬럼으로 보이기 때문에 컬럼 메이저가
아니라 그러면
행 뱉어 10배 터가 전부에요
이제 그래서 그 용어가 헷갈려서 많이 헷갈려 온것 같은데 그러면 이것은
메모리 레이아웃이 거든요
그 외에는 정말 아무것도 아니에요 그래서 제가 쓴 책도 우려가 있었고
아직도 이 팔에도 오류가 있고 남이 쓴 책에도 굉장히 많은 모드가 많아요
어떤 벡터와 행렬 을 곱하는 순서를 얘기할 때 10 기존 행기 행기 준을
말한 것 자체가 잘못된 거예요
완벽자막 된거예요 그러면 어떻게 설명을 했느냐
그러면 이런 방법이 지나 5 매트리스가 뒤에 온다 뭐 포스트 매트릭스
멀티 애플리케이션 보풀이 맺힐 지만 찍혀져 저는 그냥 설명 이렇게 헨
곱하기 애가 뱉어 곱하기 해 귤 술 선희야 행렬 곱하기 백터 순서 냐
왼쪽에서 오른쪽으로 그럼 이것을 보면 은 당연히 근데 행렬을 곱하기
팩터를 할 때는 벡터가 10일 수 밖에 없죠 먼저 첫 번째 줄과 열고
결과 곱해서 첫 번째 엘리먼트 뽑아내고 두 번째 행 과 다시 열 곱해서
두번째 리멘트 고만 하니까 그 반대로 벡터 곱하기 행렬이 면은 벡터가
앞에 있고 행렬이 되어있으니까 벡터는 좌 행으로 돼야 되고
아
행렬은
별로 새로운 그래서 이렇게 곱해 갖고 4개나 와야죠
그러면 저는 그래서 가장 올바른 표현은 그 벡터 곱한 행운의 순서가
뭔지를 만한 게 맞는 것 같아요 그럼 이 책에서는 벡터 곱하기 행렬에
노트 테이션 잡혀 기법을 쓴다 아니면 이 책에서는 행렬 곱하기 벡터의
표기법 옳습니다
그전 100 그러면 또 하나의 웃기는게 암 왜 이렇게 노트 3 두 개냐
뭐가 맞는건 야 이런 얘기를 해요
이게 또 종교전쟁 이거든요 전교조 이제
근데 제가 말하는 건 둘 중에 맞는 건 없어요 그냥 다른 표기 보일
뿐이에요
그럼 가끔 그런 사람이 있어요 아니다 이것은 5 품질이 맞는거 다 오픈
gl 이 뭐냐면 헬 10 곱하기 벡터 해요
오프닝에 맞는거 다른 수업 책에서 그렇기 때문에 라고 해요
문제는 모든 섭취 그렇지 않아요 그냥 예전에 쓰여 때 쏙 책 중에서 많은
수의 수학 책이 그렇게 표기법을 하고 있었고 사실 이 표기법을 반대로
돌려도 전혀 수업중 시상으로 문제가 없어요 근데 재밌는건 뭐냐면
그럼 저는 개인적으로 모를 월
좋아한 이라고 얘기하면 저는 그 반대를 좋아요
벡터 곱하기 행렬을 아가 수학적인 기반이 없어서 그런거 아니냐
물론 제가 수학적인 기반이 없으니 있는데 뭐 제가 뭐 수학과를 나온 것도
아니고
하지만 곧 그 때 수학 하나만 잘했던 애기 때문에 즉 그건 아니라고 봐요
저는 왜 그게 만약 뭐냐면
수학자들은 모르겠고 프로그래머 입장에서는
여태까지 저희가 프로그램을 할 때 모든 거에 연산자가 모든 거야 산 자가
왼쪽 곱하기 오른쪽 이었어요
우린 곱하기 할 때도 왼쪽부터 오른쪽으로 보지 오른쪽에서 왼쪽으로 안
보거든요
200 트와 행렬을 고 팔 때는 보통 어떤 개념이나 아니면 개념이 냐 면
저희 제 게임 쪽 이라던가 웬만한 컴퓨터 프로그램이 쪽에서
벡터는 보통 위치 포지션 이거나 아니면 방향을 앓기 잖아요
그러면 이것을 어떤 변환 행렬 로 변환을 하겠다
그럼 그 값으로 이 값이 나와야 된다 라고 보는 거거든요 새로운 벡터가
나와야 된다
그러면 상식적으로 생각할 때 아 벡터가 이미 있고 왼쪽에 있고 여기다
어떤 변환 행렬을 곱해서 새로운 벡터를 받아야 한다
저는 이게 적으로 보기 때문에 왼쪽에서 오른쪽으로 보고 실제 컴퓨터에서도
아까 10불 같은 개입 거 에서도 operate 오버로딩 하면은
보도되고 오버로딩 이 아니라 어떤 오퍼레이션을 쓰면 곱하기 뭐 나누기
보통 왼쪽에서 오른쪽으로 가자 요
저는 그거랑 예치 되게 만들기 때문에 이게 만든 방법이라고 봐요
맞는 맞다 기보다는 에 따르면 틀니 다기 보다는 이게 좀 더 직관적인
방법이라고 봐요
그래서 저는 그 방법을 선호하고 그렇게 되면 당연히 저는 언제나 행렬을
그러니까 벡터를 행으로 보고 행렬은
이제 뭐 컬럼 레이저로 오미자 상관이 없어요 어차피 상황에서 고 팔 때는
행으로 파는게 전부 져 내부적으로 어떻게 저장돼 있던 거예요 그 정부의
어
분지에는 그 반대 조 오픈 지는 거 봤는데 저는 오픈 질이 조금 이해가
안됐던 게 뭐냐면
뭐 품질은 수학적 을 따라서 그렇다고 좋아요 다 좋아 근데 잘 생각을
해봐요
저희가 매트릭스 가 있고 벡터가 있으면
주로 벡터가 하고 가 행렬을 곱하는 경우가 많지 행여 가 행렬을 곱하는
경우 적다고 그래픽 쪽에서 왜냐하면
변환 11 와 있고 거기다가 퍼텍스 다 폴리 곳에 다 다르지만 폴리곤 수
곱하기 3 이라고 보면은
버텍스 1 신명기 에는 좀더 라고
버텍스 한 게임에 한숨 라임의 10만개 정도 그래요 근데 한 오브젝트
에서는 캐릭터 같은 경우는 모임 1기 까지도 갈 수 있다고 보니까 3만개
도 가능하고 최소 방계
그럼 만기에 버텍스 에 행렬을 못해요
그러면 아까 말한대로 품질 방식이면 행렬 곱하기 뱉어 잖아요 그러면
벡터는 4개가 솔로 내게 갖다 한자리에 있으니까 이 벡터 줘 그러면 뭐
백토 프로 쓸 수도 있고 곱하기 빨리 할 수가 있어요
메모리 위치도 바로 옆에 있기 때문에 그리고 이제 행렬을 곱한 이까 이게
오픈 질에서 헹 기준으로 저장을 했으면
그러니까 매트릭스를 첫번째 행을 하나로 연속 되게 저장을 했으면 그냥 그
팩터 멀티 플레이 멀티 플레이 하는거 있죠
뱉어 프로세서를 한 번 곱한 끝이에요 그러면 그건 네 번 딱 곱하면
새로운 벡터가 나오거든요
그 저는 5 품질을 처음 볼 때 아 그렇게 하려고 1건 만들었구나 라고
하고 스펙을 가봤는데
픽률이
열기 중이야 그런 말을 못하면
벡터 빼놓고 행렬을 10 첫 번째 행 일 첫 번째 열 두 번째 행에 두
번째 첫 번째 열 세 번째 행에 첫번째 이거를 1 저장한 거에요 그래서
이거를 곱할 내면은
100% 파괴 못해 그러면 메모리에서 이거 플러스 하나 빼 오고
4칸 껴서 하나 더 배우고 1 또 배우고 하나 더 배우고 그래서 계산해야
되요
그걸 보면서 아니 이 훌륭한 최적화 기회를 외교 쓸까 라는 겁 생각을
했어요
그에 비해 디렉 텍스 도 여전히 최적화 되지 않았어요 왜냐하면 지역 됐을
또 매트릭스를
헹 기준으로서 잔해가 첫번째 1234 로 근데 곱하는 것은 보통 즉 뭐
어느 쪽으로 더 팔 수 있는데 그 머그 제트엑스 에서는 옛날 기본 방식
자체는
이제 벡터 곱하기 행렬이 얻죠 그러면 여전히 얘네도 문제 똑같아요
이 첫 번째 뭐 몇 번째 그때 왔고 저장 한다는거
근데 이거 의 장점은 제가 핸디 준 행렬을 그나마 좋아하는 것의 장점은
상식적으로 이해가 돼
왜냐하면 요즘 이미지를 다룰 때도 그렇고 문서를 볼 때도 그렇고 뭐 어떤
데이터를 다루던 간의 요즘은 대부분이 그러잖아요
첫주에 가고 그 다음주에 들어가서 쭉 가고 뭐 텍스트를 주장 할 때도
그렇고 언제나 한 줄에 있는가 저장하고 다음 주로 넘어가 잖아요
이미지를 똑같죠 보통 이미 저장할 때 xd 차량 하고 그다음 yyy
가니까 그래서 그런 상식적인 부분에서 저는 맞다고 봐요 이게 그래서
뭐 그래 좀 느리긴 하지만 아이 그래
내부적으로 내가 메모리를 따로 뜯어 코스를 있으면 그래 이건 나쁘지 않다
버틸 수 있다 이건데 오픈 시에는 뭐하려고 한번 이해가 되요 그냥 이해가
안돼요 왜 그랜져 제일 이해가 안되는 거에요 이건 굳이 그럴 이유가
없는데 왜 최악의 방향을 2개를 골라 갈까
그냥 핸디 전으로 저장해 벌었으면 곱하기 로 더 빨라질 텐데 제가 오픈
지혜를 좀 안 좋아하는 것 중에 이용해 나가
그 품질 버전 뭐 1 나올 때는 뭐 하드웨어 가속 때도 거의 없었고 모이
했을 때니까 그냥 순수하게 그냥 추하게 나온 근호 테이션을 그래픽으로 짜
갖고 퀵 날려버리자 이 개념이 어떤 것 같아요
근데 수학적인 로테이션 에서는 뭐 행위 주인 열기 조인이 가 문제가 없죠
메모리에 문제가 있는게 아니니까 메모리 메이아 우선 문제가 있는게
아니니까
근데 처음 이것을 만든 사람들 자체가
그 컴퓨터 내부를 잘 몰랐던 것 같은 느낌 그런 느낌이 있어요 그냥
어떤게 더 빠르고 어떤 4 아빠 쓰냐 라는 개념이 생각없이 아 그래
어차피 행 배 열 벡터 쓰니까 저장도 열로 해버리자 이 개념으로 한 것
같아요 그래서
보면서
거품 0s 이렇게 타나 보면서 아 정말 이거는
리얼타임 렌더링 하드웨어 가속을 위해 만든 그 ap 가 아니었다 고
생각을 하고 그래서 오픈 gl 이어 어느 순간에는 한번 api 에 컴퓨터
벨리 t
백호도 컴퓨터 밀리지 않아요 후방 후한 썩 그 깨버리고 새로운 버전을
만들어 낸다
제약 택스가 그래갖고 훨씬 나아진 거 거든요 근데 다행히도 이제 뭐 불칸
이라던가 이런 ap 가 나오고 있죠
4 아직도 국에 저는 크게 믿기지 않는 이유가 그거를 끌어 갈 만한
막강한 세력이 없어요
오픈 gl 옛날에 잘 나갈 때는 제 생각에 딱 두번 이었는데 한 번은
마이크로소프트가 지혜의 텍스 만들기 전에 분지를 통해 했고 게임 돌릴때
근데 둠 같은거 윈도우 3 올린다고 높은 진로가 속했다 그러면서 막
광고하고 마수가 그랬어요
그때 마서 가 오픈 죄를 엄청나게 돈을 접었어요
뭐 오픈 소스 인데 지내 되돌려 받고 후 새 팝 컨트리 하는거예요 진액
써야 되니까
그러다가 오픈 질의 한계를 알고 제가 개수를 만드는 생을 살았고 자기네
잎의 만들고 그걸 계속 개량해서 현존하는 그래픽 라이브러리 중에는 가장
a pun 가장 성능 좋고 가장 성능을 생각해서 만든 ip 해야죠
그리고 이제 두 번째는 모바일의 뜨면서 애플이 이제 자기네 돌려야 되니까
가속을 오픈 gl es 럼주 미인 거야
4 불도 새로운거 만들어 나갔죠 메탈의 이 필요한가
그 이유도 똑같은 거라고 정말 오픈 gl 한계가 보이는 거예요
이후 방 호환성 부터 시작해서 막 별별 이상한
성능 자체도 말이 안 되고 이제 뭐 소스 코드도 다 보이는 그런 문제도
있고
예를 들어 쉐이더 코드 같은 경우 어쩜 이 때 얘기 할게요
그래서 제도 만들어 나왔어요 지금 1 이거 밀고 있는 애들은 제가 올 때
구글 하나 밖에 없거든요 왜냐면 안드로이드에서
하드웨어 가서 5분 제로 해야 되기 때문에 근데 구글도 생각이 있으면
지내 apl 또 생각을 하고 있을 것 같아요
불칸 으로는 제가 볼때는
까 할 의사가 끌고 나가는 라이브러리가 확실히 통일성 있고 잘 나오는
경우 걸 알아요 오튼 또 수는 확실히
사람마다 이제 생각하는 아젠다로 다르고 사람마다 이제 뭐가 중요한지 에
대한 가치가 다르기 때문에 저는 오픈 gl 자체가 이제 성능 고성능에
그래픽을 그리기 위해 만든 이 펜 아니라고 봐요
그냥 리얼타임 andrei 리얼타임 거 어플리케이션이 아닌 그냥 그냥 쑤
도로 10 타입 1 대한 초당 15프레임 정도 나오는 정도를
예상에서 만든 거지 게임 처럼 60프레임 나오기 외 만든 apr
아니었다고 보고 그 뒤에 뭐 어떻게든 막 서로 고치면서 패치를 했는데
이게 더 중구난방이 되다 보니까 옛날에 이 피어 있고 요즘 api 있고
익었으면 드리고 적었을 빠르고 말다 드레이핑 1 버린 거죠 그래서 제가
가끔 스크립트 언어에 대해 아는 얘기 안 똑같이
음
뭐라 그럴까
자기가 도 놀면서 테스트 하긴 좋지만 프로덕션 요나가 겐 천안 존의 배가
아닌가 생각이 되요
뭐 그런 개념에서 이제 ps3 같은 경우도 내부적으로 품질의 있지만 자체
2패 을 쓰시오
오픈 죄 안 쓰려고 해요 그래서 아까 잠깐 얘기 하려고 했다 쉐이더 부분
이제 텍스 쉐이더 랑 오픈 전이라 다른 게 뭐냐면 제트엑스 쉐이더 는
자체 컴파일러 줘요
그래서 제가 컴퓨터 에서 쉐이더 코드를 짜고 액체 엑셀로 컴파일을 하면
걸어 이제 쉐이더 드라이버가 이해하는 어셈블리를 바꿔 주거든요
그럼 이제 그 특 어셈블리를 이제 게임을 실행한 도중에 로딩을 하면은
이제 각 드라이버 마다 그걸 어떻게 처리하지 좀 다르니까 안에서 다시
한번 컴파일을 실시한 컴파일 조금 더해서
이제 그걸 돌리는데 일단 컴파일 타임 업계 내릴 수가 없죠
아무래도 쉐이더 어느 어셈블리는 좀 더 단순한 언어 니까 그 순간에서
근데 오픈 지에는 그게 없어요 그 스펙 자체가 없어서
쉐이더 코드 그대로 변수입니다 있는 코드 그대로
이제 로딩을 한 다음에 그걸 이제 들어간 테 컴파일 다해라
그렇게 해요 그럼 일단 드라이버 컴파일 시간이 드릴 수 밖에 없고
그리고 또하나 이제 게임 개발자 입장에서는 제 쉐이더 코드를
그렇게 플레인 텍스트로 저장하는 자체가 싫은 거에요 어찌보면 코드를
보호하고 싶은 게 있잖아요 그래서 그런 얘기를 하며 는 오픈 gl
커뮤니티에서는 제가 전에 싶을 커뮤니티 좀 갔던 것처럼 똑같은 얘길 해요
오픈 지은 원래 모든게 오픈되어 있는 거기 때문에 그 당연한 거다 이게
올바른 방법이다
그걸 숨기는게 틀린 방법이다 라고 옮겨요
그러나 북한에서는 그게 나와요 드디어 컴파일하는 방식
오픈 gl 이제 그게 문제라는 걸 아는 거예요 게임 개발자들이 오픈 죄를
피했던 이유도
뭐 여러가지 이유가 있지만 이것도 그 중에 한 하거든요
내가 미쳤다고 실행 드러내 텍스트를 로딩을 하고 일단 것들이죠
그걸 재컴파일 넣지만 또 보내고 그렇다고 컴파일한 바이너리를 캐시 할
수도 없어요 왜냐하면 은 그 드라이버 버전 받기 때마다 그 꼴에 또 바뀔
수가 있기 때문에
그래서
오픈 gl 은 정말 뭐라 그럴까
요즘들어 이제 모바일 때 많이 인기를 끌게 했지만 그거는 순수하게 그냥
애플이 자기네 2팩 없었다고 보고
지금은 다시 좀 시들어 지겠다 누가 불칸 있듯 여인 이라고 부르면 전에
있다는 의심스럽다고 얘기부터 요 뜰지 앉지 확신한 쓰는데 이게 지금
뭔가를 자기도 이제 시간을 투자해서 돈을 투자해서 뭔가를 만들 만큼
북한이 뜨게 냐 라고 물으면 전 아니라고 봐요
이게 이제 일 년 이 년 뒤에는 좀 다를수도 있지만 그건 좀 더 봐야
되고 그 입에 질액 텍스 는 이미 모 52 는 이미 뜰 거구요
왜냐하면 은 윈도우 서쪽에서 나 모르게 그래가지고 뜰 거고 그건 마이크
속도 엄청 밀고 도 있고
음 뭐 이게 크로스 플랫폼의 아닌것에 단점은 있지만
저는 솔직한 얘기로
마이크로소프트가 gets 자체를 크로스 플랫폼을 만들어 주면 좋겠어요
근데 그럴 수가 없는 이유가 있는데 지금 굉장히 큰 이유가 있지만
아 아니면 오픈 제가 이 돌아오지 오픈일 정말 해주던가
문제는 마이크로소프트 그럴리가 없죠 자기네 자체 ap 가 있기 때문에
그래서
에 저는 그래서 오픈 질에 대한 생각도 9억 5 행 기준 10 기존
얘기하다 여기까지 왔는데
북한에서는 그 행렬을 어떻게 주장하지 모르겠어요
바뀌지 않았을 것 같은 생각인데 좀
에 상식적으로 왔으면 좋겠어 했는데 왼손잡이 오른손잡이 얘기 때도 그렇고
그래서 아
결과적으론 제책 틀린거 부터 이제 행 열 이런거 뭐 메모리 저장
얘기하는거 효율성 그리고 품질의 좀 이해가 안되는 부분 내가 본 오픈
gl 과 디렉 텍스 에 차이 점 개념 제품을 만드는 사람으로서 그
정도까지 고 뭐 그런다고 해서 이제 어떤 플랫폼에서 오픈 제의를 받게
치며 난다
먼저 돋보였어요 그러나 쓸 때마다 언제나 창
좀 들어 딴 생각을 해요 그래서 오픈 gl es 에서는 좀 클리너 고
했지만 뭐 그렇죠 그렇죠 이쪽에서 좀 그랬고
어쨌든 그 정도고 음 에 뭐 이정도는 주저리주저리 할 얘기 다 있고
시청자도 많이 잃었을 것 같으니까 뽑혔습니다
