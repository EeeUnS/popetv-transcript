안녕하세요, 포프입니다.

제가 예전에 한동안 '특정한 테스트 방법론보다는 올바른 테스트를 제대로 하는 게 훨씬 더 중요하다'는 얘기를 여러 번 한 적이 있어요. '유닛 테스팅이라던가 TDD로 인해서 가져올 수 있는 소프트웨어의 품질 향상은 그렇게 많지 않다. 오히려 다른 거 다 했을 때 그다음이나 마지막에 여전히 그걸 할 여력이 있다면 마지막 5~10%의 품질을 높이기 위해 하는 것들이 그런 것'이라는 얘기를 한 적이 있어요. 일반적으로 아닌 경우도 있죠?

근데 갑자기 오늘 녹화하는 오늘 포프 TV 댓글에 그런 게 달린 게 있었어요. 뭔지 한번 읽어 드릴게요. 이렇게 댓글이 달렸어요. '미래 시점에서 보니 TDD를 외치던 사람들은 많이 죽은 것 같네요.'라고 쓰여 있어요. '사실 본인이 현업에서 개발을 해왔으면 테스트 주도라는 말이 얼마나 허황된 말인지 잘 느껴질 텐데 말입니다. 주니어 개발자가 느끼기에 테스트는 일종의 보증 같은 느낌이 듭니다.' 그리고 조금 더 다셨는데, 제가 오늘 이 마지막 문구를 읽는 순간 갑자기 떠오른 사람이 있어요. 나에게 유닛 테스트가 중요하다는 말을 처음 해 준 사람. 그게 언제냐면 지금부터 대략 17년 전. 그래서 제가 TDD가 한국에 열심히 소개되고 막 이상한 얘기가 돌 때 제가 먼저 앞장서서 '이거 약간 약팔이 같은 느낌이 있다. 이거 하면 안 된다'라고 말할 수 있었던 이유는 제가 17년 전부터 북미에서 TDD가 어떤 일들을 해왔고 그걸 봤기 때문이에요. TDD의 장점, 단점 이걸 얘기하지 않을 거고 그냥 이 사람 얘기를 하려고 해요. 주니어 개발자 입장에서는 이 사람처럼 하면 직장을 잃을 수도 있는 것 같아요. 

그래서 어떤 얘기였냐면 그때가 제가 아마 경력이 한 2년 거의 채워갈 때쯤이었던 것 같아요. 그때쯤에 제가 다른 회사로 이직했어요. 그 회사에 있었던 경력이 한 1년 정도 된 주니어가 있었는데, 저는 뭐 별로 좋은 대학 출신의 컴퓨터 공학과고, 그 친구는 굉장히 좋은 대학 출신이었어요. 거기서 일하다 보면 이 친구는 나름 자신감도 있어 보이고 사람하고 잘 상대하는 것도 같고 그에 비해 저는 극단적인 I니까 대인관계도 그렇게 좋은 편 아니고 조용한 편이었거든요? 그러다 어떤 날 프로그래머끼리 만나서 얘기를 하고 있는데 갑자기 이 친구가 그런 얘기를 해요. '야 우리는 왜 유닛 테스트를 안 하냐? 유닛 테스트를 해야지 소프트웨어 품질이 좋아지는 건데, 게임 쪽은 너무 유닛 테스트 안 하는 것 같다. 그래서 우리가 소프트웨어 품질을 위해서 유닛 테스트하는 게 맞다'는 식으로 얘기를 하더라고요. 저만 있던 게 아니라 시니어까지 포함해서 많은 사람들이 있었어요. 그때 시니어 사람들이 되게 조용해졌어요. 이 회사가 되게 나쁘고 이런 회사는 아닌데 나쁜 말도 잘 안 하고 피드백도 잘 안 주는 회사라고 보면 맞을 것 같아요. 조용해지고 얼버무리고 어떤 식으로 넘어가더라고요.

저는 '왜 저럴까?'를 고민했어요. 맞으면 '맞다' 아니면 '아니다'라고 해주면 되지 않나? 제 첫 번째 회사에서는 그런 식으로 피드백이 왔기 때문에 그 생각을 했었고, 그리고 두 번째는 이 친구가 말하는 스타일이 제가 그 당시에는 뭔가 좀 어색하다고 느꼈는데, 시간이 지나고 비슷한 사람들을 많이 보다 보니까 그냥 앞서서 모든 말을 하든 간에 하하하하 이러면서 얘기를 하는데 약간 좀 비겁해 보이는 그런 표현을 하는 사람들이 있거든요? 그거라는 걸 나중에 깨달았어요. 근데 그때는 뭔가 이상하다 정도였어요. 그 뒤에 한 3개월 정도 지나고 그 친구가 잘렸어요. 왜 잘렸는지 그땐 잘 몰랐죠. 그리고 저는 그 회사에 좀 오래 있었는데, 한참이 지난 후에 누군가 그 친구 얘기를 해서 LinkedIn에서 찾아보니까 그다음에 다른 직장을 한번 갔다가 게임 쪽이 아니고 IT 업계이긴 한데 개발보다 좀 못한 데 갔다가 그 이후에는 경력이 아예 없었어요. 제가 오늘도 궁금해서 찾아봤거든요? 개발 쪽, IT 쪽의 경력이 그 뒤로 끊겼어요, 굉장히 좋은 컴공과 출신임에도 불구하고. 되게 이상했었어요. 근데 이제 그 회사에 제가 오래 있는 동안 그 친구 얘기를 들었어요. 근데 얘기를 들어보니까 퍼포먼스의 문제가 있었대요. 코드를 작성하면 버그가 많이 나오고, 그 버그를 본인이 못 고친대요. 그리고 버그를 고치라고 주면 그게 자기 책임이 아닌 것처럼 회피를 많이 했다는 거예요. 그래서 그게 문제가 돼서 잘린 거고, 그리고 그 당시에 거기 자리에 있던 시니어하고 친해졌거든요? 그 시니어가 '그때 걔 기억하냐?'고 묻더라고요. '자기가 만든 문제를 자기가 해결하기보다는 '이런 시스템이 없어서 이게 문제가 생긴 거다'라고 주장하는 것 자체가 책임 회피로 봐서 프로그래머로 잘 될 수가 없다.'라는 걸로 결론을 내렸대요.

그러면 이제 '우리 회사가 체계가 없었냐?'라는 질문을 해야 하잖아요? 그게 아니었어요. 저희 회사의 프로그래머보다 많은 게 QA였어요. QA가 하는 일들을 보면 정해놓은 테스트 목록들이 있어요. 그걸 매일매일 해서 어제와 달라진 거, 이런 것들이 있으면 곧바로 점심때까지 보고서가 와요. 그리고 매일 정해진 패턴으로 특정 맵을 돌아다니면서 퍼포먼스가 떨어지는지 안 떨어지는지 최대 FPS가 몇인지, 최저 FPS가 몇인지, 평균이 몇인지 이렇게 해서 아예 엑셀 스프레드시트를 쫙 만든 다음에 느려진 거 빨간색, 노란색 이런 식으로 해서 보여주는 것도 있었어요.

그 외에도 유닛 테스트는 자동화 테스트잖아요? 저희가 말한 QA는 그런 자동화 테스트가 아니잖아요? 자동화 테스트도 꽤 있었어요. 이 자동화 테스트 솔직히 어마무시한 것들이 많았거든요? 이걸 제가 이 비디오에서 다 말하면 너무 길어질 것 같아서 그건 다른 비디오에서 말하기로 하고, 자동화 테스트보다 훨씬 더 좋은 테스트가 사실은 매뉴얼 테스트이기는 해요. 전문 QA가 하는 테스트. 그 사람들이 어마무시하게 하는 테스트들이 이미 있었고, 자동화 테스트가 그렇게 많았음에도 불구하고 자기가 어떤 문제를 만들었을 때 그 문제를 찾아 고치기보다는 '시스템이 문제다. 내가 이게 시스템이 문제가 없었으면 코드를 넣지 않았을 거다'라고 얘기하는 것 자체가 문제가 있었다는 거죠. 왜냐하면 라이브에 나가지 않는 코드를 넣고 QA가 잡은 다음에 고칠 수 있으면 똑같은 거거든요? 코드를 넣든 안 넣든 간에. 왜냐하면 라이브에 나간 게 아니니까. 근데 이 사람은 그냥 자기가 못한다는 걸 드러나는 걸 막는 게 더 중요했던 것 같다는 생각을 그 당시에 했어요. 그리고 당연히 이제 시대는 지나서 TDD니 이런 부분들, 유닛 테스트니 '이게 굉장히 중요하다'는 얘기들은 굉장히 줄어든 이야기예요. 물론 이게 CI나 CD 이런 쪽으로 해서 자동 배포를 위해서는 열심히 사용되는 부분들이 있어요. 그건 훌륭한 거예요. 근데 그게 자동 배포를 막아주는 역할을 하는 것뿐이지 소프트웨어 품질 자체를 보장하는 건 아니거든요? 근데 소프트웨어 품질에 미치는 유닛 테스트 영향 이런 것들은 증명된 게 솔직히 거의 없고 업계에서도 거의 다 정리가 된 부분이었어요.

제가 2016년도에 마지막 게임 회사에 들어가서 일을 해줬을 때 그때도 비슷한 말을 하는 주니어가 한 명 있긴 했어요. 근데 시니어들은 '그런 거 우리 다 해봤고 안 되는 게 맞아. 그런 걸로 크게 변하는 건 없어'라는 식으로 얘기를 했고 회사 분위기도 모든 사람들도 그렇게 받아들여 가는 분위기였거든요. 그래서 이제는 거의 정리가 된 이야기인데 갑자기 그때쯤부터 한국에서 이걸로 막 약을 엄청 팔고 있는 거예요. 제가 17년 전 그때 봤던 그런 얘기처럼. 저는 그거에 대해서 곰곰이 생각을 미리 해본 적이 없으니까 '뭐 그 친구가 말해도 그럴 수 있겠지'라고 열린 마음으로 그냥 봤는데, 결과적으로는 '뒤늦게 보니까 아니더라.'라는 걸 확인한 과정인데, 그 과정을 다시 한국이 겪어가는 걸 보고 나서 제가 예전에 비디오로 만들었던 거예요. 여러 번 제가 TDD에 관해서 얘기했던 게 그런 거죠.

여전히 TDD가 좋다고 말하시는 분들은 왜 좋은지 저한테 설명을 제대로 못 하더라고요. '저는 좋더라고요.', '그러니까 왜요?' 설명을 못 해요. '아 저는 이거하고 접목하면 좋아요.', '어떻게 좋은데요?', '아 그걸 뭐 잘 아시겠지만...', '모르겠는데요?' 대답을 못 해요. 제가 문제라고 말하는 게 문제가 아니라고 말하는 사람은 없었어요. 제가 이미 TDD에 대해서 말한 게 벌써 몇 년이 되어가는 것 같고, 이제는 업계 전반적으로도 그리고 굉장히 큰 회사에서도 'TDD 잘못된 거다.', '유닛 테스트 잘못된 거다'라고 말하는 것도 있어요. 물론 아직도 잘했다고 하는 부분도 있고요. 그래서 TDD나 유닛 테스트 같은 것들이 뭐 쓸 수 있는 것들이 있어요. 저희 회사에서도 TDD는 아니지만 유닛 테스트는 쓰는 것들이 있어요. 하지만 그쪽에서 강력하게 주장했던 '이걸 통해서 뭔가 크게 바뀐다'라는 것보다는 여태까지 우리가 해 왔던 그 많은 소프트웨어 품질을 보장하기 위해 해 왔던 것들에 +알파로 할 수 있는 것에 한해서요. 단, 했을 때 그걸 하는 데 드는 비용이 굉장히 높기 때문에 '그 정도까지 소프트웨어 품질을 보장해야 하는 부분이냐?'라는 비즈니스적인 결론을 내려야 하는 부분이 올 수 있죠.

갑자기 그 친구가 생각이 나서 찾아본 김에 얘기를 한 거고요. 여기서 가져갈 교훈 같은 건 내가 만든 게 뭔가가 문제가 생겼을 때 그걸 빨리 고치고 다시 그 문제를 안 만들면 굉장히 발전이 빠르고 좋은 개발자로 봅니다. 그래서 그게 중요한 거지 내가 지금 못하는 게 드러났다는 것 때문에 그걸 숨기려고 이상한 것들을 끌어오면 오히려 더 안 좋게 보일 수 있다는 거, 다음 비디오에서 어차피 제가 자동화 테스트 되어 있던 것들 그런 거 얘기할 거니까 거기서 또 생각이 나면 말하고 아니면 말고 그럴게요.

포프였습니다.