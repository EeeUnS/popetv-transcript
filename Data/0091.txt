얘 안녕하세요 4p 입니다 제가 이제 오늘부터 프라우드 내에서 일을 하기
시작을 했는데요
2
그건 농담이고 예 그 kg 시대의 받았던 집체 요 예 그 뭐 일단 오늘은
사실 멀리 떨어진 얘기를 하게 할 건데
아
hsa 100매 잠깐 여담을 하려고 해요
사실 제가 얼마전에
그 네트워킹 프로그래밍을 좀 하려고 생각을 한 적이 있어 생각 말고 전
별로 안하는데 생각만 하는 것 같아 생각해보니까 망상 주의자 요 아 근데
그때 이제 그 게임 쪽은 아니고 이제 뭐 메신저 쪽이나 뭐 스트리밍
이쪽을 생각을 하면서 p2p 생각을 좀 했어 거니 모바일 쪽에서 p2p
를 해 있어서
모비토 피가 좀 어렵고 뭐 뭐 es 더위 레이드 해줘야 되고 막 이런
생각을 했었는데 그 최근에 뜻하는 사람아 그냥 그런 비슷한 얘길 하다가
좀 아마 표제 비운 이미 어떤 것 같아요 지금 옛날에 아마 he 계시다가
지금 인지 하시고 계실 텐데
추적이 님하고 이제 저희 irc 책 채팅방이 있거든요 저희 게임 되요
보호해서 이자나 irc 채팅 방이 있는데 거기서 이제 얘기를 하다가 게임
가인 딩가 둘중에 더 2채를 위 1 에서 얘기를 하다가
아 뭐 이런저런 얘기 하다가 이제 그 얘기를 해 주셨던 것 같아요
이제 그렇게 아 p2p 나 이런거 잘 지원해주고 p2p 에서 실패하면
릴레이로 벌 해 주는 그 정도의 서비스를 정말 지원해주는 제품은 그때
텐션 프라그 내 4 테이션 그정도 밖에 없다고
아 그리고 다른 것들을 잘 가지 또 해야되고
그런데
제가 올 때 결과적으로 게임 엔진의 미래는 네트워크 쪽이 이제 엔진
랩에서 점점 지원을 한다 해야 된다고 보거든요
대표적인 예로 히어로 엔진 같은 경우가 그렇고 뭐 거기는 서버 호스팅
부터 어 클라우드 으로 해와 그냥 뭐 스케일링 까지 전부다
그쪽에서 해결 해 주니까 그래서 그렇게 된다면 결국에는 이런 목 p2p
의 문제에 밀레 있어 언제 이런 것들도 결과적으로는 아 게임 엔진의
1번에서 조만간 나올 거라 생각을 해요 그리고 그거를 잘 잡아서
결과를 클라이언트 프로그래머 몇 하고 뭐 아티스트 못하고 만들 수 있는
게임을 만들 수 있는 그런 플랫폼을 제공하는 회사가 결과적으로는 게임
엔진의 오일을 갖추고 라 생각을 하고 그런 의미에서 이제 네 테이 션에
현재 위치는 굉장히 좋죠
혼자 덥지 않은 손으로 가기 보다는 당연히 다른 게임 엔진 쏘게 자취 걸
포함이 되서 그런 서버 호스팅 이라던가 뭐 서버 스켈링 이런 부분까지
어떻게 해줄 수 있는 그런 솔루션을 조금씩 더 개발 하면 좋겠지만
물론 뭐 배연 집 사장님이 그런걸 하고 있으실 거라고 생각을 하는데
그 어쩜 히어로 엔진 같이 이렇게 좀 하나의 완전한 1 플레이 폰
이런식으로 나오면 좀 더 좋지 않을까 생각을 해요 그래서 뭐 어쨌든 간에
느 펜션 관건은 또 대충 했고
어여 다음은 거기 얻고 메탈 일하지 않습니다
농담 이였습니다 거는 1 한다 라고 했던것
멀 때는 얘길 가볼게요 근데 저항 편에서 이제 뭐 멀티 스레딩 하 고
저렴 카운팅 하고 그런 얘기 하면서 아 이제 벌써 웨딩 안되고 한다고
얘기 말씀드렸고
그리고 어찌 보면은
결과적으로 멀티플 엔딩을 가지 않으면 그런데 스케이팅에 문제가 우리 스캔
한계 속도 저하 문제를 고민할 필요도 없어 왜냐면 속해 있으면 되요
충분히 빨라요 싱글 2 레딩 에서나 암 걸 꼬모 아톰의 잉크 리스
디그리스 않은 상황에서
그런데 으
그 예전의 이제 멀티 스레딩 을 안 할 순 없잖아요 사실 뭐 예전에 뭐
그런 거죠 뭐
프리 많지는 이제 끝났다 공짜 점심을 끝났다는 이글 시작을 해서 우리가
뭐에 법칙에 의해서 뭐 싱글 스레드로 갔어도 매년 몇 배씩 빨라졌지만
이제 그 물리적인 1개의 도달했기 때문에 이제는 그냥 멀티 코어로 가야
된다 그래서 옛날에 싱글 스레드로 만들었던 게임들 이남호 프로그램들
실행해 보면 은 cpu 점유율이 12% 코어가 8개 면
이롭게 노니까 그렇게 되서 이제 그게 문제다 그럼 그걸 다 써야지 만
게임이 빨리 된다해서 멋들어진 엄청나게 했어요 이 천한 오른 년부터
2004 년부터
그때 여러분 실수를 솔직히 맞춰 게임 개발자 입장에서
처음에는 단순히 그냥 어 그래 업데이트 루프는 이 뜰에 대해서 n 저
높은 대처 쓰레 대해서 이거 두개로 나눈 던가
이제 어디서 쓰레드 세로 새로 만들고 는 파티클 쓰레드 새로 만들고
그래서 각 쓰레드 마다 아 무슨 하나의 할 일을 주는 것
근데 문제는 결과적으로 업데이트 트레드가 이랜드 플래너가 빠를 수도 있고
그런 경우에는 멈춰 이 기다리니까 그런게 문제였고
아 그리고 뭐 데이터 카피하고 뭐 다 굶어 퍼 링 하고 뭐 이거 할때 안
지어졌다고 이런 여러가지 문제도 있었고
뭐 그게 여러가지 50 창으로 겪다가 결과적으로는 ps3 가 잘한 게
하나가 있어요
ps3 가 다른건 타게 바쳐 써도 1 자란 것은
잡 시스템 을 만들었다는 거 그래서 잡 시스템 의 개념이 뭐냐면
열애 는 cpu 가 하나가 있고 하는 너 2개 였나 뭐 몇 개가 있고
다음에 spu 라는게 9개 있었잖아요 전혀 색다른 모양의 cpu 들
그렇게 여기서 돌리기 위해선 특별한 코드를 만들어서
그래 여기 cp 에서 이런걸 준비 했으니까 이걸 다 9개 자매가 실행을
시켜서 끝내고 돌아오려
그래서 그런 개념 이었는데
그때 이후로 모든 것이 떨어진 방법이 사실 이 정도로 많이 돌아 갔어요
그래서 저희는 이 잡 시스템 이라고도 하고
태스크 시스템이라고 더 많이 들으셨을 거고 결과적으로 잡을 어떻게 불리한
야 분류 하냐고 차인데
뭐가 더 빠르니 아들이냐 뭐 어떻게 그룹 찍느냐 결과적으로는 비슷한
거고요
그래서 개념은 뭐냐면 아 어쩜 이제 여태까지 멀티 뚜렛 이니 힘들었던
이유는 프로그램인 패러다임 자체가 저희가 이제 오브젝트 웬츠 시스템을
쓰잖아요 op 를 쓰고
거기다 이제 머플러 시절이 라고도 하고 아 이거는 시 스타일
그러니까 그런 벌써 없는데 문제는 뭐냐 는
전 코드가 에 실행했던 그 상태의 의존해서 다음 코드가 유지가 된다
그래서 상태 이 값을 기억을 해야지만 뭔가 아 전에 바꿨던 상태 값에
의존해서 뭔가를 상태를 바꾸고 이렇기 때문에 여러가지 뜰에 대해서 형태를
바꾸기 시작을 하면 은 그게 레이스 컨디션의 생긴다고 문제 였거든요
그래서 그거를 해결하는 방법으로
뭐 예전부터 있었던 프로그램 방식이지만 이제 펑셔널 프로그래밍이 그래서
있는거구요 펑셔널 프로그램을 한마디로 하나의 실행 주체가 독자적인 거기
때문에 프로 다른 실행 위치에 끼리 건들지 않는 거에요 그래서 제가 말씀
드렸던 게 잡 시스템 도 비슷한 개념이 얻고 태스크 시스템에 비슷한 개념
이에요
이런 이런 이런 태스크가 톡 되려고 구성을 해서 각 태스크 과 여러
스레드에서 동시에 실행이 되도 서로 영향을 안 미치는 그런쪽으로 뭐 셀링
하고 있고 제가 원하는 멀티 스레딩 웨이 방법도 사실은 그 쪽이에요
아 그래서
아직도 여러 개임 회사에서는
약간 좀 예전 방식의 말씀만이 구현을 해요 새로운 시스템 안되고 새로
왠지 맞는다고 하는 그 책 음원 치고 있을 때 있었던 그 회사도
스퀘어에닉스 산하의 의해서도
엔진 자체가 만드는데 그 패러다임에서 벗어나 지 못하더라 고 하자 그래서
아 저건 아 아니구나
어 그래서 제가 원하는 시스템은 이 거에요
뭐 이미 많은분들이 아시고 계시겠지만 제가 제대로 구현하는 회사는
한군데 밖에 없다 써야지 제가 다 몸담았던 회사 중에
결과 점은 모든 것인 걸 술에 돼요
각 쓰레드가 그대는 개념의 일단 없어요 모든것이 벼슬에 실행을 하되 각
구성 요소가 벌 때도 잡으로 뻗치는 뭐 예를 들어서 애니메이션 업데이트
하겠다 그러면 아
애니메이션 게임 2 그 애니메이션 업데이트 단계가 딱 cpu 에서 있는
거죠 그러면 2cpu 단계에서는
극악 매체들이 있는 애니메이션 컴포넌트가 있잖아요 그 그래서 컴포넌트
기반 시스템이 태스크 시스테마 잘도 봐요
그래 님의 이 컴포넌트를 쫙 있잖아요 어레이 가 그러면 그 각각의 어레이
에 대해서 그걸 말씀드리면 돌리는 거에요 그렇지 개념 뭐냐면
애니메이션 업데이트 한 줄 그래서 모든 태스크가 왕창 만들고 이 태스크를
여러 쓰레드 해서 실행을 시키는 거죠 그리고 그 시험이 끝날 때까지는
여기게 멈춰있는 것이 cpu 가 많이 해도 그 중에 한 다음에 돌리고
있겠지만 굳이 멈춰 펴놓고 여러 가지 못해 밴드 씩 만든 머핀 데
간단하게 얘기하면 기다리는 거예요 그 저 벌어져서 머드린 쫙 해서 모든
일을 끝내고 이렇게 내렸다가 이게 뭉치 조금 딱 뭉치면 그 순간에 다음
잡을까 실행하는 거에요 뭐 뭔지 모르게 파티클 업데이트 그러면 딱 멈추고
파트 쫙 한 다음에 또 멈추고
그래서 마지막 장에 랜더 까지 가겠죠 그 맨 더 에 가서는
예전에는 이게 좀 힘들었어요 왜냐하면 렌조 리인 자체의 잡을 써미트 하는
경우에 멋있더라 등의 지원이 잘 안 됐거든
그 뒤에 dx11 해서 뭐 지원한다 고 했지만 실제 드라이버 레벨에서 잘
지원이 안 됐고 그래서 이거를 굉장히 고생을 많이 했어요 사람들이 사실은
4 2
제가 볼 때는 이제 다음 주 아이 버그가 제테스 일레븐 보호 퉁 과 뭐
요번에 2r 부연 나 거기서 나왔던 그 뭐야
플랜테이션 보면 그게 잘 되기도 하는것 같아요 그래서 랜더링 할 때도
갈라져서 모든걸 이제 커맨드 라인을 추가 하는 건데 사실 곧바로 써밋
하는게 아니라 그런 커맨드라인 공식적 만들어주고
뭉치면서 그런 한꺼 맥주 브랜드 여기 뿌려주고 그래서 모든 게 벌레는 따
주었다 벌릴 때 줄였다 벌렸다 드렸다면 은
결과적으로는
뭐 약간의 100% 를 쓸 수 없겠지만 어떤 머스트 레딩은 개념이 가다
100% 는 몫의 모든 코어를 그래도 굉장히 멀티 들여 등이 가까운 거의
100% 에 가까운 그런 성능 점유율이 나오고
그리고 아까 말씀드렸던 락이나 없나
뭐 아까 저번 비디오에서 말씀드렸던 그런 락이나 언락을 걸 이유도 없고
렉스 펠트 같은 경우도 뭐 굳이 걱정안해도 되구요 이 자비 벌어지는 동안
l 스켈터 는 개념이 없는 거에요
다 지적이 독립적인 거기 때문에 어 그래서
결과 적은 제가 원하는 렌 절인 방식 팬들에게 아니구나
게임 엔진 의 아 게임 루프 방식은 그 거에요
게임 루프는 싱글 쓰레드 아 모든 게 한 줄로 가되 각 잡을 여러개를
벌린다
4 제 그게 게임 엔진 자체를 처음부터 디자인을 잘 안 해놓으면 은 이
컴포넌트가 져 컴포넌트 가져오거나 이런 문제가 생겨서 문제가 생기거든요
근데 처음부터 그거를 적립을 잘 해놓으면 이 컴포넌트는 언제나 이거 먼저
업데이트되고
이해가 업데이트에 대해 컴포넌트를 수정을 안 하고 이런 제안을 잘 벌어
두면
충분히 가능한 앰 신이요 제가 예전에도 한번 해봐 썼고 사실은 그 c 샵
으로 한번 컴포넌트 기반
물 오브젝 된 지 를 만 적이 있는데 오브젝트 컴퍼니 만 오브젝트 게임
오브젝트를 기반으로 한 게임 엔진은 만든 적이 있는데 그때 비슷한
해봤어요 근데 제가 굉장히 복잡한 게임은 아니었지만 그걸 했을 때 저는
충분히 게 나왔거든요 이렇게 벌리고 줄고 벌리고 줄 구하는게
그래서 게임 엔진은 아픔 디자인 하시는 분들은 결과적으론 그렇게 가셔야
할 거에요
그러면은 아 뭐 코어가 500기가 되는 1000개가 되던 문제 없이
똑같이 들고
그럼 어떤 의미에서는 이미 뭐 쿠다 나 뭐 컴퓨터 쉐이더 도 똑같은 일을
하고 있는거죠 사실은
어 데이 top 쓸모 캡쳐 같은걸로 잡아주고 메모리 블럭 잡아두고 요
메모리 블록은 요코 에서만 아 사용하는거 그런 식으로 하는 거기 때문에
메모 우리는 조금 더 많이 먹을 수 있어요 결과적으로 근데
메모리는 어차피 제스 아니까 cp 보다 내 머리에서 싼것 같아요 하는
갈수록 그래서 그 문제 득을 만큼 적립이 되는 것 같고 그래서 제가
원하는 게임 분은 싱글 스레드 라는 걸 말씀드리고 싶어요
어 싱글 트레드 때 태스크 시스템 잡 시스템 에 기반 한 거고 그리고
이제 시이나 c 플러스 플러스 에서 돌 수 있는 탱크 시스템 2
아 공짜로 나왔던 것 중에는
그 다 t 트 만한게 없었던거 같아요 뭐 tvb 정도가 굉장히 좋은 거
였는데
oc 샵이나 뭐 그런거에 되죠 패러 넓고 위치 이런거 있죠
고객 바로 거에요 덩치는 프로그램이 람다 개념
아 그래서 뭐 그건 굉장히 좋은 방향인데
아 요번에 비쥬얼 할까 마이크로소프트에서
마이크로소프트 참여했고 인텔도 참여했고 그래서 이제 그거를 라이브러리와
에서 하나로 통합하려는 움직임이 있어요
뭐 제 생각에 제가 지금 정확히 스펙은 기억이 안나는데
어시 플러스 플러스 표준 13과 17 인가에 들어가는 것 같아요 근데
여기서 이제 얘네들이 또 하려고 하는것은 cpu 만이 아니라 gpu 에
컴퓨터 셰이드 까지 같이 컴퓨터 쉐이더 까지 동원 하는 그런 하나의
라이브를 만들려고 하는 것 같은데
게임의 입장에서 솔직히 cpu 만 지원되는 것만 있으면 좋아요
gpu 넣지 버튼 그리는 라고 바쁘고
뭐 거기서 컴퓨터 쉐이드 를 쓸 일이 있으면 아
뭐 쓰기가 쓰겠지만 그 두개를 합친 다르게 굉장히 쉽지 않은 거거든요
cpu 구조 자체가 달라서 그래서 제가 이제 표준안을 정확히 꼼꼼히
살펴보지 못했지만
그게 cpo 지표 중에 하나만 골라서 돌릴 수 있고 그러면 괜찮을꺼
같아요 예전에 봤던 그 씩 마이크로소프트의 자체도 만들때 앰프 라는 것은
그런 식으로 개념을 잡혀 있어요
gps 만 돌리거나 gp 의 전통이 거 냐 cpu 에 돌 있거든요 이런
이런 이런 것도 가능하고 gpu 까지 돌릴 꺼면 이런걸 안되고 구조
자체가 틀리니까
그중 다 돌리 꺼내면 gp 에 맞춰 곳 올려야 되고 그런 게 있었어요
그래서 그거는
아마 표준으로 들어가고 왔고 이 제시하고 c 플러스 펄스의 표 수면에
문제가 뭐냐면
새로운 표정이 나올 때마다 신택스 가 너무 들어오죠
즉 템플렛 프로그램 되게 안 좋아하거든요
그 이유가 읽기가 너무 어려워요 만약 가로 몇 개 열고 뭐 하다보면 정말
이상해 좋았고
뭐 예전에 있던 프로그램이 안 깨지게 하려는 그럴수밖에 없는것이 나겠지만
그리고 뭐 이미 20년 30년 지난 40년을 수도 있어 그치는 언어의
새로운 걸 추가 하느라고 그런 고통이 따르는 걸 수도 있죠
어찌 보면은
10 플러스 플러스
를 대체할 만한 언어가 좀 모던한 신택스 로 나왔으면 좋겠다 생각을 많이
해요
최근에 모 여러 가지 언어가 나오고 있지만
아
이 게임 개발을 염두에 두고 나오는 그런 아니지만 최근에 봤던 어느 중에
이제
컴파일러 되는 언어가 별로 안 나세요 사실은 그동안 다 스크립팅 언어
쪽으로만 나왔지
4주 최근에 나왔던거 그래도 두 개는 그 구글에서 만들었던 고 랭 하고
모질라 쪽에서 마 천재 만들고 있는 라스트 라는
아 그런 언어가 있잖아요 그래서 사실 웹서버에 써 볼 생각으로 좀 보긴
봤는데
고 애는 아 구글에서 맞는거 최근에 만든 언어 치고는 굉장히 신택스 가구
예요
4 왜 첫 사례로 만들어서 생각이 들 정도로 제가 신택스 가 싫어 갖고
죽어도 안 쓰겠다 너 널 없는데
고행은 제가 볼때는 저는 죽어 단 스러워요 모파 스카이 의 기반인 것도
같긴 한데 뭐 하나 쓸 때마다 이거는 암호를 쓰는 기분이야
딱 보고 이제 언어가 이해가 되야 되는데 그게 안되고
그의 위에 러스트 자체는 50 텍스트 굉장히 맘에 들고 메모리 관리가
굉장히 열심히 하려는 것도 있고
그리고 제 생각에 곳 은행은 가비지 컬렉션 기반으로 알고 있어요
아 근데 러스트 는 가비지 컬렉션 도 조금 지원을 하지만 기본적으로 웹
카운트 라고 기억을 하는데 제가 그게 맞는지 아닌지는 지금 정확히 기억이
안 나고
에로 라스트 조금 관심을 갖는데 아직 쓸 만한 수준까지 안정화가 안 돼
있어요 아직도 1.0 버전도 안 나왔던거 같고
뭐 언어적인 측면에서는 예전에 말씀드린 루비 2 신택스 가 굉장히 좀
맘에 들고
루비 실텍 쓸어 해서 컴파일 언어 로 나올 수 있다면 쓰지 않을까
물론 시나 c 플러스 퍼터 놈 처럼 라이브러리가 다 오기까지 걸리겠지만
그래서 솔직히 제 생각에 시장 c 플러스 도대체 많은 뭔가 나오진 않을것
같아요
아
혹시 #2 많은 제품에 2 겠지만 가비지 컬렉션 빼 주면 좋을것 것이
잡은
어쨌든 뭐 그 정도로 해서 오늘 하려고 했던 얘기는 결과적으로는
아 멋이 더해진 할 때 자꾸만 뭐 복잡하기 이 건져 쓰레드 고의 건져
풀어야 되고 이 생각을 하지 마시고
처음부터 그
[음악]
엔진 의 구조 자체를 그런 식으로 잡 시스템 테스트 시스템을 벗어 때
추려서 할 수 있게 그런 식으로 가길 바래요
그리고 실제 그게 현재 모든 언어 디자인 하시는 그런 새로운 얻어 디자인
코미디가 많이 노력하고 있는 분해 고
펑셔널 프로그램이 다시 주목받고 있는 이 우드 바로 그런 부분 때문에
이거 말 쓰러진 쪽에 나야 뭐 아까 말씀드렸듯이 c 플러스 펄스 퍼즈
패러 를 이런거 나올때 경아 제가 잡 시스템 테스트 시스템 이 주니까 아
뭐 게임 ng 만들때 이제 오브젝트 시스템 자체를 이제 컴포넌트 위주로
상속 위주가 아니라 컴포넌트 위주로 가서 그런 식으로 만들면 훨씬 나을
거에요
처음부터 좀 이렇게 아 디스플레이 니 좀 많이 필요한 부분이고 디자인할
때 그 어떤 의미에서는 아까 말했듯이 이렇게 상어 창조 안되게 막는 방법
있잖아요
그런거죠 어썰트 를 어떻게 잘 구현 한다던가 어떤 메카니즘을 잘 구해서
아 그런 일을 할 때마다 이제 경고가 나오게 하는 것도 굉장히 좋은
방법이고
제가 그건 어떻게 할지 생각을 안해봤어요 뭐 제가 게임 오브젝트를 주로
다룬 인간도 아니고 그래서
어쨌든 주저리주저리 말이 많았지만 오늘 포프 트인 거기까지 구요
다음에 또 뵙겠습니다 예 뽑혔습니다
