이 안녕하세요 풉니다 음 제가 요즘에 cto 쪽 일을 많이 하고 있잖아요
cto 쪽 일을 많이 하다보면 은 가장 이제
신경을 써야 되는 부분들이 그런 부분이 이더라구요 뭐 제가 워낙 좋아하는
분위기도 안돼
어떨 이제 프로세스를 잡고 아니면 어떤 뭐 코딩 이제 귀 약을 만들고
내부적으로 아니면 내부에서 어떤 컬쳐를 가지고 있어야
아 실수를 덜 할까 그게 가장 큰 문제 물론 실수를 간단히 하고 빨리
고칠 수 있는 부분들 이런 부분들은 별 문제가 없어요
그런데 이 실수가 쉽고 1 실수가 날 경우 이것을 차에서 고치기가 드럽게
어려운 경우
그런 경우 들으니 최대한 막으려고 하죠 뭐 그러면 이제 당연히 실수를
막기 위해서는
프로세스를 잘 잡아야 하는 부분이 있게 많아요
프로세스와 잘 잡는 것만으로 실수를 90% 100% 막 이렇게 줄일 수도
있어요 사실은
근데 또 하나의 문제는 프로세스가 복잡해지면 복잡해질수록 이제 원래부터
실수를 잘 아는 사람들은
짜증이 나는 거죠 효율이 안나오는 쓸데 포스 뵙지 않으실 수 라 하는데
그래서 그 중간 사이에 밸런스가 되 게 중요해요
근데 프로세스와 깎아 말 실수를 더 라는 것과
이제 복잡한거 가 언제나 반드시 반비례 관계 아니에요
프로세스를 잘 잡는 것만으로도 실수를 굉장히 줄이 지만 그렇게 사용하기도
복잡하지 않은 그런 문제에 그런 토스트가 나올 수가 있거든요 그래서
결과적으로는 뭐 좋은 cto 라던가 뭐 좋은 아키텍트 그런 사람들을
9분짓는 것은 그런 부분인 것 같아요
뭐 그럴 내면 당연히 사람을 잘 이해하는 것도 중요하겠죠 왜냐하면 은
아데 직원이 이런 애들인데 당연히 여기에 실수를 하겠구나
아니면 2억 더 그저 당연히 몇 번의 실수 해 왔구나
아 그럼 저거는 당의 저 직원의 문제이기도 하지만 어차피 그런 직원을
가지고 있는 이상 어떻게 고쳐나갈 거냐
그럼 어떤 프로세스를 만들 거냐 2d 프로세스를 개발에 잘하는 사람들이
아마 훨씬 훌륭한 아키텍트 고 시티 거라고 생각을 해요
제가 그런 일들을 많이 해요
음 그러다가 최근에 이제 제가 또 굉장히
몇 년 동안 짜증나 하고 있다가 드디어
적립을 시킨 시스템이 있어요 그게 문제 기획이나 왔고 이제 저희 쪽에서
구현이 들어가지만
음 구현 나 들어가다가 또 잘못된게 먹게 나온 떡꼬치 게 있겠죠
어쨌든 간에 뭐냐 뭐냐면 세팅이 어 세팅
제가 말한 세팅이 뭐냐면 일단 웹서버 나갈 때에 세팅을 말하는 거에요
그 이제 웹 서버를 이제 보통 하는걸 보면 은 테스트를 거쳐야 되니까
환경을 여러개를 나눠요 하나가 이제 뭐 스테이징 테스트서버 그 다음에
이제 뭐 개발 서버 개발은 내 로컬 개발 테스트 는 서버 올려 테스트
하는거 그 다음에 스테이징 서버 프로덕션 나가기 전에 정말 i've 황
경우 비슷한 환경에서 거의 비슷한 환경에서 테스트 하고 마지막에 프로덕션
나가죠
그런 환경이 4 개요 그러면 제가 서버를 내가 서버를 넣을때 환경이 네
개라는 것은 dvd 4개라는 얘기에요
이게 라이브 에 있는 데이터를 테스트 서버에서 새 직접 연결하거나
그러는 경우가 생기면 은 결과적으론 개발자 한테
모든 라이브 데이터를 공개하겠다는 거거든요
그러면 그 안에 있는 온갖 유저정보 라던 다 이런 것도 솔직 공개가 되는
거예요 그럼 그 순간에
그 프라이버시 프 위치가 일어날 이 굉장히 많겠죠
사실 한국에서 예전에 모 농업 이었나 거의 다 털린 거 또 어느 개발
짠지 3 오직 인지 그 사람 컴퓨터에 듀 정보가 다 들어 있었다고 알고
있어요
db 에서 나온거 를 갖고 있다가 털린 거다 그래서 결과적으로는 그렇게
이제 데이터가 유출될 경우 를 줄여야만
데이터 털 일도 적응 거에요 그래서 그런게 있고 뭐 또 다른 세트는 일단
db 가 4개가 갈린다 며 는 저희 웹서버가 있고 db 가 대해 달려야
되잖아요 환경 따라 그러면 어느 환경에 내 서버 실행 화일을 실행파일을
올리냐 에 따라
그거에 따른 db 커넥션 스트링 그걸 바꿔 줘야 되요
물론 이걸 코드의 박았고 하시는 분들도 있지만 그런 중요한 데이터가
그런 중요한 비밀키 들이 소스 컨트롤의 들어간다는 것 자체가 이미 시킬
때 불이 치료제 개념에서 그래서 그거는 노노 고 그것을 빼서 어떻게
환경을 잡을 8 필요비 판국에 필요한 거죠 뭐 그외 다양한 것들이 있어요
설정이라는 것은 내가 마이크로 서비스를 한다 그러면 당연히 테스트
서버에서는 따른 테스트 서버를 히트 해야 되잖아요 그런데 서버 유 아 래
그것도 당연히 세팅으로 들어가야 되고 건 당연히 환영 때가 달랐죠
그 외에 뭐 dbs 는 뭐 잉크 릭셩 키 라던가
이런 것 당연히 환경 마 달라져야 되요 그러면 그런 환경을 쫙 만들어야
되거든요
그럼 여태까지 보통 이런걸 환경 관리를 어떻게 왔냐
제 첫 번째 절대 하지 말아야 할지 이게
소스 컨트롤의 들어간 소스 코드의 환경 박아 넣는 거 제가 모 대기업에서
이제 한국 대기업의 4 사이로 일하는 사람들의 코드를 최근에 본 적이
있어요 본대
소스 코드의 db 커넥션 키가 들어가 있고 그것을 그냥 짓은 안 맞더라
곡
문제는 목 2시 뭐 우리 꺼니까 상관없지 않냐 라고 길 수도 있는데
소프트웨어가 발전하다 보면 어느 순간 그 소스 리퍼 를 열어서 외주를
맡길 경우 되고 여러가지 일이 벌어져요
근데 소스 컨트롤 하는 건 모든 히 스 터가 담겨 있는 거잖아요
그럼 그 만약에 우리가 외주 아는 사람들한테 프론트엔드 기능을 주고
싶었는데
어째 소스는 뭐 공유 해야 되니까 당연히 나중에 사람이야 문제없겠죠 01
했어 근데 뒤지다 보니까 거기에 써 놓기가 나오는거 서버 tv 키 같은게
그런 db 는 털리는 거죠 그래서 절대 그런 정보는 들어가면 되요
그리고 내 서버 가 어디에 있느냐 url 로 도 내부 있는 서버 늘 그런
것도 공개가 되면 같아요
당연히 내로 칼에서 어차피 도는거 로컬 호스트 포트 엿으로 도는것 상관이
없죠 어차피 이가 내로 콘서트 접속할 수 없으니까
그래서 9 그렇게 하시는 분들이 있지만 코 눈 어요
그리고 두번째는 이제 제가 한동안 많이 쓰던 방법이고 사실 지금까지도
이렇게 썼던 방법인데
음 aws 하던가 애 주어 쪽에서 이제 뭐 자동으로 스케일 해주는 그런
웹 서비스들이 있잖아요
뭐에 웹서비스가 아마 애 주어 꺼고
aws 가 빈 스토크 라고 하던가 예 그런게 있어요
그러면은 거기에 보면 은 이제 설정을 환경변수 처럼 해줄 수가 있어요 웹
대 15 들어가서 키 밸류 키베 이옥희 밸류 되면은
그것만으로 이제 그거를 아
웹서버에서 1 볼 수가 있어요 환경 변수로 사장이 됐으니까 물론 그것을
쉽게 있게 하기 위해서 astm 4코어 같은 경우에는 그냥 애드 잉 발
먼저 배워볼 하면 거기 읽어 오게 하는 법 있죠 그래서 그걸로 되게 많이
썼고
으 그걸로 쓴 이유가 뭐냐면 어차피 제가 테스트 왕겨 스테이지 환경 어
라이브 환경은 / 여러개로 서버 같이 따로 있는 거거든요
그러면 그 서버 인스턴스 들어가서 내줘 같은데서 웹 포탈 들어가서 거기
애플리케이션 세팅 일하고 있어요
그럼 거기에서 아킨은 다 똑같아 아까 db 커넥션 스트링 저쪽도 tv
코넥스 트립
그러나 델리 만 바꿔주면 되죠 이렇게 하는 방법으로도 충분히 으
그 환경에 따른 모든 변수를 설정이 가능했어요
그리고 이미 에지 어이 웹서비스 에서 각 실란 마다 아
접근권을 설정을 해줄 수가 있어요 그러니까 아도 개발자는 너는 프로드
거나 있는 f 로드 볼 수 있어
얘는 아테스트 만 거라 있네 그런 프로들은 그 액센트 못보고 테스트
슬라이스 니 맘대로 봤고
이렇게 해 줄 수가 있는 거였어요 그러면 그것만으로 아까 말했던 중요한
정보가 빠져 나가는 그런 단점은 다 고칠 수가 있고 이런 커넥션 스트링
이나 이런 것들이 소스 코드가 안 들어가니까 문제가 없죠
그들의 두번째 앙 그리고 저희가 있어왔던 거고 세 번째 방법은 이제
이런 클라우드가 흥 하기 전에 많이 썼던 방법이 한데 아주 안전한 방법은
또 아니에요
그 이제 닷넷 4 꽃 안내 베이스 플랩 보면 이제 웹 트랜스폼 이라는 게
있었어요 왜냐면 맵 컴팩 일하는거 에 모든 컴퓨터에 들어가 있고 환경
따라 in stage 면은 스테이징 은유 오벨 류를 까 왜 컴 피라냐
엑셀파일 되요 그럼 티아고 밸류가 비슷하게 또 있는 거거든요
그럼 거기다가 아 스테이징 한다고 그럼 요거를 요 값을 이 새로운 값으로
바꿔 키 따라 매치에서 로 바꿨고 새로 베컴 핏발을 뽑아 줘요 내가
스테이징 용으로 퍼블리셔 할 때 앞으로도 용어로 퍼블리셔 할 때
그럼 역시 이거에 문제는 뭐냐면 은 컴퓨터의 자체가 똑 소스 코드의 같이
들어가니까
그럼 그거에 따라서 여전히 소스 코드 정하는 문제가 있었고
그렇기 때문에 프로덕션 갈 때는 사람이 손수 바꾸거나 이런 일이 있었어요
네번째 방식 어찌보면 지금 말했던 세번째 방식 에이즈 단점을 고침
거였는데 그 테스트서버 나 이런거 는 내부 서버 인 경우에
그냥 다 아까 말해도 왜 펌핑 이라던가 이런 거래가 해왔고 트랜스폼 하고
프로드 갈때는 누군가가 손으로 다 잡아 갖고 프로 드는 요키 가요 벨리
아요 pi 오벨리아 라고 파일을 저장해 놓은 다음에
프로 나갈 때 빌드를 풀어 등용을 따로 돌려요
그럼 그러면서 아 이 파일을 대신 써 왔고 같이 디플로이 에 그
이런식으로 했던 거에요 그의 예전에는 수동 작업 이었죠
그래서 이렇게 4가지 망치 겠어요 하나는 다시 정리할게요
소스 코드 g 받는법 두번째는 환경변수에 쓰는 법
세번째는 웹 컨택 이용하는 법 역시 트랜스포메이션 이용하고 역시 소스
컨트롤 좋아하게 똑같아요
네번째는 미디파일 만들어 두고 그 파일을 이제 권한이 있는 사람은 가지고
있는 거죠 그리고 그 프로드 에 갈 때 그걸 손 수집하고 놓는 법
이렇게 써요 아 한가지 더 있다 5가지 방법 얘기할게요 다섯번째
데이터베이스 하는법
세팅이 결국엔 티아고 밸류 짧기 잖아요 페어 그러면은 극히 밸류를
데이터베이스의 박 않아요
그리고 서버 가 올라갈 때 그 데이터베이스 연결을 해 같고 그 값을
읽어오는 거에요 그러면 이제 뭐 db 테이블이 여러개 가 있겠죠 하나는
테스트용 하나는 플러드 연간 하면 스페 이지요
이거는 솔직히 굉장히 괜찮은 방법이었고 전 회사에서 맛있었던 보이기도
해요 근데 단점이 뭐냐면은
dd 이제 세티 2 db 커넥션을 만들어야 되는데 이걸 이제 보통 따로
분리를 해 놓는 경우가 흔하다 본 하지 않고 그 좀 안전하죠 왜냐하면
이미 애플리케이션 오른 db 와 세팅이 도는 db 가 1
테이블웨어 1 db 에 들어가 있으면 또 테이블마다 권한을 조정할 수도
있지만 단면이
이게 권 화를 잘 못 줘 버리면 아그네 너는 애플리케이션 데이터는
보여주고 싶었는데
어쩌다가 잘못된 개발자가 모든 세팅을 보는거임 크리션 키 부터 막 이런걸
것도 좀 말이 안 되잖아요 그 그러니까 db 는 약간 x 컨트롤이
뭐 뭐 할례는 할 수 있는데 생각보다 실수를 많이 할 수 있어 잘못 실수
로그를 정보가 공개될 수 있는 단점들이 있어서 기뻐 껌 애매한
부분이었어요
어째 5가지 요 그랬죠
그 저희도 뭐 아까 마디 더 없고 옛날에 웹 트랜스폼 된다면 서비스
썼었고
그 다음에 이제 웹 트랜스폼 대신에 나온게 닷넷 코에서는 제이썬 빠이
있는거예요
제 2선으로 그냥 만들어 갔고 환경 마다 다른 제 있어 만들어 갔고
알아서 있게 만들잖아요 똑같은 거에요 그거 또 해봤고
그러다가 이제 뭐 이거 하고 아까 말했던 환경변수를 섞어 가는 것 했어요
지금이 가장 저희가 쓰고 있는 방법이 지금 그건데
근데 환경변수 쓰는걸 좋아요
솔직 2 x 컨트롤 환경에서도 가장 좋고 왜냐하면 은
웬만한 개발자는 서버에 대한 접근 권한이 없는 게 정상이 어 라이브
서버에 대해서 왜냐면 거기에 뭐 잘못 가면 난리가 나니까 그래서 이거는
완벽하게 이제 새로 프로비저닝 이라고 1
뭔가 서버를 올라갈 때는 새로 이미지에서 새로운 서버를 올리거나 이미 엡
서비스에서 해주고 있죠
듀오에서 그래서 그냥 클린 멋이 아무도 선언된 클립 머신 에다가
이제 아 설정만 집어 넣어 주면 되는거 근데 이 설정을 볼 수 있는
권한은 어차피 아까 말했듯이 애저 포털에서 해줄 수 있고 애저 포탄은
누가 들어왔는지 다루고 낚고 그쵸
그리고 그 실 썹 에 접속을 할 수 있는 관세가 없으니까 안전한 거예요
그 황개 마우스 뽑아 올 수가 없는 거야
그쵸 프로그램 작고 또 걸려도 디플로 해야되지 멀티플레이어가 내 차
없으면 되니까
단점이 뭐냐면은
이 서버가 커지면 커질수록 환경변수 아까 말했던 잡아줘야 되게
수십 개가 되요 아싸 쉽게 50기가 되는데 경우도 있어요
그럼 40개 세팅이 쭉 하겠어요 그쵸
그래서 사실상 잡을 수 있지 좋아 근데 얘 저의 문젠데 이거는
40개의 세팅이 있잖아요 근데 추가한 수대로 그럼 키가 막혀 있어요
이거를 무슨 이름 순으로 정렬하는 법도 없고 그래서 가끔 뭐가 빠졌는지
보이가 되게 애매하고 두번째는
개발자 개발하면서 테스트 서버에 모두 환경에서 짜 만들어 놨어요 아 좋아
만들어 놨어 그쵸
그 다음에 g+ 로 나가야 될 때 나가는데
실수 로 프런트에 환경 변수를 설정한 해 놓은 거야 그러면
서버를 이제 올리고 난 다음에 크게 안 되는 걸 알아요 그런데 안되는거
라는게 그 황개 분수가 없다는걸 않은게 아니라 뭔가 합니다
그럼 그때부터 그 1 뒤지며 이게 왜 안될까 환경 번 써 하나씩 다
비교해보고 50개 다 비교되는데 아까 말했듯이 순서 카파 자 되게
힘들거든요
그래서 그런 부분이 되게 짜증이 났어요 이렇게 그럼 이걸 해결하기 위해선
제가 아까 말했던 것처럼 매트리스 본 제이썬 을 이용해서 한번에 딱
올라가는 게 맞지만 악은 소스 컨트롤 들어가잖아요
말이 안 되는 거예요 그래서
생각을 많이 해서 이걸 어떻게 하면 좀 고칠까 어떻게든 좀 고칠까
그래서 결국에는 어떤 생각을 했냐면 은
적어놓은 게 있으니까 이제 적어놓은 걸 잠깐 보낼 얘기할게요
제가 하고 싶었던 것은 그냥 누군가가 이렇게 손 작업을 하지 않아야
되지만 그쵸
그렇다고 소스 컨트롤의 2개가 들어갈 수 없다
그러면 어차피 어딘가 손자 거미 있는데
그렇다면은 손 작업을 이제 해왔고 무슨 키를 빼 먹었거나 이래 따는 것
자체를
빌드 동안의 찾아내서 아예
디플로이 를 금지시킬 자는 생각을 했어요 그래서 생각을 했던게
세팅 매니저 라는 것을 뭔가 만들자 그래서 개념이 어떠냐 며 는 일단
시장은 그 실 수업이 든 그 시작하니까 단결력 있다 첫번째는
아까 말도 웹 트랜스폼 같은 그 바의 그 담 4코어 라며 넵 3ts 제
2선 퍼 에 거기서 시작을 하자
여기에 뉴스 있는디 값을 다도 차 일단은 모든 키를 정해 자 그래서 일단
실제 서버에서 스는
모든 그 세팅 키드를 일단 집어 두고
값을 때는 공개되고 문제없는 값들 있잖아요 뭐 타임아웃 시간이 몇 초
라던가 이런거는 공개 하지만 만약에 무스 잉크 액션 키 라던가 db
커넥션 이런거는 그냥 빈탄 으로 만들자
그 애플리케이션 앱 3 링스타 체 있어 단 데코 에서 그러면 이것은 가장
기본이 키포인트가 되는 값이고 그럼 이건 어떤 환경에 쓰이는 걸로 했어요
그럼 이제 그 다음에 그 다음에는 모든 환경 따라 이제 제 2 써니
바뀌거나 이런 거 잖아요 근데 굉장히 거기에 둘 수 있는 값들이 생각보다
별로 없어요 공개되 만드는 값들이 많기 때문에
그리고 이제 녹화에서 개발을 할 때는 로컬에서 개발을 할 때는
아
단 내 코 쪽에 보면은 유저 c 크림 매니저 라는 게 있어요 이게 뭐냐
예전에는 내가 로컬에 테스트할 때는 아까 말했던 그런 제이썬 파일 손수
꽂혀 왔고
테스트하고 집어넣기 저를 리버스 하면 된다고 생각을 했어요 근데 3대 그
실수를 집어넣는 경우도 있어
그럼 그 순간 이미 노출이 된 거거든요 서브 정권은 근데 달래 코어
에서는 유저 시크릿 매니저로 깔면 은 그 세팅을 제이제
로컬 홈 폴더 가 있잖아요 아무도 적극 못하고 저만 접근할 수 있는 폴더
유저가
그 폴더에서 만들어주고 그걸 읽어봐요 그래서 내가 녹화에는 오버라이드
애써야 들으면 거기 넣으면 되는데 문제는 안전 한데 문제는 아까 말했던
100세 링스 에는 제이슨 하고 로컬 객체의 시크릿 은 는 세팅하고 또
이제 하나하나 다 복사하고 딱히 값을 집어 넣는 불편함이 있죠 그래서
이것도 좀 자동화 시키려고 생각을 했어요
그의 생각을 했던 게 아 우리가 첫 번째는 생각하는 게 뭐냐면 개념적으로
이 세트장은 잘 생각을 해봐요
키가 있어요 id 비관 액션 키고 무슨 기구인 크리쳐 키 고모부
먹어야겠죠
한줄 한줄 있다고 봐요 그러면 그 다음에는 아내로 칼 에서는 이 값이
어떻게 되는가 건 하나의 컬럼 이에요 그쵸
그리고 테스트에서 어떤게 된 컬럼의 줘 스테이지 또 컬럼 이에요 프로
센터 컬럼 이에요
그제 개념에서 뭐냐면은 아니 이거 는 솔직한 얘기로 어떤 값이 미싱
되는데 잡고 싶으면 단순하게 엑셀 같은 데서 2d 로 이렇게 만들어 봤고
값 채워 놓고 빈 것만 찾으면 되는거 란 개념을 했어요
물론 저희가 이제 엑셀의 집어넣고 이름을 또 아까 말했듯이 1 컬럼은
누구 만 봐야 되고 다른 컬러 누가 못 보고 이런 문제가 있으니까 관리가
안 됐죠
그래서 그냥 이거를 아 차에 우리 내부의 스는 툴 서비스를 만들자
그래서 거기서 시작을 했어요 그래서 아 우리가 내부에서 사람들이 로그인
할 수 있는 서비스를 만들어서 저희 내부 유저만 개발자들이
그래서 그 값을 채워 놓게 하는 그런 웹페이지 라는 만들자
그러면 아까 말했던 그 세팅 스 디 비아 고되게 비슷해지는 거에요 그러면
이 데이터가 올 수 있는 부분이 되게 많아져야 정상이 요 사실은 그쵸
그래 이제 개념을 잡았어야 그럼 어떻게 잡아야 되냐 아까 처음에 말했던
엑셀의 팅 스타 제이썬 파일 있죠
거기에는 저희가 실제 쓰고 있는 모든 키가 등록이 되어 있어야 되요
그러면 빌드를 하는 도중에
빌드 란 도중에
이 파일을 읽어서 빌드 서버가
여기 나온 키를 다 있죠 그리고 아까 말 디폴트 같을 있잖아요 그럼 그걸
모아 갖고 저희쪽 관리하는 서브의
싸 주는 거예요 그러면 그 서버 내가 받았고 아 아 아
2 이제 웹 서버 우리가 올릴 거 에는 이런 이러 이런 키가 들어가야
되는구나
그리고 디폴트 값은 이거이거 이거구나 이 값은 피었구나 이거를 쫙 db
수장을 쫙 하나요
그리고 그 아까 빌드를 할 때
이 키 하고 실제 웹서버에서 쓰는 옵션 드라고 왜냐하면 저희는 모든
옵션을 스트링으로 아닐 거에요 저희는 클래스를 만들어서 이제 그것을 제탄
4코어 보면은 옵션 스 해 같고 이제 옵션에 있는 게 있어요
아 클래스만 잘 짜 놓으면 그 구조 따라 이제 있어서 읽어 버리죠
저희는 이 생각했던 게 뭐냐 빌드 과정 동안에 이 옵션 쓰라고 돼 있는
그 모든 클래스를 읽어서 거기에 있는 모든 키 값들이 이 제이썬 파일에
있는 것을 확인하자
이게 없다면 뭔가 나도 들러 탱이 있다면 그 순간 필드 빡 된다
그러면 이제 빌드 가이아 만들어 지니까 개발자가 실수 로 제 2점 파일을
안 녹거나 이런 경우에는
옵션 놓는데 제이썬 파일 않는 경우에는 이제 빌드가 보겠지 가 다시
고쳐야 겠죠 그래서 그거를 유니테스트 로 도 가능하다 생각을 했어요
사실은 그래서 그렇게 만들자
그럼 빌드 과정이 돌리고 깨지고 사용자가 거치고 빌드 끝나는 순간 이제
이 썸 파일은 실제 저희 서버에 쓰는 모든 키를 가지고 있어요 그리고
그게 저희가 말했던 따로 웹 서비스 내부 관리 툴의 이제 해서 관리 툴은
아아 이 서버에는 이제 이런 키들이 센 을 알게 되죠 그럼 그 다음에는
테스트 환경 이라던가 스테이징 환경 프로덕션 환경에서 누가 이제 뭔가를
고쳐야 될 때 잖아요
그 비어 있는 칸에 체외 되잖아 그러면 저희 개발자가 저희 서버에
로그인을 하는 거에요 웹페이지 내부의 페이지
가면은 야 이거 세팅 모르죠 그러면 세팅이 쫙 나오는 거야
그리고 이 테스트 서버에 비오니 세팅이 나 보이겠죠
그럼 개발자는 테스터 테스트 환경을 아니라 그걸 채워 넣는 거에요 그쵸
그리고 그 다음에 스테이징 서머나 프로덕션 서버 는 보통 굉장히 제안된
사람만 권한을 가지고 있는게 정상 이거든요
그럼 이거는 그냥 비어 있고 어떤 게 없다 라는 정도는 보여줄 수 있어요
예 e 지금 엔트리가 없어
그러면 그걸 이제 늘 쓰는 사람한테 불러 갖고 넣어주세요 라고 하면 되는
거죠
그러나 사람들 언제나 그렇지 않지 그럼 그 다음 단계가 재밌어 저요
그 다음 단계가 뭐냐면은
그럼 이제 테스트 속에 올라갈 때가 있잖아요
테스트 올라갈 때 빌드 머신이나 디플로이 머신은 뭐 하냐
저희가 지금 만들었던 관리 둘이 쪽 관리 서버 그걸 호출해 갖고 개발도
적으니까 빌드 도중에 야 나
2 테스트서버 올라 가야 되니까 거기에 필요한
아 세팅 파 의 제 있어 파일 때나
그러면 애가 그거를 주는 거에요 근데 아까 말했듯이 테스트 서버에 비어
있는 거 있었죠
다만 침을 때 그게 비어 있음 에러 빼라 주는 거야 나고 못해 없소
그런 빌드 서버나 디플로이 관계가 나빠지는 거예요
이빨을 못 받아 왔잖아 빌드 단계 열겠다 그럼 빠졌으니 까 그렇게 써 못
나가는 거예요 그럼 그 순간에 또 아아
누군가 서 테스트를 거쳐야 되는구나 그리고 치는 거죠
스테이징 프로덕션 나가는게 똑같아요
빌드 rt 플레이나 빌드 과정 도중에 야 에스테틱 나가 되니까
이 세 팀 내 나 어 다이앤 트리 없는데 뭐 404 라던가 400
이라던가 뱉어 요
레스트 오면은 그런 이야 나 그 세팅 마디 못 받았고 비드 못해서 보게
되었어
그럼 누군가는 또 가서 고쳐야 돼 그럼 일단 제가 아까 말했던 그 세팅이
없는데 나가 잘 못 나가는 경우 다 고쳤어요
여기서 한가지 재미있는건 이제
결과적으론 2의 모든 데이터 웹 거기에 집없는 데이터가 저희 관리 틀에서
db 에 저장이 될 거 아니에요 그렇죠
그러면 스테이 장어 프로덕션에 있는걸 db 에 저장을 하면 은 역시 그
db 에 권한이 누구에게 있느냐에 따라 그 이제 db 가 노출이 될 수가
있어요
그 tv 와 털리는 경우도 있고 그래서 한가지 더 생각을 했던 게 뭐냐면
이 스테이징 하고
프로덕션에 들어가는 2세 팀들은 gb 가 아니라
에즈 어 키 벌 티 에 들어가게 하자 그 애를 낳지 해서 이런 시크릿
인포메이션을 저장을 하기 저장할 수 있게 하기 위해
그러니 크리션 다해 주먹을 잘 해놓은 게 있어요 블론즈 에 접근할 때
당연히 요 또 어떤 로그인하고 패스를 따라 차야 되지만 어쨌든 간에 그쵸
이런 비밀 정보들이 이제 저장을 해놓고 그리고 그 비밀 정보를 불러오는
키에 1 정부는 아까 말했던 인발 못해 베이 오브 레 받으면 되니까 관리
툴의 서말 관리툴
그러면은 db 가 털려도 우리는 테스트하고 로컬 d 정도밖에 안 털리는
거고
심지어는 잘못해서 우리가 딴 개발자의 그디어 쓸 수 없더라도 이 사람은
읽을 수 있는 것은 테스트하고 로 칼 폭력 밖에 없는 거예요 그러면 그
프로 데에 필요한 정보들은 모두 다
다시한번더 인 크리션 헷 극히 밭에 들어가 있는 거죠 그러면 실제 길드
서버는 그러나 모르죠 빌 썩은 빌드하면 서야 프로덕션 키 이것 내놔
아이고 내 너 희 태 써 으 그렇다 있어 그 받는 거예요 근데 그 데이터
온거 db 가 아니라 애즈 그 아키 밭에서 온다는 거죠 그러면 이
것만으로 잘 세팅이 뭔가 없거나 빠졌을 때 줘서 잘못된 것보다는 빠졌을
때 아 나갈 수 있는 것을 다 받은 거예요
그냥 때 일이 되기 때문 없나봐요 그럼 누군가 서 고쳐야 돼요
그래서 한가지도 뽀 너 스 가 있어 한 것이다 보너스가
아까 말했던 그 유저 씨크릿 있잖아요 제가 로컬에서 개발할때 유저 c
그리다 에게 쳐 넣어야 된다
그런 얘기 했잖아요 근데 유저 시크의 또 간단 해줘요 그냥 그냥 똑같은
거에요
내가 테스트 환경 받아 오는구나 뭐 바다와 똑같아요
그냥 뭐 url 로 쌓았고 퀘스트로 쌓았고 야 나 로 코레스 꺼내 나 그
다음에 이걸 유저 스킬 3
포포탄 어떤가 아니면 맥 대시보드 가서 이하나 유저 c 클래스를 제 2점
파일 다운받기 클릭
다운받으면 보유 씩 그릇으로 옮겨 왔고 쓰 거다
그럼 이거를 하면은
저희가 아까 썼던 다음 환경변수를 다 뺄 수가 있어요 다 뺄 수가 아마
키 발트 정도 어딘가 들었는데 전북도
모든 환경은 우리 이제 세팅 매니저
내부 틀에서 하는거 다 그러나 세팅 매니저의 가서 한다만 딱히 넣기
귀찮으니까 아까 말했던 그 제이썬 파일 어차피 작업하면 더 추가 하는
거니까
그걸로 키다 채워놓고 디폴트 값 채워놓고 나머지만 확인 물로 설정 해
주게 하거나 그렇게 했다
그래서
그걸 이제 다 디자인을 하고
아 잘됐어 너무 좋아 이렇게 생각하고 있어
이게 제 생각에는 클라우드가 좀더 발전하거나 뭐 이런 이제 뭐 다 내
코에서 좀 더 신경을 써 주거나 이러면
이렇게 좀 더 쉽게 관리할 수 있는 방법이 정도 나올 거에요 나올 거에요
아 그러나 아직은 이게 완성이 안된 부분이고
단 네코 쪽으로만 db 커넥션 이건 되게 쉽게 잘 되요
4 아까 말했던 인바운드 레이업을 이런게 잘 안되어 있고 그래서
이게 어찌보면 더 ci 에서 컨티뉴 쓰인 태그 레이 션 에서 또 신경써야
될 부분이기도 해요 왜냐하면 은 컨 츄 인 컨티뉴 쓰인 태그 하셔야
하는게 코드 놓고 다 테스트 돌리고 나가는 거 잖아요
로 뭐가 잘못 때문에 실패하고 물론 그 모든 테스트가 완벽할 수 있지만
새로운 기능을 추가하고 그 테스트가 없는 경우도 있어요
그럼 코드 리뷰에 문제 라고 하겠지만 어차피 코드 리뷰는 바쁘면 누군가는
실수도 하게 되는 거고 안 보는 거예요
새로운 이제 기능을 놓고 거기에 딴 새로운 세팅이 필요해
근데 그 세팅을 확인할 테스트가 없었다면 패스에서 라이브 나갔다가 뭔가
안 돼 하고 이제 그 따 중에 깨달을 수도 있거든요 근데 지금 보면 은
지금 이제 이 제가 만들어놓은 프로세스 자체가 복잡하지 간의 만드는건 좀
귀찮지만 한번 만들어 주면 사용하는 사람 입장에서는
갖고 칠수 가 나온 빨리빨리 잡아줄까 좋아요 그런데 개발 속도가 느려지지
도 않아 오히려 빨라질 수도 있어 로컬 세팅 다운로드 받는거 때문에
그럼 이 플러스가 잡히면 은 이제 실수를 들어갈 수 있고 빨리 빨리 잡을
수 있다는 거죠
그리구 근데 이게 좀 전혀 가 됐으면 좋겠어 정략 이걸 점령할 잘하면
ci 도 자유로워 지니까 그래서 아마 ci 를 이 제가 하고 있는 사람
중에 이 부분을 아직 고민을 하는 사람이 있다면 은 정말 ci 를 제대로
고민한 사람인것 아니면은
단순하게 안 하는 모든 테스트가 완벽 할 거라는 이상한 망상을 가지고
있거나
그래서 제가 뭐 트위터 했었지만 ci 를 고민하는 사람 중에 환경에 따라
달라지는 액 세팅 을 어떻게 처리 할 거고 어디서 실수를 어떻게 잡을지
를 고민하는 사람이 있다면 그것은 그냥 수박 겉핥기 식으로 가는 거
같다는 얘길 제가 했거든요
그 얘기요 근데 당연히 전 회사에서 봤던 문제점이 고
어느 회사에서 봤던 문제점이 인데 아직 이 부분에 대해서 이렇게 좀
깔끔하게 정리 해서 나온 자료 라던가 누군가 얘기하는거 본 적이 없어요
그래서 그냥 저도
가내수공업 으로 전환의 방법을 맞는 거고
혹시라도 여기에서 예제 방법보다 나은 방법을 알고 계시는 분이 있다면
댓글 같은거 당겨 주시면 제가 열심히 가피 해 갈게요
오늘은 좀 예의가 모르겠어요 제가 처음부터 가는 얘기를 이걸 어떻게 자랄
수 있을까를 고민하며 시작했는데 그 고민이 있었던 만큼 주저리주저리 1
30% 떠든 것 같고
제가 말한 과정이 좀 이해가 잘 됐으면 좋겠는데
모르겠네요 설명을 잘 했는지 제가 워낙 중구난방이 줘 예 뽑혔습니다
