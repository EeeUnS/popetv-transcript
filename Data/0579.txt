안녕하세요, 포프입니다.

최근에 제가 공개해 놓은 C# 코딩 스탠다드에서 한 가지 규칙을 바꾼 게 있어요. 'async 메서드일 경우에는 언제나 메서드 제일 뒤에 Async라는 접미사로 끝난다'는 게 있었는데 그걸 빼버렸습니다. 이거를 뺄지 말지 1년을 고민했는데, 이 코딩 표준에 나와 있는 저희 방식대로라면 빼는 게 무조건 맞아요. 여태까지 이걸 유지했던 이유는 여러 가지 이유가 있는데, 하나는 마이크로소프트에 있는 라이브러리가 거의 모두 Async라는 접미사를 쓰고 있고요, 두 번째가 컴파일러 경고가 나는 경우 exe 파일이 안 나오게 하는 그런 장치들을 확실하게 박아두지 않았었어요.

제가 옛날에 쓴 블로그 글 중에 '컴파일러 경고 한 대당 3대씩 처맞습니다'. 지금 그 얘기를 하고 있는 거예요. 컴파일러 경고를 생각보다 관리를 안 하시는 분들이 있는데, 컴파일러 경고가 났을 때 그거를 오류로 만들어서 아예 exe 파일이 안 나오게 하는 옵션이 비주얼 스튜디오에 있습니다. 그거를 켜놓으면 어쨌든 간에 테스트 안 되고 빌드해 봐야 안 되기 때문에 무조건 컴파일러 경고를 고칠 수밖에 없어요. 하지만 개발 도중에 이 코드 지우고 저 코드 지우고 확인해 보고 실행해 보고 이러는 과정 중에 별로 의미 없는 컴파일 경고도 있었거든요? 마지막에 다 치울 건데 경고가 나는 것 때문에 exe 파일 안 나와서 그거 고치고, 또 만들었다가 지우고 고치고 하는 게 굉장히 시간 낭비예요. 이런 이유 때문에 컴파일로 경고가 났을 때 exe 파일이 안 나오게 하는 옵션을 켜지 않는 경우들도 많아요. 이런 경우 문제가 되는 거예요. 왜냐하면 아까 말했던 async 뒤에 접미사를 안 넣었을 때, 함수명일 뿐이거든요? 이게 정말 async인지 아닌지 판단이 어려울 때가 있고 코드를 잘못 작성할 때가 있어요. 근데 지금은 async 메서드면 앞에 await를 넣지 않으면 컴파일러 경고가 C#에서 나와요. 그럼 경고가 나왔을 때 그것만 알고 이 문제를 잡을 수 있다면 접미사를 없애도 되는 거죠. 근데 컴파일러 경고가 있어도 최종 exe 파일이 나오게 하면 신경 안 쓰고 넘어가다가 못 잡을 가능성이 있거든요? 그래서 굳이 async를 넣었던 것 같아요. 하지만 이제 저희 표준은 디버그 빌드에서는 컴파일러 경고가 나와도 로컬에서 디버깅해야 하기 때문에 exe 파일이 나옵니다. 하지만 릴리즈 빌드, 최종 서버에 나가고 최종 제품이 나오고 데스크탑에 나가는 프로그램들, 그때 exe 파일 나올 때는 컴파일 경고가 하나라도 있으면 exe 파일이 안 나오게 경고를 오류로 처리하는 옵션을 켜버렸어요. 로컬에서 테스트하고 로컬에서 작동되는 것 같으니까 메인 저장소에 넣으면 거기서 exe 파일을 배포용으로 만들기 시작하거든요? 그 exe 파일이 나오는 순간 컴파일러 경고가 하나라도 있기 때문에 exe 파일이 안 나오고 빌드가 실패할 때 알림이 와요. 그럼 코드를 넣은 사람은 '아, 내가 await를 넣어야 하는 걸 빼먹었구나' 아니면 'await를 원래부터 빼고 싶었는데 그 경고를 죽이는 pragma를 안 넣었구나'라는 걸 깨닫기 때문에 고칠 수가 있죠. 즉, 개발 도중에 코드가 조금 깨지는 건 상관없어요. 우리는 오픈소스 프로젝트가 아니거든요. 우리 내부 회사 프로젝트고, 정해진 릴리즈 기간이 있고 파이프라인이 있거든요? 빌드를 통과 못 하기 때문에 상관이 없다는 겁니다. async를 넣고 말고는 예전에 제 생각에는 'async 메서드를 잘못 쓸 가능성이 있기 때문에 코드 리뷰에서 잡자'였던 것 같은데, '코드 리뷰에서 안 잡아도 돼, CI가 막아주기 때문에' 이렇게 생각하면 되는 거예요. 그래서 저희 코딩 표준에 의하면 '릴리즈 모드로 빌드를 할 때는 모든 경고를 오류로 치기 때문에 async를 없애도 상관이 없다'는 결론이 나왔고, '릴리즈 모드로 컴파일할 때 경고를 오류로 처리한다', 그리고 'async를 없앤다', 이 두 개가 모두 코딩 표준에 들어가 있기 때문에 저희는 Async 접미사를 뺄 수가 있었던 겁니다. 근데 아직도 마이크로소프트 쪽에는 Async 달고 있는 것들 많아요. 그런 라이브러리는 어쩔 수가 없는 게 이 컴파일러 경고를 오류로 키는 게 기본 옵션이 아니고 선택해서 켜야 하는 거예요. 안 그러는 회사도 솔직히 많아요. 제가 말했던 귀차니즘, 그리고 디버그와 릴리즈를 확실히 구분 못 하는 경우 같은 것들이죠.

예전에 어떤 게임 회사 들어갔는데 컴파일러 경고가 만 개쯤 되는 거 있었거든요? 그래서 제가 외주로 일해줄 때 그 만 개를 제가 다 잡은 적이 있어요. 근데 보다 보니까 실제로 오작동하는 것들이 한 대여섯 개가 나왔어요. 그게 몇 년 동안 쌓였으니까 그 꼴이 만 개나 난 건데, 처음부터 컴파일러 경고를 허용하지 않는 방식으로 진행했다면 문제가 나왔을 때마다 그때그때 잡을 수 있었겠죠. 컴파일러가 해주는 일들 우습게 보지 말고 컴파일러 경고 주는 거 분명히 확인하세요. 경고가 틀릴 때도 있어요. 그거는 내가 제대로 '이 경고는 무시해라'라고 코드에 넣을 수가 있거든요? 이렇게 하나하나 대처해야 되는 겁니다. 그거를 하면 지금처럼 쓸데없이 막 Async 달고, 거기에다가 null를 반환할 수 있으면 asyncOrNull, OrNullAsync처럼 함수 앞에 이름은 10자밖에 안 되는데, 뒤에 가면 막 12~13자가 돼요. 눈 아프거든요. 그런 쓸데없는 거를 없애기 위해 많이 고민했었는데, 이렇게 없앨 수가 있었습니다. 그래서 제 코딩 표준에서 바뀐 async 안 넣어도 되는 게 이래서 없어진 거라는 거. 하지만 그것보다 더 깨달아가야 하는 조언을 하자면 컴파일러 경고를 오류로 처리하는 거, 릴리즈 빌드에는 반드시 넣으시고요, 있는 경고 다 고치면서 진행하세요. 안 그럴 경우 코드는 유지보수가 안 되고요, 정말 알 수 없는 버그들 점점 나오기 시작합니다.

포프였습니다.