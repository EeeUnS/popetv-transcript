가끔 질문 하신 분들 많아요 이제 개발을 잘 냄 어떻게 하냐 모르 공부
해야 됩니까
옷 uml 같은거 공부 하나요 디자인 패턴 공부 않아요
맑은 액에 됨 아니에요 음 제가 뭐 통들이 한다는 그 거에요
그냥 코드를 자세요 삭제를 하세요 어
그리고 만 시간의 법칙 이란 얘기 했잖아요 1분에 마스터가 되려면 코드를
많이 해야 된다 이런 얘기들
그래서 이 얘기를 왜 들이 냐 면 좀 소프트웨어 업계에서 1
제가 볼 때는 한 5년 10년 정도 트렌드인 것 같은데 지금 제가
느끼기에는 좀 잘못된 트렌드가 있어서 그래요 그 전 으니까
한국말로는 속된 모니터는 사람들이 많다고 얘길 들었고 제가 볼때는 그냥
자기가 실력이 없으니까 책에서 얻은 지식을 떠 들으면서 자기가 잘라
보이려고 하는 사람들
자기 자리를 지키려고 하는 사람들이 많아지면서
그 사람들이 워낙 열심히 떠든 이까 사람들이 그게 맞는 쪽을 생각해
나간다는 느낌이 좀 강하거든요
그 정말 솔직하게 말씀드리면
oop 개념 될 중요하고 뭐 디자인 패턴을
뭐 지금 중요하다고 한 중요한데
그렇게 느끼시는 것 처럼 중요한 작가 몰리게 하고 싶냐 면 이런 같은거
다 좋아요 부른 디자인 패턴 다 좋은데
결과적으로 프로그래머의 자지는 코딩을 할 수 있느냐 거든요
제품을 만들수 있냐 그럼 사람들아 제품을 만들어도 되나 질은 디자인만
자라면 이런 얘기 하시는 분도 있어요
근데 문제는 그런 설계를 할 때 예전에 무슨 소프트웨어
뭐 건축설비 할 때 얘기가 나왔지만 그 소프트웨어 설계 대로 가서 제품이
나올 정도로 설계하면 되게 잘하는 사람이야 그거 맞는 설계 인데
그거를 안 나올 정도로 털게 한 사람도 있어 결과적으로 내부는 어떻게
되는지 모르고 실제 어떻게 놓은 지 모르는데 설계만 그럴 따게 나오고
실제 끝나면 엄청 느리고 개판이고 그래서 그거 테고 출마 이상하게 삽질
하면은 처음 설계라고 되게 다른데 제품은 도는 그럼 막 프랑켄슈타인 좀비
같은 존재가 나와 버리는
제가 얘길 왜 하냐면 은
실제 현재 굉장히 유명한 아키텍트 라고 하시는 분들 있잖아요
소프트웨어 쪽에서 다 프로그래밍 하고 삽질하고 걸러 쉬운 되거든요
그 사람은 정말 프로그래머의 마스터 해요 그런 사람들이 결과적으론 가서
뭐 설계도 하는 거거든요
뭐 요번에 마이크로소프트에서 데이비드 커틀러 님
그분이 올라간 그런거 있잖아요 그런 것도 똑같고
그건 데는 또 엄청 코디하고 엄청 하드웨어 부터 보시던 분이고
근데 프로그램은 그런 과연 어떻게 잘 아냐 뭐 자료구조 봐야 되나요 뭐
봐야 되는거 아니냐 좋아요
다 좋아요 결과적으로 가야되는 길인데
기본적으로 프로그래머가 굉장히 중요한 건 디버깅 능력이라고 저런 봐요
자게 코딩을 짜요 사람 실수 안하는 사람이 없어요 사실 다 버거 있어요
그 법은 어떻게 잡내 문제거든요 코딩의 제가 볼때는 절반은 집어 긴
실력이라고 절반 이상일 수도 있어요
회사를 어디가도 보통 기복이 안데스 그 낭비하는 시간 소비하는 시간이
왠만한 코딩 자는 시간은 거의 맞먹는다 고 봐도 되거든요
그러면 어떤 사람은 코드 닥쳐요 남의 코드를 줬을 때도 디버깅을 못해서
애매한 사람이 있는가 하면 에 디버깅을 남도 100배나 전 한 사람도
있어요
그 디버깅을 잘하는 게 뭐냐면 남의 코딩을 코드를 잘 있구요
그 코드 속에는 로직을 따질 줄 알고요 그 로직을 단계별로 나눌 수 있는
거예요 그 단계로 나와서 아 이게 이렇게 이렇게 이렇게 이렇게 이렇게
이렇게 2단계로 실행이 되니까
이 단계에서 먹어 있나 아니고 저장해서 보고 있는 아니고 그러시고 하나씩
분석을 해 가면서 문제가 있는 부분을 찾은 다음에 그네 보면서 여기가 외
문제가 있을까 아 이게 문제구나
그래서 고치는 사람들이에요 그래서 문제는 그걸 이제 머리 쓰고 달 수
있냐 없어요 웬만해서 이젠 프로그램이 이렇게 단순 하지도 않고 요즘 만큼
그래서 이제 툴들이 그래도 되게 중요한 거고 제가 비쥬얼 스튜디오를 되게
극찬 이유가 그 거에요
디버깅 툴이 워낙 좋아요 그러면 막 기차 바 에서 이렇게 좀 프로그램의
좀 대충 한 사람들 자란 사람들 말고
그리고 무슨 첨엔 rent 제대로 디버깅 지원 안 될 때 거기서 한
사람도 오늘은 디버깅을 프린트로 줄어요 프린터의 꼬막 상태 보여주고
아니면 무슨 애랑 걸 오가는 낮에 로우 보고 이렇게 디버깅 한 사람들과
실제 d 뭐가 다 껏 해치 해갖고 디버그 플레이크 걸고
막 끝에 값들 변수값 따라 씩 봐 가는 섬 아이가 바꿔가면서 점프하면서
보는 사람들 하고는 흄 대치가 다르거든요
그래서 그리고 이렇게 빨리 빨리 자기가 디버깅할 수 있는 사람들은 그만큼
뭐 굉장히 많은 걸 보고 굉장히 많은 고치고
더 쉬운것도 디버깅을 해보고 그리고 이제 남의 코드를 읽는 능력까지
굉장히 많아지는 거죠 그래서 그 순간이 되면 은 남의 코드 보는 게
두렵지도 않고 그냥 남의 코드를 보면서 배워도 되게 많아요
사실 그래서 저는 집어 깅 자 라는 프로그램을 딱 보는 경우는 이 사람은
그냥 엄청나게 성장할 거라고 그냥 아
대우 미니 그렇고 그 그 속도로 묻더라 그 사람들
그거에 비해 결과적으론 프로그래밍 짜고 코딩 짜고 디버깅 한 거 되게 막
힘들어 하는데 그렇기 때문에 자기는 좀 더 뭐 이런저런거 공부하고 뭐
상대 쪽으로 공부한다
이런 사람들 치고 제가 코딩을 자라서 못 봤어요 그냥 거기서 그냥 좀
버티다가 마 인터미디어트 괜히 그런 사람들이 또 다만 말일까요
그냥 아 돈은 어떻게 뭐 이런 uml 도 몰라 너는 뭐 딜은 디자인
패턴도 몰라
이런거 될까 거든요 근데 그런 사람 실제
마케 같이 개발하다 보면 디자인 패턴 노예 되지 않을때 디자인에서 넣는
경우도 있고
전에 말했던 것처럼 인터페이스가 인플레이션 어디 넣어야 될지 가 못자고
대충 개발 이는 경우도 있고 그래서 막 버텨 이런 사람들이 버티고 마모
인터뷰에서 좀 말 열심히 하고 잘하면 자기 잘난 것 좀 버티다가 결국
시니어 때 가면 굉장히 많이 갇혀 내려가는 그러니까 좀 뭐랄까요
그 정체가 되버리죠 어느 수가 성장 못하고 그 순간도 많이 받고 그 제가
정말 고생 많으 거에요
디버깅 디버깅 일하는 것 되게 놀라운 게
그냥 코딩 잘하는 사람들 하고 가끔 있잖아요 이거 문제가 있으면 와서 딱
넘어갔을 때 막 보여주자 나 이렇게 하면 저희가 제 컴퓨터에 와서 디버깅
한다고 그러면 그 제가 모르던 디버깅 기법들이 또 굉장히 많이 보게 되요
그런 삶도 옆에 앉은 그냥 보는 것만으로 되게 많이 돼요 그러면 어 이거
무슨 킹 으로서 이렇게 써 그만이고 이런 키가 있어요 그러면 그런 또 게
뭔가 뭔가 빨리 할 수 있는 단축키 같은거 그래서
저도 디버깅을 위해 잘하는 편이 거니 언제 그래서 회사에서도 막 3개월
동안 못잡은 것 회사 새로 들어가고 막 2주만에 고치고 막 이런것도 있고
막 그런거 되게 많아요 그러니까 그 그 뭐랄까 이 주어진 문제 있잖아요
여기 문제가 반 반드시 있는데 여기에 반드시 논리적인 이유가 있어요 그게
프로그래밍 이에요
그럼 이 논리가 띠가 이길래 내가 있길래 이거예요
나 어떻게 해 널 찾을 거야 이 찾는거
디버깅을 두려워한 사람들은 문제의 원인을 찾기보다는 이혼 상 이렇게
있었는데 여기에 빈 칸을 두줄 놀이가 현상이 살아 줘 아 이렇게 그냥
가야지
이렇게 가요 문제는 이거는 굉장히 나쁜 짓이에요
그전에 있던 코드는 문제를 보여주는 코드가 있는거예요
언제가 이 버그를 다시 생산할 수 있는 방법이 있었어요
그 줄을 2개를 눈물 로 인해 입어 그래야 행사할 수 있는 방법은 없어요
그 버그가 어딘가엔 있죠 뒤에는 이유도 몰라 겐타 숨겨 써요
나중에 나 터지며 타 건데요 어떻게 할건데 또 첨부 삭제가 찾아야죠
어떻게 찾는지
그래서 이런거
정말 코딩 자란 사람 다 디버그 못한 사람 본 적이 없어요
그리고 디버깅 자란 사람 중에 코딩 못하는 본 적이 없어요
디버깅을 못한 사람 중에 코딩을 자란 사람이 있었냐 본 적 없어요
디버거 못하는 사람 중에 설계를 자란 사람이 있었냐 없어요
설계를 잘하는 사람 중에 디버깅을 못한 사람이 있었냐
음 없어요
그래서 결과적으론 만 시간의 법칙이라는 거 뭐 소프트웨어 설계 법칙
아는거 이게 단순히 그냥 책으로 가서 있다는 것도 아니고 그 정말 솔직히
스 수리 하자면 그 책에서 뭐가 op 가 맞구나 이런게 맞다 라고 나올
책들 있잖아요
굉장히 좋으냐 이들이 많은데 솔찍한 얘기로
이거는 그냥 탁상공론 에 지나는 내용도 1 80 높아 싶은 너 마다
50% 되는거 같아요
전 그게 아쉬움 그래서 이걸 이렇게 이렇게 해서 이런 문제 해결 한다
다 좋아요 그 문제 해결 해요 근데 그로 인해 발생한 다른 문제도
엄청나게 많아요
가독성이 떨어진다거나 성능을 엄청 문제가 된다거나 그럼 결과적으론
자기한테 필요한 것을 선택해야 되거든요 근데
실무에서 나온 그런 내용들은 상단 임 컴퍼스 많이 나가요 근데 그래서
컨퍼런스 발표자료 보면 굉장히 실용적인 내용들이 많거든요
근데 그런게 채굴을 나오는 거 좀 드는 것 같아요 게임 쪽은 좀 많은데
특히 소프트웨어 공학 쪽에서 좀 드문 것 같고
뭐 정말 근데 잘 나가는 학교도 있어요 유명한 미국의 모 mit 라던가
그런 데는 그런 코스가 개설되어 있어요 그런데도 북어 그래서
어찌보면 그냥 가르치는 사람 책 쓰는 사람의 능력이 안되는 걸 수도 있고
실무 경험이 많지 않은 사람일 수도 있죠 그래서 그냥
이론적인 걸로 논리 좋은걸로 아 이런 이런 원칙을 3 우세는 모든걸
완벽하게 opi 게 맞다 라고 할 수 있거든요 근데 그렇게 모든게 op
가 맞다면 세상에서 가장 안정된 소프트웨어는 다 op 없어 짰다는 건
말이 안되구요
그쵸 그 속도가 간단 하잖아요 건 말이 안 돼요 왜냐하면 은 그
소프트웨어가 윈도우 커널 리눅스 커널 다시 로 잤어요
그래서 그런거 생각하면 은 오피가
그나마 이제 오펜 자리 잡았어요 왜냐하면 그동안 와 이상한 삽질 한
사람도 많았고 그게 삽질 한거 밝혀 낸 사람도 많았고 대충 이 완벽히
5p 와 완벽히 오픽 알이 정해서 어느정도 옵서예 나는걸 이제 감을 잡은
거죠 사람들이 득한 괜찮아요 근데 그 뒤에 새로 나오는 이야기들이 바뀌어
있잖아요
새로운 특히 새로운 기술이 나오기 시작할 때 뭐 예전에 도메인 드립은
디자인 저도 이것도 굉장히 좀 안좋게 보는 것 중에 하나고 거기서 좋은거
한 두개 있는데 그거 자체를 만든 사람 자체가 다 사기꾼 같아요 솔직한
얘기죠
그래서 그런 것도 있었고 해서 뭔가 새로운 것 나올 때마다 되게 주 이란
얘기가 많이 했잖아요
그게 그래요 그래서 지금도 무슨 뭐 새로운 패러다임 나오고 뭐 뭐 새로운
표준이 나온 선배 막으로 로고를 우루루 몰려 가는거 좀 굉장히 경계하는
번이고
심지어는 에픽게임스 코드의 보면 그런것도 있어요
if 게임스 가 아닌가 맞을 거 같애 pk 든지 아니면 제가 음
회사 력 말할 수 없는데 굉장히 유명한 어느 모 회사의 굉장히 유명한
게임의 번 코드에서 있는 코드 그 보라 그럴까
스탠다드 됐는지 모르지만 시프 17의 이런 이러 이런 기능이 나왔는데
우린 아직도 이걸 어떻게 제대로 써야 되는 지 모르기 때문에 일단은 쓸수
있는건 요거 하나로 제안을 한다
되게 중요한 얘기에요 지금 10번 안가 나왔죠 시샵 남 다 올해 됐잖아요
저 전에 있다면서 안봤어요 다 뒤집어 써요 남다른 쓸 때가 있고 안 쓸
때가 있거든요 근데 그 생각 없이 무조건 남다른 처벌 하다 보면은 정말
코드 캡 안되요 그래서 그런 부분들
아 그래서 이거는
뭐랄까 남 다 쓰면 맞기만 큰 장점이라면 얘기 하잖아요
단 점 진짜 않아야 안가도 내 그것을 얘기 나가는데 사람들의 생각이 없이
코드 하다보니까 우르르 몰려서 잘못된 것도 많고 그래서
얘기가 어쩌면 여기 흘러갔는데 중요한 것은 결과적으로 코딩 이란 건
제품을 만드는 과정이에요 프로그램 이라는것
그러면 제품을 만들 때 가장 도움이 되는 기술이 문제 봐야 될 거예요
그러면 여러 결과적으로 제품에는 좀 버그가 적을수록 좋은 거잖아요
심박 심각한 버거 든 그럼 그런 버그 잡는 능력 어떤 코드를 누군가 내
가짜 튼 나 미쳤다 안 되었는데 그것을 고칠 수 있는 능력
그게 솔직히 가장 중요한 거에요 집에 심지어는 가구로 각 봐도
가구의 문제가 있어요 그러면 가구로 고체 사람이 필요해요
이 사람이 10시간 아는 사람을 자란 사람이라 거죠 1시간만에 꽂히는
사람아 10시간 걸린 사람 옥탄 사람의 로고
10분만에 고치는 사람을 잘한다 그렇죠 이 가구의 디자인이 엄청 예쁘게
나와도 성능이 기능이 없어 망하는 거 잖아요
그 기능을 확실히 잡을 수 있는 디버깅 이에요
설계가 내부가 어떻게 될 거 되게 효율적 됐던 간에
제일 기본은 디버깅 이고요 디버깅이 된다는 것은 결코 딩 된다는 거고
그게 깊 아니고 그게 안되는 사람들은 그 위를 논할 가치조차 없다는 게
제 생각이에요
그래서 프로그래머의 절반은 디버깅 이다
80프로 수도 있는데 일단 절반이 라고 할게요 제가 보통 들어가는 제
4절 가정동 같으니까
그래서 그 정도로 오늘은 포스팅을 마치고 그래서
여태까지 갈길을 굉장히 고민하셨던 분들은 코딩 못했다 시작하시고
그리고 이제 거기서 하면서 모자르는 것들을 나중에 따른 졸업후 추행
하는거 정말 코딩 잘하는 사람들이 op 얘기하고 디자인 패턴 얘기하면
멋있어요
그거 못하다 얘기하면 은 그냥
뭐 제 주변 사람들 되게 많이 비웃을 거 같아요
그정도 예 포 폈습니다
