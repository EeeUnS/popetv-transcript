예 안녕하세요 포프입니다.
가끔 질문하시는 분들 많아요
"이제 개발을 잘할려면 어떻게 하냐?"
"무엇으로 공부해야 합니까?"
"뭐 UML같은걸 공부하나요?"
"디자인 패턴 공부하나요?"
막 이런 얘기 되게 많이 해요
으음..
제가 보통 드리는 답은 그거예요
"그냥 코드를 짜세요, 삽질을 하세요"
어음..
그리고 10000시간의 법칙 이란걸 이야기 했잖아요
한 분야의 마스터가 되려면
코드를 많이 해야한다 이런 이야기들
그래서 이 얘기를 왜 드리냐면
좀..
소프트웨어 업계에서 한..
제가 볼 때에는 한 5년 10년정도 트랜드인 것 같은데
지금 제가 느끼기에는
잘못된 트랜드가 있어서 그래요
그
저는 그러니까, 한국말로는 속 된말로 입터는 사람들이 많다고 얘길 들었고
제가 볼 때에는 그냥 자기가 실력이 없으니까
책에서 얻은 지식을 떠들으면서
자기가 잘나 보일려고 하는 사람들
자기 자리를 지킬려고 하는 사람들이 많아지면서
그 사람들이 워낙 열심히 떠드니까
사람들이 그게 맞는 쪽으로 생각해서 간다는 느낌이 좀 강하거든요.
그.. 정말 솔직하게 말씀드리면
OOP개념 되게 중요하고, 디자인패턴을..
뭐.. 지금 중요하다고 하면, 중요는 한데..
그렇게 느끼시는 것만큼 중요하지않.. 그러니깐 무엇을 이야기 하고 싶냐면
이론같은거 다 좋아요
무슨 디자인 패턴 다 좋은데
결과적으로 프로그래머의
자질은 코딩을 할 수 있느냐이거든요
제품을 만들 수 있냐
그럼 사람들은 제품 못만들어도돼
난 이런 디자인만 잘하면 되 이런 이야기 하시는 분들이 있어요
근데.. 문제는...
그런 설계를 할 때
예전에 무슨 소프트웨어 뭐 건축 이야기 할때도 얘기가 나왔지만
그 소프트웨어 설계대로 가서
제품이 나올 정도록 설계를 하면 되게 잘하는 사람이예요
그건 맞는 설계인데
그거를..
안나올 정도로 설계하는 사람들이 있어요
결과적으로 내부는 어떻게 도는지 모르고
실제는 어떻게 도는지 모르는데
설계는 그럴듯 하게 나오고, 실제제품 나오면
엉청 느리고 개판이고
그래서 그거 어떻게 고칠려고 막 이상하게 삽질하면은
처음 설계랑은 되게 다른데
제품은 도는 그런 막
프랑케슈타인 좀비같은 존재가 나와버리는
제가 이 이야기를 왜 하냐면은
실제..
현재 굉장히 유명한 아키텍트라고 하시는 분들 있잖아요
소프트웨어 쪽에서..
다 프로그래밍하고 삽질하고 올라오신 분들이거든요
그 사람들은 프로그래머의 마스터예요
그런 사람들이 결과적으로 가서
뭐 설계도 하는 거거든요
뭐 요번에 마이크로소프트에서 David Neil Cutler...
님
그 분이 올라간 그런거 있잖아요
그런것도 똑같고
그 분도 옛날부터 엉청 코딩하고 엉청 하드웨어부터 보시던 분이고
근데 프로그래밍은 과연 어떻게 잘하냐
"자료구조 봐야하냐", "뭐봐야 하냐", 이런 이야기 다 좋아요
다 좋아요. 결과적으로 가야하는 길인데
기본적으로 프로그래머가
굉장히 중요한건 디버깅 능력이고 저는 봐요.
자기가 코딩을 짜요.
사람이 실수 안하는 사람이 없어요.
사실은 다 버그 있어요.
그 버그를 어떻게 잡냐의 문제이거든요
코딩에 제가 볼 때에는 절반은 디버깅 실력이라고 봐요.
절반 이상일 수도 있어요.
회사를 어디가도
보통 디버깅 하는데
그.. 낭비 하는 시간
소비하는 시간이
왼만한 코딩짜는 시간이랑 거의 맞먹는다고 봐도 되거든요?
그러면
어떤 사람은 코드 딱 줘요
남의 코드를 줬을 때도
디버깅을
못해서 해메는 사람이 있는 반면에
디버깅을 남들보다 100배는 잘하는 사람들이 있어요
그 디버깅을 잘한다는게 뭐냐면
남의 코딩을.. 코드를 잘읽고요
그 코드속에 있는 로직을 따질줄 알고요
그 로직을..
단기별로 나눌 수 있는거예요
그 단기별로 나눠서
아 이게 이렇게x6 이 단계로 실행이 되니까
이 단계에서 버그있나? 아니고,
저 단계에서 버그 있나? 아니고,
그런식으로 하나씩
분석을 해가면서
문제가 있는 부분을 찾은 다음에
그다음에 보면서 "여기가 왜 문제가 있을까?"
"아! 이게 문제이구나"
그래서 고치는 사람들이예요
그래서
문제는
그거를 머리 속으로 다 할 수 있냐
(단호)없어요 웬만해선..
이젠 프로그래밍이 단순하지도 않고 예전만큼..
그래서 이제 툴도 그래서 되게 중요한거고
제가 비주얼스튜디오를 굉장히 극찬하는 이유가 그거예요
디버깅툴이 워낙 좋아요
그러면..
막 이렇게 자바에서 막 이렇게
좀 프로그래밍 좀 대충하는 사람들.. 잘하는 사람들말고..
그리고 무슨
처음에 옛날에 유니티 재대로 디버깅 지원안될때 거기서 하는 사람들 보면은
디버깅을 printf으로 주로해요
printf해서 상태 보여주고
아니면 무슨 에러 난거 로그하면 나중에 로그보고
이렇게 디버깅 하는 사람들과
실제 debugger attach 해가지고 (디비거 꼽아서)
디버그 브레이크(중단점) 걸고
막 이렇게
값들 변수 값들 하나씩 봐가면서
막 이거 바꿔가면서 점프해가면서 보는 사람들하고는
효율자체가 다르거든요
그래서
그리고 이렇게 빨리 빨리 자기가 디버깅 할 수 있는 사람들은
그 만큼 굉장히 많은걸 보고 굉장히 많은걸 고치고
더 힘든 것도 디버깅 해보고
그리고 남의 코드를 읽는 능력까지 굉장히 많아 지는 것이죠
그 순간이 되면은
남의 코드를 보는 것이 두렵지가 않고
그냥 남의 코드를 보면서 배우는 것도 되게 많아요 사실
그래서
저는 디버깅 잘하는 프로그래머 딱 보는 경우라면은
이 사람은 그냥
엉청나게 성장할거라는 것를 그냥 알아요
대부분이 그렇고
그 속도를 못따라가요 사람들이..
그거에 비해
결과적으론
프로그래밍 짜고
코딩짜고 디버깅하는 것 되게 막 힘들어하는데
그렇기 때문에 자기는 좀 더 뭐 이론적인 것 공부하고
뭐 설계쪽을 공부한다?
이런 사람들... 치고 제가 코딩을 잘하는 사람 못봤어요.
그냥
거기서 그냥
좀 버티다가
막 인터미디어에서 괜히
그런 사람들이 남 되게 많이 까요 그냥
"아 너는 어떻게 이런 UML도 몰라?"
"너는 왜 이런 디자인패턴도 몰라?"
이런걸 되게 까거든요?
근데 그런사람들 실제
막 이렇게 같이 개발하다보면
디자인 패턴 넣어야 되지 않을 때
디자인패턴 넣는 경우도 있고
전에 말했던 것처럼
인터페이스와 인플리멘테이션(구현) 어디 놓아야 하는지 감 못찾고 대충 개발리는 경우도 있고
그래서 막 버텨요
이런사람들 버티고 막 인터미디어에서 말 열심히하고 잘하면
자기들 잘난 것 처럼 버티다가
결국 시니어때 가면은 굉장히 많이 쳐내려가는
좀 뭐라 그러죠?
그냥 정체가 되버리죠
어느순간 성장 못하고
그 순간도 많이 봤고
제가 정말 하고 싶은 말은 그거예요
디버깅
디버깅이라는 것 되게 놀라운게
그냥..
코딩 잘하는 사람들이랑 가끔 있잖아요
아 이거 문제가 있으면
와서 딱 넘어와서 이렇게 막 보여주잖아요
이렇게 하면서 자기가
제 컴퓨터에 와서 디버깅을 한다고요. 그러면
그...
제가 모르던 디버깅 기법들을 굉장히 많이 보게 되요
그런 사람들 옆에 앉아가지고 보는 것만으로도
되게 많이 배워요
그러면,
"아 이거 무슨 키 눌러서 이렇게 했어요?"
그러면
"아 이거 이런키가 있어요" 그러면
그런 또 이렇게 뭔가
뭔가 빨리 할 수 있는 단축키 같은 거
그래서..
저도 디버깅을 되게 잘하는 편이거든요? 현재
그래서
회사에서도 막
3개월 동안 못잡은 것
회사 새로 들어가고서 막 2주만에 고치고 막 이런것도 있고
막 그런거 되게 많아요 저는
그러니깐
그, 그..
뭐랄까, 이 주어진 문제 있잖아요?
여기 문제가 반드시 있는데
여기엔 반드시 논리적인 이유가 있어요
그게 프로그래밍이예요
그러면 그 논리가 "니가 이길래?", "내가 이길래?"이거예요
"나 어떻게 하던 널 찾을꺼야"
이 찾는 것.
근데 디버깅을 두려워 하는 사람들은
문제의 원인을 찾기 보다는
"어? 현상이 이렇게 있었는데"
"여기에 빈칸을 두줄 넣으니깐 현상이 사라져"
"아 이렇게 그냥 가야지"
이렇게 가요
문제는...
이거는 굉장히 나쁜 짓 이예요
그 전에 있던 코드는
문제를 보여주는 코드가 있는 거예요
언제나 이 버그를 다시 생산할 수 있는
방법이 있었어요
그 줄을 두개를 넣음으로 인해
이 버그를 생산해낼 수 있는 방법은 없어요
그 버그가 어딘가에는 있죠 뒤에는
이유도 몰라
그냥 일단 숨겼어요.
나중에 이거 터지면 어떻할 건데..
어떻게 할건데..
또 처음부터 삽질해가지고 찾아야죠
어떻게 찾는지..
그래서 이런거...
정말 코딩 잘하는 사람들중에
디버깅을 못하는 사람 본적이 없어요
그리고 디버깅 잘하는 사람들 중에
코딩 못하는 사람 본적이 없어요.
디버깅을 못하는 사람중에
코딩을 잘하는 사람이 있었냐?
(단호)본적없어요
디버그 못하는 사람들중에
설계를 잘하는 사람이 있었냐?
(단호) 없어요
설계를 잘하는 사람들중에
디버깅 못하는 사람 있었냐?
음.......
(단호) 없어요.
그래서 결과적으론
10000시간의 법칙이라는 것
뭐 소프트웨어 설계의 법칙이라는 것
이게 단순히 책으로 봐서 되는 것도 아니고
그..
정말 솔직히 쓴소리 하자면
그 책에서 뭐가 OOP가 맞고
막 이런게 맞다라고 나온 책들 있잖아요
굉장히 좋은 이야기들이 많은데
솔직한 얘기로
이거는 그냥
탁상공론에 지나는 내용도 80%정도..?
"80프로는 너무 많다" 50%는 되는 것 같아요.
전 그게 아쉬운 거예요
그래서
"이걸 이렇게 이렇게 해서 이런 문제를 해결한다."
다 좋아요
그 문제 해결해요
근데 그로인해 발생하는 다른문제도 엉청나게 많아요.
뭐 가독성이 떨어진다거나..
성능을 엉청
뭐 문제가 된다거나
그러면 결과적으론
자기한테 필요한거를
선택해야하거든요
근데...
실무에서 나온 그런 내용들은
상당히 Conference가 많이 나가요
근데
그래서 Conference발표 자료를 보면은
굉장히 실용적인 내용들이 많거든요
근데 그런게 책으로 나오는 경우는 좀 드문것 같아요
게임쪽은 좀 많은데
특히 소프트웨어 공학쪽으로 좀 드문 것 같고
뭐 정말 근데 잘나가는 학교들 있어요
유명한 미국의 뭐 MIT라던가
그런데는 그런 코스가 개설되어 있어요.
그런데도 불구하고..
그래서..
어찌보면은 그냥
가르치는 사람, 책쓰는 사람의 능력이 안되는 것일 수도 있고
실무경험이 많지 않은 사람일 수도 있죠
그래서 그냥
이론적인 것으로, 논리적인 것으로
아 이런, 이런 원칙을 세웠을 때는
모든건 완벽하게 OOP가 이게맞다 라고 갈 수도 있거든요
근데 그렇게 모든게 OOP가 맞다면
세상에서 가장 안정된 소프트웨어는
다 OOP없이 짰다는건 말이 안되고요
그쵸?
"그 소프트웨어가 간단하잖아요"
그럼 말이 안되요.
왜냐하면은 그 소프트웨어가 윈도우스 커널, 리눅스커널
다 C로 짰어요.
그래서 그런걸 생각하면은
OOP가
그나마 이제 OOP가 자리를 잡았어요.
왜냐하면
그 동안 워낙 이상한 삽질하는 사람들이 많았고
그게 삽질이라는 것을 밝혀내는 사람들도 많았고
대충
이 완벽히 OOP와
완벽히 OOP가 아닌
저기서 어느정도 OOP를 써야한다는 것을
이제 감을 잡은 것이죠.
사람들이
그래서 그건 괜찮아요.
근데 그 뒤에 새로 나오는 이야기들 가끔 있잖아요
새로운 특히 새로운 기술들이 나오기 시작할 때
뭐 예전에 도메인 드리븐 디자인
저도 이거 또 굉장히 좀
안좋게 보는 것 중에 하나이고
거기다 좋은 것은 한 두개 있는데
그거 자체를 만드는 사람 자체가 다 사기꾼 같아요
솔직한 얘기로 저는..
그래서..
그런 것도 있었고 그래서
뭔가 새로운 거 나올때마다
되게 주의하라는 이야기 제가 많이 했잖아요
그게 그래요
그래서 지금도 무슨 뭐
새로운 Paradigm나오고 뭐
뭐 새로운 표준이 나와서 사람들이
막 우르르 우르르우르르 몰려가는 것
저는 굉장히 경계하는 편이고
심지어는
Epic games 코드에 보면 그런 것도 있어요
"아 Epic games 가 아닌가?"
"맞을 것 같애"
Epic games 아니면은 제가
음...
회사 이름을 말할 수 없는데 굉장히 유명한
어느 모 회사의 굉장히 유명한..
게임의 본 코드에서 있는 코드 그 뭐라 그럴까
스텐다드 였는지는 모르겠지만
C++17에 이런이런이런 기능이 나왔는데
우리는 아직도 이거를 어떻게 제대로
써야 하는지 모르기 때문에 일단은
쓸 수 있는 것은 요 것 하나로 제한한다.
되게 중요한 이야기예요
지금 C++ Lambda 나왔죠?
C#에 Lambda 오래됬잖아요?
전에 있던 회사에서 Lambda 쓰는 애들 다 뒤집었어요
Lambda는 쓸 때가 있고 안쓸 때가 있거든요
그런데 그 생각 없이 Lambda를 무조건 처바르다 보면은
정말 코드 개판되요
그래서..
그런 부분들
어...
그래서 이거는...
뭐라 그럴까 Lambda 쓰면 막 이렇게 막
이건 장점이라고만 얘기 하잖아요
단점 진짜 많아요 Lambda도
근데 그거를 이야기 안하는데
사람들은 생각이 없이 코드를 하다보니깐
우르르 몰려가서 잘못된 경우도 많고.
그래서..
뭐 얘기가 어쩌다보니 흘러갔는데
중요한 것은
결과적으로 코딩이라는 건 제품을 만드는 과정이라는 것 이예요.
프로그래밍이라는 건..
그러면
제품을 만들때 가장 도움이 되는 기술이
무엇인지를 봐야 하는 것 이예요.
그러면 결과적으로
제품에는
좀 버그가 적을수록 좋은 것 이잖아요?
심각한 버그들?
그럼 그런 버그 잡는 능력
어떤 코드를
누군가 내가 짰던 남이 짰던 안도는데
그거를 고칠 수 있는 능력
그게 솔직히 가장 중요한 것이예요
집에 심지어는 가구를 가져와도
가구에 문제가 있어요
그러면
가구를 고치는 사람을 불러요
이 사람을 10시간 하는 사람을
잘하는 사람이라고 부르죠?
한 시간 만에 고치는 사람(앗 잘못말햇다!)
10시간 걸리는 사람을 못 하는 사람이라고 그러고
10분만에 고치는 사람을 잘한다고 그러죠?
이 가구에
뭐 디자인이 엉청 예쁘게 나와도
성능이
기능이 없으면 망하는 것이잖아요
그 기능을 확실하게 잡을 수 있는 것은 디버깅이예요
설계가 내부가 어떻게 됬던 어떻게 효율적이게 됬던 간에
제일 기본은 디버깅이고요
디버깅이 된다는 것은
결국 코딩이 된다는 것이고
그게 기반이고
그게 안되는 사람들은
그 위를 논할 가치조차 없다는 것이 제 생각이예요
그래서
프로그래머의 절반은
디버깅이다
80%일수도 있는데
일단 절반이라고 할 께요.
제가 보통 들어가는 시간 절반정도 인 것 같으니까
그래서
그 정도로 오늘은 포프TV마치고
음 그래서
여태까지
갈 길을 굉장히 고민하셨던 분들은
코딩부터 일딴 시작하시고
그리고 이제
거기서 하면서
모자른 것들을 나중에 다른쪽에서 보충해 가는 것
정말 코딩 잘하는 사람들이
OOP이야기 하고 디자인패턴 이야기 하면 멋있어요
그거 못하는 사람들이 이야기 하면은
그냥..
뭐..
제 주변 사람들은 되게 많이 비웃을 것 같아요
그 정도
예
포프였습니다.
