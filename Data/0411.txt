예 안녕하세요 포프 입니다
op 하신 분들중에
이제 다중 상속 연 얘기를 들어보신 분들이 요즘 얼마나 될지 모르겠어요
다중 상속 자체를 이제 허용하지 않는 언어가 워낙 많아지다 보니까 내
처음에 이제 op 쪽 나올 때는 다중 상속의 허용된 언어들이 있었어요
그중에 대표적인게 이제 c 풀뿌리 끌었고
이제 다중 상속을 이제 허용하지 않는 언어들은
뜻이 샵이나 뭐 잡아 이런 쪽은 이제
다중 상속이 전 필요하며 는 다중 상속이 아니라 인터페이스 개념으로 가서
기능을 거기서 만드는 걸로 하거나 전경 상속은 아니죠
아니면은 이제 아
컴포넌트 기반으로 가거나 이런 얘기를 많이 해요
다중 상속의 이제 말도 안되는 좀 문제점들이 보였고
당연히 개념적으로 나쁘지 않은 건데 선실에서 그렇게 쉽게
이렇게 생각할 수 있는 다중 상속의 개념들이 별로 없었기 때문에 그런
부분이었던 것 같애
4
2 다중 상소 여기서 이제 뭐 이게 왜 안 좋고 좋고 뭐 그게 주제가
아니라
2 다중 상속이 되구 안되는 언어들을 보다 보면은
약간 재밌는 이제 언어 상에 패턴이 보이기 시작해요
그래서 그거 데 대해 얘기하려고 해요 그래서 이제
상속을 받는 경우에는 이제 보통 클래스의 생성자가 있잖아요
생성자에 개념 2 잘 못잡고 있는 사람들이 점점 많아지는 것 같긴 해요
그게 아무래도 제 2 그냥 op 쪽에 이제 개발이 한참 흔하다 가 요즘은
이제 그 5p 로 완전히 걷어내고 완벽히 데이터 오리엔트 디자인 비슷하게
다각 는게 문제인것 같아요 dto 개념이고
뭐 자바스크립트 개념이고 잡아 스크랩 자체에서 이제 오피가 없기 때문에
그렇기도 하겠지만
특히 웹 기반 쪽으로 그냥 아 그 3 턱에 터
나 프로퍼티의 직접 데이터를 박는게 되게 일반화 되고 그렇기 때문에 어떤
오브젝트가 생성이 됐을 때 올바른 데이터가 설정이 돼 있고 이 오브젝트가
사라질 때 모든 클린업 이 된다는 개념 자체를 잘 못잡는 사람들이 많은
것 같고
요즘 그런 코드가 점점 나오고 있는걸 봐요 그래서 조금 걱정이 되는
부분이기도 한데 어쨌든 기본적으로 개념 뭐냐면 opm 특히 중요한 개념
뭐냐면
어떤 오브젝트를 만들었다 클래스 에서 뭐 인스턴스 를 만들었다고 나죠
이 오브젝트를 딱 만들어지는 순간에 생성자가 있어서 이 생성자에서 특정
특정 패러 m 를 받아서 아니면 기본 생성자가 있어서
있다고 b 셔터 만들어진 순간에 그 오브젝트는 이미 완성된 오브젝트에
한다
여기서 따른 속성을 바꿀 수는 있지만 그 생성이 된 순간에 드리미 완성이
되는 오브젝트 해야 한다는 기본 그런
아 규칙 원칙을 지키는 게 맞는 것 같아요
이게 모인 캡슐 레이 션 이기도 하겠고 정확히 op 언어로는 정확히 뭔지
모르겠어요 저는 그냥 그렇게 이제 뭐 이해를 하고 말을 보통 해요
그런 재미있는 것은 이 제게 상속을 받은 오브젝트는 어떻게 되냐
그러면 이제 여기도 좀 개념이 약간 헷갈리는 사람들을 되어 많이 보고
있는데 요즘 특히 학생 쪽에서
예를 들어서 만약에 뭐 보통 애니멀 뭐 동물 개 이런식으로 얘기 하잖아요
애니 머리는 부모 클래스가 있고 거기에 강아지 퍼피 않게 즉 더욱 뭐
이런게 있다고 해요
그 애니멀 과도기 이렇게 아 부모자식 관계 로 있어요
그러면 독을 만드는 순간에
독은 자기의 관련된 프로퍼티 멤버변수 만 초기 하면 되는거예요
그리고 이게 만약에 애니멀 단에서 초기화가 되어야 되는 내용들이 있잖아요
프로퍼티 라다크 거는 독에 생성자에서
애니 머리 생성자를 호출 해갖고 페라 매트를 제대로 넣어주면 아까 내 니
머리 아서 요 부분을 만들어 줄 거야
단독 은 내가 가지고 있는 멤버 추가로 가지게 되면 뭐 마초 개라면
되는거예요
뭐 당연히 지울 때도 똑같은 개념이고 그래서 이걸 생각하며 는 보통 많이
오피셜 많이 나와요
더욱 컨스트럭터 를 아 토글 만들 때 어떤 생성자가 먼저 호출이 되냐
어쩔 수 없이 애니 머리 먼저 투수 밖에 없어요 애니 머리 부모 기
때문에 메모리 구조 상디가 먼저고 그럼 내가 초기화가 되고 그 다음에
애가 초기화가 되는 과정을 가 정상이 5
지울 때는 그냥 그 반대 고 이거 많이 해도 그 시험문제는 맞아요
이제 재밌는게 여기서 제가 하려고 했던 얘기 뭐냐면
시프 풀을 한 사람들이 요즘 얼마나 많을지 모르겠지만 이제 내가 독에서
애니멀 생성자를 호출 하려고 할 때 어떻게 하냐
그리고 잡아 계열이 라던가 시샵 개월에 한 사람들은 어떻게 호출 해야
되냐
그걸 이제 얘기할 수 밖에 없죠 그런데 자바나 시작 쪽을 먼저 얘기하면
은 c 샤 자바에서는 슈퍼 라고 출 해요 내가 독이 고 내 부모가
부모 이제 생성자로 출 하려고 하면 아니면 부모의 무슨 멤버 변수를 멤버
함수로 취하려고 하면 언제나 슈퍼를 써요 왜냐하면 은 되는데 위에
있으니까
부모님은 위대하신 분이 줘 그러면 이제 위에 있으니까 슈퍼 어쩌겠어요
그럼 이제 자바는 이제 약간 음
뭐라 그럴까 부모님에 대한 존경을 엄청나게 보여준 언어 였다면
c 샵 은 베이스를 써요 나는 여기 꼭 내다 에 기반이 된 사람이 누구냐
부모님이 나를 낳아 줬으니까
아 내 기본으로 가 기반으로 가서 기반 생성자로 노출하거나 기만 의 멤버
를 호출하거나
이런식으로 가조 그래서 그 자바나 c 샵이나 이제 그 특정한 키워드가
있어요 내 부모 를 호출하는
그런 키워드가
c 풀 뿔의 가면 얜 좀 패러 나거든
그래서 10분은 슈퍼나 베이스를 게 없어요 그냥 뭐라고 하냐면 난독
이잖아요
그러면 내 부모가 애니 머리 없잖아요 그럼 야 내 품어 이름을 불러요
애니멀 그런 얘네는 부머 생 3공장 호출할때 슈퍼베이스 대신에 내 애니
뭐 를 넣고 얘기만 흘러요
그렇게 부모 클래스의 이름을 넣는 거예요 왜 이제 씨아 90호 뿔은 시프
뿌리 줘 싶을 뿔은 이제 카페 른 적이고 자바는 부모 닌데 부모님에 대한
공경이 크고
c # 내가 어디서 왔는지 고 원천 그 소스를 이제 잘 아는 그런 얻는데
그럼 왜 귀찮게 싶을 뿔은 이렇게 키워 다나 만들고
이런걸 했어요 라고 말하는 사람이 해봤어요
이은 하나요 처음 말했던 거 다중 상속이 되기 때문이에요
그러니까 예를 들어서 저는 독을 만드는 데
애니 머렐 상속을 받으면서 동시에 식물에서 상승으로 말할 수도 있어
애니 뭐라고 플랜트가 2개가 들어 오거든 그럼 독을 만드는 순간에 애니
머리에 생성의 도출해야 되고 플랜트 색녀도 호출 해야 되요 그러면 단순히
내가 슈퍼 라고 놓는 것만으로는 누구 료가 이렇게 인지 헷갈리게 되거든요
그래서 어쩔수없이 부모님을 위해 이름으로 불러야 되는 거예요 그래서 그냥
최근에 이런 질문을 듣다 보니까 제가 막 학생한테 들었던 질문인 것
같은데 아 되는데 당연히 저도 여태까지는 그냥 뭐 언어가 그런가 보지
라고 썼는데 쉬프 풀에서 슈퍼나 베이스를 쓰는 수만 쓸 수 있는 방법이
없는 거예요
이것을 그래서 그렇게 돌고 있구나 써서 여태까지 없이 이걸 하시면서
궁금하셨던 분들은 그냥 아벨의 께 쉽군 불편해 라구 생각하셨던 분들은
그냥 시프 뿔은
더 굉장히 다양한 이상한 것들을 지원하기 때문에 그 다양한 이상한 것들을
지원하기 왜 이런게 있는 거에요
그러나 요즘 사람들이 이제 싶을 뿐 을 쓴다면 다중 상속을 거의 안
쓰겠죠
인터페이스 기반으로 돌거나 물론 집을 불어서 인터페이스 1 개념 자체가
없기 때문에 클래스 로 만들어야 하지만 이제 인터페이스 개념은 돌리다보면
은
인터페이스를 제외한 유일한 이제 클래스 는 딱 하나밖에 없을 거니까
슈퍼나 베이스가 들어와도 좀 마른 되겠죠
4 그 뭐 언어적인 1개 고 현재로써
그렇게 지금 시대 되어 있어요 그래서
머시 풀뿌리 나 이런걸 많이 해보신 분들은 알겠지만
z
자바에서 못하던 것들을 19에서 엄청나게 할 수 있는 것들이 많구요
시샵 에서 못하던 것들을 실패 할 수 있는 것들이 있어요 꽤 있어요
엄청나게 까진 아니고
음 이제 그런 부분들에서 이제 지원을 했었기 때문에 그리고 아직도 할 때
맥 일어 이상한 것들이 많을 거에요 제가 이 비디오를 또 만드는 이유가
뭐냐면
c 샵 쪽에서 제가 그런 얘기를 최근에 들었어요 다중 상속을 지원하려고
몰기 시작한 이런저런 시도 테스트를 해보고 있대요 게
정식으로 들어올지 안 들어올 지 모르겠지만
그래서 이제 그걸 뭐 익스텐션 으로 만들면 이상하지 4 하려고 하는것
같은데 제발 안그랬으면 좋겠다 생각을 해요 사실은
다중 상속을 잘 쓰면 좋은 거지 있을 수도 있겠지만 개인적으로 크게 정말
필요한 경우로 못 봤거든요 다른 방식을 다 끝낼 수 있었고 크게 문제가
없었기 때문에
그리고 예전에도 한 번 째가 op 얘기했을 때 제 깊은 상속 뭐 네모
할아버지의 뭐 층 조 부터 내려온 삶 속 네 단계를 거치는 일이 라던가
여러개가 묻혀 삼성을 받는 그런 구조 자체가 많이 안 쓴다 이제 실제
존재하는 클래스 의 대부분이 3 속을 안 받고 있고 몇 가지만 상소가
받는다 이런 식의 얘기를 했죠
그런 의미에서 이제 또 사람이지만
시샵 같은 경우에 아니면 잡아 같은 경우에 더 이상 클래스를 추가로
상속을 못 받게 하려면 붙이는 키워드가 있어요
c 샵 은 c 일드 라는걸 붙이는 것 같고 자바가 마파 이너로 붙일 것
같아요 제가 정확히 기억이 안 나요 잡았죠
시샵 은 쓰일 들을 붙이게 돼 있어요 그러면 상속받을 나가는 컴파일러의
난 하거든요
요즘 이제 클래스를 사람들이 쓰는 그런 모양을 보면 은 이 시리즈 클래스
자체가 기본이 돼야 되고 기본적으로 상속의 안돼 야 되고 내가 상속을
하고 싶어하는 클래스 마 잇다면
거기 담아 이제 새로운 키워드로 붙이는 게 정산 이곳 볼 바른 것 같아요
그게 올바른 기본 동자 인것 같고 그 부분도 제가 크게 문제는 아닌데
코드 리브 보면서 맨날 하는 얘기 거든요 알고 클래스 상속 따서 안 받을
거 잖아 씰 더 붙여
이것을 왜 근데 부지 따로 붙여야 되는지 는 귀찮 초 그래서 한데 까먹는
거죠 그런 것도 있어요
그래서 오늘 원래 하려고 했던 얘기는 그냥 4시 플 뿔의 는 부모
생성자로 부를 때
버릇 없이 부모 이름을 부르는데 c 샵과 자바는 슈퍼나 베이스를 분야
그거에 대한 대답을 이제 하려고 했던 고 거기에 곁가지가 다양한 얘기가
들어왔죠
장 소 기 라던가 뭐 기타등등 다중 상속
뭐 그래도 그리고 싶은 채워 쓰니까
즉 주저리주저리 말이 많은 것 같아요 오늘은 그 정도로 끝낼 거에요
할말이 없어요 끝낼게요 뽑혔습니다
