예 안녕하세요 포프입니다
예전에.. 그니까,
예전이 아니라
그냥 여태까지 사람들이 저를 보면은
아 얘는 참 자바(Java)를 많이 까는구나
라는 생각을 하신 분들이 많은 것 같아요
저도 자바(Java)를 깔 이유가 있어서 여러 번 깠지만
그리고 일단 자바(Java) 커뮤니티들의
mentality도 맘에 안 들고, 정신상태가.
그..
전에 깃(git) 얘기할 때도 그랬고
자바(Java) 가끔 얘기할 때도 그랬고
결과적으로 제가 싫어하는 거는..
뭐라 그럴까..
자기네들이 훌륭한 거를 갖추지 못했음에도 불구하고,
아니, 자기의 단점이 있잖아요
어느 language(언어)나 기술이나
근데 그 단점을 단점으로 인식을 안 하고
아 이건 원래 그런거야
라고 하면서 엄청 쿨한 척 할려는 거
그러면서 말도 안되는 헛소리 퍼뜨리는 거?
저는 그런 걸 되게 싫어했거든요?
근데 최근에 제가 C++ 쪽에서도 그거를 본 적이 있어요
그래서..
저의 모국어와 다름없는
C++ 쪽에 대한 약간 비난을 잠깐 할 거에요
아..
뭐냐면,
Stack Overflow에 질문이 올라온 게 있었어요
저도 이제 그거하고 관련된 걸 찾다가 발견한 건데
자바(Java)에는 패키지(Package)라는 게 있고
C#에는 네임스페이스(namespace)하나요 이거를?
네임스페이스(namespace)가 있고
똑같은 개념으로C++에도
네임스페이스(namespace)가 있어요
근데 이제..
이제 전 C#을 예로 들면은
C#에서는 예를 들어,
네임스페이스(namespace)가 제 엔진 이름이라 그래 갖고
Engine.Audio 이렇게 해서 두 개를 분리가 가능하잖아요
자바(Java)에서도 패키지(Package)가 그렇게 가능하고
system 뭐,
org. 이렇게 뭐 가긴 하지만
어쨌든 간에 네임스페이스(namespace)를
여러 개를 옆에 이렇게 붙일 수가 있다구요
그리고 그 밑에 클래스(Class)를 넣으면은 코딩 정렬, 그냥 자동정렬 syntax 기능을 넣어도 웬만한 IDE에서 딱 4칸만 띄워줘요 탭 하나 정도
근데 C++에서는 네임스페이스(namespace)가 있는데,
네임스페이스를..
네임스페이스(namespace) 콜론(:) 두 개 거든요? <namespace>::<namespace>::<namespace>::
이런 식으로 한 줄에 쓸 수가 없고
네임스페이스(namespace), 아까 똑같은 예 들면,
Engine 그리고 그 밑에 줄에 다시 또 중괄호 열고
네임스페이스(namespace), Audio
이런 식으로 서넛 단계로 들어가거든요?
그 다음에 Ctrl+K, Ctrl+D
비주얼 스튜디오(Visual Studio)에서 자동 정렬해 주는거
그런 걸 누르면 이게 칸이 한 4x3,
12 칸이 이렇게 쫙 땡겨져 버려요
그러면 코드 보기가 되게 불편하거든요
그래서 이제 그거를 한 줄에 이렇게 쓸 수 있는
방법이 없냐라는 질문을 했던 거에요 사실은
그 한 줄에 쓸 수 없냐..
근데 재밌는 게 뭐냐면
제가 지금 어디 일하는 회사에서도
그런 식으로 네임스페이스(namespace)를 썼는데
걔네들은 네임스페이스(namespace) 하고 중괄호를
그냥 한 줄에 열고 또 네임스페이스(namespace) 또 치고
네임스페이스(namespace) 또 치고 해서
한 줄에 네임스페이스(namespace)를
세 번 이렇게 반복을 해놨거든요
근데 문제는 그 코드 베이스에서 
Ctrl+K, Ctrl+D를 해버리면 역시 12칸을 띄워 버려요
그래서 결과적으론
이거를 할 수 있는 방법이 없냐 이거였는데
답은
없어요
없는 이유는 명확해요
생각을 못했던 거에요 C++에서
그렇게 네임스페이스(namespace)를 통해서 logical하게, 단계별로 정리할 수 있다는 거 라이브러리(Library)를
패키지,
자바(Java)의 패키지(Package)나
C#의 네임스페이스(namespace)처럼
그래서 그게 전부였는데
그냥 안 돼요 지원 안 돼요
라고 끝나면 되거든요?
근데 좀 이상했던 게 뭐냐면
막 댓글 달린 것 중에 이런 사람들이 되게 많았고
그게 아마 최고 댓글이었던 것 같아요
이렇게 체크 마크된 그런 것들?
아니면 제일 voting이 많은 것들?
뭐냐면
C에서는
C++에서는 그냥
"네임스페이스(namespace)가 organization을 위한 게
아니라 이름 충돌을 피하기 위한 거다"
"함수끼리 이름이 같을 때, 클래스끼리 이름이 같을 때
그걸 피하기 위해서 네임스페이스(namespace)를 쓴 것 뿐이고"
"네임스페이스는 언제나 여러 단계가 밑으로 들어가는 게
아니라 한 단계만 들어가야 맞는 거다"
그런 식으로 써 놨어요
그러면서 막 이게 원래 C는 이렇게 작동을 하는 게
정상이라느니 막 이런 얘길 하는데 좀 보면서
아니 그러면 이게 지금
처음엔 그렇게 시작을 했겠죠
근데 결과적으론 모든 언어에서
네임스페이스(namespace)나 패키징(Packaging)을
그렇게 logical하게 잘 관리하는 데 쓰고 있고
그럼 당연히
언어가 발전해 나가는 방향이 그게 맞는 거고
그냥 C++은  아직 옛날 언어고
그 기능이 들어오지 않았기 땜에
표준화 그런 기구 자체가 워낙
별로 열심히 돌질 않았기 땜에
그게 없는 게 전부거든요
근데 아 원래
C는 그렇게 쓰는 게 아니라는 식으로 막 우기는 거에요
그러면 이게 예전에 깃(git)에서 제가 했던 말 있잖아요
바이너리(binary) 지원 같은 거
그럼 걔네들은
"아 바이너리(binary)는 깃(git)에 넣는 게 아니야 그건 깃(git)을 잘못 쓰는 거야 어쩌구 저쩌구 저쩌구"
그런데 결과적으론
지금 깃(git) 바이너리(binary)를 또 지원하잖아요 다른 애들이
그렇게 말한 애들 말고
다른 애들 주도로
그 문제를 발견하고 그 문제를 고친
그런 기술자들, 개발자들을 중심으로
전 똑같다고 보거든요?
재밌는 게 또 뭔 줄 알아요?
그 아까 말한 네임스페이스(namespace)
한 줄에 쓰는 거 있죠 세 단계를 '::' 찍고 '::' 찍고
이거 들어와요
조만간
이미 제안서가 올라가 있는 상태인 걸로 알고 있고요
C++쪽에
이게 C++ 17에 들어오는 건지 21에 들어오는 건지는
정확히 모르겠는데
어쨌든 제안서는 올라가 있고
제 생각에는 통과될 가능성이 높다고 봐요
왜냐면 기존에 있던 로직(logic)을 크게 바꾸는 것도 아니고
컴파일러(compiler) 지원이
그렇게 어렵지도 않을 것 같으니까
그래서..
참.. 모르겠어요
제가 C++ 쪽에서 그런 식으로 대답을 다는 애들을
별로 많이 못 봤었거든요
근데 요즘 들어 좀 늘어나고 있는 게 아닌지
C++ 언어 자체가 아무래도 오래된 언어고
전에 말했던 모듈 시스템도 제대로 안 잡혀있고
뭐 그런 언어이다 보니까
다른 언어들은 굉장히 잘 나가거든요?
거기에 나오는
오히려..
아 내가 쓰는 언어가 조금 못났다라는 걸
인식을 못하는 건지 이해가 안 돼요
야 이거 보면서..
옛날에 GameDev.net 보면은
아직도 가시는 분들이 있는지 모르겠는데
거기서 가끔 질문을 올리는 사람들이 있어요
아 우리 게임을 만드는데 뭐
예전에 몇 년 전에 많이 올라왔던 내용은 이제
STL vector 같은 거 이거 써야 되냐
아니면 뭐 string하고 char array 쓰는 것 중에
막 이런 것들 나오면
거기서는 완벽하게,
답을 누가 다는진 모르겠는데
제가 확실히 말할 수 있는 건
업계 사람들은 아니었어요
그냥 제 생각에는 학교에서 그냥 학생들인데
C++ 표준을 많이 배워 놓고
"아 이거는 잘못 쓰는 거다 무조건 string 써야 되고
무조건 STL 써야 되고 이래야 된다"
막 이런 식으로 굉장히 원리원칙적?
그렇게 OOP 원리원칙적?
그리고 어찌 보면은 실수를 할수 없...
할 수 없게?
실수를,
정확히 얘기하면은,
멍청한 프로그래머가 실수를
못 하게 하는 방향으로 코딩을 하면서
그러나 결과적으로는 실수가 생겼을 때 빨리 잡을 수 없는
그런 식의 코딩 스타일을 막
이게 맞는 거라고 우기고 그랬거든요
그런데 우리 업계 사람들은 보면서
무슨 X소리지?
저희는 게임이기 때문에
성능이 굉장히 중요한 곳이에요 그래서
그 성능 따라잡으려면은  STL 이런 vector를
마구 쓴다라는 것 자체가 좀 되게
어이가 없거든요 사실은
제가 얼마전에 한번 STL Containers Class를 다시
만들어 갖고 테스트할 게 있었는데
며칠 전에 코딩 라이브에서 올렸었는데
순수 속도만으로 제가 vector 같은 container를
array 기반으로 만들었을 때
픽스 사이즈(fixed-size)로,
거기서 나올 수 있는 성능 향상이
일반 STL에 비해 5배 10배에요
exception 다 끄고 다 해도
제가 몇 시간 동안 테스트를 해봤고
실제 성능이 어느 정도 나오는지를 봤기 땜에
아직도 게임 쪽에서는 STL vector라든가
STL hash_map이라든가 만들어 쓰는 경우가 굉장히 많고
그럴 이유가 있고요 당연히
그리고 CPU가 더 이상 빨라지지 않는 상황에서
그런..
모르겠어요
포럼에서 유명해지려고 난리치는 사람들인지
어디서 이런 말도 안 되는 좀
사실에 근거하지 않은
자기의 신념이고,
어찌 보면은 그 사람도 이제 실제 업계 나가서 제대로
일하다 보면은 자기 신념이 틀렸다는 걸 알게될 텐데
그 상황에서 그거를 사실인 마냥 그렇게
종교적으로 얘기를 하는지 모르겠어요
뭐 결과적으론 GameDev
거기 포럼의 질까지 좀 얘기가 나왔는데
그 문제보다는
제가 요번에 봤던 문제는
C++을 안다고 하는 사람들이
"C++은 원래 그렇게 만들어진 게 아냐 
그건 니가 잘못 쓰고 있는 거야"라고 말하면서
오히려 언어가 발전해 가는 방향 자체를
못 보고 있다는 것 자체가 되게 안쓰러웠어요
그리고 그런 게 이제..
Stack Overflow가 그렇게 질이 안 좋은 데가 아니거든요?
웬만한 대답은 굉장히 좋고 사람들도 되게
나쁜 대답이 있으면 막 쳐내고 이런 곳인데
그런 곳에서 그런 대답이
나와 있다는 것 자체가 되게 놀라웠어요
그래서 보면서...
아 이제..
뭐라 그럴까...
잘 나가던 C++ 커뮤니티도
이제 좀 뭔가 망가져 가는구나
그런게 느껴져서 좀 기분이 착잡했고요
저도 C++을..
언어적으로는 C#을 가장 좋아하지만 
C++을 써야 되는 데선 반드시 C++을 쓰는 사람이니까
그냥 그런 거
그래서 뭐
제 개인적인 기분 나쁨?
그리고 어찌 보면은
그냥 언어가 나가는 방향에 대해 볼 눈이 없으면
굳이 남이 더 뛰어난 아이디어를 가지고 있다고
그걸 무시하기보다는
'아 그럴 수도 있구나~'라고 넘어가는 게 나은 것 같아요
자기가 그냥 전문가인 양하면서 괜히 엉뚱하게 남
발전하는 거를 오히려 막으려는 그런 것보다는
그런 사람들이 나중에 그 기능 나오고 나면
이제 자기가 얼마나 멍청했는지 좀 알아야겠죠
"아니야 이제 새로운 스펙이니까 이건 이게 맞어"라고
우길 수도 있는 사람이에요
근데 과거 스펙대로만 갔으면 어떻게 그런 게 나왔겠어요
개발자로서 그런 건 좀 조심해야 될 부분 같아요
그 정도?
포프였습니다
