안녕하세요, 포프입니다.

제가 코딩을 좀 오래 해왔죠? 많은 회사에서도 일을 했고, 지금도 여러 회사와 일을 하고 있고요. 그렇기에 저는 저 나름대로 굉장히 잘 들어 있는 코딩을 작성하는 습관들이 있습니다. 이것의 일부는 저희가 외부에 공개해 놓은 코딩표준에도 있고, 이와 별도로 제가 관리하는 회사라던가 제가 코딩 표준을 정할 수 있는 회사 내부에 추가적으로 있는 규칙도 있습니다. 그런 규칙 중에는 어기면 코드가 컴파일이 안 되게 만들거나, 아니면 테스트를 아예 통과하지 못하게 해서 배포가 안 되는 규칙들도 있습니다. 그래서 이런 것을 비디오 몇 개를 통해서 공유하려고 해요. '왜 그렇게 하는지', '이게 회사 따라 할 수 있는 회사가 있고, 아닌 회사가 있는데, 왜 나는 그렇게 하는지.'. 이게 반드시 정답은 아니지만 그 이유를 알면 조금 더 도움이 되실 것 같고요. 물론 이거는 아까도 말했듯이 제가 관리할 수 있는, 제가 결정할 수 있는 회사들이 사용하는 코딩 표준이고요. 당연히 그런 회사가 아닌 다른 회사에서 일을 해줄 때는 그 회사의 코딩 표준에 맞게 코딩을 해줍니다. 이게 당연히 프로그래머가 해야 할 일이고 이걸 못하시는 분들, '나는 이 회사 일해주는데 저 코딩 표준 못 맞춰주겠다!' 하시는 분들은 프로도 아니고 주니어일 가능성이 굉장히 높습니다. '넌 이러니까 주니어!' 또 한 번 했네요? 요즘 무슨 비디오를 만들어도 다 '넌 주니어!'라고 댓글이 달리기에 그냥 말해봤어요.

오늘 말할 거는 제가 관리하는 회사에서는 C#의 DateTime.Now죠? 현재 로컬 컴퓨터의 시간을 구하는 property, 이게 금지되어 있습니다. 그 대신에 무조건 DateTime.UtcNow를 쓰게 되어 있습니다. 그 이유는 사용자 컴퓨터마다 시간을 가져와서 사용할 수 있는 것들이 충분히 있긴 있을 거예요. 근데 제가 관리하는 회사나 코드 베이스에서는 규칙을 딱 정했습니다. '우리 어딘가에 저장되는 시간은 언제나 그리니치 천문대 타임. 즉, GMT 혹은 UTC+0으로 한다.' 왜냐하면 시간대에 따라 내가 있는 곳은 2시인데 다른 데서는 2시가 아닐 수 있잖아요? 그럼 뭔가 표준이 필요해요. 그래서 그 표준으로 할 때 가장 만만한 게 그냥 UTC+0이죠. 그리고 제가 관리하는 회사들은 대부분 글로벌을 대상으로 하기에 어쩔 수 없어요. 그리고 실제 최종 사용자한테 뭔가 값을 보여줘야 한다면 DateTime이라는 구조체에는 기본적으로 타임존 정보가 없어요. 어떤 데이터가 들어왔을 때 무조건 UTC로 가정하고 지금 사용자가 이걸 보고 있는 곳에 시간에 맞춰 변환만 해서 화면에 보여주면 돼요. 즉 데이터 저장, 연산, 기타 등등은 전부 다 UTC로 하고 최종적으로 보여줄 때만 그 사람의 Locale에 맞는 걸로 보여주면 되는 게 끝이에요.

물론, 이후에 C#의 DateTimeOffset나 Java의 OffsetDateTime 같은 비슷한 자료형이 들어왔어요. 이제 타임존까지 집어넣는 게 나왔고 DB에도 이걸 넣을 수 있어요. 그래서 이걸 사용하라고 권장하는데, DateTime같이 굉장히 작고 아름다운 값 타입의 구조체가 있는데, '굳이 여기서 크게 용량을 더 먹으면서까지 이걸 해야 하나?'라는 의심이 있는 거예요. 그리고 '내 시스템에서 이 타임존이 다른 걸 내가 왜 관리를 해야 하지? 시스템 내에서 그냥 한 타임존이면 편한데.' 굳이 여러 타임존까지 고려해서 뭔가를 변환하고 뭐 하고 하는 코드 자체가 이상한 거예요. '코드 내부에서는 모든 게 다 하나의 타임존으로만 돌고 실제 사용자한테 보여줄 때만 바꿔주면 되는 건데?' 이 생각이 드는 거예요. 생각을 해본 결과 '굳이 이렇게 갈 필요가 없을 것 같은데?' 용량 문제도 있고, 뭐 그렇게 큰 메리트도 없고 이런 복잡한 걸 시스템에 도입하기보다는 그냥 단순하게 '이거는 이걸로 한다.' 같은 비즈니스적인 규칙을 정해놓고 유지해 가는 것이 낫다는 거죠. 물론 또 저희 코드 베이스가 DateTimeOffset이 나오기 전부터 있던 것이기도 해요. '바꿀 필요도 없고, 데이터베이스에도 굳이 다른 데이터 타입을 넣을 필요도 없고, UTC로 퉁 치면 되는 거지.' 이 생각을 한 겁니다. 그래서 저희 코드 베이스에서는 DateTime.Now를 쓰는 순간 저희 테스트에서 걸려서 배포가 안 됩니다. 물론 특별한 경우에 몇 가지 함수에서 써야 하는 곳들이 있긴 있겠죠? 이 경우에는 파일마다 예외를 만들어서 안 걸리게 만들어주기는 해요. 근데 예외가 들어간 걸 코드 리뷰어가 보는 순간 '과연 이게 예외가 들어가야 해?'라고 하면서 빡세게 토론하게 되죠.

그래서 결과적으로는 거의 99%의 경우, 우리는 DateTime.UtcNow를 쓰고 DateTime.Now를 쓰지 않아요. 우리가 '내부적으로 DateTime을 무조건 UTC+0으로 가정하는 이유, 이렇게 하기 때문에 편하다'라는 것을 말씀해 드렸습니다. 다음에는 또 비슷한 거 있으면 또 말씀을 드리도록 할게요. 되게 많아요.

포프였습니다.