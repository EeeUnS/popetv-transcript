얘야 소프 입니다 a
오늘은
객체지향 프로그램의 대해서 얘기해 보려고 해요 사실은
갑자기 최근에 그냥 아마 4tb 슬랙 창에서 사람들이 얘기하다가 갑자기
알고 한번 만들어야겠다 생각이 된거 같은데
으 무슨 왜냐면 일단 객체 지향을 최근 들어서 제지한 프로그램의 싫다
아이고 난 정말 싫어한다 라고 말하는 사람이 생기고 있어요 근데
생각해보면 은 이제
아 그래 그거에 대해서 좀 말을 해보고 하려고
아 시장은 아무래도 좀 용어 정리부터 조금 해야 될것 같아요 그냥 목회
체장 이 뭔지 아시는 분들은 이익을 정도 건너 또 상관없지 않을까 생각을
하고 일단 이제 개체 지향 프로그래밍 혹은 객체지향 프로그래밍 이라고
부르는데 이게 오브젝트 오리엔트 프로그램이 이거든요 그래서 되게 깐깐한
그런 그런 뭐라 그럴까
번역자 들 초도 한테 그랬고 그런 사람들에게 택 첸 야 오브젝트가 객체가
되어야 되냐
개체가 돼야 되냐 이런 얘기를 먹 되게 싸우는데 벼룩이 넌지시 고 뭐고
이제 오리엔트 드니까 우리의 때가 방향을 정하다 이런 거거든요 방향이
정해진 그래서 이게 지향적이다
그래서 개체 지향 프로그래밍 이렇게 하는건데
목은 도저히 용어가 책은 다 그냥 좀 좀 쓸 때 없는거 같아요
그냥 영어권에서 객체지향 프로그래밍은 오브젝트 오리엔트 프로그램을 설명할
때는 잘 이게 실제 산 세상에 존재하는 물체라고 가정하고 생각해 보자
라는 개념이 에요
왜냐하면 뭐 스크립터 처음 쓰시는 분들이나 그냥 뭐 이제 옛날에 씰 2개
을 해보신 분들은 알겠지만 모든게 함수 기반 이고
데이터는 초략 딴 데다 주장을 하고 있었거든요 할까 예를 들어서
탐색의 a + b 는 뭐 참 일 뿐 이런 식으로 하는데 이걸 좀 더
발전시키면
음 그냥 전기 시 터 이렇게 하여 라디오 라디오 랄까 정희 토라도 시트
같은거 있잖아요 게 이렇게 올리면 점점 세지고 내리면 점점 약해지고
저놈이 걸 인터페이스 라고 볼 때 이런 인터뷰에서 올렸을 때 현재
몸도 는 값을 엇 있어야 되냐 그러면 처음부터 내장돼 있고 이런 개념이
얻는데
얘네 이때 얘기하는 오브젝트 오렌지도 프로그램에서는 시트 하는 것 자체를
그야 오브젝트로 보면 여기에 함 수도 있지만 그 안에 이너 공과 상태를
있잖아요 현재 온도가 몇도 m 알수도 했는지
그런 상태 까지도 이 하나의 오브젝트 에 들어가야 된다 라는 개념으로
5점 또 오리엔트 프로그램 이거든요
표준이 개체 냐 객체 냐는 아무 의미 거고 제가 올 때는 가장 가장
올바르게 말하는 것은 물체가 맞는것 같아요 그냥
참극 차원 신의 존재는 물체 얼굴이 nt 누구도 무슨 목 취향이니 이런
말도 안되는 한자 를 굉장히 힘들게 쓰는데 그냥 우리 체 중심의 파워 그
래 밍 2
아 그건 같아요 이제 물체를 중점적으로 보낼까 이거를 중심에 두고 모든걸
문체로 이해하고 자는 프로그램이
oz 토렌트 프로그램이고
근데 이제 이에 그래서 500톤 인 프로그래밍에 대한 언어 종이는 제가
대충 했고
부지 뭐 용어를 정말 이유는 없지만 그렇게 이해하자
그리구 그럼 이제 왜 사람들이 그렇게 op.1 요즘 싫어한다 고 말해
하느냐
솔직히 제 입장을 얘기하면 저는 오비를 치려 하지 않아요 좋아하는 것
같아요
근데
opa 수업을 듣다 보면 거기에 듣는거 에서 과연 내가 현실에서 얼마나
쓰고 있고 과연 다른 프로그래머가 얼마나 쓰고 있고
과연 어깨가 얼마나 썼고 있냐 를 물으면
생각보다 적어요 그게 문제야 그래서
오피를 듣기 시작하면 은 여러가지 개념들이 있어요 아까 말했던 상태 하고
인터페이스가 함수가 같은 클래스 라는 것은 들어가죠
같은 트라 에 들어 있다 그래서 클래스 안에
아까 말했듯이 히터 전기 히터 라는 그게 있고 그럼 그 안의 온도
조절하는 함수가 있고 그럼 현재 맞춰 지 온도가 몇 시인지 그러면 그거에
따라 이제 전기를 내뿜어 안되잖아 전개 열을 그러면 그 열을 얼마나 쎄게
내뿜어 에는 있었잖아요 출력을 얼마나 할 건지 그런 상태가 이제 하나의
클래스가 에서 만든 온전케 들어 있다죠
뭐 그게 해에 전부요 사실은 아 근데 제가 봤던거 고 이제 문제는 op
수업을 듣다보면 오페라 빼놓을 수 없는게 몇가지가 있어요
걔들 이외에 뭐 인터페이스 라던가 뭐 다형성 이런거나 좋은곡 황성 이제
관리 측면의 좋아요 풀어내 가보면 근데 그 외에 상속 이란 게 있어요
상소 상소 고기라고 하면 예를 들어서 뭐 프로그램 들어본 사람들은 다 알
거야 뭐 여기 동료도 있고 개가 있고 동물은 뭐 다 어 걸으니까 그러면
여기 워크맨 3rd 가이 거기에
어 뭐라 그럴까 강아지가 있고 뭐 얘기가 있으면 공연이라고 캐는 백호 양
이어 개는 컵녀 모양이 다르니까 다른 근거로 튀어 내 줘야 된다
허나 얘 내가 공통되는 게 있다면 뭐 박는게 홈통 되니까 2시 라는거
공통되는
함수와 서해 툴이 가상 소개 쓸 수 있다 뭐 이런 식의 개념이 되는데
이게 항속 얇게 쉬운데 다중 상속 또 있어요
마크 클래스 여러개가 있고 이 부모로 상속을 받는 거야 얘도 받고 한테도
받고
그럼 막 서로 상속된 메소드 까지 충돌이 일어나고 그도 그런것을 맞기
위해서 잡아 진영 부터 시작을 해서 참 속을 1 남게 돼 나머지
인터페이스다
인터페이스 라는 것은 야 너는 이런 행동을 해야 돼 라는 그럼 주력을
정해 줄 뿐이지 그 행동이 어떻게 진행되는지 낸 각 클래스마다 그 자식
클래스 마다 만들어 라는 인터페이스를 줄 올바른 방법이요 그게 사실은
근데 문제는 다중 상속 또 솔직히 받는 경우가 억제하는데
프로그래밍을 많이 하다보면 생각보다 상속을 그렇게 많이 왔어요
아까 인터페이스 상속 받는 경우로 좀 쓸 수 있는데 정말 부모 클래스에
있는 모든 결과를 받아다가
증상 수고 생각보다 없어요 그래서 실제 우리가 그래서 배우는 op 의
개념에서
가장 중요한 건 의 인터페이스와 상태가 같은데 있다는 것 뿐이지
아 그리고 두번째가 임 두번째 이제 인터페이스 상속을 받을 수 있어서
공통된 bab 열을 정의를 해 주고 각 그 자식 클래스 마다
l 클래스 공통된 bb 를 구현 했을 때 그 인터페이스를 통해서 여러
개를 동시에 어레이를 어떤가
그런 컨테이너를 그러면서 실행할 수 있는 그런 관리 장점이 있을 뿐이지
생각보다 기능을 받는다 2
내 부모한테 있던 지능을 바라고 그걸 그대로 실행한다는 개념의 상속의
개념 은 생각보다 안 써요
그게 어찌 보면은 으
그런 개념 자체가 현재 자옥 써요 현직 그 실존 하는 물체에 소
뭐 물론 제가 뭐 부모님으로부터 어떻게 하는걸 비슷하니 배우 아서
그게 좀 바뀐거 는 있지만 공고 사람의 얘기고 그게 아니라 온갖 저희가
생각하는
뭐라 그럴까 아까 히터 같은 경우를 생각해보면 은 키퍼는 우리 가운데 히
털 범위도 이해가 어디에 상속을 받은 게 아니에요
물론 히터 안에는 급여를 내는 부품도 있죠
하지만 이번은 그 열매는 부품을 가지고 있을 뿐이지 그것을 산속을 가는게
아니거든요
이걸 상속을 받았던 개념 뭐냐면 전기 히터가 그 열을 내는 부품 의 1
부위다
그니까 일부가 아니라 그런 부류 중에 하나다 같은 카테고리의 속한다고
봤을텐데
당일 판과 히터로 솔직히 저는 다른 같은건 아니예요
뭐요 시토 가다 널판을 안에 갖고 있는것 보이지
그러면 우 피서 얘기하는 상속의 개념이 아니라
음 컴포지션 이라고 하는 개념이 있죠 컴퍼스 의 개념은 내가 이런 코 테
트 리 있고 그 안에 여러가지 부품을 가지고 있다 거든요
예전에 한번 제가 유니티 게임 으 으
컴 폴은 컴퓨터 기반 게임 오브젝트 다 그런 비디오 만들 때도 그런 얘기
했어요
이건 3 소비 아니라 컴퍼스 줍니다 사실 저희가 전시회다 보는 5 적들은
대부분이 컴포지션 이에요 그래서 오히려 오브젝트 어린이 프로그램을 생각할
때 상 속보다는
컴포지션 의 개념에 사실 맡긴 더 맞아요 왜냐하면 은 아니 그게 너
일반적 이에요 그리고 실제 프로그램이 하다보면 그런 경우도 많아요
오피 아내 모든게 다 기능이 들어 있지만 여기 if 품 을 가지고 있든
아니면 따른
그 모 서비스를 호출 하든 그건 좀 오피 여부 쪼금 벗어나는 거긴 하지만
서비스가 체가 있다는 것 자체가 좀 뭐 글로벌적인 거라서
어쨌든 컴포지션 를 통해서
오브젝트를 구성하는 게 저희 애들이 일반적이고 그리고 긴 저희 생활속에서
일반적이고
그렇기 때문에 산속에 개념보다 컴 퍼 션에 개념이 사람들아 통신의 편
하는게 아닌가 싶기도 해요
그리고 향수보다 정도로 들어 이러면 은 칠수 를 많이 할 수 있는 이유
2
과 물 현실에서 덜 봤기 때문이 것 같고
그래서 제가 볼 때는 그게 젤 큰 문제인것 같고
아 마음을
결국에는 프로그래밍이 도 모든
내가 일상생활에서 보고 알고 it's 캉 것을 코딩을 할 때가 훨씬 더
편한거 에요 그렇지 않으면
아 그 뭐랄까 전혀 나한테 새로운 이거 그 저희 내가 어떻게
밀레 이 트 라 그러니 영어에서는 한국말은 뭐라 그런지 모르겠는데 내가
굉장히 실제 아 새로운 걸 볼 때 아 이게 이거랑 비슷하구나 나고 이렇게
떠올릴 수 있는건 쉽게 적응이 되는데 전혀 이색적인 것 쳐져 이질적인
거면 은 솔직히 굉장히 어떻게 잘 해야 될지도 모르겠고
그리고 과연 내가 코딩 하지 않았을 때 따른 사람을 가치를 알수 있을지도
모르겠고
그런 단점이 있거든요 그런 부분인것 같아요 아 그거 생각보다 op 에서
음 아까 말했듯이 상속이나 다중 성적보다는 아까 말 등을 컨테이너에 개념
컨텐츠만 이렇게 하나를
기능과 상태와 같이 있다는거 그게 중요하고 아까 말했듯이 인터페이스는
그래도 중요해요 왜냐하면 은 여러가지 클래스가 있을 때 얘네 클래스
한번에 훑으면서 똑같은 함수 를 실행해 보고 싶은데 그럴 경우에는 어제
편하게 인터페이스를 상속을 받아서 그 인터페이스 어레이 로 엘라 치고
넣고 돌릴 수 있는 거죠
근데 그게 좋고 그리고 어찌 많은
옛날에 이렇게 5 핀 일까 굉장히 복잡하게 상속을 받고 뭐 하고
이러는게 80년대에는 말이 될 수도 있어요 사실은 왜냐하면 그때는
cpu 가 모든걸 하나라 돌렸고 데이터를 분산시켜 5 멀티 스레딩
돌린다는 개념도 없었거든요
없었던 게 아니라 잘 안 했거든요
그러면은 그 모든 내가 돌고 있는 모든 오브젝트가 같은
뭐 메모리 구조를 가지고 있다 그다지 중요하지 않은데
요즘은 cpu 성능 상의 얻고 다시 필 술을 마구 들리고 있잖아요 그러면
똑같은 레이아웃을 메모리 이어줄 가진 그런 오브젝트들이 나 똑같은 함수를
가지고 있는 오브젝트를 가져다 보고 그 거야 다 이제 뭐 앤 빨아
그러더라구요
n 까 치 피가 돌게 면은 전체 있는 오브젝트를 8개로 나눈 다음에
분산으로 처리한 은거한 cp 에서 8분에 이식 처리 하는거
그런 식으로 할 때에는 요즘은 데이터 주도적인 프로그램이 더 많이 갖고
란 하나요
그러 데이터 주도적인 프로그래밍이 들어갈 때
다중 상속이 있고 이런 굉장히 힘들어 지기 때문에 요즘은 오히려 또 초보
피해서 얇다는 멀어 지지만 그래도 칸 클래스가 필요한 데이터를 담고 있다
높이의 개념은 떨어지지 않고 있어요
그냥 저택 까지 모든 프로그래밍 패러다임을 봤을 때
채로 인해 나오는 사람들은 다 확 몰려 가요 왜냐하면 새로운 거 가
좋다고 대한 한 사람도 있으니까
그리고 서버 9 문제점을 느끼고 아 이게 실제 는 뭐 아이디어는 좋지만
현실의 적용이 좀 어렵다 거나 아이디어 나빴다 거나 그런게 되면 서서히
좀 줄어들면서 나쁜건 안쓰고 좋은것만 쓰게 되는 보여주게 패스트 플렉스
쪽으로 가는 그런 게 있거든요
그저 높이도 그랬던거 라고 봐요 그래서 오히려 80년대의 그럼 ob
보다는 요즘 실제 달의 실무에서 많이 쓰고 있는 오비가
조금은 더 그 중간에서 가장 좋은 그 뭐랄까 프로세스를 찾을 거라고 보고
그 상황에서 아직도 p2 수업 이라던가 책들이 80 년대 마인드 섹스 못
벗어나고 있다는 거 좀 아쉽기도 해요 그래서 생각보다
오프에서 배우는 모든 게 중요한 게 아니라 정말 중요한 것과 이런것도
있구나 정도는 군을 했으면 좋겠구요
아 그래서 또 이제 뭘 뭐지 뭔가 할말이 있으니까 뭐 근거가 되고 맨
일어났다
pd 편지 또 안되요 줘
먹고 힘
근데 그렇게 돌아오는 길이 고 음
생각이 안나 편할 그때 아마 겠다 비교하는데 이런 경우가 수 있던거
같은데 자꾸 빠질 뿐만 생각을 해 오고 고민을 해보죠
그래서 op 로 넘어갔다가 돌아 오는 길이고
아 그 그런것도 있어요 op 해서
솔리드 프린 시프 일하고 있어요 솔리드 원칙 솔리드 뭐 그런 됐을 거고
필요 만들 때 과연 지켜야 하는 규칙들이 있어요 뭐 뭐 뭐 solid
라고 해서 하나씩 하세요 이렇게 뭐 여기 나타내는 게 있는데 그것을
가르치는 맡게 될 거 안 가르치는 학교도 있거든요
뭐 이런 적으로 이게 op 올바른 이론이라고 가르치는 건 좋은데 그게
100% 맞는것도 아니고 아 그건 굉장히 이런 저에게 칸이 요 그래서
이제 뭐 먹어 인 벌써 인 벌써 컨트롤이 라던가 뭐 이런것도 ii 어떤
것 같고
그루브 석션 울 더 있는데 그건 이제
스토리 ds 가 아니라 에리 l 크게 이제 뭐라 그러죠
아 무슨 사람의 이름을 넣어 갖고 요구에 서브미션 이렇게 하고 솔리드
라고 했던 것 같아요
그렇게 돼 있고 뭐 여러가지가 있는데 솔직히 그거 를 이해하고
으 그래 오브젝트를 만들 때 이렇게 가는게 뭐 이런 이런 것도 나쁘지
않다 이게 사실은 옛날에 석은 방법이었다 라는건 되게 좋아요
그런데 음 촉지 그거대로 모든걸 안될 타고 배를
특제 유지보수가 정말 힘든 펀드가 나오게 되요
굉장히 개념 상으론 아웃백 바닥 울리 가 되어 있고 뭐 이렇게 뭐 컨트롤
이모션 하고 다 이런 건 좋은데 그걸 전부 다 따라 가기에는
음 굉장히 좀
탁상공론 적인 디자인이 나올 수 밖에 없는것 같아요 솔직한 얘기로
거기서 들으실 때 도 이제 써 프티 션 룰 같은 것은 솔직히 생각을
해보면 굉장히 도움이 되는 얘기를 하거든요 왜냐하면 은 부모의 삭은
작동을 봐 내가 이제 부모가 있고 자식이 있는데 부모에게 어떤 함수가
있어서 작품을 하잖아요 그럼 자식 이거 삶 속에 살 때도
여기서 만든 그 함 지능 자체가 내부가 어떻게 바뀔지 모르겠지만 그 의미
자체를 알바 꿈은 한데요 그래도 이 자식을 어떤 부모를 노튼 중단 제대로
작동이 가능할 정도 해야 된다는게 소프트쉘 우리인데
어 그런건 인터페이스 장 개념의 사실은 맞긴 맞아요 근데 제가 뭐 이전에
말했다 이제
어 디펜더 치인 직장에서도 종료 그런 비슷한 있겠고 인 번째로 북한 출
ioc 라는거 약제를 이제 사람도 이들의 잘못 이해를 하고 있는 부분
요즘 있고 그런 거에서 만지게 그 원칙대로 따라간다고 따라 않는데 이게
아 잘못되는 경우도 있고 그것이 크게 잘못된 원칙을 따라 돼 원칙은
맞는데 원칙을 이해를 잘못한 경우도 많죠
그거 노동 단의 ops 제일 중요한거는
그건 것 같아요 아까 말을 떨 그 인터페이스 하고 그 기능하고 이제
데이터와 같이 들어가 있다
그거를 중점적으로 이해를 하고 그리고 이제 oz 토렌트 프로의 만들때
사람 속이 깊어 지고 뭐 여러 단계를 상속이 되거나 아니면 다중 상속이
되는 수는 뭔가를 잘못하고 있을 경우가 많아요
어항 개념인 일상생활에서 그걸 죄다 팔로 본 편이 아니기 때문에 그런
식으로 궁성 이 될 만한 게 그렇게 많지가 않아요 제 경험상 고 그래서
그렇고 그와 나는 이제 코드가 깊어지고 삶 속에 많아질수록 코드를 코드
가독성도 떨어지는 건 사실이에요
그래서 그런 부분에서는 오히려 요즘 추구하는 좀더 뭐라 그럴까
컴포지션 쪽으로 좀더 가거나 아니면 아 데이터들이 군 디자인 쪽에서 볼
때 점점 이제 클래스가 단순해지고 있거든요
그리고 뻥 캐럴 프로그램 이쪽의 여행도 조금 있는것 같고
최소 그렇게 말을 하고 싶고 음 또 하나 이제 마지막으로 뭐야 걱정이
되는건 이건 최근에 그냥 스레트 에서
좋다 혹시 라보 계세요 그분이 이제 장난처럼 인지 진짜 지 모르겠지만
iq 와 iq 이제 될까 뭐 iq 역시 다 이런 게 있잖아요 그거 와 그
사람이 할 수 있는 직군의 이렇게 분리하는 게 있어요 그래서 뭐 ip
가도 부스럭 자기만의 규칙을 만들 수 있고 iq 가 낮을수록 규칙에
따라야 되는데 그냥 iq 정도에 따라 규칙을 따라 데 잘 달하는 사람
아니면 잘못 다루는 사람 대충 아는 사람이 이렇게 나뉜다 고 얘기했는데
[음악]
그렇게 100% 맞는지 아닌지는 모르겠지만 그 iq 에 개념을 떠나서
사람 성향상 그런거 있는거라 되요
누군가 규칙을 만들어 주면 그 규칙이 전부라고 생각하고 믿고 따라 가면서
7 제구 규칙보다 뛰어난 말을 한 사람이 있어요 그 새로운 규칙을 만드는
사람들
그런 사람들을 봤을 때 단지 내가 알 곤이 규칙과 벗어난다고 해서 얘를
아무것도 모른다 멍청하다 하시고 물 간 사람도 있어요 사실
근대 로 두 개 요 이제 규칙이 있을 때 규칙을 못따라 가는 사람도 있고
이건 규칙도 따라서 모든걸 망치는 사람들이 있는 반면에
규칙이 있는데 규칙 으로 인해서 규칙이 오래되서 벌이다 적용되지 않아서
아니면 규칙을
뭐 잘못 만든 건 따라가서 라던가 규칙 때문에 망가지는 부분도 있거든요
망가지는 부분을 해소하기 위해서 규칙과 다른걸 하고 그걸 규칙으로 만드는
사람들이 있어요
그래서 제가 볼 때는 이제 오피가 개념이 오래된 개념이고 처음에는 이제
이 규칙으로 갔었고 가운데 위축으로
2강 얘기 주로 가면서 처음 나왔을 때는 당연히 규칙을 뭐 따로 이상한
짓을 한 사람이 많았을 거에요
요즘 집이 프로그래머 쪽에서도 아직은 좀 많이 보여요 스파게티 코드가
쉽게 나올 수 있는 거 기도해요
그 op 가 없으면 그래서 op 를 이렇게 강요해서 그럼 코드를 좀
줄였고 많은 수라 작용이 있었지만 그 op 로 인해 나왔던 문제점들을
지금 해결하려는 사람들이 많고 2기 실무에 많거든요
근데 아직도 p 의 문제
점을 즉시 를 알고 문제점을 알게 날 거야 근데 그에대해 답을 못찾아서
그냥 추측대로 가고 있으면서
익어라 조금만 벗어나면 그냥 아이더 잘못된 거라고 우기면서 1종 뭐라
그럴까
밥그릇 지키기 한 사람도 좀 있는것 같아요 그게 뭐 큰 이모 기회가 있어
요즘 한국에서 말하는 것은 무슨 교신 자이라 주에게 무슨 뭐 언어를 노튼
무슨 뭐 학계 빨아 그러던가
뭐 합계 신자 라던가 그래 지고 말 뭐 잡아 교신 자요
뭐 이런식으로 특정 이렇게 걸을 맹목적으로 믿는 사람들 무슨 것인 자
에너지로 이게 많이 하잖아요
뭐 그런게 되는거 같고 그런 사람들이 자꾸 이상한 말을 좀 많이 하고
있지 않나 그런 생각이 들어요 과연 그 사람들한테 이런 문제를 어떻게
해결할 내 라고 했을 때 대답을 못하는 경우가 많거든요 아 원래 그런걸
빛의 개선이 되서 저사람은 이랬어 라는 식으로
그래서 차이 뭐랄까 저는 이제
꺼진 플렉스 라던 것처럼 굉장히 제가 중요하게 여기는 분이 확실히 있는
사람이거든요
뭐 유지 보수 상태에 중요시하고 가독성 중요시하고 그리고 뭐 내가 채용할
수 있는 프로그래머가 정말 뭐 슈퍼 프로그램은 것 같아요 쵸퍼 프로그램
확률은 굉장히 낮다고 보니까
그렇다면은 뭐랄까 뭐 뭐 뭐
푸 때마다 코드 멍키 급의 프로그래머가 들어가도 어떻게 얘네 유지보수를
시킬 수 있을까 다시 생각하며 는
단순성 이 되게 중요하고 업 가독성 중요하고 구르고 먹게 뭘 뭐라 그럴까
음 바이크 제 중요한 그때 저한테 는 그리고 버겁고 뭐 이런것 중요
해야되고 건데 뭐 그 거야 뭐 중요하다 지금 것도 없고 제가 저 문을
실행한 가독성과 유지보수 하기 때문에 그 기준에서 맞춰볼 때
음 모든것 4 그 기준에서 맞춰서 현실에 맞춰 볼 때는 경우 일어 이런게
다 맞지 않냐 아니게 많이 하게 되는 거죠
아 그래서 아마 이 op 비디오가 나가 만 분명히 op
뭐라 그러지 글
교 신장과 op 교신 즈 아니 뭐 그거 라던가 아니면 op 빠 라던가
그런 사람들이 분명히
또 이렇게 뭔가 일을 많이 할 것 같아요 그래서 솔리드 가 되게 중요하다
라는 이걸 안 하는 뭐 뭐 뭐 채로 제품이 안 나온다니 뭐 이런 이런
얘기들
근데 캇 제가 이제 되게 존경하는 프로그래머 이용 천심 할 을 빌려서
드냐 이걸 끝내는 게 좋을 것 같은데
[음악]
세상에서 가장 가장 가장 퍼그 없고 탄 실하고
가장 핵심적인 프로그래머 프로그램들의 대부분은
오피가 없이 만들어졌어요 사실
참수 씨로 만든 게 되게 많아요 생각보 라
그래서 이거는 그냥 고 오피에 원래 원칙이 나와서 얘 내가 해결하려고
했던 것은 해결을 못하는 못한 게 맞아요 사실은
근데 뭐 필요 있는 장점이 있었고 그리고 이거는 정말 어떤 프로그램인
어떤 놈이 할 수 있냐 문제거든요
그러면 그냥 언어가 실수를 줄일 수 있는 어느 수록 좋은거고 실수를 줄일
수 있는 그런 개념은 좋은거예요
왜냐하면 은 아까 말했던 코드 몽키 급에 사람들은 프로그래머들은 2조의
때 실수를 더 많이 하기 때문에
그리고 그냥 실수가 어려운 그런
패러다임을 주면 되는거예요 그런 코딩 스탠다드 가 있고 그런 팔레트가
있고 그게 이 때 그 상대 실수를 덜 함으로 인해서
소프트웨어 품질이 높아지는 거지 이런 패러다임 을 도입해서
그 이것만 도입하면 정말 훌륭한 아주아주 훌륭한 프로그램이 나온다는 절대
아닌것 같아요 그건 프로그래머 괜히 역량이 고 2 사람들의 딱 어셈블리의
여주 든 자바스크립트 든 모를 주던 똑같은 품질의 코드가 나오지만 그런
사람들은 어디에 다쳐 박을 수 없으니까 중간이 쓰게 뭐 거나 한거냐
그래서 그런 장점이 있는게 이제 새로운 오페라는 패러다임 들이 장점
있는거고
그럼 그 패러다임에서 아 뭐라 그럴까
역시 문제가 있는 부분이 있을까 그 패러다임을 너무 광신적 으로 또
보면은
아까 말했던 그런 역량이 아주아주 훌륭한 야 하는 프로그램들이 할 때
경우도 실수를 만들 수 있는 부분들이 있거든요
그런게 이제 op 도 꽤 있어요 아까 말 다중 상속 많이 좀 걸은 시작을
해서 그런게 맞다고 무기는 순간부터 저는 어찌 보면은
아 그 피 쪽에서 계속 갖던 맛이 쪽은 이래서 문제아 모임 5% 실제로
프로그래밍은 이래서 문제 라고 했던 거랑 똑같은 과정을 겪고 하고 있는
거예요 왜냐하면 은
치는 이래서 문제 라고 했을 때 갯 그쪽에 산 얘기는 역 훌륭한 10%
그럼 이렇게 잘 자고 있어
그외 문제야
괜찮아요 근데 그 단어들이 게 문제 라고 하거든요 그래서 그런 그런
명상이라는 안쪽은
이거 구실도 있어 근데 딴 적이 없고 녹 접하던 와 그 문제는 아니야
그래도 훌륭 앞으로 잘 짤 수 있어 줘 똑같은 논리를 깔때 랑 방어 할
때랑 전혀 반대 라는 얘기를 하고 있는 거거든요
그래서
그런걸 대해 생각해 봐 줘 왜 파티를 만들고 배표 달 만들고 왜 거
추구하는 게 뭐냐
그리고 세상에 완벽한 없다는게 되게 중요한 것 같아요 op 도 모든 말에
차마 말이 길어져 써 끝낼게요 뽑혔습니다
