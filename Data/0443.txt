예 안녕하세요
포프입니다
오늘은 오랜만에 C# 쪽
특히 이제..
엔티티 프레임워크(Entity Framework)
쪽에 대해서 얘기를 할려 그래요
뭐 어찌 보면은
그것보다는 약간 다른
코딩 스탠다드(Coding Standard)
얘기일 수도 있고
음 어쨌든
웹 쪽에서 ORM 쓰시는 분들
(Object-relational mapping)
그.. 예전에 비디오 만든 적 있죠?
Object relationship mapping이었나?
(Object-relational mapping)
오브젝트 관계 매핑
(객체 관계 매핑)
그거를 쓰는 사람들이 아마 좀 더
귀담아 들으면 좋은 얘기인 것 같아요
언젠가 한번 따로
비디오를 만들 수도 있지만
아니면 지금 말해 버릴까?
C# 같은 데 보면은
특히, ASP.NET이라고
해야죠 C#이 아니라
MVC 패턴 쓰시는 분들이나
아니면 뭐 DTO 패턴
쓰시는 분들이 보통
클래스(class)를 만들고 거기에
프로퍼티(property)를 넣었을 때
그 위에 애트리뷰트(attribute)를
박는 경우들이 있어요
음..
한..
개념을 잡고 들어가는 게 좋겠다
개념을 잡으면..
클래스(class)를 통해서
로직을 넣는 게 아니라 순수하게
데이터를 넣는 경우가 있어요
뭐 그거를 굳이..
아..
뭐..
C 쪽에서 본다면 POCO 이런 개념일 수도 있고
뭐 퓨어..
뭐였지?
순수하게 값 타입인 거
POD라고 부르는 경우도 있었고
Plain Old Data라고
한마디로, 함수는 없이
데이터만 보여 주기 위해서
C에서는 struct(구조체)를
만드는 경우가 있었고
C#에서는 struct(구조체)하고 class(클래스)가
되게 많이 다른 개념이기 때문에
C#에서는 클래스(class)를 많이 만들죠
자바는 그런 구분이 없으니까
그냥 클래스(class)겠고
그럼 이거는 말 그대로
데이터를 주고받기 위해서
만든 오브젝트인 게 전부거든요
근데 웹 쪽에서 보면은 그런
오브젝트를 쓸 일이 되게 많아요 사실은
음 물론.. 이제
웹 쪽에서 이 데이터를 순수하게
JSON string으로 넘겨 줘 갖고
그 JSON string을 손으로 한 땀 한 땀
parsing하시는 분들도 있지만
그거는 실수를 굉장히
야기할 수 있는 그런 방식이고
그것보다는,
제가 .NET 쪽을 쓰니까
.NET이라고 할게요
다른 비슷한 것도 있어요
좀 이만큼 좋진 않지만, 다른 언어에도
뭐 .NET 같은 경우에는
Json.NET 이런 걸 써 갖고
JSON 파일이 들어오는 순간
웹 request 같은 걸로 자동으로 그게
오브젝트로 변환이 되게 설정이 가능하죠
기본설정이 그렇게 돼 있죠 사실은
그러면은 코드에서는 언제나
오브젝트를 다루는 것뿐인데
실제 뭐..
HTML..
그니까, HTML이 아니다
HTTP request를 통해서 왔다갔다할 때는
JSON text로 왔다갔다하게 되는 거죠
그래서
웹 쪽을 보면은 그런 데이터들을
주고받는 경계가 여러 개 있어요
첫 번째는 가장 흔히 아는 게
퍼블릭, 그러니까..
공개돼 있는 인터넷하고 제 서버
사이에 데이터를 주고받을 때가 있죠
그럼 그게 보통 두 가지인데
하나는 내가 API로 받을 때
그니까 그냥 순수하게 데이터만 받고
데이터만 JSON으로 던져 줄 때가 있고
또 하나는 이제..
MVC 패턴 쓰시는 분들은
제가 컨트롤러(Controller)에서
데이터를, 모델을 던져 주고,
뷰 모델(view model)이라고 많이 하죠
왜냐면 MVC가
뷰(view)가 갖고 있기 때문에
그 뷰 모델(view model)을 가져다가
HTML Template Language
C#에서는 Razor고
뭐..
타임리프(Thymeleaf)인가
이런 거를 쓰는 것도 있고
자바 쪽에서 제가 옛날에 썼었고
그런 거를 통해서 그 데이터를 받아 갖고
그 데이터를 어떻게 HTML로 보여
줄지 결정하는 뷰 엔진이 따로 있죠
그럼 그 사이에 주고받는 것도
뷰 모델(view model)이라고 하고
API 아까..
API 데이터만 주고받는 거는
참 이름을 제가 붙이기가 뭐한데
저는 개인적으로는 Data Transfer Object
라고 해서 DTO라고 불렀는데
제가 다음에 설명할
DTO랑 헷갈리기 때문에
일단은 뭐
API body 정도나 뭐
그런 식으로 얘기를 할게요
request body, response body 이런 식으로
그러면 이제 그게 퍼블릭하고
저하고 주고받는 거고
그럼 컨트롤러는 이 데이터를 가져오기 위해서
저희 내부에 있는 DB를 직접 긁거나
뭐 여러 가지 일을 해야 되잖아요
그러면 그 DB를 긁는 과정
아니면은 마이크로 서비스
(Microservices)라면은
그 서비스가 데이터를 가져오는 과정이 있어요
그러면 ORM을 쓰신다는 가정 하에
데이터베이스의 모양을
그대로 보여 주는 오브젝트를
서비스 윗단까지 반환하는 거는
저는 잘못된 일이라고 봐요
뭐 ORM 써 보신 분들은 알겠지만
그 데이터를 위에서 잘못 변형했을 때
뒷단에서 세이브를 할 때
그 데이터가 적용되는 이상한 짓들도 하고
그래서 결과적으로는 그런 서비스 레벨
그니까 DB를 직접 긁는 일은
컨트롤러에서 적어야 되고 사실은
그 안에 서비스가 하나 있는 거에요
그 서비스가
마이크로 서비스가 돼서 다른 서버가 됐든
내 그냥 한 서버 안에 있는 DB를 긁는 서비스든
예전에 도메인 드리븐 쪽 하시는 분들은
이거를 서비스 리포 패턴
이라고도 많이 했을 텐데
저는 리포 패턴은 별로 신경을 안 쓰고
서비스 패턴은 신경을 쓰는 편이에요
그러면
컨트롤러에서 데이터를 가져오는 데가
실제는 서비스에서 가져오는데
그 서비스가 리턴하는 데이터는
서비스 리포 뭐
DB 자체의 데이터가 아니라
중간에 데이터를 전송하기
위한 오브젝트여야 한다
그게 DTO라고 해요
그러면 그게 DTO고
그러면 아까 서비스 안에 들어가면은
DB를 긁을 때
DB를 정말 SQL 쿼리 해 갖고
거기서 또 한 땀 한 땀 따오는 법도 있지만
예전에 한번 "ORM: DB에 오브젝트를 쓰자"
라는 비디오에서 말했듯이
어떤 경우에는 ORM을 쓰는 게 낫고
어떤 경우에는 예전 방식대로 그렇게
쿼리 쓰고 뭐 stored procedure
쓰고 이런 경우가 있어요
근데 요즘 도는 애플리케이션 프로그램에서는
충분히 ORM으로 커버 가능한 게 많기 때문에
ORM을 한다고 가정을 하면은
데이터베이스를 연동하는 연결하는 읽어오는
그 객체가 또 오브젝트로 돼 있겠죠
그럼 지금 제가 얘기한 게
퍼블릭에서 컨트롤러로 들어가는 데이터
그게 뷰 모델이든 아니면
아까 말했던 API response request든
그리고 지금 말했던
컨트롤러에서 서비스 들어가는 DTO든
그리고 그 밑에로 들어가는
데이터베이스하고 직접 읽어오는 ORM
C# 쪽에서는
ASP.NET 쪽에서는
엔티티 프레임워크(Entity Framework)
이렇게 세 가지의 데이터 타입이 있어요
이 데이터 타입은 기본적으로 모두가 다
순수하게 오브젝트
데이터를 표현하는 게 전부에요
여기에 함수가 들어가면은 굉장히 헷갈려지고
물론 여기에 함수를 추가해야 될 일이 있는데
그거는 아마 다음이나 다다음
비디오쯤에서 얘기를 하든가 할게요
아 까먹기 전에 적어 놔야겠다 잠깐만요
그거를 제가
어떻게 그 짓을 하는지 설명을
드리면 될 것 같고 다음 거에서
그러면은 이제
이 데이터를 주고받을 때
데이터가 잘못 오는 것들,
데이터가 비어 있다거나
비어 있으면 안 되는데
이런 걸 잡아 주는
로직이 많이 필요하거든요
근데 이제 ASP.NET 같은 경우에는
필드명, 그니까 public int 막 이렇게 돼 있는
그 필드명 위에 제가 애트리뷰트
(attribute)를 박을 수가 있어요
ASP.NET 자체에서 지원하는
애트리뷰트(attribute)도 있고
제가 직접 custom 애트리뷰트
(attribute)를 박을 수도 있어요
이게 뭐 하는 거냐?
그럼 그 위에
애트리뷰트(attribute)에 만약에
[Required] 애트리뷰트(attribute)를 박았다
그럼 [Required] 애트리뷰트
(attribute)를 박으면은
이게
저쪽..
퍼블릭에서 들어오는 body라면은
그 필드(field)가 없을 경우에 알아서
에러(error) 메세지를 만들어 주고
이 필드(field)가 없다라고 하고
곧바로 에러(error)를 반환해 줘요
제가 직접 코드에서,
컨트롤러 안에서 코드를
짤 필요가 없는 거에요
자동으로 밸리데이션(validation)해 주는
로직을 중간에 껴 넣을 수가 있고
굉장히 많은 밸리데이션
(validation) 로직은 있어요
뭐 이게 우편번호냐
이게 전화번호냐
뭐 이메일이냐 이런 건 있지만
개인적으로 따로 만들고 싶어하는 것들은
컨트롤러단에서 코드를 한 땀
한 땀 짜면서 검사할 수도 있지만
밸리데이션 애트리뷰트
(validation attribute)를 만든 다음에
그 클래스(class)를 만들어서
자동으로 실행되게 한 다음에
메세지를 반환하는 법이 있죠
그래서 그런 애트리뷰트
(attribute)를 되게 많이 박아요
특히 퍼블릭에서 들어오는 데이터는
왜냐하면은
퍼블릭에서 들어오는 데이터는 제가,
제 코드 안에서 뭐 QA해서 어떻게
검사를 할 수가 없는 거잖아요
데이터가 누구나 바꿀 수 있는 거니까
그래서 그런 부분에 문제가 있어서
그거는 많이 박아요
그럼 이제 그 다음에는 아까 말한 DTO
서비스단에서 올라오는 거
서비스단에서 컨트롤러 레벨로 올라오는 거
이거는 그냥 솔직히
QA 문제만으로 다 잡을 순 있어요
근데 당연히
애트리뷰트(attribute)를 박아서
밸리데이션(validation)을 해 줄 수 있다면
제가 직접 밸리데이션(validation)
프로그램할 로직을 실행을 시켜야 되죠
왜냐면 내가 만든 서비스니까
음..
아까 말했던..
잠깐만요
물 좀 마시고
아까 말했던 컨트롤러 쪽하고는 다른 게
그거는 굉장히 정형화된
HTTP request response 이기 때문에
그건 알아서 해 주고
그리고 심지어는 거기서는
아까 MVC 같은 경우에는
박은 애트리뷰트
(attribute)들 있잖아요 그게
자바스크립트(JavaScript)단에서 폼 밸리
데이션(form validation)까지 돌아 줘요 자동으로
.NET Core, .NET 뭐 요쪽 자동 기능인데
ASP.NET Core, ASP.NET
근데 어쨌든 간에
서비스에서 컨트롤러로 넣을 때는
제가 밸리데이션(validation)을
돌릴 로직은 없지만
그거 직접 만들어야 되지만
실제 그거를 안 만들더라도
애트리뷰트(attribute)를 박아 주는 것만으로도
readability(가독성)가 많이 나아지긴 해요
아 여기서 나오는 DTO에서는
이 필드(field)는 반드시 있구나
이 필드(field)는 없구나
null이 될 수 있겠구나
뭐 이런 부분들?
근데 이제 이거는 예전에 제가..
null 관련 비디오를 만든 적이 있어요
"null이란 무엇인가?" 뭐 이런 거
아니면 null checking에 대해서 얘기한 적도 있고
그리고 코딩 스탠다드(Coding
Standard)에서 null을 우리는 어쨌든
최대한 없는 코딩 스탠다드(Coding
Standard)를 지향한다는 얘기도 했었고
그래서 그 부분은 따로
보시면 될 것 같고 그 비디오를
포프티비 서치엔진 가셔
갖고 검색하면 나와요
그리고
그러나
어쨌든 간에 readability(가독성) 때문에 좋다
여기까지는 좋아요
다 좋은 얘기인데
이 마지막에
이제 엔티티 프레임워크
(Entity Framework) 들어갈 때도
그런 애트리뷰트(attribute)를
박을 수가 있어요
뭐 약간은 다른 애트리뷰트
(attribute)지만 박으면 똑같이 돼요
어떻게 되냐면
이게 되게 재밌는 게
되게 훌륭한 거기도 한 게
그런 애트리뷰트(attribute)를 박은 다음에
이건 [Required]고
뭐고 뭐고 이걸 박아 두면은
엔티티 프레임워크(Entity Framework)에서
이제 sql.. 뭐
마이그레이션(migration)이라고 하죠
마이그레이션(migration)
스크립트를 만들어 주잖아요
내가 원래 있던 모델을 새로 만들고
이제 뭐
마이그레이션(migration)을 만들어 줘 그러면
테이블(table)을 만드는 그런 sql을 만들어 주고
또 자동으로 적용해 주고
서버(server)에 올라가는 순간
그리고 그 다음 거를 해서 수정을 하면은
요만큼이 수정됐다고 해서
그거에 대한 또 쿼리(query)를 만들어 줘서
이제 DB 꽂고 실행할 때
알아서 DB 스키마를 업데이트해 주고
이런 개념이 있어요
그럼 그런 걸 해 줄 때
그 필드(field)를 제대로 읽어서
실제로 그 필드(field)대로 만들어 줘요
만들어 주는 것들이 있어요
전부 다는 아니에요 아직은
ASP.NET Core는 아직 완성이 좀 덜 됐고
ASP.NET은 되게 잘 돼 있고
그러면은 제가 [Required]를 넣으면은
서버(server)단에서 자기가 알아서
아 이거는 not null이야
sql은 이거 null이 들어갈 수 없어
이런 식으로 만들어 줘요
그리고
또 재밌는 게
이 상황에서 이게 not null
null 이런 게 있잖아요
그러면 이게 nullable로 들어갔는데
뭐 not null이거나 뭐 이런 건 중요한 게 아니고
어쨌든 간에
그 데이터를 제가 집어넣을 때가 있어요
sql 쿼리(query)에 데이터를 집어넣을 때
그럼 예를 들어서 이게 [Required]
필드(field)에요 string이고
근데 거기에 제가
아무 string도 대입을 안 했어요
그러면 object에서는 null이잖아요
근데 그거를 save할려고 하면은
자기가 밸리데이션(validation)을 한 다음에
거기서 에러(error)를 뽑아 줘요
아 이거는 null이 되면 안 되는
필드(field)인데 니가 null을 넣었어
이러고 이제 에러(error)를 던져 줘요
그게 지금
뭐 당연히 서버(server) 들어갔을 때
sql 서버(server) 들어갔을 때
거기서도 not null인데 null이
들어왔으니까 에러(error)가 나겠지만
클라이언트단 그러니까 결과적으로는
엔티티 프레임워크(Entity
Framework)가 도는 cpu단에서도
그런 밸리데이션(validation)을
해 줄 수 있다고 알고 있어요
제가 그냥 쓰기만 했고
정확히 이제..
쓰기만 했고
클라이언트 로직을 끌 수 있다
켤 수 있다 이것도 보긴 봤는데
그거는 이제 sql generation 쪽인 것 같고
이제 그 데이터 밸리데이션
(data validation) 쪽은 정확히 지금
sql 서버(server)단에서 도는지
cpu단에서 도는지 확실치는 않아요
좀 더 봐야겠다
근데 결과적으로 재밌는 거는 뭐냐면
이 밸류 타입(value type)
이라는 것 때문에 되게 여기서
이상한 짓을 많이 할 수가 있어요
그래서 오늘 말하려고 하는 주제는
사실은 이거일 수도 있는데
앞에까지는 그냥 이런저런 정보를 전달했다면
뒤에부터는 베스트 프랙티스
(Best Practices)라고하죠
이게 뭐냐면
예를 들어 제가 오브젝트가
있다고 생각을 하고
그 오브젝트에 밸류 타입(value type)이
있다고 생각을 해요 필드(field)로
그게 뭐냐면
int, enum, struct 이런 거
근데 뭐 struct를 ORM에 넣지는
않으니까 일단 그건 제외하고
일단 int가 있다고 생각해 봐요
int를 해 갖고
이 int에
뭐를 넣으면 좋을까
반드시 int가 들어가야 되는 것
음
키!
키를 센치미터로 넣는다고 생각을 해 봐요
사람이 0센치인 사람은 없으니까
그러면 키가 들어갔는데
int height 이렇게 넣어 놨어요
아니면 heightCentimeter
확실하게, 넣어놨는데
그리고 위에다 [Required]
애트리뷰트(attribute)를 박았어요
그럼 어떻게 될까요
전혀 작동을 안 해요
뭐 서버(server)상 sql을 만들어 줄 때는
이게 null일 순 없다라고 박아주는데
어차피 C# 언어에서 int가 null이 될 수가 없어요
밸류 타입(value type)이기 때문에 null이 없어요
그래서 이 오브젝트 만드는 순간
엔티티 프레임워크(Entity Framework)
에 들어가는 오브젝트를 하나 만들어요
새로운 데이터를 넣기 위해서
그럼 기본적으로 height가 0으로
들어가게 돼요 기본값이 들어가니까
그리고 내가 키를 집어
넣는 걸 까먹었어, 그쵸?
키를 집어넣는 걸 까먹고 save를 했으면
그게 사실은 제가 원하는 거는
야 너 키를 안 넣었어 뻑이 나야 돼
그러고 탁! 뻑이 나 줘야 되는데
그게 아니라
오히려 0이 들어가 버린 거야
값은 있으니까
그러고 저희는 문제가 있다는
걸 모르고 넘어가게 돼요
그 데이터가 안 들어가는 게
제일 좋은 거잖아요
그래서 밸류 타입(value type)하고
[Required]를 쓰는 거는
아.. 뭐 일단
엔티티 프레임워크(Entity Framework) 자체에서는
not null 이거 들어가는 거 하나는 도움이 되지만
그 외엔 도움이 안 되는 거에요
밸리데이션(validation)이
제대로 작동을 못 해요 어차피
그래서 저희가 베스트 프랙티스
(Best Practices)로 쓰고 있는 게
저도 그렇고 이제 뭐
당연히 제가 그러면 글루와에서도 베스트
프랙티스(Best Practices)로 쓰고 있는 거고
그런 DB단에
일단은 엔티티 프레임워크
(Entity Framework)단에 int 값이 들어가고
뭐 아니면 다른 밸류 타입(value type)
enum도 그 중의 하나죠
그게 들어갈 때
그거는 반드시
그리고 이게 [Required] 필드일 때
반드시 question mark
(물음표)를 붙이게 돼 있어요
"int?"
물음표 마크를 붙이면 그게 이제
nullable type이 되는 거잖아요
null이 될 수도 있고 값이 될 수도 있고
그거를 왜 하냐면은
이렇게 할 경우에는
제가 아까 새로운 오브젝트를 만들고
실제 나이를 넣지 않으면 null로 남아 있기 때문에
save를 할 때 그니까 DB에 insert를 할 때죠
에러(error)가 나고 뻗어 버려요
그래서 실수를 곧바로 찾을 수가 있어요
제가 요 부분이 코드를 제가 짜면서
사람들 코드리뷰 보면서 이렇게 들어오면은
야 이거 question mark(물음표) 달아 그러면
이제 애들이 이해를 못 하는 경우가 있고
question mark(물음표)를
달아 놨는데 애들이 그거를
뷰 모델(view model)단으로 올릴 때
아니면 DTO로 올릴 때
question mark(물음표)를
그대로 패스를 하더라고요
근데 사실 그럴 필요는 없거든요
그래서 그 부분 같은 경우도 이제..
그니까 DTO로 할 때
DTO로 할 때도 그래서
그거는 의미가 없잖아요
어차피 우리 서버(server)에서는
반드시 int 값이 있어야 되는 건데
question mark(물음표)를 붙여 갖고
이게 null인지 아닌지 체크를
하게 되는 이상한 일도 해야 되고
그래서 그런 경우에는
null 체크 하지 말라고
이거는 DB 이런
문제 때문에 있는 거지
DB에는 반드시 그 값이
들어갈 수밖에 없다고
안 들어가면 뻑이 나니까 아예
그래서 그런 약간 꼼수 아닌
꼼수를 쓰고 있어요
그런 게 있고
어차피 이 얘기가 나온 김에
그러면 아까 제일 처음 얘기했던
컨트롤러에 들어오는 거
퍼블릭에서 컨트롤러로 들어오는
데이터까지 얘기를 해서
베스트 프랙티스(Best Practices)
를 하나 더 만드는 게 좋을 것 같아요
일단 ASP.NET Core단에서
컨트롤러 함수를 만들 때
매개변수로 post body를 받아올 수가 있죠
그럼 그거는 매개변수 앞에 [FromBody]
라고 해서 각진 괄호에 넣어 갖고
이제 오브젝트..
클래스(class)를 넣으면은 지가 그게
JSON으로 들어오든 XML로 들어오든
지가 알아서 디시리얼라이즈
(deserialize)해서
시리얼라이즈(serialize)?
디시리얼라이즈(deserialize)를
해서 오브젝트로 던져 주죠
그리고 그 외에
그, 라우트(route) 있잖아요
URL 보면은 이렇게 슬래쉬(/) 돼 있고
이름 들어가 있는 라우트(route)
그 라우트(route)에 들어오는 데이터도
매개변수로 받을 수가 있어요
[FromRoute]해 놓고 이제 그게 string
받는 경우도 있고 int를 받는 경우도 있고
심지어는 enum을 받을 수도 있어요
string을 enum으로 바꿔지게
저희는 보통 그렇게 많이 써요
그러면 이제 매개변수에 보통
enum이 들어가는 게 있고
enum도 밸류 타입(value type)이잖아요
그리고 오브젝트가 들어가는 게 있어요
그러면 컨트롤러(controller),
제일 위에서 해야 될 일이 보통은
모델..
이 데이터가 온 모델, 오브젝트가
valid한지 안 valid한지
ASP.NET Core에서 이미 판단을 해 주거든요
그러면 제일 처음 해야 될 게
ModelState.IsValid를 호출하면 돼요
그러면 이게 valid하지 않다면
그 순간에 이미 얘는
데이터에 이상이 있거나
라우트(route)에 이상이 있는 거에요
enum인데 그 enum에 맞는
값이 없는 게 들어온 거야
우리가 enum으로 뭐
동, 서, 남, 북 이거만 넣었는데
갑자기
뭐 말도 안 되게
"저쪽" 이런 게 들어왔을 때
enum에서 찾을 수가 없으니까
string을 enum으로 convert 할 때
모델이 invalid한 에러(error)가 나요
그러면 뭐
그냥 모델이 valid하지 않아
라고 돌려줘도 되고
아니면은 그 실제
에러(error) 메시지를 generation
해 갖고 리턴해 줘도 되고
그런 방식이 있어요
그러면 지금 말했던 거는
이 url parameter에 들어와서
매개변수로 받는 이 enum은
ModelState.IsValid를 호출하면은
이게 제대로 안 들어왔을 때는
이미 invalid라고 나와요
근데 재밌는 거는 뭐냐면
아까 말했던 post body 받는 거
그니까 오브젝트를 받는 거죠
그 안에 보면은
제가 좀 전에 엔티티 프레임워크(Entity
Framework) 얘기할 때 말했던
그 문제가 똑같이 있어요
예를 들어서 거기에
int가 있고 [Required]가 있었다
그러면 그 값이 안 들어오는 순간
그 body validation에 있어서는
이게 invalid를 못 잡아요
그냥 기본값으로 들어와요
재밌죠
그래서
그런 문제가 있었어요 언제나
그래서..
HTTP단에서 뷰 모델
(view model)을 반환할 때도
그렇게 똑같은 방식으로 하고 있어요
그러니까
이게 [Required] 필드(field)고
그게 실제 request로 들어오거나
response로 나가야 될 때, 컨트롤러단에서
그럴 때는 저는 언제나
question mark(물음표)를 달아요
"int?" "enum?" 이런 식으로 해 갖고
그리고 [Required] 애트리뷰트를 위에 박죠
requried 필드(field)가 필요할 경우만
어찌 보면은 약간..
뭐 대충 동작하는 원리를
제가 추측을 하면은 이해는 돼요
왜냐하면은
그 오브젝트를
디시리얼라이즈(deserialize)할 때
보통 오브젝트 일단 만들고
그 오브젝트 만든 다음에
거기서 하나하나 필드(Field)를 찾아 갖고
그 프로퍼티(Property)명에 맞는 걸
새로운 값을 대입해 주는 방식일 수밖에 없거든요
그니까 다 public 필드(field)여야만 하고
constructor도 public하게 돼야 되고
그러면은 밸류 타입(value type)은
이미 밸류(value)가 있으니까
단지 그걸 훑어보면서 이게
null이냐 아니냐는 것만으로도
아 내가 새로운 오브젝트를
만들었는데 이 값이 아직 안 들어왔어
invalid하구나 이 판단이 가능한데
그게 아니라
밸류 타입(value type)까지
정말 판단을 하려면은
이 밸류(value)를 초기값으로 해 놓고
디시리얼라이즈(deserialize)하는 동안에
하나하나 이 프로퍼티(property)가
실제 새로운 값이 들어왔냐 안 왔냐를
이제 어딘가에 기록을 해 놨다가
invalid라고 얘기를 해 줘야 되잖아요
그래서 그게 제대로
구현이 안 된 게 아닐까
아니면은 제가
이 문제가 있어 갖고
이런 식으로 가기 시작한 게
.NET Core 한 1.0? 1.1?
이때였던 것 같으니까
지금 2.0, 2.1이 나오니까
여기서는 고쳐졌을 수도
있는 부분이에요 사실은
그건 제가 좀 더
확인을 해 봐야 되는데
제가 체인지 리스트에서
본 적은 없어요
그래서
한 번쯤은 확인해 보시고
제가 말한 것처럼
API나 MVC에서 뷰 모델(view model),
아니면 API Request 이런 거 들어올 때
DTO에 밸류 타입(value type)이 있고
아니면 뷰 모델(view model)
이라고 할 수 있고요
그 뷰 모델(view model)에 밸류 타입
(value type)을 실제 패스를 안 했을 때
JSON으로 비워서 보냈을 때
그래도 model invalid..
model validate state가 뜬다면은
제가 말한 것처럼
question mark(물음표) 달아 갖고
nullable로 만든 다음에 약간 좀
판단해야 되는 귀찮은 일들이 있어요
근데 재밌는 거는
모든 컨트롤러 위에서
model valid를 확인을 하고
IsValid를 확인하고 invalid할
경우에 리턴을 해 버리면은
그 이후에 다른 코드에서는
그 아까 "int?"로 돼 있는 것들 있잖아요
그거를 불러올 때 null 체크를 할
필요가 없어요 반드시 값이 있으니까
그래서
저는..
실제 null이..
아 이렇게 얘기하면 되겠구나
저는 언제나 그래서 보통
프로그래밍할 때 규칙이 뭐냐면
바운더리(boundary, 경계)가 바뀌는 상황
외부에서 내부로 들어오는 상황에서
모든 밸리데이션(validation) 하고
밸리데이션(validation)이 잘못된
경우에 다 리턴해 버리고
뭐 에러(error) 메시지를 주든 말든
그 이후에는 모든 데이터가
옳다고 가정을 하고
그 데이터에 null 체크를
하지 않는 게 원칙이에요
string도 마찬가지고
모든 게 마찬가지에요
왜냐하면은
그렇게 하지 않으면
함수에서 무슨 매개변수를 받았는데
이게 다 null일 수도 있다는
판단 하에 이제 막 null 체크하고
그럼 null일 땐 뭘 반환하지?
막 이런 문제들이 있어요
그럼 모든 함수에서
null 체크를 하기 시작을 하면은
이거는 좀 말이 안 되는
것 같다는 그런 거죠
예를 들어서
실제 생활에서도
그러면 말이 안 되거든요
내가 차를 몰면서 도로를
좌회전을 했어요
그런데 거기에 도로가 갑자기 없고
공허한 곳이 있다는 판단 하에
그럴 경우엔 차를 뒤로 뺀다는
생각을 하고 운전해야 되나
이런 거 있잖아요
도로는 막혀 있거나 일단 뚫려 있으면
뚫려 있는 게 정상이라고
저는 생각을 하기 때문에
뭐 당연히
도로 공사를 할 때
exception은 있겠지만
그런 경우에도 앞에
바리케이트를 쳐 놓거나 이러니까
갑자기 달리다가 도로가 중간에 사라질 수
있다는 가정을 하고 운전을 할 수가 있나?
뭐 이런 생각을 하면은
역시 그런..
뭐 가정이라고 하잖아요 프로그램에서
이 값은 여기까지 오면은
반드시 올바르다
이런 가정을 세우고
복잡한 여러 가지
매개변수를 생각하지 않게
그니까..
그런 식으로 이제 코딩을 짜야지만
실제 리더빌리티(readability, 가독성)도 높아지고
코드를 좀 더 깔끔하게 유지할 수도 있어요
그리고 만약에
누군가 어떤 실수를 할 때
딱 한 눈에 보이기도 하고
근데 그게 아니라
매개변수 여덟 개 들어왔는데
여덟 개 중의 하나가 null일 수 있어
null일 때마다
얘는 이렇게 처리해야 되고
쟤는 저렇게 처리해야 돼
이런 식으로 생각을 하다 보면은
함수를 호출할 때마다
아주 죽어나는 거죠
그래서
제가 가끔 한국 분들이나
아니면 이제..
SI 쪽을 여기도 하는
사람들이 있긴 있으니까
제가 한국 분들보다는
많이 알지 못하는데
그런 사람들 코드를 보면은
그렇게 null 체크 떡칠을 한 코드가
되게 많이 보일 때가 있어요
그 사람이 주니어든 시니어든 인터미디엇이든 간에
그런 사람들 코드를 보고
이 사람들하고 일을 하다 보면은
이 사람들은 버그 잡는 데 확실히
시간이 굉장히 많이 걸리더라고요
왜냐하면은 함수 하나 호출할 때마다
판단해야 될 게 여덟 배로 느는 거야
막 그러면
옛날에 그런 뭐
속담에서 쌀 한 톨 주고
내일 두 톨 주고 하다가
초가삼간 날려먹은 그런 속담 있듯이
그런 식으로
함수 몇 개 타고 들어가면은
디버깅을 못 해요
그런 문제가 있어요
그래서 예전부터 되게
단순한 게 좋은 거다라고 말한
거와도 일맥상통하는 얘기고
오늘은 어차피
또 기술 얘기하니까
말이 주저리 길었는데
대충 정리를 하면은
데이터를 주고받는 경계가
한, 세 개 정도 있다고 보시면 맞아요
퍼블릭에서 컨트롤러로 들어올 때
그리고 컨트롤러에서 서비스단 내려갈 때
서비스단에서 DB쪽 긁을 때
그리고 거기서
데이터를 주고받을 때 DTO를 만들자
뭐 아니면
오브젝트가 다 분리가 돼야
된다 이런 얘기를 했었고
그리고
아
그 외에 이제 뭐
아까 말했던 엔티티 프레임워크(Entity
Framework) 에서 밸류 타입(value type)을 저장할 때
애트리뷰트(attribute)를 잘 이용할려면은
밸류 타입(value type)은
[Required]가 들어가는 전제 하에
question mark(물음표)를 박아야 되고
단, Required 필드(field)인데
오브젝트를 생성하는 순간 기본값을
박는다면은 그러진 않아도 돼요
그니까 프로퍼티(property) 자체에
기본값을 집어넣는다면
그니까
그러면 Required고 default
값도 있으니까 상관이 없는데
그런 상황이 아예 아니라면은
유저가,
프로그래머가 직접 데이터를
넣어 줘야 하는 상황이라면
question mark(물음표) 넣어야 되고
그러면 자동으로
밸리데이션(validation)해 주고
다 돼요
그리고
아까 말했던 컨트롤러에서,
퍼블릭에서 컨트롤러 들어올 때도
그런 애트리뷰트(attribute)를 잘 이용하면은
자바스크립트(JavaScript)단에서도 그렇고
뭐 실제 컨트롤러 들어와서도
모델 밸리데이션(validation)을 할 수가 있는데
그건 정말 단순하게
ModelState.IsValid 하나로 되는 거니까
그거를 잘 이용할려면은
아까 말했던 밸류 타입(value type)이 역시
질문, question mark,
물음표! 질문이 아니네요
물음표를 박자
이 얘기가 가장 핵심이에요
아 참 쓸데없는 얘기를 많이했구나
끊을게요
그 얘기가 핵심이에요
포프였습니다
