예언의 와서 포프 입니다 저번 변해 에서 말한거 연장 됐고 요즘 최근에
이제 코딩 이야기를 좀 별로 들어 하니까 사람들이 코딩 비디오 나올
때마다 와 오랜만에 코딩 이야기의 라고 하는게 있어서 또 코딩 얘기를
할게요 오늘 얘기할 것은 c 샵 에서 뒤 제부 처음은 아니겠지만 데
굉장히 많이 쓰던 언어 중에는 c #2 이거를 제대로 만든 게 처음이었고
그리고 어찌 보면은 이 덕분에 이제 웹 프로그래밍을 할 때 데이터와
함수를 이제 분리 하면서도
오브젝트 오리엔 티드 프로그래밍 처럼 op 처럼 쓸 수 있게 해주는
굉장히 훌륭한 그런 개념이 라고 생각을 해서 설명을 해요
어 익스텐션 메서드 라고 하는거예요 익스텐션 메서드
뭐 시에는 지프 번에는 없는것 같고 있는데 제가 모를수도 있죠 아무도 안
써서
자 받아내는 들어 왔는지 모르겠지만 잡아 쪽에는 제가 예전에 파스텔
없었어요 그래서 일단은
없다고 생각으로 시작을 할게요 그럼 이제 이익의 나오게 된 계기가 뭐냐
물론 저는 몰라요 근데 제가 추측을 할게요 저한테 왜 유용성이 있는 직
저번 편에서 제가 그런 얘기를 했어요 이건 예를 들어서 얘기하는 건데
아 일단 적용이 될 부분이 많은 것 같아요
전편에서 이제 뭐 dto 라던가 이런 데이터를 여러 서비스 아내가 어떻게
주고받는 야 그 주 급할 때 이 클래스 오브젝트를 이제 표현하는 클래스
는 데이터만 들어있는 퓨어 데이터 오브젝트에 한다 라는 얘기를 했었어요
그쵸
왜 그래야 되냐 라고 질문을 하면 은
내 간단해요 사실은 왜냐하면 이 데이터는
따른 이제 뭐 매체로 coli 제가 되고 디스 열 아지 가 되는 그런
데이터라고 봐요
그러면 이 데이터를 리더 블릿 이슈나 이런걸 생각을 할 때 딱 가장
좋은것은 순수하게 프로퍼티 만 짝이 있고 퍼블릭 프로퍼티 만 거기에 게
터 세터가 있는게 제일 좋은거 에요
뭐 제가 많은 캐릭터 세터 는 이 제목 앤 함수가 아니라 c #
프로퍼티에 있는 개 샌드맨 않아서 개 태도 개 태주 곳에 펴주고 이런 걸
얘기하는 거에요
그러면은
여기에 팜 수가 들어가거나 아니면 은 따른 프로퍼티가 들어간다
그 딸은 퍼티 무슨 얘기냐 며 이게 실제 텍스트나 이런걸로 시리얼
라이즈가 나 시리얼 라이스가 디젤 레즈 가 안되고 따른 프로퍼티를 모두
개를 더해서 값을 반환하는 이런 식의 약간 뭐
애들아 는 이런 함수가 있잖아요 그 함수 이를 대신하는
뭐 그런 프로퍼티가 들어가면 은 코드를 짤 땐 되게 편해요 데이터가
들어오는 데이터를 해석할 방법이 이미 코드 에니스 그 함수 있으니까
그러나 데이터를 표현하는 그냥 개최 라는 존재 r 그 의미에서는
및 어빌리티 굉장히 딸리고 실수 로 만약에 그런 프로퍼티에 뭐 xml
이건 우어
이근호 라든가 제이썬 이근호 뭐 이런 식의 줄 비트로 밝지 않으면 은 그
시 즉 데이터 루 세이브가 되는데 그 데이터는 중복되는 태서 필요가 없는
경우도 있고 이런 부분이 있어요
물론 이걸 또 상속을 해서 어떻게 해결할 수도 있지만 그냥 가장 깔끔함은
순수하게 이 클래스가 있고 그 클래스 데이터 있는게 깔끔하다는 건 누구나
이제 인정을 할 거에요 그럼 이렇게 가면은
아 그러면 은 그래 데이터는 그렇게 유지하자 목회 라고 얘기 했어요
그럼 여기서 이제 아 여기서 아까 말했던 그 두 값들 프로퍼티 더해 갔고
어떤 일을 해야 될 때 그게 사실은
프로퍼티 하고도 프로퍼티 라고 할 수 있지만 파생된 프로퍼티 라고 얘기를
많이 하거든요 파생된 멤버변수 기존에 있는 두 멤버 변수 원이 아니면은
둘 이상의 멤버 변수로 그 값을 주 앞에 나올 수 있는 따른 프로퍼티가
있는데 이거를 왜 오브젝트에서 또 프로퍼티를 눈 야 이거는 중복되는 가
필요가 없다 라는 일반적인
이제 사람들의 선택이라고 전 믿고 싶고 그냥
왜냐하면 그게 아니라면 또 뭐 이 데이터가 잘못됐을 때 한쪽에 기본이 된
데이터가 잘못되고
거기서 드라이브 데 파생된 이 데이터가 잘못 되지 않았을 경우에 또
좀 데이타의 의
뭐라 그러죠 그것을 무슨
유효성 안에 데이터 에게 검증 뭐 이런 게 되게 매매 들 수도 있고
어쨌든 그
뭔가 검증할 때 데이터는
1 에서 다른걸 유치할 수 있다면 그 유지될 수 있는 것 버리고 기본이
되는 걸 갖고 있는 게 정상이라고 보통 얘기를 하고 저도 그렇게 믿으니까
그러면은 이제 이런 함수를 만들기 해야 될 거 아니에요 그러면 가장 흔히
생각할 수 있는 함수가 어 그래
그러면은 스태틱 함수를 만들어서 한마디로 글로벌 함수 져 거기다가 이
오브젝트를 던져주면 그 5 부족해서 프로퍼티 2개 읽어서 값을 반환하는
형식으로 만들면 되겠구나
그럼 이것은 완벽하게 프로스 절로 돌아가는 거에요
ce 스타일의 스트럭 루트가 있고 단 이제 함수가 이제 글로벌 함수로 다
있고 거기에 어떤 스트로크를 노즈 나 노 주 은혜에 따라 이제 그 함수가
없을 되게 되는거고 함수 오버로딩 있으니까
그럼 거기서 그 값을 계산해서 결과를 판단하는 거죠 그러면 이제 op 를
열심히 했는데 갑자기 코드가 막 글로벌 함수의 개념 되는거예요
말도 안되게 그래도 약간 짜증이 나거든요 야 그 함수 자체는 이유 프로
기 오브젝트에서 많 이 클래스 노출이 되는 건데 이걸 아무거나 집어 넣음
되는 게 말이 안 되잖아
이 이런 문제가 생겨요 그래서
2 이런 문제들을 실제 내부적으로는 똑같이 이렇게 더울 거라고 전 생각을
하는데 실제 그럴 거에요
이 문제들을 그냥 약값 모피 적 으로 바꿔 준 게 익스텐션 메서드 라는
거예요
이씨 샵에서 이 개념은 어떠냐 일단 익스텐션 메소드를 만들 때는 일단
아까 말해도 오브젝트 a 클래스 a 라는게 있다고 생각해봐요
이게 추석에 데이터 요 그러면 이제 또 다른 클래스를 만들어요 근데 이
클래스는 스텝 t 클래스 의 한마디로 글로벌 함 써야 사실
근데 스티 클래스를 만들고 그 함수 그 안에 함수를 또 스태틱 함수로
둬야 되죠
눈 는데 반환값 놓고 스태틱 이라고 놓고 제모 함수 이름 적은 다음에
그 다음에 그 뒤에 되게 재미있는 보이 나오는데 이 앞에 디스를 넣어요
this 그리고 한칸 띄고 어떤 타입을 넣어요
이게 저희가 이게 익스텐션 메서드가 아까 a 라는 클래스 익스텐션 메쎄
만드는 거 거든요 그래서 a 를 넣어야 되요 그 디스 한칸 띄고 a 넣고
변수명 놓고 이제 그리고 닫은 다음에 그 안에 함수를 짠 되요 그럼 이
함수를 어떻게 호출 아냐
물론 아까 글로벌 함 소프트 하듯이 모이 익스텐션 클래스 가서 다 찍고
함수 이름 찍은 다음에 이 오브젝트를 패스 해주는 방법도 있지만
그러면은 정말 이건 c 스타일 플러스 제로 냉기 지고 조 op 적으로
보이게 하기 위해서 이거 어떻게 하냐며 는
아까 오브젝트 있잖아요 a 거기서 오브젝트 맞는게 스몰 캐릭터의 이라고
해 봐요
아까 소문 짜이 a 닻 익스텐션 매스 함수 이름을 넣으면 놓고 가로 열고
그냥 닫으면 이 함수 호출이 되요
컴파일러 따라서 이걸 다 바꿔 주는 거에 사실은 보면서 아 이게 adr
익스텐션 매서 스태틱 함수 호출 했으니까
시처럼 아까 프로세서를 냉기 좋지 않은 것 해주면 되겠구나 내부적으로
그렇게 해 주는데 코드에서 볼 때는
일단은 굉장히 오피 적으로 보이고 예 말이 되죠
내가 글로벌 함수 호출 하고 데이터 던지는게 아니라 이 데이터의 시작해서
야 이 데이터가 있어 이 데이터에서 이 새로운 값을 구해 줘
이렇게 하는 거죠
이게 그 전 비디오 하고 왜 관련있다고 얘기 아니야 그저 밑에서 그런
얘기 했잖아요
엔티티 프레임워크 다 save 세이브 데이터를 서비스 위쪽으로 올려 주는
건 말이 안 된다
새로운 오브젝트를 만들어서 dq 로 만들어서 보내 줘야 된다
그럼 이걸 어떻게 만드냐 보통 뉴 한 다음에 막 퍼팅 아직 누구나 이렇게
했을 거에요 근데 그게 아니라
아까 말했다 엔티티 있잖아요 엔티티 프레임워크 쓰는거 엔티티 오브젝트 그
클래스 그 타입 용어로 익스텐드 매스를 만들어주면 되요
그리고 거기 이제 뭐 함수 이름 자체를 멤버 투 뭐 dt 5
뭐 투 어쩌고 dt 5 이런식으로 해놓고 그 익스텐션 메스 다에서 제가
좀전에 말했다 손으로 막 뉴 odt 오브젝트 만들고 어싸인먼트 하고
이런거를 그 안에 이스트 심해서 두면 되는 거야 그럼 코드 잘 뜨는데
간단해요 엔티티 모델 딱 불러온 다음에 tv 긁어서 가 꿈을 거기다 같다
다치고 투 어쩌고 d tu
물론 이게 코드가 재사용 할 필요가 없는데
함수를 만드는거 에서는 조금 제모 재사용 성 함수 얘기
예전에 만한 책 말한 코딩 스탠다드 하고는 약간 바라는 부분이 있어요
근데 이걸 사람들이 송 코딩을 하기 시작을 하면 은 이제 비슷한 dto
를 여기저기서 받는 하거든요 1 함수가 아닌 여러 함수에서
사람들이 그냥 송 코딩을 계속 복부 타면서 하기 시작하거나
뭐 그러면 이제 한군데 고쳐 있기만 하면 되는걸
만약에 그 엔티티가 바뀌었어요 새로운 필드가 추가돼 써
그럼 dt 5 에서 값을 바라는 오직 이 바뀔수도 있어요 그거를 모든
곳에 의 스윙 곳을 찾아가면서 바꿔 간다는 것 자체도
조금 힘든 부분도 있고 그리고 남이 그렇게 서비스 단에서 이 코드 새로운
dto 만드는 코드를 작성해 놓은 것을 한눈에 보고 그걸 고치 재사용을
하늘 하려는 사람들이 생각보다 좋은것도 있었어요 그래서 이거는 어찌
보면은
오피 적인 좀 깔끔한 플러스 워낙 그 db 글고 오는 코드가 굉장히 길
꾸 작문 이고 약간 좀 2기 편하지 않은 부분이 있어서 사람들 헷갈릴 수
있다는 부분
그런거를 고려해서 원래 함수는 재사용을 하지 않나 만들지 않는다는 규칙을
약간은 예외를 만든 거라고 할 수가 있어요
그리고 어찌 보면 되게 정형화된 패턴 이라서 그냥 함수를 만들기로 결정한
걸 수도 있고
뭣하는 hd 가 있으면 dto 만들어야 되고 귀티 원합니다 인디 모델
만들어야 되고 그리고 지금 잠깐 말했듯이 dt 5에서 p 모델 갈 때
똑같이 끝에 메스 를 써서 만들수가 있어요
그래서 익스텐션 메써드 이렇게 쓰면 되 게 편하다
그래 익스텐더 메스 들 제가 또 다르게 쓴 경우가 뭐가 있었냐 며 는
이것은 어찌보면 은 이제 다른 op 에서 겪었던 문제에는 있을 거에
똑같은 문제가 예를 들어서 제가
외부 라이브러리를 받았어요 외부 라이브러리를
근데 제가 소스 코드가 없고 뭐 drm 맞거나 바이너리 마 있는 거에요
근데 이거를 내가 확장을 해서 좀 더 뭔가를 하고 싶어
그러면 저희가 할 수 있는 게 보통 그 거잖아요 상속을 받아서 오브젝트를
확장을 해 버리자 나요
근데 문제는 이 그 오브젝트 자체가
라이브 이단에서 오브젝트를 만들고 던져주는 경우가 있어요
그러면 내가 이거를 내 함수를 쓰기 위해서 캐스팅을 칠드런 함수로 의
칠드런 이제
오브젝트로 캐스팅해서 쓸 수도 있는데 굉장히 해 카 잖아요 사실 말자
찌가
물 원랜 그러면 안 되는 거고 이제 메모리 구조 상 위치상 함수만 추가된
오브젝트로 이제 캐스팅을 해서 새로운 함수 호출하는 것은 문제를 안되요
문제는 당연히 안 되는데
그런게 코드의 보이면 보이스의 사람들이 클래스를 따 보고 이게 그런지
아닌지 고민하는 게 있어야 되기 때문에 그게 안 되거든요
그럼 얘네는 이제 약간 5 디자인 패턴 제안한 커맨드 패턴 비슷하기도
한데 그럴 결과적으로 아까 말했던 그런 글로벌 함수 만들어 가고 거기에
오브젝트 던져져 같고 그 오브젝트에서
이제 함수를 실행하는 개념인데 거니까 패턴화 시킨 게 것들이 있겠죠
당연히 이제 커맨드 패턴 은 약간 다르긴 한데 그런 식으로 하는걸 내가
어떤 클래스를 만들어 두고 이 클래스 는 어떤 커맨드를 그냥 호출하는
클래스 일 뿐이에요
그럼 그 안에 그 커맨드 메서드가 있고 그럼 이 커맨드를 어떤 개체에
이제 호출을 할 거냐
그렇게 객체를 받아야 되잖아요 그 개체 이제 매개변수로 들어오거나
뭐 컨스트럭터 할 때 거기에 맥이 만들어서 가 들고 있다가
호출하거나 이런 방식으로 지 만드는 건데 그런 이제 끌 만들다보면 은
보이게 추상화가 좋고 모이게 확장성이 좋고 다 좋은 얘긴데
가독성이 드럽게 안 좋아요 왜 쓸데없이 값 2개 더하는 것을 이런식으로
클래스도 만들어서 해야 되나요 라는 게 할 수는 있어요 할 수 있는데
사람이 보통 인식하는 물체 라는 개념만 다르기 때문에 더 애매해 지게
되요
c 3 에서는 이게 익스텐션 매 스스로 해결이 가능하다는 거죠
그 재미있는 거에요 한마디로 꼭 그래 내가 우리 그 라이브러리 사왔는데
거기 dl 에서 단 오브젝트가 있어 내가 이 오브젝트의 함수를 추가할 수
없거든
그저 상속을 받아 캐스터는 것도 아닌것 같애 그런 경우에
그냥 익스텐션 메서드로 만들면 되요 아까 말한 오브젝트가 a 클래스가
이게 뭐 삐라 고 했다
그럼 익스텐션 메서드 하나 만들고 세트 클래스 스태틱 메서드로
그리고 그 안에다가 디스 비
뭐 그러고 뭐 스모 캑 모모 팝페라 m 모 에이 뭐 어쨌든간에 그럼 변수
이름 오 디스 b 타입 변수 이름
이렇게 놓고 그 안에 로직 돌려야 우리 타는 것만으로도 실제 코드를 짤
때는 이 클래스 의 실제 있는 처음은 b 클래스 에 있는
함수만 야 호출하고 쓸 수가 있는 거야
물론 이제 그 아래에 있는 프라이빗 멤버나 프로텍트엠 m1 이룰 수가
없지만 최선 노출이 되어 있는 모든 데이터를 제자 이체 맘대로 바꿔서
그 기능을 추가할 수가 있는거죠 그래서 익스텐션 이라고 이름이 붙은게 그
이후에 요
이거 굉장히 많이 쓰여요 굉장히 많이 했어요
시샵 이제 마이크로소프트에서 보면은
http 클라이언트 웹 api 에서는 클라이언트가 있잖아요 거기에 들어간
함수는 굉장히 제한적이고 왜냐면 뭐 굉장히 복잡한 것을 필요없으니까
포스트 하고 개 타고 이런게 전부 잖아요 근데 거기서 포스트가 개설할 때
제이썬 파일을 자동으로 만들어 주기 위해서 오브젝트를 눌 수 있는 그런
익스텐션 들이 있어요 그게 htb 클라이언트 안에 들어있는게 아니라
익스텐션 으로 함수를 따로 만들어 주는 거에요
금구 이태진 매스 에서 뭐 하냐 그거 읽어와서 그 1 공고를 제이썬
스트링으로 바꿔주고
헤더를 애플리케이션 제 있어 넣어준 다음에 포스트를 싸주는 거에요 그냥
그러면은 그 정말 단순하게 굉장히 가벼운 클래스가 쓰고 싶은 사람들은
아까 말해도 코어 엑시 tp 클라이언트와 쓰면 되는 거고 그 외에 어나
j 써니 나 이런거 추가하는 게 필요에 그러면 이제 그것을 익스텐션
메써드 마인크 되었을 수가 있는 거죠
예전에는 이런 기능이 없애는 그냥 상속의 상속을 드럽게 받아서
뭐 hd 클라이언트가 있고 제이썬 hdd 클라이언트가 있을거고 여러가지가
있었겠죠
4 익스텐션 메서드가 들어오므로 인해서 굉장히 코드 구조가 깔끔하고 및
어빌리티 가 좋아지고
그리고 우
어찌보면 은 이제 인터페이스의 남용을 막을 수 있는 것도 그 거였어요
왜냐하면 ftp 클라이언트를 만들었을 때 제이썬 클라이언트가 있고 다른
클라이언트가 있고 막 이라며 는 그것을 이제 부모 클래스를 잡고 있거나
인터페이스 클래스 에서 잡고 있었고 그럼 그 안에 무슨 형이 뭔지도
모르는 상황에서 막 되게 실행중에 형변환 하고 형 판단하고 복잡한 부분이
있거든요
익스텐션 메소드를 통해서
글로벌 함수를 굉장히 오피 처럼 보이게 약간 꼼수를 써 놓은것 4
실제 그 처음 들어오는 매개 변주 디스 매개변수는 실제로 오브젝트를
바다는 거기 때문에
오피 적 내부적으로도 는것도 차이가 없어요 그게 이제 op 만 위 딴
에서 대충 어설프게 보신 분들은 이거 op 가 되게 다르다 라고 생각하실
텐데
실제로는 결과 저는 뭐 어셈블리 단으로 내려가서 컴퓨터가 이해해야 되는
그런
목 기계어로 바뀌는 거기 때문에 결과적으로 그냥 함수가 있고
점프 테이블이 있는 것 뿐이고 그리고 첫 번째 매개변수로 오브젝트가
들어온 게 전부 거든요 사실 어셈블 2단에서는 그렇게 볼 수 밖에 없어요
cd 안에서도 그렇게 봐야 되고 그럼 결과적으로는 그 어셈블리 돈은
그대로 방식과 이렇게 익스텐션 매스가 만드는 방식과 똑같은 거고
성능상의 이제 문제가 있다는 것은 뭐 메모리 상에서 이계로 퀄리티 캐쉬
데이터 캐쉬에 문제 뭐 인수 적장 캐쉬에 문제 그게 전부 고
이걸로 인해 오피 보다
늦어질 부분은 솔직히 없어요 그냥 구조상 으로 그냥 캐시나 뭐 cpu
아키텍처의 마다 빼고 봤을 때 그냥 을
그렇게 보면 되게 재밌어 지는 거죠 그리고 이렇게 함으로 인해서 오히려
못 버추얼 함수를 줄일 수 있다
그러면 뭐 당연히 함수로 측에서 한번도 점프하는 이런 것들이 있지만
버추얼 함수를 줄 수 있다는 거 에서는
즉 뭐 안 쓰는 것보다 줄어들 거 같아 상속을 통해서 인터페이스 그런거
당연히 버추얼 함수가 줄 수 밖에 없고
그럼 우리 성능이 나아질 수 있는 거거든요
그래서 보면은 아 굉장히 누가 생각을 했는지 몰라도 처음 시작이 어딘지는
모르겠지만 굉장히 똑똑한 id 었구나 아이디어 였구나
올해 써먹어 느끼고 있는 거야 내부적으로 이렇게 돌 겠구나 이렇게 되는
거구나
똑똑한 id 었구나 이것이 샵에 도입한 그 c # 창시자 겠죠
그분 2 제가 언제나 감 말하지만 2분은 되게 똑똑한 신 분이에요
언어 구주 프로그램이 언어를 설계하는 사람 중에는 이 사람보다 뛰어난
사람이 과연 있을까 싶을 정도로 되게 뛰어난 사람이고
이 사람이 만든 개념이 아닐 수도 있어요 그냥 거기서 가꾸어서 보고나서
아 이걸 이렇게 차용을 해야 겟다
그리고 신택스 정으로 이렇게 만들어야 하지만 혼란이 얻고 좋겠다 이런
속에서 만드신 것 같고 그래서 그 분도 대단하다고 생각을 하구요
그래서 시 샵을 이제 제가 따른 언어 보다 낫다고 하는 부분도 이런 쪽
이런식으로 굉장히 뛰어난 아이디어가 있을 때 복잡하지 않게 혼란스럽지
않게 딱 코드를 짜면서 이제 딱 니어 선형적으로 이해가 가능하게
만들었다는 부분에서
훌륭하다 생각을 하죠 그래서 아
한번쯤 시작 광고도 했고 익스텐션 매스 도안 쓰신 분들은 이런데 쓰시는거
이런데
많이 쓰는게 좋아요 굉장히 좋아요 굉장히 편해요
그 따라 언어에도 없기 때문에 업 없는 개념이기 때문에 흔히 쓰는 언어
들에서
exams 들을 잘 모르시고 단 쓰시는 분도 많은데 시샵 을 쓰시는
분들이라면 한번쯤 꼭 보시도록 해요 그래서 굉장히 좋은거 다 적는 또
샵을 열심히 찬양하고 광고 라는 비디오를 만들었으니까 마셔서 좋아하겠지
예 포프 였읍니다
