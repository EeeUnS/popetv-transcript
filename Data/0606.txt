안녕하세요, 포프입니다.
 
또 한 번 코딩 표준에 대해서 비디오를 만들게요. 제가 운영하는 회사나, 제가 코딩 표준을 책임지고 결정해 주는 회사에서는 사용하고 있는 코딩 표준들이고요. 일부는 제 웹사이트에 공개되어 있고, 또 일부는 회사 내부에 있는 문서에서 코드 품질, 빨래 리스트라고 해서 돌아다니고 있는 겁니다. 중요한 거는 이것들을 어겼을 때, 코드가 빌드가 안 되거나 테스트에 실패해서 배포가 안 되기 때문에 프로그래머는 강제적으로 고쳐야 해요. 제가 관리하고 있고 책임지고 있는 회사만 이렇게 도는 거고, 제가 결정권이 없는 회사하고 일을 할 때는 당연히 그 회사의 코딩 표준에 맞게 코드를 작성해 드립니다. 그게 프로 프로그래머죠.

오늘 말할 코딩 표준은 많은 분들이 고통을 같이 느낄 수도 있을 것 같아요. 뭐냐면 변수 타입에 관한 거예요. 예를 들면 C#에서 var 그죠? var라고 하면 타입 추론을 해 주죠? 제 웹사이트에 공개된 코딩표준에서는 이걸 허용할 수도 있을 것 같기는 해요. 근데 저희 회사 내부에서는 이제 허용을 하지 않고 있습니다. '모든 타입은 직접 쓴다'예요. 물론 안 그럴 수 있는 경우들이 있어요. C#에서 Query 쪽 다뤄 보시는 분들은 이름 없는 타입이 나오는 경우를 봤기 때문에. 그런 경우는 예외는 있어요. 그게 아니라 실제 타입이 존재하고, 그 타입이 정의가 되어 있는 거라면 반드시 변수 앞에 타입을 쓰게 되어 있어요. 마찬가지로 그 타입에 있는 뭔가를 생성할 때 변수 선언에 타입이 있으면 new 하고 타입을 안 쓰도록 C#에서는 개체 생성도 가능하거든요? 이것도 저희는 금지입니다. 무조건 타입을 쓰게 되어 있습니다.

일단 첫 번째, var를 안 쓰는 이유는 뭐냐면 프로그래밍하다 보면, 특히 정적 타입의 코딩을 하시는 분은 타입 하나만 보는 것만으로 굉장히 많은 결정을 빠르게 내리거든요? 근데 타입은 언제나 그냥 왼쪽에 있는 게 규약이니까 보고 넘어갈수록 빨라요. 오른쪽을 보면서 뭘 보면서 '이 타입이네', '저 타입이네' 왔다 갔다 스캔을 좌우로, 위아래로 하면서 이상한 짓을 할 필요가 없거든요? 타입 보는 것만으로 '오케이. 그 타입 만들었겠지?' 넘어가고 다음 줄 보고, 다음 줄 보고 이렇게 할 수가 있어요. 그래서 이게 IDE 환경에서도, 코드 리뷰 하는 웹 환경에서도 굉장히 빠르게 빠르게 읽을 수가 있습니다. 이렇게 쭉쭉 가기 때문에 효율성을 위한 거고, 이 타입을 적지 않아서 var로 쓰면 좀 더 빠르게 코딩할 수 있고 손가락이 덜 아프다? 그냥 손가락 아프고 읽기 편한 코드 만드는 게 좋아요. 요즘은 그냥 var로 쓴 다음에 비주얼 스튜디오에서 Alt+Enter 누르면 알아서 바꿔줍니다. 저도 코딩할 땐 그렇게 많이 해요. 그래서 이런 타입 문제들, 손가락 문제점들은 IDE 툴로 굉장히 좋게 바뀌기 때문에 최종 나오는 코드는 타입을 적게 하고 있어요.

오른쪽에 나오는 new 같은 경우는 제가 new 없이 돌려봤는데, 이게 사람들이 악용해요. 그러니까 왼쪽에 타입과 변수 이름이 있고 그 옆에 new를 쓰면 잘 읽혀요. 아무 문제가 없어요. 그런데 이미 타입이 있는 변수를 쓰고 있고 아래쪽에서 거기에 뭔가를 대입해야 해요. 그러면 그 변수에 대입만 하고 선언하지 않을 때, 그때도 new를 쓰는 사람들이 있는 거예요. 왜냐하면 되니까. 이 코드가 자기는 코드 짤 때는 알지만 나중에 보면 뭔지 자기도 위에 가서 봐야 알거든요. 이런 것을 신경 안 쓰는 프로그래머들이 종종 있어서 '그냥 무조건 써라. 규칙 끝.' 그렇게 끝내버렸어요. 그래서 new를 할 때나 변수 선언을 할 때나 무조건 타입을 쓰게 만들어 버렸습니다. 그리고 실제 나중에 '오른쪽에 있는 타입이 바뀌었는데 왼쪽도 바꿔야 해서 힘들다.', '어떤 함수가 바뀌었는데 이거 다 바꿔야 해서 힘들다.' 뭐 이런 얘기하거든요? 그거 바꾸는 일이 그렇게 많지도 않고, 바뀌더라도 컴파일 에러가 나기 때문에 코드 컴파일 에러 난 코드 찾아가고 몇 개 고치는 게 굉장히 빠르더라고요. 그래서 그냥 이 잠깐의 그 귀찮음 때문에 '안 하겠다'라고 하는 것들은 저로서는 이해가 안 되고, 그냥 언제 어느 순간 열어봐도 코드가 잘 읽히는 게 제일 중요해요. 다 똑같은 얘기 하잖아요? 어디 가도 '코드의 가독성이 좋아야 유지 보수성이 좋다. 
난 유지 보수성을 위해 싸우고 있을 뿐이야, 내가 손가락의 피로가 아니라.' 이렇게 생각하면 되는 거죠. 그래서 저희는 타입 추론이라던가, new 할 때 타입 없애는 것도 타입 추론이라고 봐야겠죠? 이런 것들을 전면 금지했습니다.

포프였습니다.