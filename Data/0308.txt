안녕하세요. 포프입니다. 오늘은 ORM에 대해서 좀 말해 보려고 해요. ORM은 Web 쪽 프로그래밍하시는 분들은 아시는 분도 있고, 모르시는 분들이 있을 건데요. ORM은 Object Relational Mapping의 약자입니다. 어떻게 설명하면 좋을까요? 우리가 보통 DB와 연동하는 프로그램을 짤 때, 보통 코드를 돌리는 게 있고, 실제로 DB에 데이터를 insert 하거나, 거기서 Query를 실행하거나 등 여러 가지 할 때 SQL Statement를 써서 곧바로 호출하잖아요? 그러니까 String으로 준비한 다음에 SQL Statement Bind Parameter 하는 경우도 있고, 아니면 String Concatenation(스트링 붙이기)로 합쳐서 한 번에 파라미터로 경우가 있죠. 물론 지금 방금 말한 두 번째 방법은 먹으면 절대 하시면 안 되는 방법이에요. 보안 측면에서 취약합니다.

아무튼 그런 게 있는데, 사실 이런 것의 단점이 뭐냐면, DB는 굉장히 역사가 오래된 시스템이에요. 그리고 DB가 성취하고자 하는 목적이 뚜렷한 시스템이죠. 굉장히 많은 양의 데이터를 굉장히 효율적으로 검색할 수 있게 해주는 엔진이잖아요? 그렇게 하기 위해서 Normalization(정규화) 같은 이런저런 테크닉이 들어갔죠. 저는 언제나 DB에 저장되는 데이터는 1차원적이라고 얘기해요. 2차원적으로 확장하려면 중간에 있는 Foreign Key Table이라고 하나요? 2nd Normal Form이라고 하나요? 그런 식으로 Foreign Key Relationship만 있는 그런 테이블을 만들어야지만 이제 동일한 데이터 여러 개를 하나의 Row에 넣을 수 있는 방법이 생기는 거죠. 왜냐하면 데이터베이스에서는 동적으로 Column을 추가할 수 있는 방법이 없거든요. 어찌 보면은 프로그래머에게 굉장히 이질적인 2가지 Tech-Stack을 쓰게 돼요. 코딩은 코딩대로 하는데 대부분 Object-Oriented Programming을 하니까 오브젝트로 가고, 그에 비해 데이터베이스는 굉장히 keeping에 특화된 방법이기 때문에 그거에 따른 패러다임이 있죠. 그 두 개를 넘나들면서 그 사이를 연결하는 고리가 SQL Statement를 써서 String으로 Summit을 한 후, SQL Engine을 돌려서 데이터를 받아오는 방식이었죠. 그럼 이제 데이터 받아오면 Row/Column 별로 하나씩 따로따로 처리하죠. 어찌 보면 굉장히 좀 뭐라 말해야 될까요? 불편하다? 중간에 쓸데없는 과정이 너무 많이 들어가 있는 듯한 방법이었거든요. 그래서 그거를 처리하려고 나온 게 Object Relational Mapping인 거예요.

DB의 입장이 아니라, 프로그래머 입장에서 모든 걸 생각해 보자는 거죠. 그러면 프로그래머 측에서는 일반적으로 오브젝트라는 개념을 가지고 있고, 만약에 A 오브젝트-A에서 오브젝트-B를 참조한다면, 오브젝트-A 안에 컴포지션 같은 개념으로 오브젝트-B에 대한 Reference가 들어가는 거죠. 근데 사실 어찌 보면 데이터베이스에서는 Foreign Key랑 비슷한 개념이거든요? 그렇게 비슷하게 맞는 개념들이 몇 개가 있어요. 오브젝트에서 멤버 변수라고 하는 것도, 사실 DB에서는 데이터라 할 수 있죠. DB에 있는 테이블을 Object Class로 취급하고, DB에 있는 각 Column을 멤버 변수로 취급하고, 그리고 Foreign Key Relationship이 있는 것은 컴포지션 개념으로 취급한다면, 그것을 오브젝트로 정의했을 때 프로그래머는 오브젝트만 정의하는 겁니다. "이 오브젝트를 우리 Data Store에 저장해 줘"라고 하면 "그 뒤에 있는 데이터베이스이든, JSON NoSQL 데이터베이스든, 파일이든 간에 그 오브젝트 알아서 저장해 줄 수 있는 그런 또 다른 레이어를 만들 수 있지 않을까?"라고 시작된 게 ORM이었던 것 같아요.

제가 처음에 ORM을 본 사례는, Ruby on Rails에서 이것저것 해 보면서 이런 게 있구나를 배웠어요. 나중에는 C#과 ASP.NET을 보면서 Entity Framework가 있다는 걸 알았죠. 이걸 쓰기 시작하면, 솔직히 말하면 프로그래머가 SQL 쿼리문을 하나도 짜지 않고도 모든 오브젝트를 데이터베이스에 데이터를 저장/로드할 수 있어요. 말하자면 프로그래밍적으로 데이터베이스 접근하는 방법이 되는 거 같아요. SQL Query를 알 필요가 없거든요. Entity Framework, Ruby on Rails에 이런 ORM 개념이 들어간 게 좀 돼요. **(5:01 시간이 오래 지났는지?/ORM을 지원하는 프레임워크의 숫자가 많아졌는지?)** 그동안 사람들이 차차 ORM을 적용하고 문제점을 고쳐가는 단계죠. 순수하게 데이터베이스를 이런 식으로 쓰는 건, ORM이라는 것 자체가 결과적으로는 그런 오브젝트를 만들었을 때 우리 프레임워크가 SQL에서 돌아가는 Statement를 알아서 만들어 주고 그것을 실행하는 것이거든요. 그 Statement를 만들었을 때, 사람 손으로 짜는 거보다 반드시 최적화된 Statement가 나오지는 않아요. 성능적인 문제도 있고, Stored Procedure(획기적인 개념은 아니지만) 같은 DB 최적화 기술의 혜택을 받기도 어려웠고, 여러 가지 문제가 있었기 때문에 적용이 좀 늦는 건 맞아요. 예전에 제가 DBA(Database Administrator) 미래라는 비디오로 올린 적도 있잖아요? 그 비디오에서 제가 말했듯이, DB 하시는 분들은 Job Security(직업 보장) 문제도 있었고 그런 부분에서 반발도 좀 있었던 거 같아요. 때문에 ORM 적용이 꽤 느렸다고는 생각해요. 똑같은 얘기로 클라우드 컴퓨팅이 이제야 적용됐던 거나 마찬가지죠. 클라우드 컴퓨팅을 적용하기 시작하면, Religious Specialist라는 직종의 사람들이 직장을 잃어가는 과정이거든요. 그런데 프로그래머 입장에서는 어차피 이 모든 Application의 동작이 프로그래머가 짜는 코드에 의해서 모든 게 driven 돼야 한다고 생각해요. 쓸데없이 중간에 Religous Specialist나 DBA 때문에 관리하는 것도 귀찮은 작업이에요. 그래서 Religous Specialist/DBA는 제가 다른 비디오에서 말했듯이, DB 최적화를 잘하는 사람들로 계속 남을 거고, 그렇지 않은 사람들은 지금 말하는 ORM이나, 클라우드 컴퓨팅 등의 자동화로 대체되는 거죠. 그래서 ORM은 그렇게 나아가는 방법이라고 보고요. 제가 예전에 있었던 큰 전자상거래 회사부터 시작해서, 지금 하고 있는 다른 회사들에서도 ORM을 점점 밀어주는 분위기예요. 제가 하고 있는 프로젝트에서는 언제나 모든 게 ORM으로 돌고 있고, 데이터베이스를 만들 때는 SQL Query를 직접 쓰지 않아요.

Entity Framework 얘기로 돌아와 볼게요. 왜냐면은 제가 C#을 많이 하고 ASP.NET을 많이 하니까요. ORM을 사용하면 데이터베이스를 직접 만드는 코드를 쓸 필요도 없고, Query Statement를 직접 만들 이유도 없어요. 근데 만약에 기존에 존재하는 데이터베이스가 있을 수도 있잖아요? 그런 경우에는 코드를 통해서 DB로 생성한다는 것보다는, 이미 존재하는 DB에 맞게 오브젝트 관계를 코드를 작성하는 게 맞거든요. Entity Framework에서 이런 작업을 Database-First 방식이라고 불러요. DB를 먼저 만들고, DB 테이블에 맞는 오브젝트를 만들어서 서로 연결만 가능하게 하죠. 그러고 이 방법이 아니라, 저희가 점점 나아가야 하는 방법인 Code-First라고 있는데요. 코드를 짜고 오브젝트를 만들었을 때, 이거를 처음 프로그램을 Deploy 할 때 프로그램을 실행만 시킵니다. 그럼 프로그램이 알아서 "예전에 만들었던 DB Version은 이거였는데, 이번에 새로 바뀐 게 저 Version이니까 저걸로 업데이트해야지"라고 해서 자기가 Migration History를 따로 테이블에 저장해 놓고, 바뀐 것에 대해서만 SQL Statement(ALTER TABLE, CREATE TABLE 등)를 적용합니다. 그다음에 DB를 코드에서 시작한 것으로 준비하도록 하는 방법이 있어요. 그걸 Code-First라고 하는 거죠. 저는 Code-First가 맞다고 보고 있어요.

앞으로 새로운 프로젝트를 만드시는 분들도, 집에서든 회사에서든 간에 점점 DB-First보다는 Code-First 방식을 고민해 보시길 바라요. 저는 그게 앞으로 나아가 방법이라고 봐요. 이 비디오가 아니라 다른 비디오에서도 분명히 제가 시큐리티 관련해서 DB Encryption 얘기를 한번 할 거거든요. 최근에 나온 굉장히 재밌는 기술이 있어요. 정확히 얘기하면 Entity Framework가 처음 나올 때, 그런 DB Encryption을 DB에서 자체적으로 할 수 있다는 생각을 못 하고 만들었기 때문에, DB Encryption 꼽는 순간 되게 애매해지는 순간이 있어요. 수작업 Encryption 말고, DB Engine 자체에서 Encryption을 적용할 때에요. 그건 나중에 말씀드릴 겁니다. 중요한 건 이거 같아요. Domain-driven design(DDD)에서도 말했듯이, 결국 DDD가 나온 이유가 DB만 전문으로 하는 프로그래머(DB에 있는 데이터를 저장하는 웹 프로그래머 지칭)들이 OOP 개념이 없었기 때문에 좀 Spaghetti Coding을 하는 경우가 있었죠. 그걸 막기 위해 DDD가 나온 이유도 있고 그 외에도 여러 가지 있다고 말했었어요. ORM이란 개념이 들어오면, 오브젝트와 Relational DB가 Mapping 하는 개념이기 때문에 결국 OOP가 웹 프로그래밍에서도 First-class citizen(1급 개체)이 된다고 보거든요. 가장 중심에 있는 개념이 된다고 봐요. 지금까지는 아니었지만, 앞으로 크게 될 거라고 보고요. 그렇기 때문에 ORM은 올바른 프로그래밍/소프트웨어 엔지니어링의 원칙을 만드는 데 되게 중요한 디딤돌이 될 것 같아요. 아직까지 해 본 적이 없다면, ORM을 배워 두시면 좋을 겁니다. 학교에서 배웠던 Object 개념과 업무에서 DB 대충 끄적끄적하는 일을 하고 있었다면 그 두 개를 합칠 날이 오는 거죠. ORM은 반드시 하시라고 얘기하고 싶어요.

C#으로 돌아와서, Entity Framework가 약간 문제도 있고, 다 include 해야 하는 경우가 있어요. 쓰시는 분들은 나중에 이해하실 텐데요. 1. 그게 제가 볼 때는 자동으로 프레임워크가 해 줘야 하는 일인데, 못 해주고 있어요. 못해 줄 이유가 저는 없다 보거든요. 2. 아까 말했던 Encryption 부분에서 약간 조금 애매한 부분이 하나가 또 있어요. Entity Framework가 오래돼서 나오는 문제예요. 3. Entity Framework가 반드시 성능이 매우 빠르지는 않아요. 아까 말했듯이 Stored Procedure 이런 걸 제대로 활용 못 하는 것도 있고, 내부적으로 최적화를 좀 더 할 수 있는 여지가 있는 거 같은데 아직은 문제가 있는 거죠. 그래서 .NET 쪽이라면 NHibernate라는 라이브러리도 있어요. 그걸 쓰면 훨씬 더 빨라진다는 얘기도 있고, 여러 가지 지표 나온 것도 있는데요. 저는 아직까지는 NHibernate를 쓸 정도까진 되지 않았어요. 예전에 있던 회사에서는 DB-First를 했었어요. 그렇기 때문에 이제 속도가 느리다는 생각이 생겨서 Hibernate를 새로 쓰는 프로젝트도 있었죠. 제 프로젝트에선 Entity Framework를 썼던 이유가 뭐냐면, 일단은 Entity Framework은 ASP.NET와 함께 달려 나와요. 굳이 새로 따로 설치할 필요가 없죠. 성능 자체도 그다지 나쁘진 않아요. NHibernate보다 조금 안 좋긴 해도요. 그리고 일단 저는 Entity Framework의 발전을 계속 봐왔었어요. NHibernate 만큼 Entity Framework가 계속 발전할 것이라는 생각을 했었어요. ASP.NET는 Windows에서만 도는 Internet Information Services (IIS) 서버에서만 돌아요. 그다음 버전은 Microsoft가 만들고 있는 게, ASP.NET Core라고 리눅스 등 온갖 OS에서 동작하는 프레임워크가 있어요. 거기에 들어가는 Entity Framework가 있는데, 그게 다음 버전인데 아직 완성은 안 됐어요. Preview/Beta 버전 같은 건데, 앞으로 한 1년 뒤면 이제 완성해서 이제 아무나 쓸 수 있지 않을까 싶어요. 그 Entity Framework가 재밌어지는 게, Object와 Relationship DB를 매핑하는 중간 Layer가 있잖아요? 그 뒤에 들어가는 데이터베이스가 무엇이든지 상관없어요. 지금 현재로는 MSSQL만 되지만, 다음 버전에서는 MySQL, MongoDB, File 로도 지원해요. 그렇게 정말 추상화하는 과정인 거거든요. 원래 모든 기술들은 2-3번 갈아엎었을 때 제대로 쓸 수 있는 정도가 나온다고 봐요. Entity Framework가 그 정도를 향해 달려가고 있어요.

그리고 이제 Microsoft가 Azure에서 돈 버는 게 굉장히 중요한 비즈니스이기 때문에, Entity Framework를 잘 지원하려고 하고 있어요. 또 이게 멀티 플랫폼이 제대로 호환된다면(지금도 호환되지만, 좀 더 제대로 들면은) Microsoft한테 굉장히 큰 도움이 되기 때문에 엄청나게 발전을 시키고 있다는 생각이 들어요. 그래서 제가 지금 결정을 내려야 한다면, 최대한 성능을 올려야 하는 상황이 아니라면 NHibernate는 안 쓸 거 같아요. 당장 Entity Framework를 쓸 겁니다. 그 외에 다른 것들을 최적화를 시도할 것 같아요. Code-First로 가도 Stored Procedure를 갈 수 있는 방법이 있는지 모르겠는데, DB-First 갈 때는 방법이 있었거든요. 이제 예전 방식을 통해 좀 더 최적화를 하면서 미래를 대비할 거 같고, 단순히 다른 라이브러리가 더 빠르다는 이유 하나만으로 그렇게 미래를 위해 (프로젝트를) 뒤집어야 할 결정을 내릴 것 같진 않아요. 현재로서는 Microsoft에서 밀고 있는 Entity Framework가 굉장히 ASP.NET과 잘 동작한다고 생각하고 혹시 나아질 거라고 보기 때문이에요.

오늘도 이제 낮잠 자고 일어나서 주절주절 말이 많고 발음이 잘 안 나왔는데, 일단 정리를 할게요. 데이터베이스를 접근할 때, SQL Statement를 쓰기보다는 ORM을 쓰는 게 좋습니다. 그리고 만약에 C#을 사용 중이라면, Entity Framework를 쓰는 건 나쁘지 않고 굉장히 좋습니다. 이제 여기서 Code-First와 DB-First의 문제가 있는데, 새로 시작하는 프로젝트라면 Code-First로 시도하길 바라고요, 예전부터 있었던 프로젝트라면 DB-First로 하긴 해야겠죠. 그런 얘기를 드렸고요. 그리고 "ORM을 통해서 굉장히 상이한 두 가지 패러다임이 존재하는 웹 개발 쪽을 하나로 합칠 수가 있다. 관리도 편해지고, 유지보수도 편해진다." 그렇게 정리를 하면 되지 않을까 싶어요.

이것 외에 할 말을 하고 있었던 거 같은데, 잠깐 떠올랐다가 또 사라졌거든요? 이거는 다음에 해야 되지 않을까라는 생각을 하고 있는데, 그 순간 갑자기 생각이 났어요. (웃음) 한 5분만 더 얘기할게요.

똑같은 개념으로, Json 포맷 많이 쓰시죠? 웹 개발할 때 Json 포맷으로 데이터 주고받고 하잖아요? 읽기 편하고, 자바스크립트 제대로 지원하는 장점이 있죠. 이 Json 포맷도 아직도 수작업으로 직접 필드를 집어넣는 분들이 계세요. 아니면 이거를 Dictionary 자료구조에 넣고 한 번에 다른 라이브러리 돌려서 
Deserialize 하기도 하죠. 근데 이것도 굉장히 저는 (시대를) 역행하는 거라고 생각해요. 이것도 ORM과 마찬가지로 오브젝트에서 생성하는 게 맞아요. 그러면 Json <=> 오브젝트 사이에서 라이브러리가 온갖 Validation 다 할 수 있고 굉장히 많은 일들을 할 수 있거든요. 그래서 C# 쪽에서 보면 Json.NET을 쓰면 클래스 만들고 오브젝트 만든 다음에 데이터 때려 박고 Serialize 하면 Json 포맷이 나오죠. 반대로 Json에서 Deserialize 하면 이제 오브젝트 나오고 그렇습니다. Java에서는 Gson이라는 라이브러리가 있어요. Json.NET 만큼 훌륭한 라이브러리는 아니에요. Json.NET은 굉장히 좀 깔끔하고 Validation을 잘하고 Attribute도 좀 더 사용하기 편하죠. Gson은 그 정도는 아니에요. 근데 그거는 Java 언어 자체의 한계가 아닐까 싶어요.

따라서 개인적으로는 C# 쓰시는 분들은 Json.NET 쓰시길 바라요. Microsoft도 자체 Json 라이브러리 버리고 ASP.NET에 달려 들어오는 Json 라이브러리 자체를 Json.NET으로 바꿨거든요? 그래서 Microsoft가 그러고 있기 때문에 나쁘지 않은 거 같아요. 결과적으로는 이제 우리 모두가 오브젝트 기반으로 프로그래밍을 할 날이 온 거예요. 예전부터 기다려왔던 세상이 온 거라고도 보는데요, 그런 날이 왔다고 좋아하는 순간에 갑자기 JavaScript가 뜨면서 다시 한번 오브젝트가 없는 언어를 만들고 말았죠. (웃음) 그것도 제가 볼 때는 몇 년 안에 다시 바뀔 거라고 봐요. 안 바뀔 수가 없고, 빨리 바뀌었으면 좋겠습니다.

그래서 아까 정리했던 것들 다시 말해보죠. ORM 쓰자고 한 것과, 추가로 Json.NET이나 이런 류의 Json 포맷 자체도 만들고 읽어올 때 직접 타이핑 안 하는 오브젝트 기반으로 가자는 것들 있었죠. 그래야 실수를 할 여지도 적어져요. 오브젝트라는 게 반드시 이게 재활용성이 좋다는 거 외에도, 인간의 실수를 막는 그런 거 되게 많아요. 왜냐하면 오브젝트 자체가 타입, 변수 이름, 기타 등이 있기 때문에 순수하게 String으로 다 만들고 하는 것보다 훨씬 나은 거죠. 자,  그 정도로 오늘도 포프TV, 주저리TV. 여기서 끊고 다음에 또 뵙겠습니다. 포프였습니다.
