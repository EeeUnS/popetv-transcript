

연휴도 폭포입니다

오늘은 5월의 대해서 좀 말해 보려고 해요

저 5월의 하면은 왼쪽 하시는 분들을 아시는 분도 있고

모르시는 분들이 있을 건데

아 일단 이거는 오브젝트 릴레이션쉽

맵핑 일하는 거에 약 자거든요 어떻게 설명하면 좋을까

저희가 보통 TV 하고

나는 프로그램을 짤때 오토매직 코드를 돌리는 게 있고

실제로 디비에 데이터를 인썰트 하거나

뭐 거기서 쿼리를 하거나

여러가지 할 때부터 sqlstate 있어 갖고

곧바로 걸 호출을 하잖아요

거기까지 스트링으로 준비한 다음

mosq 스테이트먼트 봐 인터페로미터 하는 경우도 있고

아니면 그냥 그린컴퓨터 컨버케이션

스트링 합치기로 합쳐 갖고 한번 있는 경우가 있고

물론 지금 방금 말한 거

두 번째 밥 먹으면 절대 하시면 안 되는 방법이에요

시큐리티 저 측면에서 아 그런 게 있는데

사실 이제 이런 거에 단점이 뭐냐면 뭐라 그럴까

디비는 굉장히 역사가 오래된

그리고 DB 가

성취하려고 하고자 하는 목적이 뚜렷한 시스템이고

굉장히 많은

양의 데이터를 굉장히 효율적으로 검색을 할 수 있게

해주는 그런 엔진 이잖아요

그렇게 하기 위해서 모두 말라이 스테이션 2 라던가

이런 여러 저런 테크닉이 들어갔고

그리고 어찌보면은 저는 언제나 DBS

양들은 데이터는 1차원적인 하라고 얘기를

2차원적으로 확장을 하려면 뭐 중간에 있는 그 뭐라

그럴까 올림픽 테이블이라고 하나요

그렇게 했고

그 세컨드 모둠을 봄이라고 하나 그런 식으로 하고

이제 골인 키를 내가 있는 그런 테이블을 만들어야지

많이 제 동일한 데이터 여러개를

하나의 그 로우에 바꿀 수 있는 그런 방법이 생기는거죠

왜냐면 데이터베이스에서는 다이나믹하게

컬럼을 추가할 수 있는 방법은 없습니까 해서

이제 그렇게 해갖고

어찌보면은 프로그래머에게

좀 굉장히 이질적인 두 가지 테크스택

글 쓰는 거야 돼요

코딩 코딩 대부분의 오브젝트 오렌지 프로그램은 하니까

오브젝 데로 가고

그 앱이 데이터베이스는 또 굉장히 데이터베이스 쿠키

특화된 방법이기 때문에

그거에 따른 또 다른 패러다임이 있고

그래서 어찌 보면은 그 두 개를 넘나들면서

그 사이를 연결하는 그 고리가 스퀘어

스테이트먼트 를 써서

이제 그거 로스팅으로 서비스로 해 갖고

sql 돌린다면 데이터를 받아오는 방식이었죠

그럼 이제 뭐 데이터 받으면 쪽으로 별로 컬럼별로 것도

이거를 하나씩 따로따로 처리해주고

뭐 어찌 보면 굉장히 좀 뭐라

그렇게 뭐라고 말해야 되나

불편한 중간에

쓸데없는 과정이 너무 많이 들어가 있는 듯한

그런 방법이 없거든요

그래서 그거를 처리 해 주려고 나온 게

이제 오브젝트를 올려 주신 몇 번이나 하는 거예요

이제 뒤쪽에 입장이 아니라

프로그래머 쪽에 입장에서 모든 걸 생각을 해 보자

그러면 앞으로 그래 맞아

우리가 보통 일반적으로 오브젝트란 개념을 가지고 있고

오브젝트에서 만약에 다른 오브젝트를 참조한다면

은 그 오브젝트 안에 보통 컴포지션

이런 개념으로

다른오브젝트 에 대한 몇 프랑스가 들어가게 되어 있죠

근데 그거는 어쩌고

데이터베이스에서는 되게 비싸도 개념이 거거든요

그래서 그렇게 비슷하게 맞는 개념들이 몇 개가 있어요

오브젝트에서 멤버변수 라고 하는 것도

사실 뒤에서 보면 데이트 할 수가 있고

그래서 그 테이블 테이블 오브젝트를 보고 클래스를 보고

eva

네가 컬러 오늘 멤버변수로 보자

그리고 폴딩키를 해줄 수 있는 거는

그 컴포지션 개념으로 보자 라고 해서

그거를 오브젝트로 정지했을때

우리 그냥 오브젝트만 정해 놓고

야이 오브젝트를 우리 데이터스토어에 저장을 해 줘 라고

하면은 그 뒤에 있는 게 데이터베이스는 뭐 제 있어

늘 집어넣는 모두 씨퀄

데이타베이스는 아니 오빠 이리 되든

아무튼 오브젝트를 알아서 저장해 줄 수 있는 그런 또

다른 레이어를 만들 수 있지 않을까 라고 시작된 게

orm2

어떤 거 같고

제가 처음에 그런 5월의 힘을 받던 거는

이제 루비 쪽에서 루비온레일즈 처음으로 그냥 뭐

이것저것 해 보면서 아 이런 게 있구나 배웠고

나중에 이제 AS 길

안내 시작 적을 보면서

엔티티프레임워크 보면서 그런 게 있다는 걸 알았죠

그래서 이거를 쓰기 시작하면

솔직히 말하면 프로그래머가 sql

쿼리 를 하나도 짜지 않고 도

그 모든 오브젝트를 데이터베이스에 저장을 하고

데이터 불러올 수 있고

프로그래밍적으로 데이터베이스

접근하는 방법이 되는 거 같아요

skype 값이

그래서 일단 이런 거 엔티티프레임워크 하던가

루비 온 레일즈 이런 놈이 들어간 게 좀 돼요 좀 되고

그동안에 이제 사람들이 차차 뭐라 그럴까

이걸 적용하는 단계 문제점을 고쳐가는 단계

아니면은 순수하게

그냥 어찌보면은 데이타베이스를 이런 식으로 쓰는 거는

5월의 일한 거

자체가 들어가지고

너는 그런 오브젝트를 만들었을 때

우리 프레임워크가 sql

돌아가 스테이트먼트 알아서 만들어 주고

그걸 돌리는 거 거든요

네 그 스테이트 오늘 만들었어

사람 손으로 하는 거보다

반드시 최적화된 스케이트보드 나오지 않아요

성능적인 문제도 있고

또 이제 이렇게 쓰기 시작하면 뭐 스토어드프로시저

나는 그런 또 다른 패키징을 아니었지만

또 다른 이런 DB 옵티마이징 테크닉 있잖아요

그런 거에 혜택을 받기도 어려웠고

그런 부분에 여러가지 문제가 있었기 때문에

적용이 좀 늦는 건 맞고

그리고 어떤 의미에서 오늘은 예전에

제가 dban 미래라고 해서

그런 비디오로 올린적도 있잖아요

그럼 비디오에서 제가 말했던 DB 를 하시는 분들

dbl 하시는 분들의 이제 잡시다

큐리티 문제도 있었고

그런 부분에서 반발을 좀 있었던 거 같고

해서 적용이 꽤 늘었다

생각을 해요

근데 그거는 어차피 똑같은 얘기로

클라우드 컴퓨팅의 이제 적용이 되었던 거나 마찬가지죠

클라우드 컴퓨팅을 적용이 시작하면은 리치

스페셜리스트 라는 직종에

사람들도 직장은 1억 과정이니까

내 프로그램은 입장인

저의 저는 어차피 이 모든 그 뭐라 그럴까

애플리케이션의 동작이 프로그래머가 짜는 코드 의해서

거기서 모든 게 드라이브 생각을 해요

쓸데없이 중간에 물린 스페셜리스트가 하나

더 있어야 돼서 그거를 또 관리하는 것도 귀찮고

dba 때문에

또 하나를 관리하는 것도 귀찮은 작업이에요

그래서 dba 날

울리지 스페셜리스 제가 다른 비디오에서 말했듯이

최적화를 담당하는 그런 뭐라고 했지

지금 생각하니까

굉장히 그 Daniel

스페셜 1층에서도 잘하는 사람들이

이제 그 일을 계속 기도를 하게 될 거고

그렇지 않은 사람들은 지금 말하면 orm1 하던가

아니면은 말했던 클라우드 컴퓨팅 같은 거로

자동화로 대체가 되는 거죠

그래서 5월에는 그렇게 나가는 방법이라고 보고요

제가 예전에 있었던 그 큰 전자상거래 회사부터 시작해서

지금 하고 있는

다른 회사 들에서도 잠 좀 푹 쉬고 있어요

여기서 이제 제가 하고 있는 포획해서 언제나 못생기고

하렘으로 가게 되고

뭐 데이터베이스를 만들 때

sql 쿼리 를 접수하고 생성 하지는 않아요

근데 이제 엔티티프레임워크 돌아와 볼게요

왜냐면은 이제 시작 쪽을 많이 하고

AS 때문에 조금 많이 하니까

그러면 5월에는 사용하면은

데이타베이스를 직접 만드는 코드 쓸 필요도 없고

목걸이 스테이크 만들기 없어요

근데 아직 기존에 존재하던 데이터베이스가 있을 수도

있잖아요

그런 경우에는 코드를 통해서 뒤로 생성한다는 것보다는

이미 존재하는 티비를

거기에 맞게 코드를 작성하는 게 맞거든요

오브젝트 관계를 ST

프레임워크에서 그렇게 하는 걸

이제 디비퍼스트 당신이라고 해요 그 뒤를 먼저 만들고

그 DB 테이블에 맞는 오브젝트를 만들어서

연결만 가능하게

그러고 그 방법이 아니라

제가 볼 때는 저희가 좀 나가야 되는 방법

이라고 보는 거야

코드 버스 근데 이거는 제가 코드를 짜고

오브젝트를 만들었을 때

이거를 그냥 처음 프로그램을 뒤풀이 할 때

이걸로 실행시키면 프로그램을 실행시키면서

지가 알아서 아

예전에 만들었던 디비버 저는 이거 했는데

요번에 새로 바뀐 게 거니까

알아서 이걸 업데이트해야 지우라고 해서

자기가 많이 히스토리를 따로

테이블에 저장도 해 놓고 바뀐 거만 적용을 해지하면

어테이블 인식으로 해서 적용을 한 다음에

데이터베이스를 코드에서 시작하는 걸로

준비가 되게 하는 방법이 있어요

그게 이제 코드포스트 라고 하는 거죠

저는 코드 퍼스트가 맞다고 보고 해서

앞으로 뭐 새로운 프로젝트를 안 드시는 분들도 뭐

집에서 만드시는 무슨 뭐 회사에서 만드시는 점점티비

퍼스트 퍼스트 방식을 오민애 보시길 바래요

왜냐면은 저는 그게 앞으로 나아가 방법이라고 봐요

저 이 비디오가 아니라

다른 비디오에서 분명히 제가 이잼

시큐리티 관련해서

이제 DV6000 얘기를 한번 할 거거든요

최근에 나온 굉장히 재밌는 그런 기술이 있어서

내 거기는 그거는 이제 뭐라 그럴까

그거를 개발하는 도중에

이런 엔티티프레임워크 코드 퍼스트 에 대해서 아니야

그 고민을 많이 했는데

정확히 얘기하면 엔티티프레임워크 처음

그럼 DB

인크립션 을

뒤쪽에서 자체적으로 할 수 있다는 생각을 못 하고

만들었기 때문에

DB 인크립션 꼽는 순간 되게 애매해지는 순간이 있어요

매뉴얼 하게 하는 그렇게 말고

DB 엔진 자체에서는 적용을 하면은 그거

나중에 말해 말씀을 드릴 거고

중요한 거는 본 거 같아요

예전에 뭐 도메인 드리고

인디자인에서 말했듯이

결국엔 도메인 드림디자인 나온 이유가 TV

만 전문으로

이게 보통 하는 프로그래머들 뒤에는 데이터를 저장하고

1회 프로그래머들이 오피에 개념이 없었기 때문에

좀 중구난방의 코딩을 하는 경우가 있었다

스파게티 코드를 그걸 막기 위해 도메인 지금

심장이 좀 나온 것도 있고

여러 가지 이유가 있다고 얘기했는데

하렘이란 개념이 들어오면은 이제 오브젝트 하고

이제 릴레이션 데이타베이스로

맵핑 때문에 결국 N O P 가

왜 프로그램에서도 이제 퍼스트 클래스

팅 된다고 보거든요

1등 시민인가 가장 중심에 있는 개념이 된다고 봐요

지금까지는 아니었던 앞으로 크게 될 거라고 보고

그렇기 때문에

5월에는 말은 그 프로그래밍이나 이제 소프트 엔지니어링

야

이제 그럼 원칙을 만드는 데 되게 중요한 거 같아요

아직까지 해 본 적이 없다면

5월에 뭘 배워 드시면 좋을 거고

그럼 학교에서 배송업체 형님하고

업무에서 어떻게 해서 뒤만 대충

끄적끄적 하는 일을 하고 있어

하면은 그 두 개를 더 필요한 거죠

해서 warmage 반드시 하고 얘기하고 싶고

이제 뭐 재밌는 거 몇 가지는 이제 저거

다시 시작 쪽으로 돌아오면은 엔티티프레임워크 가

이제 약간의 문제도 있고

다닝 클로드를 해야 되는 경우가 있어요

뭐 쓰시는 분들은 나중에 이해하실 텐데

그게 제가 볼 때는 좀 자동으로

이제 그 프레임워크 해 줘야 되는 일인데

못 해주고 있는 부분이고 못해 준 이유가 없다

그런 생각을 하거든요

사실은 근데 못 하고 있고

그리고 이제 아까 말했던 인크립션 부분

그 부분에서 약간 조금 애매한 부분이 하나가 또 있고

디스플레이 바꿨는지 오래돼서 나오는 문제예요

그리고 이제 세 번째는 materialize

반드시 성능이 매우 빠르지 않아요

그게 아까 말했듯이

스토어드프로시저 이런 걸 제대로 하려고 하는 것도 있고

내부적으로 아직 뭐라 그럴까

최적화를 좀 더 할 수 있는 여지가 있는 거 같은데

그게 아직 문제가 있는 거죠

그래서 담배 쪽이라면 또 앤 하이버네이트 인가

그런 또 다른 아이보리도 있어요

그거 쓰면 훨씬 더 빨라 준다

그러고 여러가지 집 나온 것도 있는데 음

저는 아직까지는 하이버네이트를 정도가 되진 않았어요

예전에 있던 회사에서는

이제 거기서는 디비퍼스트 를 했었고

그렇기 때문에

이제 속도가 느리다는 생각 있으면

나 이번에 새로 쓰는 포인트 있었는데

제가 쓰는 프라이팬 없었던 이유가 뭐냐면 일단은 AT

프레임워크는 AS 때문에 타고 달려 나와요

새로 따로 갈 필요가 없고

섞는다 제도 그다지 나쁘진 않아요 아이고

내가 조금 부재중 있어도

그리고 일단 IT 프레임워크 발전되는 거 계속 봤거든요

하이버네이트 그만큼 LG TV 리모컨

계속 발전 된다는 생각을 했었고

그리고 다음버전 adt 프레임워크는 asb

닷넷이 아니라 AS

닷넷은 윈도우에서만 돈은 IS

서버에서만 도는 게 있을 텐데

쉬고 그다음 버전

지금 마이크로 소프트 만들고 있는 게 asp 닷넷코어

오라고 해서 리눅스에서 돌고

온갖 월세 속에 만들고 있는 거는 또 프라이머

코믹스 프레임워크가 있어요

거기 들어가네 그다음 버전 이거든요

아직 완성은 안 됐어요

아직 약간 프리뷰 베타 이런 개념인데

앞으로 한 1년 정도는 이제 완성 해도 돼 갖고

이제 아무나 쓸 수 있지 않을까 싶은데

그 엔티티프레임워크

재밌어지는 게 이 중간 내려가 있잖아요

오브젝트 하고

이제 릴레이션 릴레이션쉽 데이터베이스를 매핑하는 근데

그 뒤에 들어가는 데이터베이스가 뭔지 상관이 없어요

지금 현재로는 되지만 다음번에는 mssql 호도되고

몽고 DB 로 넣어도 되고 파일로 너무 되고

그렇게 해서 정말 추상화를 시키는 과정인 거거든요

저 원래 모든 이제 기술들은 1

2번 3번 갈아엎어서 때

제대로 쓸 수 있는 정도의 까 나온다고 봐요

이제 엔티티프레임워크 거기를 향해 달려가고

그리고 이제 마이크로소프트가 애교 해서

돈 버는 게 굉장히 중요한 빈 쓰기 때문에

지금 그 엔티티프레임워크 를 잘 지원하라고

이게 멀티플랫폼으로

제대로 돌려 를 지금도 이제 못 올 건 있지만

좀 더 제대로 들면은 이제

그럼 에 나 한테 굉장히 큰 도움이 되기 때문에

엄청나게 엄청나게

엄청나게 발전을 시키고 있다는 생각이 들어요

그래서 제가 지금 결정을 내린다

면은 최대한 성능을 올려야 되는 상황이 아니라면은

앤 하이버네이트는 안 갈 거 같아요

당장의 택배 먹으러 가고

그 외에 다른 것들도 시작하면 취소하고 같아요

이제 뭐 코드 버스트로 가도

이제 뭐 스토어드프로시저

수 있는 방법이 있는지 모르겠는데

디폴트로 갈 때 쓸 수 있는 방법이 있었거든요

그런 식으로

이제 예전 방식을 통해

좀 더 최적화를 한다는 거 하면서

미래를 대비할 거 같지

그냥 단순히 지금

이거 보다 빠른 라이브러리가 훨씬 빨리 오라는 거

하나만으로 그렇게 뭐라 그럴까

또 미래를 감사

뒤집어야 될 수도 있는

그런 결정을 내릴 것 같진 않아요

현재로서는 마소에서 밀고있는 ST

프레임워크가 굉장히 AS

기다렸다고 잘 돌고 있다고 생각을 하고

혹시 나아질거라고 보기 때문에 오늘도 이제 낮잠

자고 일어나서 기다리지

우리 말이 많고 발음이 안 되는데 일단 정리를 하지요

그냥 종일 하면은 이제 데이터베이스를 접근할 때

sql 스테이트먼트 쓰기보다는 쓰는 게 좋을 거다

그리고 만약에 시작 쪽이라면

엔티티프레임워크 쓰는 건 나쁘지 않고 굉장히 좋고

이제 여기서 코드 퍼스트와 tvcast 문제 있는데

새로 시작하는 프로젝트 바코드 버스로 행복을 바라고

예전에는 폰 위치 학인 해야겠죠

그렇게 하기를 바라면 얘기하고 아

그리고 이 아래 물통에서

이제 굉장히 상했던 두 가지

패러다임이 존재하는 개발 쪽을 하나로 합칠 수가 있다

관리도 편해지고

좀 유지보수 편해지는 쪽으로 아

그렇게 정리를 하면 되지 않을까 싶어요

이거 왜 할 말을 하고 있었던 거 같은데

잠깐 떠올렸다가 또 사라졌군요

이거는 다음에 해야 되지 않을까

라는 생각을 하고 있는데

그 순간 자기 생각이 들어 왔어요

아 똑같은 개념으로서 한 5분만 더 얘기할게요

똑같은 개념으로 json 파일 많이 있으시죠

이제 왜 파는데

json 데이터 맞잖아요

이렇게 편하고

뭐 어쩌고저쩌고 자바스크립트 제대로 지원하고

이재희 손발도

아직도 그 손으로 직접 일들을 지번

오시는 분들이 있어요

아니면은 이거를 딕셔너리로 해 갖고 택시를 해 갖고

그냥 한 번에 따른 얼굴 돌려 왔고

그 딕셔너리로 이제 dialog 한다던가

근데 이것도 굉장히 저는 뭐라 그럴까

역행하는 거라고 생각을 하고

5월인가 마찬가지로

이것도 오브젝트에서 생성을 하는 게 맞아요

그러면은 그 오브젝트에서 그제 있어 만드는 거제에서

오브젝트 만드는 그 사이에서 라이브러리가

뭔가 밸리데이션 다 할 수 있고

굉장히 많은 일할 수 있거든요

그래서 씻어 쪽에서 보면 제 있었는데

수 있으면은 그냥 클래스 만들고 500대 맞는다

때려 받고 씨엘라이즈 하는데

제이슨 나하고

제일선에서 dcli 하면은 이제 오브젝트 나오고

그런 법이 있고 잡아 줘

그나마 뒷선 인가하는 그런 드라이롤 가 있어요

제이썬 만큼 훌륭한 라이벌인 아닌데

좀 굉장히 좀 깔끔하고

밸리댄스 긴장이 잘하는 이런 게 있는 반면에

좀 더 사용하기 편하고

뒤에서는 그 정돈 아니거든요

근데 그거는

제가 볼 때는

그냥 어 너 자체에 한 개가 아닐까 싶어요

그래서 뭐 개인적으로는 이제 씻어 쓰시는 분

좀 이제 일 끝났네 철판 드시기 바라고

마셔도 자체 거 버리고

자기 달러 들어오는 제이슨 라이브로 자체를 지금

배터리 바꿨거든요

그래서 마소도 그러고 있기 때문에 나쁘지 않은 거 같고

결과적으로는

이제 오브젝트를 기반으로 프로그램을 할 날이 올 거예요

저희가 모든 예전부터 기다려왔던

세상에 온 거라고도 보는데

그런 날이 왔어

하고 좋아 좋아

보이는 순간에

갑자기 좀 잡아 스케이트 갔다면서

다시 한번 오브젝트가 없는데 언어를 만들고 많았죠

그것도 제가 볼 때는

이제 몇 년 안에 바뀔 거라고 봐요

것도 안 바뀔 수가 없고 빨리 받았으면 좋겠다

그래서 아까 정리했던 거

원해 벌써 자고 추가로 제일싼담배

시나 이런 류의 제이썬 자체도 만들고

읽어 구할 때 손으로 직접 파이팅하고 쓰지 마 오브젝트

이번 으로 가자

그래 실수를 적게 그런 뭐라 할 거야

칠순 알려 지도 적어 줘요

오브젝트라는 게 반드시 뭐

이게 뭐 재활용성이 좋다는 거 외에도

실수를 맞는 그런 거 되게 많아요

왜냐면 오브젝트 자체가 타입도 있고

변수이름짓기

기타 등등 있기 때문에 순수하게 세팅으로 다 짜고

무슨 이거를 이스트링 애들하고

코드를 손코딩 하는 것보다 훨씬 나은 거죠

저 그 정도로 오늘도 PT 요리

TV 여기서 끊고 다음에 또 뵙겠습니다 뽑혔습니다