안녕하세요, 포프입니다.

제가 되게 옛날에 ORM, Object Relational Mapping이란거에 대해서 말한 적이 있어요. 'DB를 사용하는 프로그램에서 DB를 설계하고 거기서 Stored Procedure를 두고 거기서 Query 돌리고 하지 말고 코드에서 Code First로 다 할 수 있는 방법이 있다. 프로그래머들이 주류인 회사에서는 그게 좀 더 편할 거다'라고 했어요. 하지만 여전히 DB의 최적화 이런 것들은 중요하고 최적화를 위해서는 DB 관리자의 손을 거쳐야 하는 일들이 있어요. '기본적인 동작을 ORM으로 하면 프로그래머 입장에선 편하다'라는 거죠. 그리고 ORM을 사용할 경우에 SQL Injection 이런 것도 알아서 막아주기 때문에.

근데 ORM을 사용하다 보면 문제점이 몇 개 있는데, 그중의 하나가 일단 DB하고 맵핑이 올바르게 안 되는 경우들이 좀 있어요. 엄밀히 말하면 DB 테이블을 그대로 클래스로 관리하는 느낌? 그래서 버전 컨트롤하는 느낌이 솔직히 더 중요하고, 실제 OOP로 하는 복잡한 것들을 곧바로 DB에 맵핑되게 하는 방법들이 요즘 나오고는 있어요. (전 추천하지 않아요) '기본적으로 DB의 Access Layer를 코드로 관리하고 거기서 DB Schema로 뽑아내는 방식이 좋다'라고 하는 경우고, 또 다른 문제는 ORM으로 인해서 성능이 저하되는 경우들이 꽤 있습니다. '이런 경우는 진짜 한땀 한땀 SQL 퀄리티로 돌리는 게 좋지 않냐?'라는 얘기를 하는 사람도 있는데, 뭐 틀린 말은 아니에요. 사실이기도 한데, 성능이라는 건 언제나 먼저 다른 데서 고칠 부분이 많이 있죠? 정 안되면 그다음에 DB에서 성능을 잡을 수 있습니다. 그래서 여러 가지 방법으로 고칠 수 있어요. 안되면 DB 쪽으로 가는 거고요. 어쨌든 간에 ORM이 아닌 걸 할 경우도 있는데, ORM을 하더라도 사람들이 대부분 간단하게 도구를 하는 거나 간단히 DB 긁어서 뭐 하거나 DB 업데이트 쉽게 할 때 스크립트로 작성하는 경우들이 있어요. 그게 더 빠르고 편하기 때문에. Azure Data Studio 올리고 SQL 접근한 다음에 뚜루룩하고 끝나기 때문에. 그리고 그 스크립트가 반복되어 사용하면 그 스크립트를 딴 데 버전 컨트롤하면 되기 때문에. 

근데 이러다 보면 어느 순간 이상한 일들이 생겨요. 그게 뭐냐면 DB는 어차피 변하게 돼 있어요. DB 테이블 스키마나 이런 건. 테이블 스키마 변경하는 거, ORM 기반의 사용자는 굉장히 편하게 하죠. 코드 바꾸고, 다 해보고, 마이그레이션 만들고, 버전 컨트롤하고 들어가요. 근데 아뿔싸! 나중에 가지고 있는 어마무시한 양의 SQL 스크립트 만들어 놓은 게 있는데, 이게 옛날 테이블 기반으로 되어 있네요? 그러면 일반적으로 이걸 바꿀 때 한 번에 다 찾아서 바꾸진 않거든요? 나중에 돌리려고 했는데 깨졌을 때 그때그때 고쳐가면서 하다 보니까 유지보수 비용이 어마무시하게 커지는 게 있는 거예요.

그래서 저희 회사에서는 최근에 '이런 DB를 직접 건드려야 되는 스크립트를 직접 작성해야 하는 툴 관련 일들을 스크립트로 더 이상 하지 말고 간단한 MVC 웹사이트 같은 web tool을 만들어서 다 그걸로 하자'라고 했어요. 이유가 뭐냐면 web tool로 뭐 하는 거 성능 느려 봐야 문제없잖아요? DB의 성능이 느린 문제는 일반적으로 많은 데이터를 처리하고 유저가 들어왔을 때 긁는 게 느린 거지, 내가 툴에 들어와서 Table의 Row 몇 개 바꾸는 게 1초가 걸리든 2초가 걸리든 솔직히 프로덕션 환경에선 문제가 아니거든요? 내가 툴 유저고 어드민 관련이기 때문에. '이런 경우는 오케이. 속도 문제 아니니까 ORM 쓰자.'. 더 큰 장점은 뭐냐면 만약에 내가 어떤 테이블을 바꿨어요. 그러면 그 테이블에 있는 Colum이 바뀌었을 때 그걸 참조하는 코드 자체가 제 web tool에 있잖아요? Colum이 없어졌기 때문에 컴파일이 안 될 거예요. 그래서 강제로 고쳐야 해요. 뭐든 간에 내가 뭐 하나 바뀔 때 그거 관련된 걸 강제로 다 고칠 수 있으면 지금 컨텍스트가 내 머릿속에 있으니까 훨씬 효율적이거든요? 그래서 이렇게 할 수 있는 방법이 생긴 거예요. 이걸 까먹고 있다가 나중에 봐서 '두 달 전에 이거 뭐 바꿨지? 아! 이거구나. 그때 이제 '스크립트 이렇게 바꿔야지' 이게 아니라. 그래서 어차피 ORM을 사용하는 회사라면 내부적으로 사용하는 그냥 web tool이라거나 뭐 데스크탑 툴도 상관없고요, 거기에서 이거 단순하게 몇 개 만들어서 업데이트 하나 하고 delete 하나 하고 이런 게 어렵진 않거든요? 코드 되게 빨리 나오거든요? 성능 신경 쓸 필요 없고, 요즘은 성능 안 좋은 Query 있으면 또 알아서 경고도 주니까.

그래서 저희가 최근에 이것저것 해보고 ORM 기반으로 많이 돌리고 스크립트도 많이 유지해다가 깨달은 게 '아휴, 이거 내부 인터널 오퍼레이션 하기 위해서 작성하는 스크립트들 최대한 버리자. 차라리 그냥 되게 단순한 MVC 웹페이지 하나 만드는 게 먼 미래를 위해 좋다. 그리고 그 MVC 웹페이지는 예쁠 필요도 없잖아? 테이블에 있는 내용 다 나오고 이거 바꾸기, 저거 바꾸기, 클릭하면 끝나는 거, 이렇게 하자'라는 식으로 결론이 나고 있어요. 그리고 여기에 또 하나의 장점은 저희 내부 Web Admin Tool이 가지고 있는 장점인데, 저희는 모든 데이터가 변할 때마다 스냅샷을 찍어서 히스토리를 저장을 해요. 그렇게 툴 업데이트하는 부분의 코드를 예전에 만들어 놓은 게 있어요. 그렇기 때문에 그 히스토리가 다 남아있기 때문에 DB를 직접 업데이트하는 것보다도 훨씬 안전해요. 물론 DB를 직접 업데이트하기 전에 모두 다 백업을 하라고 얘기합니다. 그런데 실무에 계신 분 중에 꽤 많은 분이 안 합니다. 왜냐하면 '아, 요거 간단한 거 하나 고치는데 뭐 문제야?' 그리고 실제 문제없는 경우들이 90% 이상이에요. 근데 이제 10%의 '아뿔싸!' 하는 순간을 막기 위해서 DB 백업을 한다는 건데, '모든 걸 다 지키고 하는 사람들은 없더라' 이건 확실히 말씀드릴게요. 일반적으로 그냥 회사에서는 24시간에 한 번씩, 6시간에 한 번씩 DB 백업되게 만들어두고, 아니면 백업 인스턴스 어디에 만들어두고 진짜 DB 업데이트할 때는 중요하지 않은 데이터일 때 은근슬쩍 신경 안 쓰고 하는 경우들이 많더라고요. 중요한 데이터는 당연히 다 백업해야 하지만, 이걸 '중요하지 않은 모든 데이터까지 백업한다.' 하면 굉장히 비효율적이고, '중요한 데이터를 전혀 백업하지 않고 업데이트한다.' 하고 사고 나면 망하는 거고요. 그래서 어딘가에 밸런스는 있습니다.

중요한 건 오늘 하고 싶었던 얘기는 ORM 굉장히 좋고요, ORM이 쓸모가 충분히 많고 성능적인 부분에서 ORM이 아닌 걸 곁들여 쓸 수는 있지만, 그리고 '회사가 DB 쪽이 많고 프로그래머가 적다면 당연히 DB 위주로 가야 하지만, 프로그래머 쪽이 많다면 ORM 기반으로 가되 성능적인 문제점은 나중에 한, 두 개 정도는 DBA의 힘을 빌려서 바꾸고 그 나머지 것들, 원타임 스크립트 정도까지도 코드로 작성하는 게 꽤 좋을 거다'라는 생각이 들어요. 저희도 이 방식을 몇 년 지나고 나서 또 깨달았기 때문에 'ORM 방식에서는 Internal Operations을 위해 사용하는 스크립트도 충분히 코드로 만들어두면 훨씬 유지보수가 편하다'는 그냥 쓸데없는 정보를 알려 드렸습니다.

포프였습니다.