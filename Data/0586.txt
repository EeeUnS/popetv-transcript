안녕하세요, 포프입니다.

오늘은 Git Sparse Checkout하고 Git LFS에 대해서 잠깐 말을 해야 할 것 같아요. 제가 Git 관련 비디오는 꽤 오래전에 많이 만들었어요. LFS도 옛날에 소개한 적이 있고, '최종적으로는 MonoRepo 쪽으로 갈 거다. 그걸 지원하는 쪽으로 들어갈 수밖에 없다'라고 얘기했는데 실제 많이 들어가고 있고, 현재 나온 게 Git Sparse Checkout이기는 합니다.

예전에는 Git의 원래 방향, 그게 순수한 방식이라고 우기시는 분들이 많았는데, 다행히 그런 부정적인 의견을 가지신 분들은 많이 사라졌고 이제는 많은 방향이 바뀌고 있어요. Git의 원래 방향은 뭐였냐면 내 컴퓨터 안에 모든 history가 존재하고 서버 연결이 안 돼도 history 어디까지라도 되돌릴 수 있는 거였어요. 그러기 위해서 여러 가지 이유가 있지만, 거기 선택했던 아키텍처 중의 하나가 Git repo들을 모두 다 복제해서 로컬에 가지고 있는 거고, 그래서 Git 사이즈가 어마무시하게 커지거나 binary가 들어가면 문제가 되는 경우들이 사실 꽤 있었죠. 그 당시에 그랬던 이유는 이해가 가고, 오픈소스 진영에서는 주로 코드 위주로 가지고 있어서 binary가 아니었던 거에서 그런 이유도 이해가 가고, 그 당시에는 로컬에 모든 게 있어야 history를 쉽게 볼 수 있었던 것도 이해하겠어요. 그때는 만약에 밖에 나가서 일을 하게 되면 인터넷을 쉽게 접속할 수 있는 시대가 아니었거든요? 요즘은 인터넷이 별로 비싸지도 않고 어디 가도 와이파이가 있는 상황이라 필요하면 언제든 접속할 수가 있기 때문에 실제 모든 history가 내 컴퓨터에 남아 있을 필요는 사실은 없는 거죠. 

그래서 이렇게 내 컴퓨터에 모든 history가 남아있지 않아도 되는 경우들, 특히 이게 binary일 때 문제거든요? 이걸 해결하려고 나왔던 게 Git LFS이긴 해요. 얘는 동작하는 방식이 어떠냐면 Binary가 있다는 ID, 키를 가지고 있고 가장 최근 것들만 서버에서 다운받아서 내 컴퓨터에 저장되어 있고, 과거 history로 돌아가는데 그 기록이 없다면 다시 서버에서 다운을 받는 방법이에요. 만약에 인터넷 연결이 안 돼 있다면 당연히 fail을 할 거고, 그래서 예전에 내가 Git LFS에서 받아놓은 binary가 컴퓨터 있으면 그냥 볼 수가 있고 없으면 다운 받아야 하고요. 근데 내가 개발을 계속하다 보면 Git LFS에서 지금 버전, 다음 버전이 계속해서 컴퓨터에 쌓이거든요? 근데 기본적으로 만들어진 거 자체가 binary용으로 만들었기 때문에 오래된 버전들을 쉽게 정리 할 수가 있어요. 이게 history가 오래되었고 MonoRepo를 사용하는 회사에는 꽤 도움이 됩니다. 왜냐하면 만약 Git에 history가 10년 치 쌓여 있어요. 근데 10년 전에 Git Log를 볼 가능성은 굉장히 적거든요? 그럼 최근 1년 치만 있으면 된다면 오래된 것들은 다 없애고 싶거든요? 근데 일반 git으로 version control 하는 건 지금 안 되고 LFS로 되어 있는 것은 돼요. 그래서 내가 필요한 history만 조금 가지고 있고, 정말 필요하면 네트워크 연결해서 곧바로 다운 받을 수 있는 환경만 구축이 되어 있다면 Git LFS에 들어가 있는 게 굉장히 Git의 장점과 MonoRepo의 장점을 둘 다 아우르는 방식이 될 수 있는 겁니다. 근데 Git LFS 자체가 만들어진 거는 대용량 파일용이었고, Sub Repo 복제가 지원되는 건 아니었어요. 그거를 하기 위해서 나온 것들이 Git Sparse Checkout이라는 건데, sparse라는 거는 '띄엄띄엄'이라는 의미거든요? 결과적으로 원하는 폴더만 다운 받을 수도 있고, 제가 알기로는 history도 최근 것만 선택적으로 다운 받을 수 있는 걸로 알고 있어요.

그래서 저는 'Git Sparse Checkout이 그냥 Git LFS를 대체할 수도 있지 않을까?' 생각했어요. 왜냐하면 LFS를 하려는 것도 최신 버전의 binary만 들고 있다는 거고, Git Sparse Checkout도 최신 버전만 들고 있고 과거 버전은 안 갖고 있으면 되는 거니까요. Git Sparse Checkout 할 때 최신 버전만 다운 받으면 최신 버전만 와요. 근데 사용하다 보면 계속 버전이 올라갈 거 아닙니까? 아직은 과거 버전들을 쉽게 지울 방법이 명쾌하게 있지 않아요. 최근에 Git에서 뭔가 관련 기능을 넣으려고 하는 거 같은데, 아직 모두가 사용하게 될만한 충분한 기능이 나오지는 않았어요. 제 생각에 Git Sparse Checkout 같은 경우는 MonoRepo 환경에서 여러 가지 빌드 파이프라인을 만들어 놓고 빌드 할 때 선택적으로 최신 것만 checkout 해서 그것만 빌드하는 용도로는 굉장히 좋을 것 같긴 한데, 아직은 로컬 컴퓨터에서 최신 버전만 유지하면서 개발을 해나가기에는 점진적으로 용량이 커지는 문제가 있을 것 같아요. 그래서 이걸 해결하려면 다시 지우고 Git 복제를 한 번 더 하면 되긴 해요, 최신 거만 오니까. 근데 partial clone, 그리고 제가 말했던 LFS, 이 둘 중의 하나를 골라서 최신 버전만 관리를 해야 한다면 여전히 LFS로 갈 수밖에 없는 상황인 것 같아요. 근데 LFS는 '소스 코드는 작으니까 일단 다 복제해도 되겠지?'라고 생각하는 거죠. Sparse Checkout은 제 생각에는 조금 더 발전해서 과거에 있는 것들, 'tree 몇 개, history 몇 개 전에 건 다 지워버려'라는 명령어가 나오면 아마도 Git Sparse Checkout 하나로 모든 게 될 것 같고, 그리고 서브 폴더를 어떻게 checkout 하는지는 클라이언트에서 결정해서 하는 건데, 'Git 서브 폴더별로 권한을 줄 수 있냐?', '어떤 사용자가 복제하려고 하면 이 폴더만 복제가 되게 강제할 수 있냐?' 그리고 '나중에 권한을 빼면 그거를 다시 fetch 할 때 권한을 다시 복원할 수 있냐?'라는 폴더별 권한 관리 문제가 이제 서서히 나오기 시작할 것 같아요. git의 발전 속도로 보면 최소 1, 2년은 걸리겠죠? git이 생각보다 발전이 너무 느려요. 권한 관리까지 설정이 지원되기 시작하면 그제서야 Git은 예전에 Git이 나오기 전에 많이 사용했던 Source Control System, 거기서 지원했던 큰 회사를 위해 필요했던 기능들을 드디어 갖추게 되어요. 이게 10년이 넘었어요. Git이 영리하고 굉장히 돈을 잘 벌고 하는 회사였다면 이걸 굉장히 빨리 발전시켰겠지만 그게 아니니까 이렇게 걸린 거겠고, 그 상황까지 가면 정말 '기술로 모든 것을 개발해도 되는 좋은 세상이 올 수도 있겠다'라고 생각은 들어요.

마지막으로 한 가지 더 추가해 드리면 git을 사용하는 방법은 굉장히 많아요. git을 보다 보면 막 느려질 때도 있고 hack을 하려면 '이런 명령어 쳐봐', '저런 명령어 쳐봐' 하는 것들도 많아요. 사실 돈 주고 버전 관리 컨트롤을 쓰는 사람들이 되게 이해가 안 되거든요? '그냥 알아서 해줘야지.', '정해진 방식이 있어야지.', '그걸 왜 사람마다 다르게 해?' 이런 생각 하거든요? 그래서 이걸 정립하려는 게 Git Scala라고 이제 Git에 기본으로 들어왔어요. Git Scala 찾아보시면 해주는 것들이 은근히 있습니다. Sparse Checkout도 그중에 하나예요. 이게 여러분이 되게 악마라고 싫어했던, 최근에는 천사라고 나름 좋아하던, 그리고 오픈 AI 사태 이후로 다시 악마라고 불리고 있는 Microsoft에서 하는 건데, 마소에 있는 직원이 예전에 Virtual File System 이런 거를 하다가 다시 딴 걸 하다가 몇 번 고치고 하다가 굉장히 얇은 Thin Layer로 Git Scalar라는 걸 만들었고, 이걸 아예 Git에 표준으로 집어넣기까지 했어요. Git repo를 자동으로 기본 관리해 주는 프로그램이 생겼고요, Git Scala라고 하는 게 있으니까 그것도 한번 검색해서 해보시면 좋고요. 저도 메인으로 쓰는 Git에서는 Scala를 좀 돌리고 있습니다. 나름 잘 정리해서 좋아요.

예전에 Git 마지막 영상 만든 게 되게 오래전 일 거예요. 그때 Git 한참 발전되고 막 LFS 나올 때 '이거 뜬다', '이 방향이 맞다' 할 때 사람들 막 아니라고 하는 경우가 있었는데 결국 떴죠? 이런 방향으로 큰 대기업, 엔터프라이즈 쪽에서 사용할 수 있는 소스 컨트롤 시스템 방향으로 git이 점점 자리 잡아가고 있고요, 그 이면에는 마소가 쓸데없는 것들 git으로 많이 옮기면서 직접 뜯어고친 게 되게 많은 것 같고, Git Scalar보다는 Git Sparse Checkout 쪽 이게 좀 더 성숙할 때까지 기다리면 꽤 쓸만할 것 같아요. 그다음에는 '서버에서 권한 관리하는 기능들이 조금씩 더 추가되지 않을까?' 생각해요. 그러면 세상 모든 걸 MonoRepo로 하는 게 어려워지지 않을 거고, 예전에 말했던 Junction 따는 일도 많이 줄어들 거예요. 이런 세상이 오기를 바라면서 쉽게 개발하는 상황, 개발 환경 세팅은 정말 간단히 원클릭으로 끝나는 게 최고입니다. 그런 세상이 다시 돌아오기를 기다리고 있습니다.

포프였습니다.