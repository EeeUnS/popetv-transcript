안녕하세요 포프입니다. json 떡칠 좀 그만합시다. 이게 무슨 소리냐 하면 아마 웹 프로그래밍만 하신 분들이 요즘 좀 많아지면서 나타난 부작용 같아요. 데이터를 저장하는 방법은 굉장히 다양합니다. 예전에는 바이너리로 직접 저장하기도 했고 텍스트 파일로 저장을 하기도 했고 한 줄에 하나씩 저장하는 방법도... 하지만 요즘 제일 많이 쓰는 어떤 데이터 저장 방식 은 json인 것 같아요. 한동안 XMl이 많이 쓰였는데 json으로 많이 넘어갔어요. 근데 그러다 보니까 그냥 모든 게 json으로 처리되는 것처럼 돼 버리잖아요? api에서도 json 받고 막 이러니까 그러다 보니까 사람들이 모든 거에 너무 많은 거에 json을 쓰기 시작하는 거예요. json 그리고 xml 같은 경우는 결국 문서인데 구조화된 자료(structured data)를 저장하는 데 좋은 포맷입니다. 어떤 경우냐면 내가 깊게 A 가 B를 포함하고 있고 B가 C를 포함하고 있고 C가 D를 포함하고 있고 이런 경우들 그리고 그 구조 자체가 어찌 보면 너무 자유로울 때 A가 3단계로 들어갈 수도 있고 B가 한 단계 들어갈 수 있고 C가 아예 안 들어갈 수도 있고 이럴 때 그 모든 범용적인 데이터를 표현할 수 있는 데이터가 제일 json입니다.

하지만 과연 json이 좋을까? 범용성으로는 좋아요. 부정하지 않겠어요. 사람이 읽기 좋은 데이터 형태니까... 사람이 이렇게 좋은 데이터 형태로 만든 건 맞아요 바이너리 보다 좋죠. 하지만 개인적으로 문서를 관리할 때 모든 거를 json 작성하세요? 그건 아니죠. 저희가 생각보다 굉장히 체계화되고 너무나 많은 사람들 프로그래머뿐만이 아니라 그 사무직도 많이 쓰고 있는 데이터 포맷이 있습니다. 엑셀이죠. 2D 포맷... 참고로 말씀드리면 이 2D 포맷을 잘 생각해 보면 DB 테이블도 2D 포맷입니다 사실은. 그래서 2D포맷 데이터는 굉장히 사람에게 익숙한 포맷이에요. 책에 있는 표도 그렇고 다 2D 포맷이거든요? 그 2D 포맷을 json으로 저장하시는 분들이 있어요. 왜? 굳이? 읽기도 어려워 고치기도 어려워요. 하지만 이게 엑셀처럼 한눈에 딱 보이면 고치기도 좋고 보기도 편하겠죠? 그게 바로 csv라는 포맷입니다. Comma Separated Values 그래서 csv라는 확장자가 달린 파일은 엑셀에서 불러올 수도 있고 csv로 내보내기(export) 할 수도 있고 구글 스프레드시트에서도 지원됩니다. 그래서 사실은 csv 포맷이 게임업계에서는 엄청나게 쓰였어요. 현재도 엄청나게 쓰이고 있고 게임 기획자분들 보면은 엑셀 그랜드 마스터거든요? 내가 필요한 모든 스택 그런 것들 다 그냥 2D로 저장한 다음에 프로그램에 넘겨줘요. csv로 변환해서 넘길 수도 있고... 그러면 그거를 가지고 이제 데이터를 가져와서 프로그램을 사용하는 겁니다. 즉 게임기획자들이 많이 바꿔야 되는 수치나 내용들 csv로 엄청나게 썼습니다. 그래서 게임 쪽에서 제가 프로젝트한다고 다른 기획자 분들하고 일할 때 그분들이 제일 먼저 원한 게 유니티 엔진이었거든요? 유니티에 csv importer 넣어 달라고 해서 넣기 시작한 게 제일 먼저였습니다. 요즘은 csv importer가 있지 않을까 생각을 해요.

그러면 이 2D 데이터를 하면은 좋은 게 뭐냐? json에서 2D 데이터를 보려면 이름과 데이터 값이 필드 단위로 구성되어 있으니까 내가 원하는 요소들만 따로따로 분리해서 볼 수가 없어요. 하지만 이걸 csv 파일로 저장해서 엑셀로 읽으면 column, row로 위치 찾아서 찾아서 고칠 수 있고요 아니면 엑셀에 엄청난 기능들 많잖아요? 그거 써서 필요한 거 다 고칠 수 있습니다. 굉장히 편합니다. 엑셀은 굉장히 잘 만든 프로그램이거든요. json을 csv로만 만들면 읽을 수 있는 거예요. "아 csv 읽기 어렵지 않나요?" 기본적으로 csv는 모든 필드들 각 줄이 행(row)이고 제일 윗줄은 헤더 들어가 있고 두 번째 줄은 각 값이 콤마로 분리된 게 전부입니다. 그래서 콤마 자르고 그냥 읽어 버리면 돼요. 그래서 수동으로 csv를 읽는 코드를 작성하는 것도 굉장히 쉬워요. 옛날부터 해왔던 거고 그리고 이렇게 단순한 구조다 보니까 json parsing 하고 이럴 때 메모리 은근히 많이 먹거든요? csv는 Auto Parsing 라이브러리가 있어요. C#이라면 보통 Json.NET 많이 쓰셨죠? C#에 CsvHelper라고 똑같이 해 주는 프로그램 있어요. 자동으로 개체(object) 집어넣고 csv로 저장하거나 csv를 읽어서 개체로 저장해 줍니다. 당연히 각 개체가 1줄이기 때문에 리스트로 만들어 줍니다. 이거 제가 앞에 잠깐 힌트 드린 거 있죠? 데이터베이스도 2D Row다 데이터베이스를 가끔 백업을 해야 될 때가 있어요.라이브 서버에서 안 빼고 백업할 때도 있고 빼고 백업할 때도 있고... 근데 아예 빼서 백업할 때 면은 archive(보관소)죠. archive 할 때 DB를 그냥 통째로 저장하시는 분들 있어요. 나중에 그냥 DB를 다시 읽으면 되니까 하지만 POCU 아카데미는 요즘 어떤 식으로 많이 하냐면 민감한 자료(sensitive data)는 다 걸러내고 그게 아닌 자료를 archive 할 때는 csv로 뽑아서 csv로 저장을 합니다. 그리고 그 csv를 ORM에 entity로 바꿔주는 라이브러리를 만들어서 그 DB를 언제든 읽고 싶으면 csv 파일을 읽어온 다음에 그거를 CsvHelper로 ORM에 들어가는 개체로 바꾸고 그거를 메모리 DB context로 올려 갖고 프로그램에서 곧바로 읽어버립니다. 그래서 라이브 서버에 있는 데이터를 긁어 오는 것보다 저희는 archive 서버에 있는 데이터를 긁어오는 게 훨씬 빨라졌고요 그런 식으로 하니까 용량도 크지 않고 정말 필요한 용량만큼만 읽게 되고 csv 파일이 그리고 이 프로그램 돌려서 안 하고 그냥 텍스트 에디터에서 보고 싶을 때도 쉽게 열어서 볼 수도 있고요. 옛날에는 diff 파일 바뀐 거 보는 프로그램이 테이블 형식의 자료를 잘 보여 주지 못하는 애들이 많았거든요? 근데 요즘 세상이 좋아져서 그런지 이제 괜찮은 Diff 프로그램에서는 csv 파일을 양쪽으로 바뀐 부분만 다른 색으로 강조해주기도 하고요. 그리고 VS Code 많이 쓰시죠? 비주얼 스튜디오 말고 비주얼 스튜디오 코드 그 안에서도 csv 관련 확장 프로그램을 설치하고 파일 열면 각 column 찾아가면서 고치기도 합니다.그래서 이게 게임 업계에서 굉장히 많이 사용하고 전통적으로 많이 사용하던 포맷이 웹 업계로 넘어오면서 API 기반으로 가면서 흑마법이 된 느낌인데 제가 말씀드렸듯이 엑셀 같은 2D 폼으로 저장할 수 있는 데이터는 csv로 저장하는 게 훨씬 편하고요. 나중에 그 데이터를 프로그래머가 아니라 다른 사람이 고쳐 주고 할 때... 엑셀은 많이 사용할 줄 알잖아요? 거기서 고쳐서 넘겨줄 때 도 굉장히 편합니다. 

그래서 json 포맷보다는 csv가 유용한 곳들이 있고 2D 표(table) 기반의 그런 자료는 csv로 많이 활용하시기를 바라고요... 또 한 가지 지나가듯이 말씀드리면 json은 스펙이 있어요. ISO 스펙이 있긴 한데 그거를 다들 제대로 안 따라요. 너무 많이 뽀개지는 게 많아요. 좀 짜증이 나요. csv는 그것보다 훨씬 간단한 구조이기 때문에 그런 걱정은 좀 적게 하셔도 됩니다. json은 파일을 직접 고쳤을 때 어떤 parse에서는 읽히고 어떤 parse에서는 안 읽힐 수도 있어요. 표준을 잘 안 지켰기 때문에... 그런 문제들이 csv는 확실히 적습니다. 혹시 csv 파일을 몰랐던 사람들은 채용했던 주니어 중에 몰랐던 사람이 있었어요. 그래서 csv라는 파일이 있으면 열심히 'csv 활용을 해서 2D 표의 자료를 열심히 저장을 해 보자'라고 생각하세요. 그리고 csv를 사용하려는데 엑셀이 없다? 그럼 구글 스프레드시트 공짜거든요? 거기에서 읽어서 쓸 수 있어요. 그래서 구글 스프레드 시트를 사용해도 csv 호환이 돼요. 즉 엑셀 쓸려고 ms 오피스를 사지 않아도 된다 그렇게 말씀을 드릴게요. 그래서 json 떡칠 좀 그만합시다 csv 써야 할 때는 csv를 사용합시다. xml대신 json을 쓰는 거는 제가 뭐라 하지 않겠습니다. 둘 다 장단점이 있기 때문에.. 예 포프였습니다.