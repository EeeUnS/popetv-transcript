음 예전에 한번 제가 유니테스트 t 에 대해서 말한 적이 있어요 솔직히
많은 몇번 말은 쪽에 있는 것 같은데 한 번에 이제 u 그 유니캐스트
하기 위해서 인터페이스를 남용하는 그런 행태를 좀
뭐 속된 말로 깠다 아 그냥 맘에 안들고 이것은 올바른 방법이 아니다
라는 얘길 좀 많이 했던것 같고
정확히 얘기하면 은 보통 상황에서 공부하는 법 이 아니다 정말 무슨 뭐
테스트가 필요한 데서는 필요하다 라고 하긴 했지만 그런 일은 별로 없다
였고 두 번째는 이제 유니테스트 보다 더 나은 방법이
그 뭐라 그러죠 오토메 etd 테스팅 그걸로 해 같고 이제 해라 라고
까지 얘기했어요 건 이제 따른 외국에 있는 따른 개발자가 이제 유튜브를
통해서 얘기를 했던 걸 제가 듣고 생각하고 와 그게 올바른 방법이 구나
라고 해석을 드렸고
오늘 얘기 하려고 하는거 스텝 틱 안 얼리 스틱 이라는 거에요 그래서
이제 이거 를 한국말로 번역하면 정적 분석 정도가 되겠죠
이게 c # 에드 있긴 잇지만 가장 이게 유용한데 솔직히 10불 뿌리라고
보거든요 모씨 샵도 이용해요
그리고 이제 시샵 에만 나오는 코드 컨트롤 알트 이런거 있죠
새로 이제 나오고 좀 뭐 그러니까 프리 컨디션 포스트 컬리지는 체크하거나
뭐 이런 이런 것들
그거 이제 언어 수주에서 아직 지원 안 되지만 컴파일러 스테레오 지원을
하려고 이렇게 좀 쳐 넣은 게 이제 코드 컨트롤 텐데
써티 플러스 섹션이 정도 생각하면 되요 걸 컴파일 타임에 줄
이제 제가 이제 그 때 뒤져 본거 로는 코드 컨트롤 알트 도 음
스태틱 널 리스트 기반 에다가 올렸던 것 같았어요 근데 제가 지금 정확히
기억은 안나는데
뭐 그건 중요한 게 아니고 금 스태틱 않을
않음 4 안 리 틱 쓰라는 게 뭐냐
아
c 로 예를 들 께 요 제가 c 에서 가장 유용하다고 했으니까 싶을 볼
시 c 에서 이제 코드를 짜다 보면 은 으 어레이를 만들고 그리고 이제
이제 어레이를 접근을 하는데
그 분야에 따라 다르지만 게임 쪽이나 굉장히 많은 c 플 뿔 쪽에서 숲을
쓰는 쪽 c 나 e 섹션을 거야
그리고 그 메이 제어 레이가 10개를 잡았는데 11번째로 접근하거나
그러면 그 순간에 엉뚱한 를 참조해서 뭐 덜 포인트 에러가 날 수도 있고
통통한 될 머리라고 덮어 쓸 수도 있고
이상한 현상에 발견하기도 발생하기도 하죠
그 뿐만 아니라 어떤 포인터가 있는데 이거를 뉴 를 해 같고 뭐 이렇게
만들어 놓지 않고 애널 포인트 상태에서 접근하여 뻑이 나는 경우도 있고
아니면 그 포인터 변수 자체라 에 초기 r 안해서
이게 갑이지 데이터가 들어가 있고 뭐 이상한 숫자 그 숫자 메모리 참조
에서 이상하지 사다가 뻑이 나는 경우도 있고 뻑이 아니라고 어떤 뭐 쓰고
넘어가는 경우도 있고
한마디로 10불 뿔은 잘못쓰면 은
뭐라 그러죠 공급가를 마치 있으며 그 중에 하나요 사실을
그래서 이제 그거를 이제 없애 보겠다고 추가한 깨짐 었어 트 같은 것도
추가해 보고 나주 모 익셉션 핸들링을 쳐 받기로 하고 이런 경험 다양한
경우엔 하는데
스태틱 안 리스트 let 스는 컴파일 도중에
그러니까 시행을 하지 않고 이런 위험 요소가 있는 코드를 다 분석을 해서
이제 에 라루 띄워져 요 그럼 그 코드를 보고 나서 올바르게 고치면 되는
거에요
아빠 예를 들면 은 어레이를 추가가 이렇게 접근하는 것이 있잖아요 그건
솔직히 변수에 들어오면 어느 순간에도 그 변수가 인덱스를 들어오면은 페러
m
함수 페러 m 같은걸로 그거를
실제 이 값이 어떤게 더 올지는 아무도 모르잖아요 그러면 이것은 실행
시간에 어떻게 체크 할 방법이 없다 라고 할 수 있는데
스탠딩 rat 쓰는 좀 똑똑해서
이 들어온 인덱스 값을 어서 트로 라도 확인 하는 지를 봐요 그래서 없어
트로 확인하는 코드가 있다면 에러를 안 주지만 벌써 트 까지 없는 코드
라면은 아 이건 좀 위험하니까 고쳐 라고 애라 줘요 그래서 뭐 어쩌다
쳐서 없앨 틀어 놓거나 아니면 실제 도는 도중에 그런
뭐 범위가 넘는 인덱스가 들어와야 되는 코드 라면은 그 인덱스가 넘을
경우에는 실제 접근한 하고 다운을 받아야 한다거나 뭐 이상한거 로
해야겠죠
그래서 그런 식의 어떤 로 지어도 안 들어가 있는 그런 위험 요소가 되는
부분에 다 에러를 띄워져 요 그래서 이게 사실은 게이머 께서 유명해 진
게 으 좋은 카메 게 아마 한번 케이크 콘 에서 얘기해서 였던거 같아요
그래서 이제 그 때 종 칼을 있었던것은 분명히
아 그 스태프가 넘는 틱 쓰는 파는 솔루션의 있었거든요 제가 어떤건지 잘
기억이 안나는데 인텔을 수도 있고 저는 따른 걸수도 있어요
그래서 그거를 따로 이게 코드에서 돌리곤 보여주는 거 였는데 지금
마이크로소프트 비주얼 스튜디오 아내는 이게 기본 동작으로 들어가 있어요
예전에는 그래서 마 스태틱 넣을수 돌리려면 뭐 이상한 컴파일러 스위치
넣어 줘야 되고 다시 컴파일 하려고 했는데 지금 그게 빌드한 인지 언어
리스트 아닌지 그 메뉴에 곧바로 스태틱 널리 스타는 코드가 있어요 메뉴가
있어요 그걸 딱 누르면 지가 알아서 컴파일 다 해주고
짱이라는 뽑아 줘 그래서 저는 뒤에 씨 쪽 개발자 한테는 이거를 뭐 매번
을 아니더라도 종종 을 돌려 보게 권하고 아니면 매일매일 빌드를 만드는
프로세스가 있다면 릴리스 빌드 같은 경우에 한 번씩 돌려서 그날 그날
들어온 것 중에 좀 위험한 코드 없는지 보고
그런거를 이제 처리해주고 그 다음날 고치거나 아니면 정말 이게 의미없는
원인이라면 꺼 주는 법도 있어요 그럼 한줄한줄
그런걸 해주다 보면 은 나중에 가
캄 마디로 제가 제일 좋게 보는것은 이렇게 코딩을 짜다 보고 이렇게
스트립 a 3 돌리다보면 은 제가 정말 놓친 것들이 많이 보여요
아 이런 위험도 있었구나 그리고 거기다 못하더라 최소 어썰트 를 박아서
나중에 디버깅을 돌릴때 라도 그 상황을 발견해서 어떻게 처리할 수가
있는거죠 그래서 저는 스틱 아너 리스트 한번씩은 꼭 돌려보 라고 얘기하고
싶고 그리고 코드를 정말 유지보수를 잘 내면 계속 이걸 돌려서
언제나 원인이 없는 상태 까 스틱 애널리스트가 원이가 안주는 상태를
유지하게 말해요 사실
그리고 이제 시작 뛰게 있다고 했잖아요 시작도 제가 한번 돌려보기 돌려
봤는데 그땐 이 프로젝트가 원아 유지보수 안되고 있으라고 워낙 박 그런
에러가 많아서 제고 치지 못했고 당시에는 바쁜 상황이었고
c # 뜨자 작동 해요 10분 만큼 그래서 음 이거는 이제 따른 컴파일러
스택에 되게 들어 오는지 모르겠어요 근데 제가 확실히 아는건 비쥬얼
스튜디오 에는 기본적으로 들어가 있고 이제는 그 예전에는 따로 돈주고
마우스 몇천만원 주고 샀고 돌리고 나면 어떤거는 조사하고 돌려야 되는
제품이었는데
지금은 이제 비쥬얼 스튜디오가 있어 공짜로 쓸 수 있는 그런 멋진 제품이
됐죠
그래서 그 세부적인 세팅을 조절하는 것도 있고 뭐 원인 레베 어느정도
어느 정도까지 잡 이런거 다 설정도 가능한데 저는 그냥 기본으로 보통
많이 썼구요
굳이 뭐 컬을
까 배포자 그냥 미친 고가의 잡아낼 수 있지만 그럴수록 노이즈도 많아져서
이제 제가 일일이 꺼져 되는 것도 많기 때문에 일단은 시작이라는
단계에서는 그 정도로 시작하는게 좋은것 같아요
그럼 이제 이거 람 유니테스트 랑 무슨 상관이 있냐 라는 또 얘기가
나오거든요
이제 솔직히 말하면 유이 테스트가 테스트 하려는 것과 패티가 언어 ls
가 테스트 하려는 것 좀 다른 거에요 어찌 보면은
유니 테스는 고 1 암의 기능을 테스트하고 이 기능 이쁘게 됐을 때 보기
한거고 스탠드가 언어이며 딕스 같은 경우에는 좀 의도치 못한 버거 잘못
코드를 짜서 아니면 뭐 여기서 뭐라 그럴까
원하는 값이 이정도 범위가 엉뚱하게 들어와서 코드가 깨질 때 그것에 대한
대비책이 아무것도 없는걸 잡는거 이런 개념이 거든요 근데 제가 유니테스트
를 이제 뭐라 그럴까
까 어째 모든것에 시간이 들어가게 되어있어요 유니테스트 를 만드는 데도
시간이 들어가고 제 코드 저한테 시간에 들어가고 스태틱 언어 이틀을
돌리듯 시간을 들어가요
유니테스트 를 얻을 수 있는건 어떤 기능이 제대로 동작하는 야 이게 어느
수가 깨지지 않아 하느냐에 대한 보장이 고
스틱 널 틀을 잡을 수 있는 경우에는 정말 말도 안되는 값이 들어와서
아니면 내가 생각하는 어떤 값이 돌아서 코드가 완벽하게 뻗는 경우 되
객체 칸에 뭐랄까 대위 하는 거거든요
그러면 이제 근데 재밌는건 ups 작성하는 시간이 많이 걸려요
스태틱 언어 ld 를 돌리는 시간이 거의 안 들려요 아닌 걸려요 그냥
컴파일 넣으면 되는 거기 때문에
그렇기 때문에 유이 테스트라는 시간이 있다면 저는 스태틱 언어 리스트를
먼저 돌려 보라고 하고 싶어요 그만큼 투자비용이 적으니까
그리고 설마 유니테스트 안 잡힌 버거가 있더라고 어떤 기능이 앉아 뭐
이제 안된다는거
그거는 퀘 이 과정에서 드러나고 일반적으로 이제 출시하기 전에 한번 이
또 계속 주의를 돌리지 않을 테스트 해보고 그 과정에서 나올 수 있는
버그 드린 데 비해
스타트가 언어를 스트가 잡아주는 버그 들은 음 그런 순간에 못잡는 벗어도
은근히 많아요
정말 라이브 가서 이상하지 탭 와야만 뜨는 바울도 많고 그런데 그럴 때
만약에 이게 뜬다
그 경우에는 고티 로 정말 어려워요
왜냐면 디버그 인 포드 잘 없는 경우도 많고 막 그런 문제가 말입니까
그래서 저는
뭐랄까 소프트웨어 개발을 할 때 언제나
위험을 잘 조절을 하는 게 중요하다 생각해요 프로젝트 할때 까
조그만 위험이 있는 것은 조금 조금 좀 털어 상관이 없지만 정말 큰 우리
빵 터지는 건 막아야 된다고 생각을 하거든요
그러면 저는 언제나 스태그 애널리스트를 먼저 하라고 할 수밖에 없어요
그래서 저는 유니트 에 쓰고 스틱 않아 리스트를 얘기한다 면서 특히 않는
리스트를 먼저 돌려 보라고 해요 왜냐하면 그게 훨씬 빠르고 안전하고
그리고 그 가장 큰 위험을 잡아줄 수 있는 부분이에요
그리고 이제 거기서 시간이 나오면 일도 유니테스트 를 만들어야 만들 수도
있고 그 전에 이제 전에 말했던 그 오토메이션 테스트 배추 오토메이션
테스트
그거를 이제 만든 또 어디 좋은데
제가 소프트웨어 업계의 여러 회사에서 일해라 보면은 결과적으론 소프트웨어
개발에 인건비 가던 이거든요
그러면은 그럼 모든 테스트를 완 표가 기하기 위해 인건비를 투자할 수
있는 회사도 많지 않고 해주셔서 좀 적어요
아 당연히 회사 그래 된다 고 얘기하지만 음 뭐라 그럴까요
이제 스타크래프트 보면은 에다가 모직 앞으로 there's 프로토스가
이제 1 장인의 마음으로 모든 걸 장애인의 마음으로 하다가 결과적으로
멸종위기 오잖아요
그에 비해 뭐 말도 안되게 적어 나무 생각하는거 마한 인해전술을 하는데
어떻게 살아 없는 것 같고
휴거는 말이죠 그 중간에서 어떻게 살아 남는 그런 게 있어요
그래서 저도 이제 밸런스가 중요하다고 보거든요 그래서 모든 걸 유이
테스트하고 모든것을 테스트할 수 있는 그런 극단적인 케이스는 많지 않다고
봐요 그래서 어느 순간에 나 가성비 따지고 효율성을 따져야 되는 상황이고
만약에 제가 어느 다른 회사들 납품을 하는 그런 회사를 가지고 있다면
이제 그 회사가 정말 원하는게 완벽하게 100% 작 또한 버거 하나도
없는 소프트웨어 고
그런게 아닌 이상 그런 게 중요하지 않는 패 큰 이상을
어느 정도의 위험 요소는 가지고 있지만 그쳤을 때 관리가 가능하고 그
대신에 시작되다 접대 되는 회사를 고를 수밖에 없다 줘 생각을 해요
그런 의미에선
가장 이제 시간에 인권 베타 격의 없는 순서대로 가야 된다고 생각을 하고
근데 저는 아까 말했듯이 스틱 아너스 가장 말도 추천 안하고
유니테스트 는 지금 굉장히 재미있는 일을 마이크로소프트에서 하고 있어요
아직 완성이 되었는지 모르겠지만 1년 전쯤에 봤는데
걔네가 야 자동 유니테스트 를 만들기 시작을 했어요
가 뭐냐면 함수를 보면 그 이 클래스를 주면은 이 클래스의 만드니 테스트
코드를 자동으로 만들어 준대요
그럼 이제 거기에다가 이제 한번 검토하고
뭐 조금 더 고치거나 이라고 돌리면 된다 고 그래서 제가 cc 업적이
어떤 걸로 기억을 하는데 이게 완성이 되었는지 모르겠어요
2015년 버전의 들어오는 얘기만 예전 한번 봤어요 근데 정작 들어
가는지 몰라요 그래서 저는 모든 테스트가 4
이제 어느정도 자동화 가능하고 쉽게 만들 수 있어야 올해가 해야 된단 주
이거든요 그래서 예전에 이렇게 손수 손 코 등장 유니테스트 는 정말 음
일반 회사에서 하기 되기 힘든 인건비를 많이 차지하는 분해 했다고
생각하고 이제 마소가 치즈 훌륭한
뭐랄까 제가 마소 오빠라고 이제 얘기해야 될 것 같은데 여기서 정말 개발
프로세스 확실하게 이해하고 있는 회 삼아서 밖에 없는거 같아요 소프트웨어
개발 프로세스를 이걸 어떻게 쉽게 만들어주는 그런 회사
그럼에도 불구하고 비주얼 스튜디오로 이제 꼼짝을 뿌리고 있는 하잖아요
그 정도의 회사가 들어와서 적립을 해 주면서 부터 어떻게 일반에서 도입할
수 있는 시스템 이 되 가는것 같아요 그래서 이거는 좀 더 지켜봐야 될
문제고
그거를 달 떠나서 스태틱 안 알리슨 에 이미 몇 년 전부터 계속 그런
삽질 해오다가 이제 사용할 수 있는 단계가 됐으니까 사용할 수 있는
단계는 잔 3탄 했는데요
써보라고 해드리고 싶어요 한번씩은 돌려보자
비쥬얼 수도에서 네이처 점이 있어요 그래서 그 정도로 오늘은 포프 티 리
유용한 정보를 전해 드리면서 포 폈습니다
