C++에 새로 추가된 기능 중에 제가 상당히 기다리고 있던 기능이 있는데 지원이 된다는 것을 최근에야 알게 된 기능이 있어요. 그게 뭐냐면 override 하고 final 키워드거든요...

제가 가끔 문제가 있었던 부분이 뭐였냐면 예전에 C++에서 가상 함수가 있을 때 있잖아요? 예를 들어서 부모 클래스에서 가상 함수 이름이 f고 인자(Paramater)를 하나를 받는데 그게 Integer(정수) 일 경우에 자식(Child) 클래스를 만들면서 '아 저걸 내가 상속(Inheritance)하니깐 가상 함수(Virtual Function)를 만들어서 오버라이드(Override) 해야지'라는 생각으로 코드를 짤 때가 있는데 실수로 정수 대신 다른 인자를 넣게 되는 경우가 있어요. (Short를 넣는다거나 Float을 넣는다거나...) 그러면 '아 이게 당연히 override가 됐겠지...'라고 생각을 하고 코드를 짜지만 이 함수를 호출할 때 결과는 제가 원하는 결과가 안 나오는 거예요. 그 이유가 뭐냐면 그 속에 들어있는 인자의 형(Type) 이 다르기 때문에 이게 부모 클래스부터 상속받은 가상 함수가 아니라 이 자체만의 클래스가 된 거죠. 아 이거를 쫌 간단하게 잡아 줄 수 있는 방법이 있으면 좋겠다...라고 열심히 생각을 해봤었어요. 왜냐하면 이게 코드 짜다가 버그가 발생하면 쉽게 찾아낼 수 없는 버그예요 생각보다...

근데 요번에 나온 키워드 중의 override 키워드가 있더라고요. 다른 언어에선 이미 지원하는 건데 개념은 간단해요. 예를 들어서 아까 말씀드렸다시피 부모 클래스의 가상 함수 void f(int)가 있고요, 자식 클래스에서 나는 이걸 오버라이드를 할 생각인데 인자를 다른 형으로... 그러니까 void f(short) 나 void f(float)를 넣었다고 해보죠. 그럼 여기에다가 끝에 override를 붙여주면 컴파일러가 오류(error)를 내요. 왜냐하면 부모 클래스에서 함수 시그니쳐(signature)가 똑같은걸 찾을 수 없으니깐 '이건 니 실수다... 그럼 컴파일할 때 쉽게 잡을 수가 있죠. 그건 상당히 만족스러운 거고요...

그리고 또 하나 다른 키워드는 final 키워드가 있는데, 이것도 다른 언어에서 이미 지원하는 거죠. 이 개념은 뭐냐면 예를 들어서 이제 부모 함수에서 가상 함수가 있잖아요?이제 자식 함수에서 가상 함수를 구현해가지고 override를 했어요. 근데 만약에 다른 자식 함수가 다시 상속하는 경우에 이 함수를 바꿀 수 없도록(override 못 하게) 정해주고 싶으면 함수 끝에 final을 붙여주면 돼요.

아까 말씀드린 override보다는 사용할 만한 곳이 그렇게 많지 않겠지만... 그래도 더 이상 이 함수를 바꾸지 말라 그런 개념을 강요할 때는 굉장히 괜찮은 키워드 같더라고요. 개인적으로는 final 키워드가 필요한 적은 그렇게 많지 않았어요. 물론 코드 작성하는 도중에 다른 언어에서 코드 작성하는 도중에 더 이상 '이것을 굳이 상속받아가지고 override 할 필요 없겠구나' 생각하는 경우에는 그런 키워드를 넣어주기도 했었거든요. 그런데 개인적으로는 개발하면서 final 키워드가 없어서 불편한 적은 없었던 거 같아요. 뭐 라이브러리 만드시는 분들은 필요할 수도 있겠는데, 저는 final보다는 override 쪽이 상당히 맘에 들고 정말 유용하는구나 생각이 많이 들더라고요. 저도 얼마 전까지 몰랐던 건데 혹시라도 모르셨던 분들은 써보시는 것도 나쁘지 않을 거 같아요. 생각보다 버그 많이 잡을 수도 있어요. 그리고 또 하나의 장점은 만약에 제대로 된 가상 함수들이 부모, 자식 클래스에 존재할 때 부모에 있는 가상 함수 시그니처를 바꾸고 싶은 경우 있잖아요? 여태까지 integer를 썼는데 float을 쓰겠다거나, 그거 하나 바꾸는데 자식 클래스에 상속된 가상 함수 일일이 다 찾아가면서 고쳐야 하잖아요... 그렇지 않으면 버그 있고, 버그 한 번에 보이지도 않고...근데 override를 잘 써주면은 한번 바꾸는 순간 이미 자식에서 컴파일 에러가 날 거기 때문에 그것도 나쁘지는 않은 방법 같네요. 쓰면 쓸수록 더 좋아할 거 같아요 생각해보니깐...
