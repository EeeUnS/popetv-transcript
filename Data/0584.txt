안녕하세요, 포프입니다.

프로그래밍을 하다 보면 이런 얘기 많이 듣죠? Single Point of Truth, SPOT. 굉장히 중요한 원칙이에요. 근데 이런 원칙이 되게 중요하다고 말하면서 가장 근본적인 것들을 까먹는 사람들이 꽤 있는 것 같아요. 특히 git을 사용하면서 정신 승리 하시는 분들.

무슨 얘기냐? git을 사용하기 전에는 일반적으로 사용하는 코드 버전 관리 도구를 보면 모든 게 mono repo였습니다. 회사에 있는 모든 자료는 어떤 폴더에서 시작하는데, 그 안에 폴더가 다양하게 나눠지면서 그 폴더마다 권한을 따로 줘서 복제해서 코드를 고쳐 넣게 하는, 한마디로 전체를 복제하는 게 아니라 일부 partial clone이 가능하게 하는 것들이 있었죠. git이 처음에 기능들을 제대로 추가를 못하면서 오픈소스나 개인 프로젝트 위주로 돌면서 이런 문제들이 많이 생겼어요. 대기업에서 사용하기에는 굉장히 힘든 일이죠. 그래서 그거를 고치겠다고 누군가 제안을 하면 git 커뮤니티에서 정신 승리하시는 분들은 '원래 git은 안 그래. 필요 없는 거야.'라고 하다가 큰 회사들이 git을 사용하기 시작하면서 결과적으로 mono repo를 지원하는 많은 기능이 들어오고 있죠. 하지만 아직 mono repo 지원이 git에서 그렇게 좋지는 않아요. 그래서 여전히, 어쩔 수 없이 여러 가지 긴 repo들을 모아서 사용해야 하는 경우들이 있어요.

'자, 내가 이 일을 하기 위해서는 이 긴 repo A를 복제하고, repo B를 복제하고, repo C를 복제하고, repo D를 복제하고 E, F, G, H를 복제한 다음에 이걸 합쳐서 컴파일해서 이렇게 하면 됩니다.'

그러면 예전부터 제대로 프로그래밍하시던 분들이 이러죠. 

'왜요? 그냥 복제 한번 한 다음에 개발할 수 있는 환경을 주시면 안 되나요?'

'아, 그러기 위해서 저희가 이런 툴을 만들었습니다. 이런 배치 파일을 만들고 뭘 만들고 이거 실행하면 알아서 복제해서 Directory에 넣어주고 하면서 합니다.'

'그렇구나! 그럼, 제가 데스크탑 툴을 지금 만들고 있어요. 자, 이 툴을 쓰면서 여기서 어떤 폴더에 저장해야 하는데요, 이러면 어떻게 하나요?'

'아, 그러면은 config 파일을 만들어서 뭘 넣으면 이 폴더에 저장하고...'

'왜요? 그냥 경로를 정해주면 안 돼요? 저희 회사 프로젝트는 전부 다 C:/A, B, C, D로 시작하면 안 될까요?

'아, 사람마다 기본 경로가 다를 수 있고, 폴더가 다를 수 있고, 용량도 다를 수 있기 때문에...'

'그거 disk junction 따면 되잖아요?'

'네? junction이 뭐죠?'

'symbolic link요.'

'그게 뭔데요?'

그냥 모든 사람이 C:에서 시작한 다음에 그 안에 내부 폴더를 나누고 싶으면 D에 있든 E에 있든 링크를 걸면 실제 C: 해서 들어가면 알아서 E에 있는 파일을 불러오는 방법들이 운영체제에 있거든요? 윈도우에서는 junction이라고 하고 리눅스 가면 symbolic link라고 할 거예요. 그럼 이게 해결하는 게 뭔지 알아요? 여전히 긴 repo를 복제를 할 수도 있어요. 일단 내 컴퓨터에 들어왔을 때는 모든 것들이 정해진 폴더 안에 들어가 있게 하는 게 세팅이 훨씬 쉽습니다. 사실은 배치 파일 하나 돌리면 되는 거예요. 그러면 회사에 있는 모든 직원이 정해진 폴더 구조에서 일을 하게 만들 수 있는 거고요. 그러면 회사 내부에 무슨 툴을 만들든, 어떤 배치 파일을 만들든 config 걱정 없이 그냥 C:에 가면 그게 있어요. '이 툴은 어디에 데이터를 저장할 거야?', '이 툴은 C: 어딘가에 저장을 해.'라고 하면 그 경로를 그대로 찾을 수 있는 겁니다. 한마디로 여태까지 존재하는 그 수많은 이상한 짓, 폴더에 넣고 config 파일을 통해서 다른 파일 폴더에서 읽어오게 하는 것들. 그냥 운영체제에서 symbolic link만 잘 따면 끝나는 일이에요. 그러면 어떤 코드를 작성하든 간에 Single Point of Truth Spot이 나오죠. 뭐냐? C: 어딘가에 가면 그 데이터 있어요. 이제 거기에서 솔루션 열면 돼요. 문서 작성하기도 편해요. 끝이에요. 그리고 나중에 설마 그 폴더 구조가 multi repo로 있다가 single repo로 들어오면서 repo를 몇 개씩 병합하면서 통합이 돼요. 그러면 그 repo 안에 그 폴더 구조만 있으면 그대로 동작해요.

그래서 junction 잡아주는 프로그램 하나 만들고, 복제할 때 버튼 한번 누르면 정해진 위치에 복제되기만 하면 끝나는 거예요. 그러면 프로그램 한번 돌리면 복제 다 해주고 junction도 따주고 실제 딱 정 해진 위치에서 컴파일 및 실행이 되기 할 수 있는 그런 원클릭 복제 개발 환경 설정 솔루션이 나오죠. 이게 사실은 게임 회사에서는 벌써 한 20년 전에도 하던 일이거든요? 근데 왜 이미 대기업 회사에서 잘하고 있던 일들이 왜 갑자기 잃어버린 지식이 되었는지 모르겠어요. 여전히 웹 쪽 회사 가면 mono repo 있으면 한 번 복제해서 끝날 거를 굳이 git 쓰겠다고 이상하게 잘라놓은 것들이 있거든요. 그런 거 보면서 좀 가슴이 깝깝하죠. 깝깝해요.

세상 모든 거는 많은 게 다 mono repo로 들어가는 게 사실 좋기는 해요. 그리고 이거를 지원하기 위해서 여러 가지 방법들이 나오고 있는데, 최근에 그나마 유행하는 거는 git scalar나 git sparse-checkout. sparse-checkout 쪽으로 가고 있는 것 같긴 한데, 나름 단점들이 있지만 점점 그걸로 가긴 할 거예요. 그럴수록 점점 junction을 딸 일이 적어지겠지만, 그래도 여전히 내가 프로젝트를 D:에 넣고 시작하냐, E:에 넣고 시작하냐는 각 컴퓨터 세팅 따라 다른 거거든요? 근데 중요하지 않아요. C:에 윈도우만 깔아주고요. 그냥 무조건 윈도우는 C에 들어갑니다. 그럼, 거기에서 C:/mycompany 들어가면 그게 실제 junction으로 D:로 가든 E:로 가든 설정을 하면 되는 거예요. 그럼, 진짜 junction 따는 프로그램만 신경 써주고, 복제하는 거는 다 C:에 담으면 됩니다. 이거를 하는 순간 모든 사람의 개발 환경이 통합되면서 관리해야 할 것들이 현저히 줄어들어요. 개발하기도 바빠 죽겠는데 사람마다 다른 Directory 구조를 만드는 거를 신경 써요? 그걸 지원하겠다는 것 자체가 말이 안되요. 오픈소스는 이해가 돼요. 많은 사람과 다양한 개발 환경이 들어오니까. 회사에서는 의미가 없어요. 회사에서는'딱 정해진 구조 안에 맞춰서 하세요'라고 하는 게 모든 사람한테 편안합니다. 가장 일도 적고요. 우리가 언제나 '코드 중복 막겠다' 이렇게 얘기하죠? 그 자세를 업무 환경 설정에도 가져가면 이런 식으로 junction을 사용해서 업무 폴더, 회사 모든 폴더 통합된 폴더 안에 넣는 방법을 이제 할 수가 있습니다.

사실 옛날에 single repo, mono repo 쓸 때보다 여전히 해야 할 일은 많아진 상황이긴 한데 이것은 git이 좀 더 고쳐주길 바라고요, 실제 그 방향으로 가고 있고, 관련된 얘기도 언젠가 한 번은 언급하게 되겠죠?

포프였습니다.