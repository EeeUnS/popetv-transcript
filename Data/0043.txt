to a
으
예 안녕하세요 포프 입니다 아 오늘은
이렇게 데이 torent 드
디자인이라고 했었나요 그 k 터 주도 설계 방법
아 뭐 이거에 개념은 스
아시는 분은 다 아실 텐데 그게 그렇게 다른 건 아니에요 말 그대로
뭐냐면
그냥
지금 여태까지 저희가 쓰는 이제 뭐 개체 지향 적 방 시선은 한 객체가
뭐 함수 하고 데이터를 모두 다 포함하고 있고 그 안에서 일어나는 일은
그 개체 아라가야 알아서 해결한다 이 개념이기 때문에 그 안에 뭐
데이터를 들여다 보면 뭐 데이터가 순서대로 되어 있다가 더 갑자기 뭔
메모리얼 로케이션 해야하고 포인터로 딴거 뭐 아
p 하기도 하고 그래서 메모리에서 그 데이터를 봤을 때 이 데이터가
일률적으로 저장이 되어 있지 않고 중간에 업체 포인터가 있으니까 다른
메모리를 가리킬 수 있다
이런
게이지 a 오브젝트 오리엔트 프로그래밍 쪽 액
뭐 기본이라고 할 순 없고 오브제 토렌트 프로그래밍
그렇게 저희가 보통 쓰는 방법이죠 내 이제 이거에 문제점이 됐던 게
사실은 ps 둘이 개발하면서 피해 스토리가 이제 뭐 spu 라는 특별한
프로세스를 돌리면서
이게 멀티 트레이딩을 돌리기 위해서는 말 그대로
잡기 시스템을 만들어서 포인터 연산이 거의 안 되는 그런 아키텍처가
나왔었거든요
그래서 점사 멀티 트레이딩을 제대로 돌리려면 은 아무래도 뭐 굳이 ps
2위 많이 아니라도
메모리에 말 그대로 제가 원하는 데이터가 일률적으로 쫙 들어 있는게 좋긴
좋아요
이제 멀티 스레딩 한창 저희가 시작할 때 이제 2005년 2006년 때는
여러가지 방법이 많았어요
그냥 말그대로 포인터 그냥 뭐 참조해 갖고 연탄 않은 경우도 있었고
아니면 멀티 웨딩 돌 이거만 아 데이터를 다시 복사해서 다른 구조체 그
데이터 일률적으로 개발 된거 를 거기지 멀티 라면 돌리다 던가 아니면 은
아 처음부터 구조 자체를
다 뜯어 고쳐서 오브젝트 온라인 tv 프로그램에 도저언 있었던 뭐 포인터
이렇게 가리키고 이런 것들 그런 것들을 처음부터 빼서 아이 데이터를
확실하게 일률적 으로
아
아 한국 내가 메모리 메모리에
순차적으로 들어가게 그렇게 하자 이렇게 나온 것도 있었구요 그게 이제
저희가 흔히 말하는 데이터 oem 디자인 쪽에 컨셉 이에요
이게 사실은 pst 가 나오면서 조금씩 다시 각광을 받기 시작했던 거고
그 전에는 c 에서는 당연히 이렇게 썼구요 그때는 뭐 절차적 프로그래밍
했기 때문에 스트럭처 구조체에 대해 당 놓고 여기에 함수 있으면 그 모그
함수로 육체 실행을 시킨다
이제 오브젝트 오렌 필드 프로그래밍 하고
데이터 t 오리엔 티드 디자인하고
이게 전혀 상반되는 개념은 아니에요 서로 공유할 수 있는 개념 이긴 한데
이것을 피해 프리트 저도 예단 써봤고
부르고 그 뒤 dc 에서 아 맞 재작년인가 그때 이제 새로 게임은 지금
만드시는 분이 있었어요 수배된 사람들이었는데 어디 주신 사람이 모르게
나와서
자기를 게임인지 만들면서 여러가지 그 플랜테이션 했죠 아무래도 회사 광고
겸 와 엔진과 목 0
그때 지나왔던 가나가 데이터 오랜 디자인 이었고 다음 과다가 이제
스크립트로 이제 랜더링 패스 초조 라는거 고 2개 였는데
뭐 덜 수도 있어 제가 기억나 먹고 투 개요
근데
요즘들어 생각하는 것은 과연
이게 좋은 방법인가 생각은 들어요 왜냐면 전 저 개인적으론 단순한 걸
좋아해서 그런 구조도 상당히 좋게 보거든요 메모리 모
억세스 도 빠르고 이것저것 하게 되 게 편하니까
그런데 이게 좀 문제가 되는 뭐냐면
저희가 csc 포플러 넘어 온 이유가 있어요 사실은
아무래도 객체 적으로 생각하는 게 좀 더 생각하게 편하고
그렇게 게임 플레이는 오직 짜거나 이럴때도 뭐 이것저것 아무거나 대충
던져놓고 막 이것저것 할 수 있는 거 그런 자유도 있구요
뭐 상속 이런 것도 굉장히 편하고 이런 저는 자유가 있었죠
네 이제 그게 이제 멀티 스레딩 에 그다지 적합하지 않을까 돌아가려고
하는 거 그리고 특히 ps 들에 의해 그 메인 cpo 전혀 상반된
모습이었 sbu 에서 이제 곧바로 포인터 참조가 안 되니까 그걸 해결하기
위해 했던거
그런게 크 뭔데
과연 필요한가
개인적으로는 저는 아직도 웬 전인 엔진 쪽에서 좀 써요 왜냐하면 중엔
왼쪽은 사실은 게임으로 찌기 어떻게 바뀌던 간의
왼쪽엔 중 상당히 똑같아 언제나 뭐 매쉬 받아서 못 본 매트릭스 받아서
애니메이션 데이터 받아서
뭐 곱해 주고 뭐 하고 뭐 각 쉐이더 블랑 마다 컨서트 배치해 주고
이런게 상당히 딱 정해져 있어야 전형적으로 그래서 이거는 제가 데이터 스
츠 따로 만들어서 거기에 이렇게 집어 놓더라도 바꿀 일도 많지 않고 실제
그 데이터 스트럭처 를 사용할 사람도 많지가 않아요 기껏 에렌 저에겐
전념하던 뿐이지
근데 이게 정말 만에 게임 로직 쪽으로 가버리면 게임플레이 쪽이 상당히
엔지니어가 수가 많아야 되는 부분이거든요 왜냐하면 은 게임기획 계속
바뀌죠
게임 미래가 바뀔 수밖에 없잖아요 게임이 재미있어 진다 몇번이나 바꿔야
되니까
그러면 프로그램 내부도 바뀌고 뭐 하는데 그럴때마다 상당히 수 많은
프로그래머가 그 데이터 스쳐 혀를 관 드리게 돼 있어요
근데 아무래도 오디오 뒤쪽 디자인의
쉽게 망가지지 가 편해요 그럼 최 아무래도 그런 제약 적이 있는 거잖아요
프로그래밍 언어 자체에서 제약을 하는게 아니라 우리는 그 컨셉 적으로
개념적으로 이런 이런 이런 제안을 넣어서 포인터 참 좋아 나게 해야 된다
제가 그걸 왜 늘 끝내면 옛날에 야구 게임 만들 때 그 mlb 2k 만들
때 아 저희 그 세이브드 담당하는 팀이 있었어요 그야 맞아 생각했는지
프론트엔드 팀 그 ui 팀에서 세이브 로드 까지 담당 했었는데 제가
게임을 하다가
그러니까 아까 세이브 로드 파일은 말 그대로 데이터 오렌즈 디자인처럼
스트러츠 다 집어넣고 그걸 한 번에 다 저장하는 방식 이었어요 그게
편하니까
근데
재밌었던 게 제가 이제 게임 출시를 한 한달 반 앞두고
이제 그 커리어 모드 라고 있잖아요 그걸 했어요 근데 보통 게임 qa
하시는 분들은 그거를 빨리빨리 넘겨서 이제 하루만에 테스트하고
버그 작 이런걸 하시던데 저는 개나 출발해서 한 거죠 네 마지막 챔피언십
하기 전에 언제나 게임이 뻑이 나요 제 맞춰 걸려 했는데 그래서 걔한테
이거 보냈어요 왜이러냐
그러니까 걔네가 보더니 하는 얘기가 아 이걸로 일단 세이브를 하면 은
로딩을 해올 때 그 무슨 포인터가 1 이 때 실수로 포인터를 집어
넣었다는 거에요 그니까 뭐 이렇게 잘 데이터 있다가 누군가 한 명이 뭘
했다는 데이터를 저장해야 되는데 그냥 이 데이터를 복사해서 메모리 카피를
해 놓은게 아니라 포인터 메모리 주소를 저장해 놓은 거에요 그래서 그걸
보다 데 쓴 거죠
나중에 하되 더 읽어 봤을 때 이 포인터가 가르키는 위치는 메모리에서
이미 예전에 쓴 포인트 위치가 아니니까
그게 나갔던 거더라구요 즉 고런 것들의 문제가 생길수가 있어요
문제가 생길 때마다 생각보다 쉽게 안잡히는 경우도 있고요 왜냐하면 메모리
참조를 엉뚱한 대해서 엉뚱한 데를 덮었으며 는 그것 때문에 이제 뭐
클래식의 딴데서 나는 경우도 있고 그래서 뭐 물론 방지하는 먹으면
있을텐데
방지 이라기 보다는 좀 잇걸 잘 차려 내가 이렇게 쉬운 방법이 있을텐데
와 용 게임 플레이 팀에서 까지 이거를
기본적으로 쓸 정도의 가치가 있나 오락 제약도 심해 주고
좀 사용하기도 복잡해 지는게 있고 또 다른거 하나 이제 차세대 콘솔 들이
sp 이런거 없어요 그냥 다 일반적인 cpu 아키텍쳐 갖고 지금까지 쓰던
cpu 아키텍처 포인터 역삼 주다 되는거고
크 래 서 제가 생각하기에는 말 그대로 독립적인 작업 태스크 로 나올 수
있고 그런 아니면 아예 그냥 뭐 게임이 바뀌는 말든 간에 잘 바뀌지 않는
내부적인 9 줘 뭐 렌더링 쪽 더욱 좋은 예 구요 오디오스 일처리를 것도
좋은 내고
그런건 데이터 oint 디자인이 들어가는 건 나쁘지 않다고 봐요 아무래도
멋 un 올릴때 성능 최대로 뽑을 수 있고
그 코드 베이스를 만지는 사람 수도 굉장히 제한적일 거구요
근데 정말 말 그대로 여러 사람 프로그램의 해야되고 게임플레이
프로그래머들이 굳이 뭐 시스템적 인걸로 자세히 알아야 한다고 생각하지도
않고요 당장은
그래서 그런 데까지 너무 확정 돼서 일반적으로 사용 하려고 하는건 조금
뭐 하지 않나 오히려 그것 때문에 낭비하는 시간이 더 많지 않을까 그런
생각을 해요
그리구 뭐 참 그래 너무 게임이 느려진다 그러면은 그 부분에 대해서는
따로 또 그렇게 뭐 최적화한 법도 있긴 할텐데
어떤 의미에서는 데이터베이스 디자인 자체가 이제
넘어서 푸른 최적화 수도 있기 때문에
초 개인적인 입장에서는 엔진 쪽에서 좀 쓸 수도 있지만
게임 플레이로 옆쪽에 하면 정말 필요하게 전까지는 좀 피하는게 좋다 라는
게 현재 제 생각이에요
뭐 제가 데이터그램 디자인 자체를 게임플레이 쪽에서 이렇게 더럽게
써본적이 없기 때문에
2005년도에 학교에서 한번 프로젝트 모아 제출할 때 2006년 이구나
그때 컴포넌트 기반 게임 오브젝트에 만드는 거 있잖아요 그때 당시
나왔던거 그거로 쫙 실험하면서 그걸 만들면서 컴포넌트 단위로 들어가기도
뭐 어쩔 수 없이 데이터 ont 디자인이 나왔던 적이 있거든요
그러고 때에 항구 이유로는 제가 크게 회사에서 게임플레이 쪽이 걸
해본적이 없어요 그래서
정말 이게 도움이 되는 지점에 제 생각으로는 그다지 도움이 안 될 거라
생각 밖에 없네요
아 뭐 혹시라도 뭐 아시는 분 게임플레이 쪽에서 보하고 정말 괜찮았다
라던가 정말 안좋았다 라던가 이런 경험이 있으신 분들은 저한테 뭐 유튜브
이렇게 커 멘트로 달아주시면 제가 다시 생각을 또 해볼게요
예 포 피었습니다 으
으
a
으
wool 으
으 으
으
