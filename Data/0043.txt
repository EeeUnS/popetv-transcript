예 안녕하세요
포프입니다
오늘은
Data-Oriented Design 
이라고 했었나요
데이터 주도....설계 방법
이것의 개념은
아시는 분들은 아시텐데
그게 그렇게 다른건 아니에요
말 그대로 뭐냐면
그냥
지금 여태까지 저희가 쓰던 뭐
객체지향적 방식에서는
한 객체가 뭐
함수하고 데이터를 모두 다
포함하고 있고
그 안에서 일어나는 일은
그 객체가 알아서 해결한다
이 개념이기 때문에
그 안에 뭐
데이터를 들어다보면은 뭐
데이터가 순서대로 되어있다가도
갑자기 memory allocation
해가지고 포인터로 딴거 뭐
포인팅 하기도 하고
그래서
그 메모리에서 그 데이터를 봤을 때
이 데이터가 일률적으로 저장이 되어있지 않고
중간에 갑자기 포인터가 있으니깐
다른 메모리를 가리킬 수 있다
이런.......게
Object-Oriented Progamming쪽에
기본이라고 할 수 없고 Object-Oriented Progamming 
그렇게 보통 저희가 쓰는 방법이죠
이거에 문제점이 됬던게 사실은 
ps3 개발하면서
ps3가 뭐 SPU라는 특별한
프로세스를 돌리면서
이게
멀티스레딩을 돌리기 위해서는 말 그대로
job 시스템을 만들어서 
포인터 연산이 거의 안되는 그런 아키텍처가 나왔거든요
그래서 거기서 멀티스레딩을 제대로 돌리려면은
아무래도 뭐 굳이 ps3만이
아니라도
메모리의 말 그대로
제공한 데이터가 일률적으로 쫙 들어있는게 좋긴 좋아요
그래서 멀티스레딩 한참 저희가 시작할 때 2005년, 2006년 때는
여러가지 방법이 많았어요
그냥 말 그대로
포인터 그냥
참조 해가지고 연산하는 방법도 있었고
아님 멀티스레딩 돌리거만
데이터를 다시 복사해서 
다른 구조체에
그 데이터가 일률적으로 된 것을
거기 멀티스레딩 돌린다던가
아니면은
처음부터
구조 자체를
다 뜯어고쳐서
Object-Oriented Progamming에서 저희가 흔히 썼던
뭐 포인터 가리키던 이런 것들
그런 것들을
처음부터 빼서 아예 데이터를
확실하게 일률적으로
한군데
메모리에 순차적으로 들어가게
그렇게 하자
이렇게 나온것들도 있었고요
그게 이제 저희가 흔히 말하는 
Data-Oriented Design 이쪽의 컨셉이에요
이게 사실은
ps3가 나오면서 조금씩 다시 각광을 받기 시작했던거고
그 전에 C에서는 당연히 이렇게 썼고요
그때는 뭐 절차적 프로그래밍이였기 때문에
structure 구조체에 데이터 넣어놓고
여기 함수 있으면
그 함수를 이 곳에 실행을 시킨다
이제 Object-Oriented Progamming하고
Data-Oriented Design하고
전혀 상반되는 개념은 아니에요
서로 공존 할 수 있는 개념이긴한데
이것을
ps3 때 저도 약간 써봤고
그리고
GDC에서 아마
재작년인가
그 때 이제 새로 게임 엔진 만드시는 분이 있었어요
스웨덴 사람들이였는데
어디 출신 사람들인지는 모르겠는데 나와서
자기네 게임 엔진 만들면서
여러가지 프리젠테이션 했죠
아무래도 회사 광고겸 엔진 광고겸
그 때 나왔던 하나가 Data-Oriented Design였고
다음거 하나가 스크립트로 Rendering  path 조절하는거
고 두개였는데
더 있을 수 도 있어요
제가 기억나는건 그 두개에요
근데
요즘 들어서 생각하는 것은 과연
이게 좋은 방법인가 생각은 들어요
왜냐면 저 개인으로는 단순한걸 좋아해서
그런 구조도 상당히 좋게 보거든요 
메모리
엑세스도 빠르고
이것저것 하기 편하니깐
근데
이게 좀 문제가 되는게 뭐냐면
저희가 C에서 C++로 넘어 온 이유가 있어요 
사실은
아무래도
객체적으로 생각하는게 
좀 더 생각하기 편하고
게임 플레이 로직 짜거나 이럴때도
이것 저것 아무거나  대충 던져놓고
막 이것 저것 할 수 있는거
그런 자유도 있고요
뭐 상속 이런것도 굉장히 편하고
이런 저런 자유가 있었죠
그게 이제
멀티 스레딩에 그다지
적합하지 않으니깐 돌아가려고
하는 거
 특히 ps3에
그 메인 CPU하고 전혀 상반 된 모습이였던 SPU에서
곧 바로 포인트 참조 안 되니깐
그건 해결하기 위해 했던거
그런게 큰건데
과연 필요한가
개인적으로는 저는 아직도 렌더링 엔진쪽에는 써요
왜냐면 렌더링 엔진쪽에는 
사실은 게임 로직이 어떻게 바뀌던간에
렌더링 엔진쪽은 상당히 똑같에요
언제나 mesh 받아서
bone matrix 받아서
애니메이션 데이터 받아서
뭐 곱해주고 뭐하고 
뭐 각 쉐이더
블럭마다
컨설트 패칭 해주고
이런게 상당히
딱딱 정해져있어요
전형적으로 그래서 이것은
제가 데이터 structure를 따로 만들어서
거기 집어넣더라도
바꿀 일도 많지 않고
실제 그 데이터 structure를 사용할 사람도 많지가 않아요
기껏해야 렌더링 엔지니어 몇명 뿐이지
근데
이게 정말 게임 로직쪽으로 가버리면
게임 플레이쪽이 
상당히 엔지니어 수가 많아야 되는 부분이거든요
왜냐하면은 기획 계속 바뀌죠
게임 기획은 바뀔 수 밖에 없잖아요
게임이 재미있어 질려면 몇 번이나 바꿔야 하니깐
그러면 프로그램 내부도 바뀌고
뭐 하는데
그럴 때마다 상당히 수많은
프로그래머가 그 데이터 structure를
건드리게 돼 있어요
근데
아무래도 DOD쪽 디자인이
쉽게 망가지기가 편해요
그런게
아무래도 그런 제약적인게 있는거잖아요
프로그래밍 언어 자체에서 제약하는게 아니라
우리는 그
컨셉적으로 개념적으로 
이런 이런 제약을 둬서
포인터 참조를 안하게 해야한다
제가 그걸 왜 느꼈냐면은 옛날에
야구 게임 만들 때
MLB 게임 만들 때
저희 save/load 담당하는
팀이 있었어요
프론트엔드 팀
UI팀에서 save/load까지 담당했었는데
제가 게임을 하다가
save/load 파일은 말 그대로
Data-Oriented Design처럼 
structure에 집어넣고
그걸 한 번의 저장하는 방식이었어요
그게 편하니깐
근데
재미있었던게 제가 이제 게임
출시를 한 달 반 앞두고
이제
그 커리어 모드라고 있잖아요
그걸 했어요
근데 보통 게임 QA 하시는 분들은 
그걸 빨리 빨리 넘겨서 하루만에 테스트하고
버그 잡기를 하시는데 저는 그냥 몇일 걸려서 한거죠
근데 마지막 챔피언쉽 하기 전에 언제나 뻑이나요
제가 몇일 걸려서 했는데
그래서
개네한데 이걸 보냈어요
왜 이러냐
그러니깐
개네가 보더니 하던 애기가
아 일단 save하면은 loading 해 올 때
그 무슨 포인터가 하나 있데요 
실수로 포인트를 집어 넣었다는거에요
그러니깐 뭐 잘 데이터 있다가
누군가 한 명이
뭐를 다른 데이터를 저장해야 하는데
그냥 이 데이터를 복사해서 
메모리 카피를 해놓은게 아니라
포인터 그러니깐 메모리 주소를 저장해 놓은거에요
그걸 그대로 하드에 쓴거죠
나중에 하드에서 읽어 왔을 때 
이 포인터가 가리키는 위치는 메모리에서
이미
예전에 쓰던 포인터 위치가 아니니깐
그게 날라갔던거 더라구요
그런 것들의 문제가 생길 수가 있어요
문제가 생길 때마다
생각보다 쉽게 안 잡히는 경우도 있고요
왜냐하면
메모리 참조를 엉뚱한 곳에 해서 
엉뚱한 곳에 덮어쓰면은
그것 때문에 뭐 crash가 딴 데서 나는 경우도 있고
그래서 뭐 
방지하는 방법이 있을텐데
방지라기보다는 
이걸 잘 찾아내기 쉬운 방법은 있을텐데
과연 게임 플레이 팀에서까지 이것을
기본적으로 쓸 정도로 가치가 있나
워낙 제약도 심해지고
좀 사용하기 복잡해지는 것도 있고
또 다른 것 하나는 차세대 콘솔들이
SPU 이런거 없어요
그냥 일반적인 CPU 아키텍처여가지고
지금까지 쓰던 CPU 아키텍처 포인터 역참조 다 되는거고
그래서 제가 생각하기는 말 그대로
독립적으로 작업 task로 나올 수도 있고
그런
아예 뭐 게임이 바뀌던 말던간에 
잘 바뀌지 않는 내부적인 구조
뭐 렌더링쪽도 좋은 예시고요 
오디오 필터링도 좋은 예시고
그런 건 Data-Oriented Design이 들어가는 건 나쁘지 않다고 봐요
아무래도 멀티스레딩 돌릴 때 성능을 최대로 뽑을 수 있고
그 코드 베이스를 만지는 사람들 수도 굉장히 제한적일거고요
근데
정말 말 그대로
여러 사람 프로그래밍해야 되고 게임 플레이
프로그래머들이 구지 뭐 시스템적인것을
자세히 알아야 한다고 생각하지 않고요 당장은
그래서
그런데까지 너무 확장되서 
일반적으로 사용하려고 하는 것은 조금
무모하지 않나
오히려 그것 때문에 낭비하는 시간이 많지 않을까
그런 생각을 해요
그리고
정 그래도 너무 게임이 느려진다고 그러면
그 부분에 대해서 따로 또 그렇게 뭐 
최적화하는 방법이 있기는 할텐데
어떤 의미에서는 Data-Oriented Design 자체가 이제
너무 섣부른 최적화 일 수 있기 때문에
저 개인적인 입장에서는
엔진쪽에서는 좀 쓸 수도 있지만
게임 플레이 로직쪽에는
게임플레이를 중단한
정말 필요하기 전까지는 좀
피하는 게 좋다라는 게
현재 제 생각에
뭐
제가 Data-Oriented Design 자체를 게임 플레이쪽에서 넓게 써본적이 없기 때문에
2005년도 학교에서 한 번 프로젝트 뭐 제출 할 때
2006년도구나
그 때
컴포넌트 기반 게임 오브젝트 만드는거 있잖아요
그 때 당시 나왔던거
그것을 약간 실험하면서 그걸 만들면서
컴포넌트 단위로 들어가기 때문에 어쩔 수 없이 
Data-Oriented Design 나왔던 적이 있거든요
그 때 한거 이후로는 제가
크게 회사에서 게임 플레이쪽에 이걸 해본적이 없어요
그래서
정말 이게 도움이 되는지에 대해서는 
제 생각으로는 그다지 도움이 안 될거라는 
생각밖에 없네요
뭐 혹시라도 아시는 분
게임 플레이쪽에서 써봐서 정말 괜찮았다던가
정말
안 좋았다던가 이런 경험 있으신 분들은
저한테 youtube comment(댓글)라도 달아주시면 
제가 다시 생각해 볼게요
예 포프였습니다
