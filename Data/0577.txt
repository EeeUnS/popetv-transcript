안녕하세요, 포프입니다.

함수명 짓는 거 꽤 어려운 일이에요. 하지만 함수명을 지을 때 함수 내부에 있는 코드들, 그 연산이 뭔지에 따라 그대로 함수명을 지으신다면 당신은 주니어일 겁니다. 일단 한 가지 예를 들어가면서 설명을 해드릴게요. 이거 실제로 봤던 예이기도 한데, 일단은 가장 명확하게 보여줄 수 있는 것 같아서 그 예를 가져왔어요.

어떤 함수가 있어요. 이 함수 내부를 보니까 User Account가 생성된 지 7일 미만이면 true를, 7일이 넘었으면 false를 반환하는 함수예요. 아주 멋있게 지어놨어요. IsUserCreatedWithIn7Days. 이거의 문제가 뭘까요? 첫째, 이렇게 간단한 코드라면 아예 함수를 만들지 말고 차라리 실제 코드를 작성하는 게 좋을 것 같다는 것도 있고 둘째, '7일이 아니라 5일을 알고 싶으면 어떡하지? 그러면 차라리 날짜를 매개 변수로 받는 게 낫지 않을까?' 이런 고민을 할 수도 있어요. 하지만 이 함수가 왜 생겨났는지부터 일단 고민을 해야겠죠? 이 함수를 사용하는 것을 보니 이런 거예요. 일반적으로 이 시스템에서 구매가 되는 게 특정한 날짜에만 구매 페이지를 열어주는 게 있어요. 근데 만약 새로운 유저가 왔다면 그 유저는 그 특정한 구매 날짜 마지막에 들어갈 수도 있으니까 '며칠 동안 유예기간을 줘서 구매를 가능하게 만들어주자'는 로직이었습니다.

여기 문제가 뭘까요? 함수 내부에서 코드를 보면 이게 뭐 하는 건지, 왜 있는 건지 모르겠다는 거죠. 아까 말했던 '이렇게 고쳐야 하지 않을까?' 이상한 생각을 했던 것처럼. 근데 결과적으로 함수 호출자 입장에서 봤을 때는 이거예요. 그냥 '이 유저가 새로운 유저냐?'. 그 새롭다는 거는 하루도 있고 이틀도 있고 3일도 있고 4일도 있고 5일도 있어요. 근데 새롭다는 개념, '가입한 지 7일 동안의 유저를 새 유저로 본다'라는 도메인 지식이거든요? 그 도메인 지식을 함수에 차라리 적용해야 한다는 거죠. 그러면 함수 이름이 IsNewUser면 말이 돼요. 그럼 나중에 그 로직을 여러 군데 사용할 때, '이 사람이 우리 회사에서 정의하는 새로운 유저에 속하냐? 그 새로운 유저면 이런 이런 예외를 줘야 한다.' 그럴 땐 이 함수를 호출하면서 새 유저, 새 유저, 새 유저 하면 끝나는 거거든요. 근데 나중에 다른 데서 코딩을 작성할 때 누가 지시를 했어요. '야 새 유저한테 이거 하게 해줘' 근데 아무리 코드를 뒤져봐도 새 유저를 판단하는 기준이 없는 거예요. 그냥 Is7Days만 있는 거예요. 그러면 Is7Days 뭐 하는 거지? 한마디로 함수 내부를 보면서도 '이게 왜 있는 거지?' 고민을 하게 되고 함수 외부에서 얘를 사용하려고 해도 과연 얘를 제대로 사용하는 건지 모른다는 거죠. 이게 바로 Domain Driven Design 쪽에서 말하는 '도메인 언어를 함수 안에 넣어라'는 얘기하고도 사실 일맥상통하고요, 이보다 더 큰 문제는 뭐냐면 함수라는 거는 코드 재활용성을 의미하는 거예요. 코드 재활용성이 유지가 되려면 함수를 사용하는 사람, 함수 호출자. 그 호출자가 명백하게 이 함수가 뭐 하는지 알고 호출할 수 있어야 하는 겁니다. 근데 7일이든 8일이든 그 로직을 따로 뽑아낸 거는 좋아요. 왜냐하면 그게 나중에 5일로 바뀌고 4일로 바뀌고 3일로 바꿨을 때 그걸 바꾸면 되거든요. 근데 모든 곳에서 이게 새 유저를 의미하는 함수, 그걸 Is7Days만 보고서 그걸 알고 제대로 호출했을 거라는 보장이 없죠. 그래서 코드에는 중복된 코드가 여러 군데 있을 수도 있어요. 함수 내부에서 여러 가지 일을 하는 것들은 DB의 데이터가 어떻게 저장되어 있냐? DB에 저장되는 데이터는 효율성을 위해 저장하기 때문에 도메인 쪽에 있는 데이터 하고는 많이 다를 수가 있어요. 그걸 잘 뭉쳐서 결과를 보여주는 게 함수일 뿐이에요. 내부 데이터가 어떻게 저장되어 있는지를 밖에서 알 필요는 없는 겁니다. 그렇기 때문에 내부에 있는 코드 갖다가 함수 이름 지으면 편하죠. 왜냐하면 그냥 코드를 보고 그거 따라 짓는 거기 때문에. 

함수 이름에 가끔 보면 and 아니면 or 이런 거 들어가는 거 있죠? 일반적으로 이거는 나쁜 함수 이름일 가능성이 높아요. 그래서 코드 리뷰하다가 and나 or 보시면 일단 무조건 인상 찌푸리고 고민하시는 리뷰어들이 많거든요? 이런 이유예요. and, or를 넣는 순간 아마도 내부적으로 있는 연산을 그냥 나열해 놓았을 뿐이고, 이 연산이 어떤 결과를 주는지 호출자, 사용자의 입장에서 가지는 의미는 전달해 주지 못하는 거죠. 그래서 나중에 호출자가 이 함수를 재활용할 가능성이 현저히 적어진다는 겁니다. 호출자를 위해서 함수 이름을 못 짓는 사람들 예전에 여러 번 얘기해 왔어요. 역지사지가 안 되고 남의 입장에서 생각을 못 하시는 분들이에요. 결과적으론 남을 위해서 뭔가를 적어주지 못하는 사람, 예전에 그런 얘기 한 적 있죠. '문서를 잘 적지 못하면 당신은 주니어다' 같은 기본 되는 아이디어가 적혀 있는 거예요. 코드를 열심히 작성했어요. '이걸 사용하는 사람을 위해 나는 멋있게 이름을 요약해 줘야지' 글 요약이랑 뭐가 달라요? 그걸 하는 거예요. 그래서 이게 돼야지만 함수가 재활용할 가능성이 높아지고 유지보수 비용이 낮아집니다. 이거를 못 한다면 일단은 내가 제대로 스펙을 이해하지 못하고 있어서 용어를 못 만드는 거거나, 아니면 용어를 만들었을 때 누군가에게 틀렸다는 지적을 받기 싫어서 '틀린 거 아니잖아요? 이 내부 연산이 이렇게 돌잖아요'라고 우길 수도 있어요. 근데 이렇게 해봐야 어쨌든 욕은 먹습니다. 별 차이는 없고요, 결과적으로 잘 생각하세요. 함수 이름을 짓는다는 거, 매개 변수 이름을 짓는다는 거. 이건 함수 내부를 밖에 빼주는 게 아니에요. 이미 몇십 년 전부터 해왔던 Black Box Testing 이런 거에서도 얘기를 해와요. '내부의 연산을 바꿔서 알 필요는 없다' OOP의 무슨 원칙과 되게 비슷하죠? 그거 다 사실은 함수 시그니처부터 시작해야 하는 겁니다. 그래서 함수 시그니처 못하시는 분들이 OOP를 잘할 리 없고요, 함수 시그니처부터 훈련하세요. 함수명은 내부 연산이 보여주는 함수명이 아닙니다. 외부에서 호출할 때 그 사람한테 어떤 의미가 있는지를 알려주는 게 함수명입니다.

이번에 들어드린 예는 굉장히 단순한 예지만 실제 코드를 보다 보면 주니어에서 못 벗어나고 계시는 분들, 그분들이 작성한 코드를 보면 '이 함수가 도대체 뭐 하는 거지?' 내부 가보면 '내부에서 이걸 하고 있구나 그건 알겠어. 근데 이게 무슨 의미지?' 하는 것들이 많아요. 그럴 바에는 함수를 안 만드는 게 나을 수도 있는 거예요. 근데 함수 안 만들자니 욕먹으니까 함수 만들고 이렇게 되는 거고. 만약에 이렇게 욕을 먹으시는 분 중에 자기가 나아질 생각을 안 하시는 분들은 그때부터 그냥 함수를 안 만들기 시작해요. 그리고 코드가 복붙이 되기 시작해요. 그래서 '코드 복붙 해갖고 하면 주니어다'라는 얘기 많이 듣죠? 그거나 함수명 잘 못 만드는 거나 똑같은 거긴 해요. 어쨌든 못하기 때문에 그걸 피하면서 코드 복붙하시는 분들 되게 많아요. 한 번 복붙 해봐야 새로운 코드가 나왔는지 안 나왔는지 리뷰를 보면서는 알 수 없는 경우들이 많아요. 코드가 6개월 만에 한 번 중복이 되면 리뷰 보는 사람은 옛날 코드가 어딨는지 모르니까 보면서 그걸 못 찾아낼 수 있거든요? 그래서 통과되는 경우들이 많아요. 근데 나중에 코드 중복을 찾으면 그제서야 '이거 복붙하면서 함수를 안 만들었구나'라는 문제가 보이기 시작하고 나중에 딴지가 들어가는데, 이걸 숨기려는 식으로 그렇게 코딩해 온 사람들이 잘할 리는 없거든요. 그래서 이게 걸리고 '함수 만드세요' 함수 이름을 못 만들어서 '이름은 너무 못 만들었네요. 제대로 지어주세요'. 그럼 또다시 슬쩍 숨기고 함수 안 만들고 복붙하기 시작하고 이렇게 왔다 갔다 하다가 일반적으로 좀 안 좋게 끝나는 경우도 많습니다. 그래서 주니어급은 벗어나야 그래도 회사에서 기술적으로 괜찮게 쓸 수 있는 인재가 되는 거예요. 이게 안 되면 앞에서 말했던 뒤늦게 발견되는 여러 가지 문제점들이 생길 수가 있죠.

그래서 오늘 하려고 했던 말은 뭐냐면 함수 이름 지을 때는 함수 내부의 연산을 따라 짓는 게 아니라 함수 '호출하는 사람한테 이 결괏값이 무슨 의미를 가져다주냐?' 그리고 '얘를 호출하면 어떤 결괏값을 받을 수 있다'라는 걸 알려주기 위해 함수명을 짓는 겁니다.

이 정도면 요약은 된 것 같죠? 포프였습니다.