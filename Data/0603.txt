안녕하세요, 포프입니다.

제가 사용하고 있는 코딩 표준에 대해 줄줄이 비디오를 만들고 있습니다. 이건 제가 결정을 책임질 수 있는 회사에서 사용하는 코딩 표준이고, 일부는 제 웹사이트에 공개가 되어 있고, 일부는 회사 내에 문서로만 돌아다니는 부분도 있습니다. 이걸 따르지 않으면 그 회사의 코드가 빌드가 안 되거나 테스트가 실패해서 배포가 안 되거나 하는 일들이 발생하고, 이것과 별개로 제가 코딩 표준을 결정하지 않는 회사하고 일하고 있다면 저는 당연히 그 회사의 코딩 표준에 맞게 언제나 코딩하고 있습니다. 그래서 개인적인 코딩 표준이 있는 건 좋고 자기만의 습관이 뚜렷하게 있는 건 좋지만, '어떤 순간에도 어떤 코딩 표준도 유연하게 반영할 수 있어야 전문 프로그래머'라고 저는 생각합니다.

오늘 얘기할 건 되게 간단한 건데, TODO. 뭐 해야 하는 거 주석 다는 방식. 내가 어떤 코드를 작성할 때 완성이 안 된 게 있다면 최소 못해도 코드에 TODO 주석을 박아야 하는 게 원칙이에요. 아니면 일감이 나오던가. 근데 일감을 만드는 것보단 TODO를 박는 게 훨씬 더 빠르고 쉽기 때문에, 안 박을 이유는 없는 거예요. 이걸 안 박고 있다? 그러면 은근슬쩍 폭탄 집어넣으면서 모른 척하고 '남이 똥 치워주겠지' 하고 있는 마음가짐이라 생각합니다. 그래서 이런 경우 TODO 안 박고 넘어가는 개발자는 일단 저는 굉장히 안 좋게 보고요, 많은 회사에서도 굉장히 안 좋게 봅니다.

TODO를 넣을 때 저희는 완벽히 정해진 규칙이 있어요. 이 규칙에 벗어나는 TODO는 테스트에서 실패하게 만들어 놨어요. 어떤 거냐? '// TODO:' 이게 기본형. 그리고 또 다른 변형은 '// TODO(정보): '. 이 정보에는 담당자 이름이 들어갈 수도 있고, 어떤 특정 분야 이름이 들어갈 수도 있고, 어떤 날짜가 들어갈 수도 있어요. 저희 TODO가 다양한 포맷이 있는데, 이렇게 합쳐졌던 이유가 일단 이 대문자 소문자 제대로 안 넣는 사람들이 문제가 웬만한 IDE는 지금 말했던 TODO를 따로 분석해서 별도의 창에 '이거 해야 한다.'는 식으로 보여줘요.

그래서 '자동으로 해주는 걸 개판 치지 말자.'. 첫 번째가 이거고, 두 번째는 저희가 굳이 '//'를 강요하는 이유는 저희가 사용하는 언어에서 이걸 지원 안 하는 경우도 있거든요? 그러면 앞에 주석 있잖아요? C라면 원래는 '//'가 안 되니까 '/* // TODO: */' 이렇게 박아요. 그래서 자바스크립트 같은 거에 주석 넣을 때도 이렇게 넣고, HTML에 주석 넣을 때도 HTML에 주석 넣고 그 뒤에 TODO를 이렇게 박습니다. 이러는 이유는 저희가 Repo에 있는 모든 파일을 문자열 검색만으로 TODO를 모아서 통계를 낼 수 있고, 이거에 따라서 뭔가 그래프도 그릴 수 있고, 쉽게 찾을 수도 있기 때문이에요.

물론 이제 TODO가 이러저러한 표현으로 해도 IDE가 잘 받아준다고 알고는 있는데, IDE에서 지원하는 것들이 너무 느려요. 솔직히 IDE에 들어가서 전체 파일 검색하는 게 제일 빠르거든요? 그래서 이런 식으로 할 수도 있고, 아니면 빌드 툴 같은 데서 쉽게 파워 스크립트 같은 거 작성해서 TODO만 긁어서 볼 수도 있고요. 이런 여러 가지 이유 때문에 그렇고요, 그리고 이 TODO를 하고 이름이나 날짜를 박는다는 거, 이건 이름이나 날짜를 검색해서 지난 것은 '해결해야 하는 것' 이런 식으로 분류하는 것도 있죠. 분야를 박는 것도 있고요. 그리고 요게 어떻게 말해야 할까요? 뭐든 간에 회사에서 어떤 통계를 뽑는 거라던가 '버그를 몇 개 고칠 게 있다', 'TODO를 몇 개 고칠 게 있다' 이런 건 기본적으로 템플릿이 있는 게 무조건 좋아요. 그래야 쉽게 쉽게 통계를 뽑아야 추세도 볼 수가 있고, 그 추세를 보는 것만으로 어느 분야에 '뭘 더 해야겠다.'도 알 수 있어요. 이런 거 신경 안 쓰고 TODO만 박고 있으면, 어느 순간 TODO가 1,000개 넘어가는 경우가 있어요. 그럼 그 1000개를 고칠까요? 그 순간부터 안 고치거든요. 그래서 'TODO가 500개 넘어가거나 하면 줄여야겠구나', '1,000개 넘어가면 더 줄여야겠구나.', '매달 10개씩 줄이자. 그래서 100개월 안에는 없애자.' 이런 식의 계획이 나올 수 있는 거거든요. 그래서 이런 식으로 뭔가 어떤 코드 퀄리티를 판단하거나, '일을 너무 많이 미뤄놨다'는 걸 판단하는 것에도 TODO 같은 건 굉장히 좋은 거거든요.

어쨌든 간에 저희는 표준화시켰고요, 그 외에 저희가 또 하나 표준화시킨 주석 스타일이 하나 있는데, POCU 아카데미에서 하는 거예요. 왜냐하면 저희가 학생의 코드를 여러 개를 채점하다 보니까 저희가 생각하지 못한 코드를 넣었을 때 저희 쪽 코드가 제대로 안 도는 경우도 있고 그거에 따라 버그를 고치는 경우도 있어요. 근데 버그를 고쳤을 때 나중에 또 다른 버그를 고치다 그게 또 사라질 수도 있거든요? 실수로 없앨 수가 있으니까. 그래서 그런 것들 때문에 이 버그를 고쳤다면 이 버그를 발생시키게 했던 학생들의 케이스가 뭔지를 적게 되어 있어요. 저희가 학생들이 제출하는 코드는 언제나 과목 이름, 학기, 그리고 실제 빌드 번호 이 세 개로 결정이 되거든요. 그래서 그걸 표준으로 아예 정해서 '\\ REPRO:'하고 아까 말했던 세 가지 정보를 순서대로 어떤 포맷에 맞춰 넣게 하고 있어요. 나중에는 어떤 케이스가 있었는데 '왜 이게 지금은 되는데, 예전에 이 학생이 왜 이 점수를 받았지?'라고 확인하면 그 케이스를 코드에서 검색을 해보면 코드에 나오죠. '아! 이걸 고쳤기 때문에 이제는 학생들이 점수를 받는구나!' 아니면 어떤 코드를 고쳤는데 위에 REPRO 주석이 박혀있어요. 그러면 '이 REPRO를 내가 망가뜨리진 않았을까?' 그러면 그때 코드를 다시 가져와서 빌드해서 확인을 해볼 수 있는 거죠. 그래서 일단은 이렇게 박아놨는데, 어느 순간에는 이 모든 것을 주석을 확인하고 자동 테스트를 돌릴 수 있을 것 같긴 해요. '이 REPRO 케이스가 뭐였고, 여기 주석이 달려있으니까 그거에 관련된 REPRO 케이스 코드 갖고 와서 코드 테스트 돌리고 통과했을 때만 패스.' 이렇게까지도 저희는 계획을 세우고 있어요.

그래서 주석이라는 거, 설명하고 장황하게 설명하는 건 자유롭게 써도 상관없어요. 포맷이 중요하지 않아요. 하지만 어떤 특정화된 걸 표시하는 주석 토큰이 있다면 정형화를 시키는 게 그냥 세상이 다 편합니다. '아, 이건 제 방식에 맞지 않아요.'라고 말하는 사람이 있어요. 근데 뭐 결정권자 마음에 따라야지 어떡할 거예요? 당신 방식에 맞는 게 정말 나은 거라면 설득하거나, 그냥 이것도 괜찮고 저것도 괜찮고 그냥 의견의 차이일 뿐이라면, A도 똑같은 똥, B도 똑같은 똥이면 노란 똥이든 검은 똥이든 그냥 아무 똥이나 골라도 되거든요. 그러면 그냥 하나 골라 가면 따라가는 게 맞는 거예요. 이런 식으로 해서 저희는 TODO 주석을 박는 포맷이 굉장히 까탈스럽게 잡혀 있고, 이거 잘못 넣으면 그냥 배포가 안 돼요. 웃기죠? 근데 배포 안 되게 만들어 놨어요. 그래야지 사람들이 빨리빨리 고쳐요.

포프였습니다.