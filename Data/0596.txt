안녕하세요, 포프입니다.

저저번주 정도인가요? 제가 AI 관련 비디오를 한 3~4편 만들었어요. 특히 AI가 개발자한테 미치는 영향들. 그러면서 제가 이런 얘기를 했습니다. 전문가 정도 되는 프로그래머가 되면 시니어급, 아키텍트급 그러면 Copilot 같은 것들이 굉장히 큰 도움이 된다고. 그럼 이제 '저는 전문가가 되고 싶어요'라고 말하는 분들은 많아요. 말은 쉬우니까. 실제 전문가까지 올라가는 사람들은 생각보다 많지 않죠. 그래서 고민을 해봤어요. 제가 전문가급으로 올라간 분들, 제가 언제든 가서 조언을 구하고 서로 좋은 토론을 할 수 있고 그리고 정말 제가 모르는 것들을 알려주고 이렇게 공유할 수 있는 사람들, 그런 사람들은 어떤 과정을 거쳤을까? 제가 생각보다 나이가 많거든요? 일한 회사도 많고. 그 사람들을 쭉 보고 여전히 연락되는 사람들과 얘기도 해보고 했어요. 그래서 그분들한테 거기까지 가게 된 이유는 뭐 여러 가지가 있겠지만 그 공통점들을 말하려고 해요. 그게 단순히 '얘는 시니어가 됐기 때문에 이렇다'가 아니라 경력이 짧을 때부터 공통점들이 있더라고요. 그래서 아마 요런 거에 초점을 맞추면서 '내가 과연 전문가에 가까이 가고 있느냐?'를 확인해 보는 것은 충분히 도움이 될 것 같아요. 그래서 '전문가급 프로그래머가 거친 성장 과정'이라고 말하면 될 것 같아요. 이게 굉장히 구체적일 수는 없는 이유가 이렇게 보이는 현상들이 있거나 다들 공통되는 걸 말하는 거기 때문에 거기까지 가는 데 필요한 것들은 여러 가지 다양한 게 있겠지만, 어쨌든 내가 서로 비교하면서 평가하는 데는 도움이 되길 바래요. 그러면 시간순으로 얘기하는 게 좋겠죠? 

첫 번째, 이분들은 모든 일을 굉장히 빨리 처리해요, 주니어 때부터. 경력이 2년 된 주니어도 있고 3년 된 주니어도 있거든요? 언제 정신 차리냐 문제지. 근데 일을 빨리 처리해요. 주어진 일을 굉장히 빨리 처리하고, 그게 나갔을 때 반드시 버그가 없는 건 아니에요. 버그가 나올 수도 있잖아요? 버그도 빨리 고쳐요. 첫 번째가 빨리 만든다.

두 번째, 버그도 빨리 고친다. 1번과 2번은 주니어 때 내가 공부를 제대로 해서 그런 걸 수도 있고 단순히 머리가 좋아서 그런 걸 수도 있고 내가 지름길을 선택해서 그럴 수도 있어요. 근데 3번이 결과적으로는 갈려지는 부분이었어요. 이 3번이 시니어 때 나오는 게 아니에요. 경력 한 2년 차. 뭐냐면 회사에서 내가 일을 점점 많이 해요. 2년이 되기 시작하면 한 회사에서 2년 정도 있으면 보이는 거예요, 회사 옮겨 다니면 별로 의미가 없고. 그러면 내가 일 빨리 처리하죠. 버그도 빨리 고쳐요. 회사에 오래 있으면 맡은 일이 많아지면서 구현하는 것도 많아지죠. 여전히 그것도 빨리 끝내고 버그도 빨리 고쳐요. '아니 똑같은 거 아니에요? 뭐가 달라져요?' 이거 굉장히 다른 거예요. 뭐냐면 내가 주어진 일이 지금 5개예요. 빨리 만들고 빨리 고쳐요. 버그가 내가 만든 거에서 그날 곧바로 나오진 않아요. 천천히 있다가 어느 순간 나오고 다른 코드로 바뀌면서 나오고 이런 것들이 있어요. 그러면 내가 버그가 일주일에 하나가 나올 수 있는 거예요. 예를 들어서 한 달에 하나가 나올 수도 있고 그러면 다섯 개 만들었을 때 한 달에 버그 하나씩 나오면 그 버그 하나 고치고 새로운 기능을 또 만들 수 있어요. 근데 그 버그를 제대로 고쳤냐, 안 고쳤냐의 차이가 있는 거예요. 내가 분명히 올해 3월에 고친 버그가 내년 3월에 약간 뭐가 바뀌었다고 버그가 또 나와요. 그리고 그다음 해 3월에 또 약간 뭐가 바뀌었다고 버그가 또 나와요, 계속 고치는데도. 그럼 내가 매달 만드는 게 하나씩이라고 생각하면 1년이 지나면 한 달에 2개씩 버그 나오는 거고, 2년이 지나면 한 달에 3개씩 버그 나오는 거고 이런 식으로 되는 거예요. 버그 양이 계속 늘어나요. 어쩔 수 없는 거예요. 그러면 버그를 고치는 게 많아지면서 신규 개발이 안 돼요. 그래서 이런 사람들은 어느 순간 뭔가 속도가 느려져요. 그럼 '왜 이렇게 느려요?', '버그가 많이 나와서요.', '버그 고치느라 시간 없어서요.' 이 얘기만 입에 달아요. 그런데 생산성이 없어지는 거잖아요? 사실은 옛날에 똥 싸는 거 지금 치우고 있는 게 전부거든요? 잘하시는 분들은 계속 이 속도는 느려지지 않아요. 오히려 빨라지면 빨라지지. 그리고 버그도 계속 고쳐요. 근데 버그 수가 적어요. 그 차이는 뭐예요? 어느 순간 버그가 나왔을 때 현상을 덮고 넘어가긴 쉬워요. 근데 원인을 찾고 근본 문제를 고쳐버리면 그 버그가 다시 나올 확률이 훨씬 줄어들죠. 어느 순간 이분들은 그걸 하는 거예요. 누구나 처음부터 그걸 알 수는 없어요. 처음엔 아마 내가 아는 게 없기 때문에 현상만 대충 덮고 넘어갔을 가능성이 높아요. 몇 번 터지면서 문제 보는 거예요. '야 이거 속도가 느려지는데? 이거에 뭔가 문제가 있구나! 이거 어떻게 고쳐야 하지?' 그 고민을 하고 있는 거예요. 그리고 그걸 고치기 위해 뭔가를 하고 있는 거죠. 이게 일반적으로 사람들이 한 번에 올바른 코드를 만들기는 어려워요. 왜냐하면 내가 모르는 게 많을 수도 있고, 회사의 요구사항이 변할 수도 있고, 실제 제품이 나왔는데 사람들이 내가 의도한 거랑 다르게 쓸 수도 있는 거예요. 어쨌든 Refactoring이라는 거는 무시할 수가 없는데 '이걸 몇 번 해야 깔끔한 코드가 나오냐?'라고 보통 물어보거든요? 제가 어느 코드 베이스를 봐도 한 번에 안 돼요. 최소한 두 번은 돼야지 그래도 '아휴 이 정도면 괜찮겠다'하고, 세 번이 되면 '그래그래 좋아', 네 번 되면 '고칠 거 없네?' 이 정도까지 보통 가요. 그 Refactoring이 되는 데까지 걸리는 기간이 한 번 할 때 보통 빠르면 6개월 느리면 1년에 한 번씩 하기도 해요. 그래서 생각보다 이게 시간이 좀 걸립니다. 그만큼 지켜본 다음에 고친다는 거죠. 전문가까지 가는 프로그래머들은 어느 순간에 내가 지금 과거에 대충 짜는 것들이 내 발목을 잡는다는 걸 알고 그걸 크게 뒤집어 고치는 거예요. 근데 이걸 고치지 않는 사람들은 결과적으로 못 간다는 겁니다.

근데 결과적으로는 그냥 1, 2, 3번이에요. 1번 주니어 때부터 뭔가 빨리 만든다. 이거 빨리 못 만드시는 분들은 다른 거 생각하지도 말아요. 이거 빨리 만들 생각부터 하세요. 근데 어떻게 빨리 만들어요? 여러 가지 방법이 있겠죠? 본인이 뭔가 모자란 게 있으니까 빨리 못 만드는 거겠죠? 그걸 훈련해야 하는 거예요. 그다음에 버그 나면 버그도 빨리 고쳐요. 이 두 개는 거의 같이 갑니다. 왜냐면 내가 작성한 코드 이해 못 하면 버그도 못 고치거든요. 조금이라도 이해해야 고치거든요? 근데 버그는 더럽게 못 고쳐요. 뭔가는 빨리 나오는 거 같아요. 복붙하고 있는 사람이에요. 이 두 개가 돼요. 그리고 이제 세 번째가 장기적으로 이걸 트렌드를 꾸준히 유지시켜 나가는 거예요. 이게 제일 어려워요. 1번, 2번은 그냥 머리만 좋고 게을러도 잘할 수 있어요. 3번은요. 머리가 좋은데 게으르신 분들은 절대 못 가고요. 머리가 굉장히 나쁜데 열심히 하는 사람도 못 가요. 적당히 머리도 있고 적당이라는 게 평균 지능 얘기하는 거예요. 그리고 계속 꾸준히 노력하는 사람들은 언젠가는 3번은 이루어요. 근데 거기에 빨리 가면 빨리 갈수록 당연히 더 빠르게 성장할 거기 때문에 더 높은 데 가는 거고, 빠르게 성장을 안 하더라도 3번까지 되시는 분들은 내가 할 수 있는 일의 양이 있잖아요? 양이 줄어들지 않잖아요? 남들은 이렇게 올라갈 때 나는 이렇게 하고 있을 뿐인데 어쨌든 간에 기대 가능치가 나옵니다. 회사 입장에서는 '지금 얘가 이 정도 수준이 있는데 계속 이 정도 수준이구나' 그럼 이 정도로 계속 먹고살 수 있어요. 문제는 이렇게 갔다가 내려오시는 분들. 회사에서 이렇게 올라가니까 거기에 맞춰서 막 올려줬어요. 근데 갑자기 내려가기 시작해요. 회사에서는 이제 그 사람의 자리를 유지해 줄 타당성이 없어지기 시작해요. 그래서 회사에서는 어쩔 수 없이 그분을 보내드려야 하는 결정을 내릴 수밖에 없는 경우들이 오긴 와요. 물론 이거 시정하려고 노력하죠. 근데 문제는 과거에 쌓아놓은 것들이 워낙 많아서 지금부터 제대로 고치기 시작하면 굉장히 뒤늦게 찍고 올라가야 하는데 이걸 버티시는 분들이 생각보다 많지 않고 그 순간에 이직하시는 분들이 더 많아요. 이직하고 1, 2년 있다가 또 이직하고. 사실 1, 2년 있으면 다행이고 이걸 몇 번 반복하는데, 문제는 경력이 충분히 많이 쌓였는데 실력이 아직도 여기까지 못 갔어요. 그럼 그 회사에서도 대충 알기 때문에 점점 봉급의 수준이 낮아지기 시작하죠.

그래서 장기적으로 갈 때는 1, 2, 3번이 돼야 해요. 이유는 다양해요. 근데 제가 말한 'Refactoring 한다' 뭐 이것도 그냥 단편적인 예일뿐이고, 사람마다 그게 안 되는 이유는 굉장히 많을 거예요. 저는 일반적으로 얘기한 것뿐이고 본인 상황에 따라 다를 수도 있어요. 근데 중요한 건 그게 아니에요. 결과적으로는 내가 전문가급의 프로그래머가 되고 싶다면 1, 2, 3번은 다 해야 하는 거예요. 그래서 남들보다 일 빨리 처리하는 놈, 남들보다 버그 빨리 고치는 놈, 그리고 이걸 장기적으로 계속 생산성이 줄어들지 않고 버틸 수 있는 놈. 장기라는 거는 6개월~1년쯤이면 보통 가닥이 보이기 시작하고요, 2년쯤 되면 일반적으로 다 나와요. 그냥 '야 너는 일이 끝나는 게 없네? 왜 없어?' 그래서 이 버그, 저 버그 고치고 있는 거 딱 열어봐요. 그러면 '이걸 고친 게 아닌데? 처음부터 이렇게 고쳤으면 끝나는데?' 이런 것도 되게 많아요. 사실 어쨌든 간에 전문가로 가고 싶어 하는 프로그래머가 있고요, 그런 분들은 이런 걸 지표 삼아 언제나 '비교 대상이 있었으면 좋겠다'라고 생각하잖아요? 잘 보시고 그 급으로 난 갈 생각이 없다. 그러면 그 외의 방법으로 살아남을 방법을 고민하시면 됩니다. 근데 괜히 전문가급으로 가고 있다고 하면서 약간 거짓말을 해봐야 생각보다 빨리 뽀록나니까 그전에 빨리 다른 길을 찾으시는 게 좋긴 합니다.

포프였습니다.