예 안녕하세요 포프 입니다 오늘은 무슨 얘길 해 볼까
저희가 이제 프로그래머로 일하다 보면 소프트웨어 공짜로 이러다 보면 가끔
마다 이제
핵 이라는 것을 할 때가 있어요 그리고 비슷한 의미로 가끔 마다
어쩔 수 없이 저희가 좀 멍청해서 버그를 만들 때가 있어요
뭐 버그가 문진 다 아실거고 해금 뭐냐 해결하는 건 이런 거에요
어떤 기능을 만들고 있어요 만들다가
뭔가 올바르게 만드는 방법 먼 미래를 위해 튼실하게 만드는 방법이 있는
반면에
지금 당장 어떤 일을 끝내기 위해서
숏컷 약간 보면 지름길 같은것 약간 땜빵 치고 넘어가는 그런 기능들을
만드는걸 핵 이라고 해요 그래서 이제 그런 핵을 만들어야 될 때가 언제냐
우리가 예측하지도 못했던 것들이 갑자기 새로운 스펙으로 나왔어 근데 이
스펙에 따라 모든 걸 뒤집기에 는 시간도 모자라고 일정도 모자른 거에요
그러나 다 아주 간단하게 정말 요 코드 한줄만 짜면 은
이게
나중에 먼 미래의 이제 보호 유지 보수에 되기 어려운 코드가 될 수는
있지만 그 순간에 굉장히 빨리 기능을 주는 경우 그 첫번째 고 두 번째는
그게 아니라 현재 어떤 기능이 들어간 데이 기능이 미래에 어떻게 쓰일지
는 정확히 모르는 거예요
당장 필요한 건 알겠는데 이게 이쪽 방향으로 뻗어 나갈 수도 있고 아니면
요거 한번 말수 끝날 수도 있고 이런 기능도 있어요
예측이 안되는 거야 그런 보통은 무슨 올바른 소프트웨어 공학적 무 디자인
이런거 얘기하면 은
모이게 어느거 에서도 쓰게 할 수 있도록 좀 뭐 이렇게 제대로 아키텍츠
만 아키텍트 만들고 뭐 하고 이런 얘기들이 있어요
근데 그것만 따라가다 보면 정말 말도 안되게
정말 필요하지도 않은 거 왕창 만들어 두고 나중에 평생 쓰지도 않았고
오히려 유지보수가 어려워지는 경우도 있죠
요런 부분에 관해서는 저는 언제나 똑같은 얘기를 해 왔었어요 사실은
핵을 하는건 문제가 아니다 단 니가 어떤 핵을 넣었을 때 나중에 그 핵을
올바르게 바꿔서 제대로 아키텍츠 만들어야 할 때 아니면 그 핵을 제거해야
할 때 그 제거하는 과정 올바른 아키텍처 만드는 과정이
가능 해야 된다 나중에 그게 불가능한 핵을 만들었다면
뭐 흔히 말하는 나쁜 코드 품질 이런거 줘 나중에 고칠 수가 없는 핵이
되어 버려요
그 고칠 수가 없는 핵이 들어가는 순간 그 핵의 맞춰서 기존 프로그램을
돌려야 되고 새로운 기능을 더 추가를 하려면 그 핵의 또 다른 해 글을
올려서 계속 고칠 수 밖에 없는 거예요
그러다 보면 은 코드를 정말 처음부터 제대로 설계 했으면
막 싹 3줄 정도만 딱 써서
50만 가지를 이제 다 동계 만들 수 있었던 거라면 이거는 50만 가지의
핵이 들어가게 되는 그런 말들은 상황까지도 5개는 되죠
좀 과장 법이에요 제가 이 이야기를 왜 하냐면 은
이거는 이제 핵을 만들고 이럴 때는 코드를 작성할 때는 누구나 내가 어떤
핵을 만드는지 판단이 되어 물론 뭐 교육을 제대로 못 받았고 생각없이
않은 프로그램을 하면 자기가 핵으로 코드 자면서도 핵 왠지 모르 줘 뭐
그런 사람들은 어찌 보면 업계에서 어차피 뭐 오래 못 포트 하는
사람들이니까
일단 예외로 하고 그러면 만약에 내가 내가 핵을 만들 때 핵인 줄 안다는
전제하에 그리고 내가 그 핵을 만들 때
그러면은 앗 이거 를 나중에 다른 방향으로 코드가 바뀔 때 그럼 스펙이
바뀔 때 이 핵을 손쉽게 올바른 방향으로 교체가 가능한 야 이 판단은
서야 한다는 거죠
그 판단이 안서는 뭐 주니어 프로그래머 고
그게 10년 뒤에도 안쓰면 평생 주니어 로 개조하는 분이고
네 어쨌든 간에 이거는 좀 더 명백하고 명시적 이라는 거에요 근데 버그도
똑같이 돌아요
그게 그게 문제는 되어 사실은 최근에 겪었던 문제들 중에 하난데 가시는
프로그램으로써 프로그래머 로써 버그를 만드는 것은 어찌 보면 당연한
거예요 내가 버그가 나왔을 때 그게 내 문제인거 를 말을 하고 인정을
하고 그리고 서로 고쳐나가는 방법을 내가 고치는 다음에 고치 된 서로
도우면서 고쳐나갈 수 있다 왜 내가 실제 그 법을 만들어 낸 않은 따른
기능을 만들고 일수도 있어요
버거가 발견됐을 때 그럼 나는 이거 때 바쁘니까 다른 사람이 대신 이
문제를 고칠 수도 있어요 그리고 그건 나쁜 게 아닌 게 이 사람 이제
버그로 고쳐줄 때 이제 고 분야를 아는 사람은 두 명이 되어 처음 만든
사람 나 버고 추는 사람 두 번째 그래서 제가 떠나더라도 버그 구출
사람이 그 분야를 좀 더 이해를 잘 하기 때문에 회사에 도움이 되요
그리고 당연히 이제 그 사람이 만든 버그를 또 내가 가서 고쳐 주고 도와
줄 때가 있죠
근데 이거 문제는 이게 언제나 서로 상부상조 가 되어야 되는데 뭐 굳이
프로그램 뿐만이 아니어도 어떤지 권하고 얘길 할 때도 언제나 나는 이
사람을 이게 구해 줘 언제나 뭐 뒷바라지 해주고 인데 저 사람은 나한테
도움이 되는 개 나도 없어 그럼 그 건은 이제 공존할 수 없는 4 관계가
정도 되는것 있죠
서로 윈윈 이어야 하는 건 있어요 그러나 다시 본론으로 들어와서
이런 버그를 만들때도 버그는 당연 실수의 만드는 거에요 그쵸
근데 버그 다 똑같지 않다 라는 건 나라고 싶을 거에요
어떤 버그는 발생하는 순간 그 문제가 발생해 서 어떤 이제 뭐
데이터베이스 자료 좀 바뀌었다 거나 뭐가 바뀌었다고 해도
복구가 가능한 버그들이 있어요 그 문제 샀을 때 아 그러면 이렇게 좀
돌려 갖고 이런 식으로 수동으로 처리해서 처리를 할 수가 있겠구나
그럼 버그 라면은 만들어 2
그렇게 쪽팔려 할 건 아니에요 사실을 내가 만들어 노프 도 아 그래 뭐
이거는 서로 도와가며 고치는 거고 사람이 완벽할 수 없는건 당연히 알고
그리구
뭐 그 모든 버그를 안 만들면 당연히 좋지만 그럴 수 있는 사람은 거의
못 봤어요
정말 초 천재 프로그래머 도 그런 법원은 쉽게 만들고 그 사람들 자세도
내가 만든거 에버 가 있을지 모르니까
그 q&a 하시는 분들이죠 테스트 분들한테 버그를 좀 잘 봐달라
그리고 그분들이 버거 찾아오면 다 보고 심지어 내가 만든 버그가 확실하지
않을 지라도
요건 내가 만든 것들 혹시 생긴게 아닐까 라는 의심을 가지고 한번씩
확인해 보는 사람들이 정말 잘하는 사람들이에요
누가 버거 됐을 때 어이고 내 버그 아니에요 남짓 는데 실제 는 그 남이
봤을 때 이 사람 보고 였던거 야 그렇게 반복되는 사람은 그냥
자기 기준보다 자기를 너무 높게 평가하기 때문에 민폐를 주는 사람이고
그러나 오늘 얘기하려고 하는 일이 또 것도 아냐 더 큰 문제 뭐냐면요
가끔 버그를 만드는데
돌이킬 수 없는 버그를 만드는 사람들이 있어요 무슨 얘기냐
이 버그가 이제 나갔어요 제품은 나갔어
그 버의 기초에서 어떤 사람들이 모이고 고객이 라던가 어떤 일을 했어요
근데 그뒤에 버그를 발견했는데
이미 고객들이 그 버그의 기초에서 어떤 일을 했어요 근데 그거를 되돌릴
수가 없는 거야 되 돌리는 순간 다른 고객과 형평성이 너무 깨지는 경우도
있어요
이런 버그를 의해서도 4k 아카데미 하면서 겪은 부분이 있어요 특히
뭐 자세한 국가의 제가 말할 순 없고 자세 1까지 말하면 지오 버그를
만든 사람이 좀 이제 너무 타게 되는 것 같아서 건 어려운 것 같고 어떤
프로그래머가 그 버그를 만든거예요 그 버그를 그래서 그 문제를 찾아 낸
것도 보고를 한 것도 저희 고객이 보고를 했음에도 불구하고 실제
우리 내부 개발 팀에 들어오게 된 계기는
그 버그를 만든 프로그래머가 사실은 가장 먼저 그 얘길 들었지만 저희
내부 개발팀에 전달 안 했어요 보니 고치고 있지도 않았고 그냥 그게 뭐
당연히 자기 버거도 아니라고 생각을 한 것이 어떤 의미에서
그러다가 제가 어떻게 며칠 뒤에 보고나서 이것 좀 이상하다고 생각해도 파
보니까 그 버그 였고
그리고 버그를 결국 에고 친권은 또 다른 프로그래머 하는데 저하고
고치면서 이게 되돌릴 수 없는 밥은 거에요 그러면서 예
과연 이 버그가 왜 생겼냐 를 당연히 뭉쳐 있는 고민할 수밖에 없고
그리고 되돌릴 수 없는 버그 인데 이럴 때 그나마 손에 본 사람들이 손해
보지 않게 어떤 이제 혜택을 줘야 될거 며 그럴 때는 그 혜택을 줌으로
인해 이 손해를 보지 않은 다른 사람들이 그 반대로
아까 처음에 손에 받은 혜택을 얻으면서 그 반대 사람들 올해도 손해를 볼
수도 있거든 상대적으로 그래서 그런 것들이 말도 안되게 나오는거
수학적으로 떨어지지도 않고 그 어쩔 수 없이 진짜 요즘 뭐 제가 대표로
있으니까 제가 정말 미안하다고 빌 9
이제 하고 이런 식으로 뭐 대처하겠다 고 말하고
그런 보상 이라던가 이런걸 다 처리해 써야 됐어요 그로인해 따른 개발자
의 수동 작업도 굉장히 많이 늘어났고 저도 일일이 처리해 줘야 될 것들이
굉장히 많았고 그 여기서 문제 가 뭐냐면은
이 되 돌릴 수 없는 버그가 사실은
따옴 에 안되는 버그 였던거 이게 저희 자체는 이제 코드 이제 리비도
되게 잘 보고 이런 시스템이기 때문에 처음에 이 기능이 들어갈 때 다른
개발자가 부분과 이상하다고 판단해서 처음 개발한 사람한테 정말 이게
맞냐고 까지 확인을 들어간 부분이 있어요 사실을 그때 처음 개발자가
그냥 맞아요 라고 해서 이거 확인한 데 맞을 회보 해서 그냥 나갔던 건데
사실은 그 확인도 제대로 안 해보고 봤다 고 했던 거야 그게 말자
그래서 누군가 이상하다고 누군가 이렇게 고민했고 나갔던 거죠
그런데 이 버그가 나온 이후에 이 버그를 발견하고 친 이후에 그 중간에
뭔가 이상하다고 질문했던 개발자가 저한테 그랬어요
내가 그때 이상하다고 항거를 상대방에게 컨펌을 물어봤는데 그 컨펌을 전혀
믿지 말고 내가 계속 이상하다고 믿고 내가 직접 두 눈으로 두 눈으로
보고 확인을 했다면 이런 일이 안 일어날 수도 있지 않았을까 이 고민을
하는 거야
되자 그 친구 핫한 얘기가 건 말이 안 된다
그렇게 말하면 앞으로 무리가 뭔가 사소한 이제
의문이 있을 때마다 그 일을 한 상태 물어보고 확인하고 시키자 나요
그 사람이 가장 잘 아니까 그 사람이 예 라고 했는데도 너는 그를
의심해야 되고 모든 걸 다시 봐야 된다면 그건 그 사람을 채움 안 하는
게 없이 맞는 것 아니니까 했어야 시각
그래서 그런 문제가 있었고 이 지금 말한 내가 좀 더 신경 썼으면 낫지
않았을 거라 고민을 한 개발자는
자기 일이 아님에도 불구하고 이미 되도록 익힐 수 없는 버그가 다 갔다는
것 그것두 자기가 어쨌든 간에 어떤 방향으로 간접적으로 도 연관이 되어
있던 부분이 에게 나갔다는 것 만으로도
개발자로서의 수치심을 느끼는 거예요
되 돌이킬 수 없는 핵을 만드는 것도 당연히 수치심을 느껴야 지만
되 돌이킬 수 없는 버그를 만나는 것도 굉장히 수치스러운 일이거든요
저희한테는
근데 또 하나의 문제점은 처음에 그 버그를 만든 사람은 그런 자세가
아니었다는 거죠
그 뒤에 그거에 대해서 물론 자기가 잘 못했던 얘긴 당연히 했지만 다른
사람들이 생각하며 이걸 어떻게 방지할 수 있지
이런 일이 왜 이러나 찌를 고민하는 그 고민도 하나는 거 같았어요
그냥 그 순간에 미안하다 넘어가고 이게 다른 버거 랑 거의 그냥 똑같은
동구에 버그라고 생각하는 그런 느낌 그리고 그 뒤에 그럼 버거 들 때문에
여러가지 수작업을 해야 했던 것도 보니 책임지고 하기보다는 다른
사람들에게도 하게 되는 그런 상황 쪼금 있었어 그래서
결과적으론 그 거거든요 사실은
그러면 이런 문제가 있을 때 제발 있어요 아까도
핵을 만들 때는 뭐가 돌이킬 수 있고 돌이킬 수 없는 의 판단하기 쉽다
그랬어요
버그는 어려 왜 버그 4 실수 로 나오는 거니까
그래서 그게 문제 인거 야 근데 이런 부분들은
아까 제가 말했던 그 사람이죠 중간에 내가 확인을 좀 더 잘했으면
내 간접적으로 연관이 되어 있었으니까 더 문제가 없지 않았을까 그런
자세를 가져야 만 되 돌이킬 수 없는 법을 안 만들더라구요 무슨 얘기냐
내가 어떤 코드를 짜던 간의 버그가 날 수 있다는 걸 인지를 해요
그리고 그거에 대한 테스트를 적당히 하죠
내가 어느 테스트를 말도 안되게 내가 짠 코드 1 다 테스트 케이스
만들어 돌리는 것은
건 일반적인 상황에서는 시간낭비 고 말도 안되는 이고 사실은
그래서 일반적으로 돌이킬 수 있는 버그 라면은 요즘도 같은 스타 면 된다
아니면 나는 간단하게 1 2가 이 테스트하고 q&a 넘겨서 전문 테스
들이 좀더 적당히 테스트 하고 넘어가면 된다
그 목회 해요 근데 그게 아니라 내가 이 코드를 짰어요
이게 바뀌므로 해서 굉장히 이게 많이 버그가 있다면 되도록 익힐 수 없는
일이 나는 거예요 그러면 나 붙었을 충분히 하지만 그저 그 외에 이제
내가 가지고 있던 이 기능이 어떤 거라는 이 전제 하에 씨가 모
프로그램을 짜는 거 잖아요
데이터가 어떻다는 존재 하에 그 전제가 틀리지 않나 를 고민을 할 수가
있는 거에요
고민을 하며 는 실제 있는 데이터와 비교를 해보고 아니면은 그걸 좀 더
잘하는 사람한테 코드 리뷰를 던졌고 요 부분은 내가 정말 확실치
않으니까요 것만 좀먹고 히바 달라
그리고 내가 한번 돌 이더라도 따른 췌 이한테 길에서 아 요 부분을 조금
더 깊게 받아 요건은 내 만약에 버그가 있으면 우리한테 돌이킬 수
없으니까
즉 무슨 얘기냐 내가 기능을 100개를 만들었을 때 솔직 거기서 되
돌이킬 수 없는 버 가 나오는 경우는 아마 10% 미만일 거에요 그럼
10개 정도를 정말 누군가의 꼼꼼히 봐 달라고 하고
90 개 정도는 적당히 체크하고 이 정도면 충분해 혹시라도 버 가 나오면
좀 이 딱 고치지 라고 하는 마음 가지면 된다는 거예요 그러니까 뭐가
중요하고 뭐가 안 중요한 지를 판단할 수 있는 김 그 능력이 있어야 되고
내가 만드는 기능이 실제 유저가 어떻게 쓸 거 며 거기서 이런 버그가
생겼을 때 어떤 버 가 생겼을 때 뭔가 꼬여 쓸 때 과연 우리가 이것을
고칠 수 있느냐 그 문제가 생긴다는 거죠
이걸 보니 스스로 모를 수도 있어요 당연히 주니어 프로그래머라면 그죠
근데 코드 리뷰를 제대로 봐주는 회사였다 면은 어떤 이제 코드 리오 본
사람 중에 한명은 붐이 의심을 가질 거에요 이게 정말 올바른 거야
그때 자기 머리속에서 올바른 게 아니라 그것의 데이트하고 비교해 보고 뭘
비교해보고 아내가 좀 게을러 었구나 저사람이 의문을 가지니까 이거는 좀
더 한번은 확인 해야 겠구나 라고 확인을 한 다음에 답을 해야 되는데 그
자세가 안 돼 있고 경험이 적고 생각에 약간은 모자랄 수밖에 없는 주니어
프로그래머들은 그런 문제를 만든다는 거죠
그래서
뭐 여러가지가 복합되어 있는 거예요 당연히
사람의 버거도 만 있을지 그게 문제라고 한다면 은 버그 만드는건 문제가
아니라는 거야
그런데 되 돌이킬 수 없는 법을 만드는 게 문제라는 거예요 저는 그냥 1
1 1 대로 했어요
그 하라는 게 뭐 였는데 어유 길을 만들라 고 요 그 기능 한테 버그를
만들려고 했어요
아니죠 버거 없이 만드는 게 원래 할 일이 줘 근데 그게 안되니까 따른
시스템 도 있는 거죠 그래서 그거를 보면서
이제 프로그래머의 자세 라는 것에 대해 조금 생각을 많이 했어요 사실은
그 가장 큰 문제가 뭐냐면 은 내가 만든 코드에 대한 책임감 그리고
어떤 버그를 만들었을 때 그냥 아무 이 정도는 못 할 수 있는거니까
하면서 약간은 너그러워 지도하고 얘는 모든 버그의 내가 자책을 하기
시작하면 그 어느 코딩 못해요
코디 못해요 그래서 아 이런 것은 누구나 할 수 있는 버그 니까 아 실수
했구나 다음도 조금 더 조심해야지 라 아 요 부분에 문제가 생기면 은
큰일이 나겠구나 그러면 만약 그게 만약에 정말 그래도 큰 이었다면 그
거야 정말 쪽팔려 할 줄 아는 점씩 아대 가 정말 진짜 큰 과오를 해 뭐
만들었구나 그리고 그거 에서 어떤 의미에서는
한 일주일 정도 아니면 그보다 길게도 아신 짜 내가
와 이걸 정말 해야되나 내가 개쓰레기 아닌가 내가 정말 실력이 없지 않나
이런 고민을 가지는 것도 나쁘진 않아요
그 뒤에 정신차리고 돌아올 수만 있다면
근데 그런 고민도 안하고 그 뒤에 돌아올 수 없는 살아있는
사실은 어느 정도 이상의 전 프로그래머 될 수 없다고 생각해요
자 그럼 얘기를 잠깐 정리할게요
핵을 만드는거 버그를 만드는거 일반적인 일이에요
그거 전이 아냐고 않아 코딩할 수 있냐 있겠죠
남들보다 시간 열배 백배 더 들여서 그런 일은 뭐 특정 분야를 빼고는
일어날 수 없는 일이에요 프로그램 한테 그래서 어느정도 버그와 어느정도
핵은 감수하고 넘어가는게 맞아요
벗 그러나 돌이킬 수 없는 해
돌이킬 수 없는 법을 만들지 말자
돌이킬수없는 핵은 다시 끄 뒤집을 수 없는 얘기지 원래 도록 빼 버릴 수
없는 해 그 핵은 그나마 판단하기 쉬워요
그런 액을 만들었다면 본인이 알면서도 만들었다면 그것은 그냥
* c 미아 싸는 거야 내가 만들어 코드의 아이보 위에서 이렇게 라고
썼다 만들고 문제 생기고 위 타시모 탓이야
나중에 이거 복잡해지면 회사 떠나고 말 g2 마음가짐 인거고
요건 어찌보면 조금 더 그냥 자세 적인 문제 까이 있는 거고
버그 같은 경우 그죠 버그 같은 경우 돌이킬 수 없는 버그를 만다는 것은
자세 적인 문제도 어느정도 있지만 그 외에 이제 자기 자신에 대한 판단을
못하고 있는 것도 있고요
내가 어디에서 어떤 버그를 만 수 있는지 내가 작성하는 모든 코드가 사실
버그가 발생할 수 있으니까 어떤 때 좀 더 중심을 둬서
뭐 테스트 더 해야 되는지 이런 판단을 아예 못하고 있다는 거예요
즉 내 머리속에서 나는 버그를 만 만들자는 슈퍼 머시닝 거야
그러나 실제 남들이 내 버그를 딴 사람보다 10배 더 20 을 찾아와
그래도 나는 나는 괜찮은 프로그램 뭐야 라고 믿을 수도 있다는 거야
사람마다 이윤 다르겠지만 어쨌든
되 돌이킬 수 없는 내게 돌이킬 수 없는 버그 만드는 것 둘 다 문제
있어요
근데 되 돌이킬 수 없는 버그를 만드는 사람들은 그리고 그것을 당연하게
여기는 사람들은
이제
단순하게 그냥 못 알 구하는 게 아니라 모르고 아니면 자기 뭐 암시에
걸려서 자기 최면에 걸어도 자기 무슨 뭐 이유 때문에 자기 자신의 판단을
잘못하고 있을 수 있을 가능성이 굉장히 높다 라는 말을 좀 하고 싶었어요
어쨌든 간에 모이 포브 t 보시는 분들은
내가 정말 엄청나게 큰 버거 만들어서
누군가 톤 남기어 그것 집회 돌이킬 수 없어 정말 엔지니어링 쪽에 아니라
뭐 비즈니스 쪽에서 4 업종에서 아니면 회사 오너가 어떻게 처리해야 됐던
경우가 없는지 생각을 해봐요
그런 경우가 있다면 그건 은 본인 스스로 보니 평가를 되게 못하고 있는
걸 수도 있어요
그런 얘기를 좀 해 드리고 싶었어요 어쨌든 되 돌이킬 수 없는 핵 되
돌이킬 수 없는 버그는 최대한 만들지 말자
설사 만 들었더라도 만 수 있죠 정말 쪽팔린 거 알고 그 쪽팔림을 이제
기본 삼아 다시는 이런거 만들지 말아야지 정말 내가 네 직업인데 내가
이렇게 쪽팔린 짓을 했다니 그런 느낌을 가지면서 발전 을 이어 나가도록
하세요 그게 너무 힘들다 그러면 그냥 적당한 선에서 그 뭐 그냥 코드
몬티 처럼 적당히 돈 받고 일하는 데서 만족을 찾고 그냥 그런 회사
다니는게 더 좋을 거야
그럼 된거 같죠 예 뽑혔습니다
