오늘 할 얘기는 인터페이스에 대해서 좀 얘기해보려고 해요
인터페이스라고 하면은
뭐 프로그램에서 그런거 있잖아요.
제가 말하는 인터페이스는 "프로그램" 에서의 
인터페이스예요.
뭐.. 유저인터페이스 이런 게 아니라.
그....
저희가 그 다형성이나,  추상화, 다형성의 개념을 도입할때
그러니까 뭐... 실제
이 뭐 오브젝트의 뭐... 형태는 하나인데
거기서 함수를 호출했을때
각 구현따라 그 행태가 달라지는 것
그런 거를 구현하려고 할때 OOP에서는
아무래도 인터페이스를 쓰게 되잖아요.
결국에는 Virtual Function 얘기인데.
그래서 인터페이스는 정말
그 구현하는 구현클래스가 가져야하는
함수... 의 뭐.. 뭐라고 하지? 이름이라던가 매개변수
....와 리턴타입을 정의하고
실제 그 속의 내부행동이 어떻게 도는지는
각 Implementation 에 따라 따로따로 만들수 있게하는게 그런 개념.. 이죠
근데,
참 좋은 개념이긴 한데,
뭐 어찌보면은 올바른... practice 라고 해서
여기저기서 강요하고 있는 부분이기도 하고.
일단 게임쪽에서는
뭐... 성능때문에 그걸 안 쓰는 경우도 있죠
뭐, 정말 필요한데가 아니면 추상화 쓰지말라고 하는 편이니까.
저는 그걸 떠나서, 지금 제가 있는 회사는 웹회사거든요?
그래서 게임쪽보다는 그런, 성능에 대한 걱정이 좀 적어요.
그거보단 올바른 practice를 중요시 하는 것 같긴 한데,
제 개념에서는,
아무리 올바르고 뛰어난 practice라고 여기저기서 광고하고 다녀도
실제 개발자가 봤을때 코드가 읽기 어렵고,
그리고 디버깅이 어려워지면 그건 잘못된 practice라고 봐요.
잘못된 원칙이라고 보고.
제가 요즘 보고 있는 코드가 좀 그런 게 많아요.
....보면서 모든코드가
모든 함수에서 return 하는 거라던가, 함수의 매개변수를 받는 거라는거,
이게 전부 다 인터페이스로 받는 함수가 너무나 많아요.
그리고, 문제는
그 인터페이스를 만드는 그....
"인터페이스가 구현이 몇 개가 있냐?"
저희 지금 코드 베이스에서는 인터페이스 하나,
구현 하나예요. 결국 인터페이스가 구현하고,
one to one 관계인데
이거를 뭐... 나중에 implementation이 바뀌었을때,
다른 함수를 고치지 않아야 되니까, 
고치고 싶지 않으니까
그리고 인터페이스 만든 걸 추상화를 시키겠다는 생각은
나쁜 건 아닌데.. 
문제는 이게 코드를 읽을 때마다 굉장히 짜증이 나요.
코드를 읽을 때 모든 게 인터페이스가 돼 있으니까.
느낌에.. "이게 구현이, 어떤 구현일까?" 를 모르잖아요.
그러면 그 코드를 보기 위해서 F12를 눌렀다.
그러면 실제는 인터페이스 코드로 가지, implementation 코드로 가지도 않거든요?
그리고 implementaion이 과연, 그 실제 인터페이스에 들어오는 implementaion이 뭔지
알기 위해서는 코드 뒤지고.. 읽어보고.. 이러는 것도 귀찮고.
뭐.. 그래서 제가 이제...
저하고 굉장히 친하고
제가 존경하는 프로그래머가 하나 있어요. 러시아 친구인데.
그 친구하고 한번 이런 얘기를 또 해봤어요.
이게 좀.. "나는 개인적으로 이게 좀 싫은데, 너는 어떻게 생각하냐?"
이 친구가 굉장히 아키텍쳐라던가
그런게 굉장히 빠삭한 친구고 그런거 신경많이 쓰는 친구거든요.
놀랍게도 이 친구도 저하고 동의를 하더라구요.
이 인터페이스를 만드는... 그런거는, 솔직한 얘기로,
두 가지 중에 하나라는 거예요. 
결과적으론 implementation이 많거나,
그래서 그 implementation이 많은 걸 각자
인터페이스 하나로 동일하게 쓰고싶거나,
아니면, implementation이 하나더라도
이... 우리가 지금 만드는 코드가 라이브러리가 되서
이게 라이브러리를 외부사람한테 팔 때.
외부사람들은 저희 라이브러리에 대한 소스코드가 없는거죠.
그러면 저희가 인터페이스를 노출하면은,
걔네들은 그 인터페이스를 만든 다른implementation을 만들어서
그걸로 함수를 호출하더라도
함수가 똑같이 호출되고 결과도 얻을 수 있게 하는.....
의미에서는 인터페이스가 맞다.
근데 지금 저희가 있는데처럼
어... 이미 저희는 내부 라이브러리고 이 라이브러리를 웹에 가져다 팔지도 않고
저희 제품에 쓰는 라이브러리이고
그리고 언제나 저희가 뭔가 바꾸고 싶으면,
언제든 들어가서
소스코드를 바꿀 수 있거든요. 
그래서 그런상황에서는
차라리 인터페이스 같은 일반, 뭐... 하나, 또 하나의
추상화를 만들어서  코드읽기도 복잡해지고..
디버깅도 어렵게 할 필요가 뭐가 있냐...
차라리 implementation 그 하나. 그...
Concrete 클래스라고 하죠? 추상화 클래스는 abstract고.
Concrete 는 실제 뭐... 그 내용이 들어갔다 그러는건가?
추상화, 그 실제 구현이 들어간 그런 클래스.
거기에 그거, 그 클래스를 그냥 쓰는게 훨씬 낫다라고 이야기 하더라구요.
저도 굉장히 동의를 하는 얘기였고,
보면서 '아, 동의를 하는구나...'
그러면서
또 한 얘기가
그.. 이거는 제 생각이었는데, 그런 얘기도 한번했죠.
"근데 내 생각은....
인터페이스를 하나 만들어놓고,
이렇게 implementation을 만들면 
나중에 다른 implementation을 만들때
그 인터페이스를 쓰는, 
그러니까....
인터페이스를 안 썼다면은...
 그 implementaion을 매개변수로 받았던
그 모든 함수로 가서 고쳐야 되는 그런 단점도 있지 않냐" 라고 이야기를 했어요.
그리고
아... 인터페이스. 그러니까... 뭐랄까...
인터페이스를 미리 정해두면은 그거에 대해 따라가면서
다른 것에 대한
엉뚱한 코드체인지를
만들가능성도 적고.
근데 이거는 제가 말하고 나서
나중에 또 제가 그렇지않다는 것을 곧바로 겪었거든요? 얼마 안 가서? 문제는 뭐냐면.....
정말 인터페이스를 만들고  implementation을 만드는 그런 아키텍쳐를 만들... 상황이라면, 정말
System Architect이 처음부터 온갖 그....
 requirent 다 구하고,
그 requirement 에 맞춰서 인터페이스를 
다 정의해놓은 다음에,
이 implementation을 다른 사람한테 
줘서 만들라 그럴때는
말이 되는 이야기더라구요. 
그러니까
처음부터 설계를 완벽하게 하는거예요.
그래서 이거는 인터페이스가 완벽하고 
구현은 내가 안 하지만
다른 사람이 하면은,
그.. 똑같이 나오게.
굉장히 설계의 시간이
많이 들어가죠.
어떤의미에서는. 
뭐... 예전에 말했듯이
무슨, mission critical 한 그런 업종에서는 그게 맞을 수도 있어요.
뭐... 비행기 쏘고, 뭐... 미사일 쏘고,
아님 뭐, 건강.. 헬스 쪽이라던가...
의료기기. 이런건 말이 되는데,
저희같이 이제 뭐... 게임 쪽도 그렇고,
웹 쪽도 그렇고
계속 무수히 변하는 상황에서 비지니스 requirement가 계속 바뀌거든요?
제가.. 얼마 지나지 않아서 봤다는게 뭐냐면,
이미 인터페이스가 있고, 이미 implementaion이 있던.....
그런 코드였는데,
제가 뭔가를 더 추가해야됐어요.
근데 이거를 인터페이스를 바꾸지 않고서는 
추가가 불가능한거예요.
그만큼 비지니스 가치가 바뀐거죠.
그 상황을 보면서 제가 느낀게 그거예요.
'아.... 인터페이스는 정말 필요할때는 만들어가지고 추가하는게 나은거' 지, 처음부터
괜히 premature 하게, 어...
그런거 있잖아요. "premature optimize" 하지 말라고. 뭐라 그러지?
"너무 필요없는데 최적화하지말라" 고.
그거랑 똑같은 얘기로,
인터페이스를 만들어가지고 규정을 제대로 만들어가지고
뭐 이게 올바른 아키텍쳐다 라고 만들어봐야,
결과적으로 뭔가를 추가할때마다 
인터페이스+implementation을
동시에 고치는일도 꽤 많고
다른 implementation이 들어오기 시작하면 이미 그 순간,
이, 그 전에 인터페이스가 맞지 않는 경우가 있어서 
굉장히 많은 코드를 바꿔야되고.
그럴바에는 차라리 처음부터 인터페이스가 필요없다면
implementation으로 간다음에,
나중에 필요할 때 추가하는게 맞는거 같아요.
왜냐하면 제가 지금 본 코드만 해도 모든게 인터페이스
implementation 하나씩 갈라져있는데
그...게
정말 다른 implementation을 만들 가능성은
굉장히 적어보여요
그러면 결과적으로는 한....
이런거를 열 개 만들면
그중에서 한.... 한두개 정도? implementation을 나중에 추가로 만들수 있다는,
제가 그 ... 대충 산정을 하거든요.
그렇게?
그러면 20% 의 일을 편하게 하기위해
일단 80%의 일을 불편하게 하는 것도 이해가 안 되고,
그 20%의 일을 편하게 하기위해서라고 하지만, 
결과적으로는
정작 다른 implementation이 들어올때 이미,
이 인터페이스까지 바꿔야 될 가능성이 있기때문에
그것도 별로 올바른 생각이라는....
올바른 방식이라는 생각도 안 들고.
제 생각에는
진짜 외부에 내다 파는 라이브러리가 아니고, 
정말 처음부터 스펙 완벽하게 잡아가지고
절대 변하지 않는 그런 인터페이스를 만들게 아니라면은
차라리 코드 바꾸기 쉽고, 읽기 쉽고, 짜기 쉽고
그렇게 implementation을 떡칠한 다음에
그거를 바꾸고 바꾸고 바꾸다가
어느순간 완성이 되면 그때
전 인터페이스가 필요하다면 그때 추가해도 괜찮지 않을까
...라는 생각을 하게 됐어요.
그래서, 이게
인터페이스에만 뭐.. 한정되는 얘기는 아니예요.
뭐, 다른.. 뭐 나중에 뭐 다른 얘기도 할 것같은데, 저는.
그, 가끔 그....
책에서 어줍잖게 읽고 "아 이게 좋은 방식이다" 라고 
생각하고 그거를
코드에 적용했다가 오히려 더 불편해지는 경우가 되게 많거든요
그.. 모... 유명한, 한국 모 유명한 게임회사에
뭐.. 이상한 말도 안 되는
템플릿 같은 것도 그런... 얘기를, 제가 소문을 들었었고.
.... 그래서 예전에도 몇 번 한 얘기같은데,
정말... 코드는, 저희... 뭐, 특별히 정말
군사쪽 이런쪽에 계신 분 아니라면,
몇번이나 바꿔서 짜야되고, 몇번이나 refactoring 할 것을 각오하고 그러면
읽기 편하고
그리고, 또 저 혼자 읽기 편한 게 아니라
저 말고 다른 사람이 건드릴 일도 많거든요.
그러면 다른 사람도 읽기 편하고, 뭐 디버깅도 쉽고,
결과적으론 읽기편하고, 디버깅도 쉬운게 
가장 뛰어난 코드인것 같고
그거를 저해하는 수많은 요소를, 
수많은 요소는 적용할때마다
정말 이게 반드시 필요한 건지 확인을 하고
그게 필요할 때만 적용하고 아니면
차라리 단순하게 가는게 나은 것 같아요.
그래서, 뭐...
그 정도... 오늘은. 포프였습니다!
