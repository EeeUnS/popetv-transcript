오늘 할 얘기는 인터페이스에서 좀 해보려고요 음
인터페이스 라고 하면은 프로그램에서 그런거 있잖아요
아 제가 만든 인터페이스는 프로그램에서 이 섞인 더 써 있어요
뭐 유저 인터페이스의 아니라 그
죄가 의 다양성이나 그런 추상화 다양성의 개념을 도입할 때 그러니까 뭐
실제 이모 오브젝트에 뭐 형태를 하는데 거기서 함수를 호출 했을 때 각
구현 따라 그 행태가 달라지는거
아 그런거 를 구현하려고 할 때 op 에서는 한번 인터페이스를 쓰게
되잖아요
5 그러면 더 추억방 전 얘긴데 그래서 인터페이스는 정말 그 구현하는 그
구현 클래스가 가져야 되는 함수 의 뭐 뭐지 이름이 라던가 매개변수와
리턴 타입을 정리하고 실제 그 속에 내부 행동이 어떻게 도는 지는 가인
플레이트 신 따라 따로 따로 만들 수 있게 하는게 그런 개념이죠
근데 참 좋은 개념 이긴 한데 뭐 어찌보면 은 올바른 뭐 제 프랙티스
라고 해서 여기저기서 강요하고 있는 부분이기도 하고
일단 게임 쪽에서는 뭐 성능 때문에 그걸 안 쓰는 경우도 있죠 뭐 정말
필요한데 가 아니면 추상화 쓰지 말라고 하는 편이니까
저는 그걸 떠나서 지금 제가 있는 회사로 왜 편하거든요
그래서 게임 쪽 보다는 뭐 그런 성능에 대한 걱정이 좀 적어요 그거 다른
뭐 올바른 프랙티스를 중요시하는 것 같긴 한데
재 개념에서는 아무리 올바르고 뛰어난 프론트 쓰라고 벽이 저기서 광고하고
달아도
실제 개발자가 봤을 때 코드가 읽기 어렵고 그 디버깅이 어려워지면 그건
잘못된 fit 써봐요 잘못된 원칙이라고
제가 요즘 보고 있는 코드가 좀 그런게 많아요
보면서 모든 코드가 모든 함수에서 m 나는거 라든가 함수의 매개변수로
받는거 라는거
이게 전부다 인터페이스로 받는 수가 너무나 많아요 그리고
문제는 그 인터페이스를 만든 그 인터페이스가 거구 연임 어깨가 있냐
저희 저의 지금 코드 베이스 에서는 인터페이스 1
구현 않아요 그리고 인터페이스 구현 하고 원투원 관계인데
이거를 뭐 나중에 인 트 플레이에 퇴실 바뀌었을 때 다른 함수를 고치지
않아야 되니까 고치고 싶지 않으니까 그린 터 있음에도 추상화 식혔다
생각은 뭐 나쁜건 아닌데
문제 레코드 이기 때문에 굉장히 짜증이 나요 코드를 일대 모든게
인터페이스가 돼 있으니까 느낌의 아 이게 구현이 어떤 부분이 까를
모르잖아요
그럼 코드를 보기 위해서 뭐에 스트랩을 눌렀다 그러면 실제 인터페이스 코
들어가진 플래티 코드로 가지도 않거든요
그럼 인플레이션이 과연 깔 실제 인터페이스 조언에 인 플레이트 제 뭔지
알겠어 코드 뒤지고 읽어보고 이런 것도 귀찮고
5 의 제가 이제 저하고 굉장히 친해 보세요 적용하는 프로그램 하나
있어요 러시아 친군데
그 친구가 한번 이런 얘길 도 해봤어요 이게 좀 나는 개인적으로 이게
싫은데 에서는 어떻게 생각하냐 이 친구가 굉장히 아키텍처 라던가 그런
굉장히 빠삭한 친구 그럼 신경 많이 쓰는 친구 거든요
놀랍게도 이 친구도 적어 동일 하더라구요 이 인터페이스를 만드는 그런거는
솔직한 얘기로 두가지 중에 하나라는 거에요 결과적으론 리플렉트 시 많거나
그래서 그 인플레 헤지 많은걸 갑자기 탭에서 하나는 동양 쓰고 싶거나
아니면
인 플레이의 t 제한 하더라도 이 우리가 지금 만드는 코드가 라이브러리가
돼서 이에 라이브를 외부 사람한테 팔 때 그 외부 사람들은 저의
라이브러리에 대한 소스 코드가 없는 거죠 그러면 제가 인터넷을 노출하며
는 걔들은 그 인터 있어 많은 따라 ep 를 드셔 만들어서 걸로 함수를
호출 하더라도 함수가 똑같이 오픈되고 결과도 얻을 수 있게 하는 의미에서
인터페이스가 왔다
내 지금 저희가 있는데 저럼
어 이미 저희는 내부 라이브러리 고의 라이브 의미가 다 팔지도 않고 저희
제품에 쓰는 라이브러리 고
그리고 언제나 저희가 뭔가 바꾸고 싶으면 은 언제든지 적은 소스코드를
바꿀 수 있거든요 그래서 그런 상황에서는 차라리 인터페이스 같은 일반
뭐하나 또 하나의 추상화를 만들어서 코드 있기도 복잡해지고
디버깅 노력할 필요가 뭐가 있냐 차라리 인플레 멘트 션을 그 1
그 콘크리트 클래스 라고 하죠
추상화 클래스 mf 트랙터 콘크리트는 실제 뭐 그 내용이 들어왔다 그런가
추상화 그 실제 구현이 들어간 그런 클래스 거기에 그거 그 클래스를
애쓰는 대신 낫다 라고 얘기를 하더라구요 저도 굉장히 동이라는 얘기 였고
보면서 아동 일을 하는구나 그러면서 또한 얘기가 왜 이걸 언제
생각이었는데
그런데도 한번 했죠 근데 내 생각은
인터페이스 를 하나 만들어 놓고 이렇게 인플레 틀을 만들면 나중에 또
다른 인플레이션을 만들 때 그 인터페이스를 쓰는 그러니까 인터페이스 안
썼다면 그 인 플랜테이션 을 이제 매개변수로 받았던 그 모든 함수를 가서
고쳐야 하는 것 단점이 있지 않냐 는 얘길 했어요 그리고
아 뭐 인터페이스가 보낼까 인터페이스의 미리 정해 두면 그거에 대해
따라가면서 따른 거에 대한
아 엉뚱한 코드 체인지를 마 나 바꿀까 만들 가서 적고
근데 이거는 제가 말해 하고 나서 나중에 또 제가 그렇지 않다는걸 거
같거든요 얼마 안가서 문제는 뭐냐면
정말 인터페이스를 만들고 이불 매트 를 만드는 그런 아키텍처로 만들
상황이라면
정말 시스템 아키텍처 처음부터 온간 그 리콴유 다 구하고
그리 코멘트 맞추어 인터페이스가 정리해 놓은 다음에
2인 플랜테이션 딴 사람한테 좋았고 만들라 그럴 때는 말이 되는 얘기
더라구요 그러니까 처음부터 설계로 마음 독하게 하는거예요 그래서 이건
인터페이스가 만족하고 구현은 내가 안 하지만 딴사람이 하면은 그 똑같이
나오게 굉장히 소개 시간이 많이 들어가서 어떤 의미에서 뭐 예전에
말했듯이 무슨 정말 미션 크리티컬한 그런 업종에서는 그 알 수도 있어요
뭐 비행기 소금 5
미사의 쓰고 뭐 이건 뭐 뭐 건강 헬스 쪽이 라던가
의료기기 이런건 말이 되는데 저희 같이 이제 뭐 게임 쪽도 그렇고 뭐
쪽도 그렇고 계속 무수히 변화는 상황에서
비즈니스 6호 하면 그래서 바뀌 거든요 제가 얼마 지나지 않아 봤다는 게
뭐냐면 이미 인터페이스가 있고 이미 풀듯이 있던 그런 코드 였는데 제가
뭔가를 더 추가해 됐어요 근데 이거를 인터페이스를 바꾸지 않고서는
추가가 불가능 거에요 그만큼 비즈니스 밸리가 바뀐 거죠
그 사람을 보면서 제가 느끼는 거예요 아 인터페이스 는 정말 필요할 때
만들어 고추 가는게 난건지 처음부터 괜히 프리머 처하게
아 그거 문제풀이 먼트 오케 많이 하지 말라고 머리 너무 필요없는데
최적화 지 말라고 그거랑 똑같은 얘기로
인터페이스 만들고 폴리시 를 제대로 만들어 갔고 계보 울거나 캡쳐하고
만들어봐야 그래가지고 뭔가 추가할 때마다 인터페이스인 블러셔 통 동시에
고치는데 빼 맞고 딸의 인플레이션에 들어오기 시작하면 은 이미 그 순간
이 그저 인터페이스가 맞지 않는 경우가 있어서 굉장히 많은 코드를 바꿔야
되고 그럴
그럴 바에는 차라리 처음부터 인터페이스가 필요없다며 인포메이션 간 다음에
나중에 필요할 때 업 추가 하는게 맞을것 같아요 왜냐면 제가 지금 본
코드 마이도 모든게 인터페이스인 프랑스식 하나씩 갈라져 있는데 그게 정말
따른 인플레이션 을 만들 가능성이 굉장히 적어 보여요
그럼 결과적으로는 1
이런걸 10개 만드는 그 중에서 아는 한 두개 정도 인터넷 패션 나중에
추가 만들 수 있다는
제가 그 대충 산정을 하거든요 그렇게 그럼 20% 에 아 일을 편하게
하기 위해 일단 180% a 를 불편한 것도 이해가 안되고 그 20% 에
이를 편하게 하기 위해서 라고 하지만 결과적으론 정작 따른 인플레 애터미
들어올 때 이미 인터페이스까지 바꿔야 될 가능성이 때문에 그것도 별로 가
올바른 생각 이라는 는 올바른 방식이라 생각도 안들고
제 생각에는 진짜 외부의 내다파는 라이브러리 아니고 정말 처음부터 숲에
완벽하게 잡았고 절대 변하지 않는 그런 인터페이스를 맞는 게 아니라면 은
차려 이 코드 벗 바꾸기 쉽고 읽기 쉽고 짝이 쉽고 그렇게 인플레이션을
떡칠을 한 다음에 그것을 받고 5 바쁘고 바쁘다 가 어느샌가 완성이 되면
그때 총 인터페이스가 필요하다면 그 때 추가 해도 괜찮지 않을까 라는
생각을 하게 됐어요 그래서 이게 인터페이스의 만나
뭐 판정되면 얘기는 아니에요 뭐 다른 못다 중에 먹었다는 얘기도 할 것
같은데 저는 그 그 가끔 그 책에서 적잖게 읽고 아 이게 좋은 방식이라고
생각하고 걸을 코드의 적용했다 가 오려서 불편해 지는 경우 되게 많거든요
금호 유명한 한국 모이면 게임회사에 뭐 이상한 말도 안되는 템플릿
같은것도 그런 얘길 제가 소문을 들었소 고 그래서
예전에도 몇 번 한 얘기 같은데 정말 코드는
저희 뭐 특별히 정말 군사 쪽 이런 쪽에 식물 아니라면 몇 번이나 바꿔서
짜야 되고 몇 번이나 리액터 할 것을 각오하고 그러면 2기 편하고
그리고 또 이 제 좋은데 이렇게 표현하는 전화로 다른 사람이 관 딜도
많거든요 그러면 딴 사람들 이렇게 변하고 뭐 디버깅이 쉽고 결과적으론
이렇게 편하고 디버깅 쉬운게 가장 뛰어나 코 등 것 같고 그것을 저하는
수많은 요소를
수많은 요소는 적용할 때마다 정말 있게 반드시 필요한 건지 확인을 하고
그게 필요할때만 적용하고 아니면 차라리 단순하게 가는게 나은 것 같아요
뭐 그정도 너를
4p 였습니다
