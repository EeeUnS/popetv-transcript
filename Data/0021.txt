얘 안녕하세요 아 포크 입니다 음 아
오늘은 쉐 있더란 무엇이죠 란 거에 대한 대답을 해 보려고 해요
아 사실 이 얘기를 하게 되는 계기가 뭐냐면
아 어제 제가 책을 받았어요
쉐이더 프로그래밍 입문 이란 책 제가 쓴 책인데
암 이 죄가 나왔다고 하더라구요
1 쇠는 다 찍었고 다 팔았고
이제 2세가 나갔는데 아 일단 이 수에서 바뀐 내용은
별로 없어요 일단 뭐 가장 중요한거는
그 못할 자가 좀 있던게 있거든요 편집과정에서 좀 문제가 생기니 몇개
있었고 제가 실수 로 한두개 정도 또 문제를 집으로 온 게 있었고 해서
그거 를 고쳐서 반영을 해서 나온게 2세 해요
아 그리고 그건 장난처럼 제가 만난 했던 얘기인데
일쑤 하고 또 하나 크게 달라진 점은 아 이제
저자 프로필이 라 그러나요
그게 조금 바뀌고 거기에 제 사진이 들어갔습니다
그 외에는 4 딱히 밖에 없어요 그래서 제가 왜 쉐이더 란 무엇이죠 란
얘기를 하려는 거냐 며 뇨
사실 이 책을 처음 쓸때 1장 2
아 쉐이더 란 과연 무엇인가요 라는 내용이었어요
그런데 아 여기에 제가 원래 넣으려고 했던 모든 내용을 집어 놓친
않았어요
그 이유가 뭐 있냐며 는
그
지면을 줄이는게 져 솔직히 가장 큰 목적이 없기 때문에 굳이 쓸데없는
이렇게 소설 같은 내용을 넣으면서 까지
책 9 수를 늘리지 말자 라는 얘기 없거든 그런 생각을 했었거든요 근데
그 제가 원래 대학에서 강연을 할 때는 쉐이더 란 무엇이죠 라덴 얘기를
언제나 그 히스토리 이러니까 역사 얘기 부터 시작했어요
이제 그 역사부터 그 빼먹은게 있었기 때문에 비디오로 이렇게 좀 아고
부분을 45층 외우려고 만드는 비디오 에요
음 그래서 이제 그래픽이 역사를 보면 사실 되게 재밌어요
반모 처음 3d 니까 3차원을 처음 할 때 그때는 이렇게 무슨 디렉터 x
라던가 오픈 주에 뭐 이런거에 도움을 거의 받지 않고 소프트웨어 전부다
처리해서 그려주는 게 보통 이었거든요
그 이제 그 때는 모든 연산을 한 마디로 3차원 그릴 때는 뭐 삼각형을
이제 3차원에서 그리고 각 삼각형의 그 표면에 입히는 색깔 이런걸 다
표현을 해 줘야 되거든요
그걸 다 아 프로그램에서 소프트웨어 에서 계산을 해서 화면에 뿌려주는
거였어요
그렇기 때문에 속도 상당히 늦을 수 밖에 없었고
이제 그러다가 아이 3차원 이제 점점 커지니까 이것을 좀 빠르게 만들 수
있는 방법을 찾아보자
라는걸 해서 이제 그 뭔가 유명한 회사들이
유명한 회사라고 어쨌든 뭔가 유명한 그래픽 카드 만드는 회사들이 3차원
가속 침을 만들기 시작을 해요
그런데 거기서 문제가 생기게 뭐냐면 워낙 다양한 가족 침이 나오는데
그러면은 게임 만들던 사람은 그 전에는 2d 그리던 사람은 말 그대로
그냥
목 가장 유명한 그래픽 칩 2개 용으로 해서 조금
그 코드만 다르게 해 왔고 화면에 그려 주게 하면 됐어요 근데 3000
으로 감성과 다양한 하드웨어가 나오니까 표준화가 안되는 거에요 그래서 아
어떤 카드 웨어의 상관없이 한 번만 짜는 모두 하루에도 수 있는 방법을
만들어 보자 라고 하지 나오는게
제모 디렉트 뿌리 라던가 오픈 지열이 라던가 그런게 나오거든요 근데 이제
거기서 의 문제가 된 게 뭐 있냐 며 는 일단 어떤 일괄적인 방법을 하나
제시해 주고 그러면 다른 모든 하드에서 똑같이 나온다는게 개념이 잖아요
그래서 그거에 문제점이 이제 모든 게임이 똑같아 고의 시작했다는 거에요
예전에는 그냥 소프트웨어 적으로 처리해 없으니까
정말 다양한 것을 프로그래머가 해줄 수 있었는데 이제는 그 디렉터 x
하는게 나옴으로 해서 거기서 어 뭐 내가 이제 이 표면에
무슨 뭐 아 이런 조명을 주고 이런 텍스쳐를 입히고 뭐 거기다 이제 범프
매핑 졸로 불룩하게 보이는 그런 베팅을 입히게 따
이렇게 하면은 그 결과가 나오는 거죠
그런데 문제점은 게임은 정말 많고 다양한데
각 모든 게임에서 거의 1초에 꼽을 수 있는 그정도 테크닉 나 쓰다
보니까 거의 모든 게임이 되게 비슷하게 보이는 현상이 나타나기 시작했어요
이제 그게
한참 플레이스테이션 2 나올때 구독 우모 시기적으로 보면 은 지금부터
1
10 년 전 9년 전 그때 남들 게임 보면 상단이다 비슷해요 모든 그 거
때 표면 개질 처리 가던가
이제 아 이거는 좀 아니지 않냐 생각해서 다시 프로그래머에게
뭔가 자유롭게 표면을 재질을 표현할 수 있는 방법을 주자 라고 해서
나왔던 게 이제
프로그래머 볼 수 있 어 라고 하는데 저희는 그걸 간단히 보통 쉐이더
라고 부르는 거에요 그러니까 예전에는
디렉트 x 에서 어 무슨 표면에서 이런 텍스쳐 입히고 울퉁불퉁한 텍스쳐
입히고 밤 플랩 핑 으로 해서 그려 줘 라고 했던 부분을
이제 프로그래머가 아 정말 이걸 똑같이 따라하고 싶으면 그렇게 프로그램을
짜 주면 되는 거구요
문제 뭐 그게 아니라 정말 신기한거 하고 싶다
뭐 나는 아무도 여태까지 안 했던거 하드웨어 지원하지 않는 걸 하겠다
그러면 프로그램은 직접 프로그램을 짜서
어 그 겉에 최종 에 최종적으로 나오는 색상을 바꿀 수 있는 색상과
조명을 바꿀 수 있는게 바로 쉐이더 프로그램이에요
그래서 이제 제 책에서는 고런 역사 부분이 뺐어요 왜냐하면 굳이 뭐 쉬
돌을 이해하는 데 반드시 필요한 내용은 아니라서 그 대신 이제 책에서
했던 얘기는 쉬 이런 얘기를 했죠
이제 쉐이더 에는 두 가지가 있다 한마디로 뭐 정점 쉐이더 픽셀 쉐이더
두개가 있는데 개념은 뭐냐면 3차원을 그릴 때는 결국에는 어떤 물체를 한
후에 그러는건데 저희는 보통 물체를 삼각형으로
그리 거든요 삼각형을 여러개 모아서 물체를 만든다고 생각하시면 되요
삼각형을 쓰는 이유는 사실 한가지 에요
삼각형은 언제나 표현이 가평 편하거든요
사각형으로 만들기 시작하면 사각형은 이 상태에서 표면을 1 그렇듯이 수도
있고 뭐 밖으로 뺄 수도 있고 그렇잖아요 그래서 표면이 않나요 그래서
저희가 생각해도 쓰는 이유는 그렇게 표면을 만들기 위해서 평평한 표면을
나 안 될 계산기 없었는데 이제 그 삼각형은 화면에 그러면 이제 그
카메라 위치에 따라 그리고 생각해 움직이는 위치에 따라 그 화면에 보이는
삼각형의 그
위치가 변하지 않아요 지금 보이듯이 그러면은
이런 거를 아 그때 카메라 위치 뭐 삼각형 위치에 따라 결국에는 최종
화면에 어디에 나와야 되냐 라는 걸 계산하는 함수 가 필요해요
그 함수가 저희는 정 점 쉐이더 또는 버텍스 쉐이더 라고 업소는 거에요
그러면 일단 화면의 사각형 1 그렸으며 는 이 삼각형 안에 있는 모든 그
표면 한마디로 화면에 보여지는 모든 픽셀이 인데 그 픽셀이 스 각형 한해
패들이 있잖아요 그 픽셀 들 마다 색상을 계산해서 그려 줘야 되요 그러면
그거 를 담당한 함수를 전에 픽셀 쉐이더 라고 하거든요 근데 저희는
쉐이드 해서 크게
정점 주의다 픽션 슈즈가 2개가 있다고 생각을 하고요
그러면 그렇듯 2시 더하는 이를 합치면 쉐이더 가 하는 일이 뭔지 그게
이제 책에서 설명하는 내용이 나오는 거예요 예 책에서는 제가 정확히
뭐라고 인지 좀 기억해야 할 때
아 이렇게 썼네요 쉐이더 란 화면에 출력할 픽셀의 위치와 색상을 계산하는
함수 이다
뭐 이렇게 살았는데 그리고 뭐 이렇게 설명도 좀 해 놨고 영어 의미도 좀
설명을 해 놨고 뭐 파이프라인 간단히 설명을 해 왔어요
네모 그거는 제가 다 읽으면 출판사에 누를 꽃 끼치는 일이 4
예 여기서 그만 아 둬야 될 것 같고요
제가 하고 싶었던 말씀은 이제 쉐이더 가 나왔 나와야 했던 그런 배경들을
그냥 가볍게 들어주시면
왜 우리가 쉐이더를 이따위로 짜고 인턴 찌 그게 이해가 좀 더 쉬울 거
같아서 에 그렇게 잠깐 얘기를 해 봤어요
그러면은 이 정도면 은 이제 뭐 쉐이더 입문 에 대해서는 라쉬드 의
정의에 대해서는 제가 할 말은 다 한 것 같고요
아 다음 비디오에서 또 뵐께요 예 뽑혔습니다
오 르
으
to a
으
w
w
wool
으 으
으 르
