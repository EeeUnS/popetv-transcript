오늘은 주석의 대해 말해 볼게요 줏어 리라면 커멘트 줘 고대에서 무슨 뭐
오늘 국가주석 이런게 아니라
이주석 이라는 것에 굉장히 이것도 의견이 분분 해요
주석을 어디까지 따라야 되냐 아니면 뭘 주석을 달아야 되냐
그 여러 사람들이 여기에 다르지만 저는 이렇게 생각을 해요
주석은
없을 수록 좋아요 이러면 지 돌 맞는데 제가 항 하려고 하는 얘기가
뭐냐면
제가 여태까지 비디오에서 말해 낮고 제가 공개한 코딩 스탠다드 에서 말해
낮지만
저는 기본적으로 코드의 가독성이 높아 이라고 생각해요
코드를 읽는 순간 그 코드가 무슨 일을 하는지 일반적인 프로그래머가 알
수 있는 정도의 코드가 나와야 된다고 보거든요
그러면 어떤 사람은 그런 얘길 해요 뭐 아 코드가 읽기가 그렇게 쉬운게
아니라 근데 제가 그런 말 한 사람의 코드를 받아 봤을 때 정말 꺼릴 게
힘들었어요
그리고 그 코드를 제가 귀 워프 면은 모한 코드 절반을 지울 경우도
있어요
근데 뭐 성능은 똑같거나 아직 그런 경우는 코드 아이 키가 훨씬 편해져요
그래서 코드가 독성에 대해서는 뭐 변수인 했던가 뭐 라든가 이런거는 코딩
스탠다드 문제니 거기가 두고
제가 하고자 하는 얘기는 코드는 그 자체로 읽을 수가 있어요 코드를 왜
있는 것만으로 이게 뭐라는 건지 알아야 되고 거기에 중요한 역할을 하는
게 변수 이름
구르고 음 얘를 뭐지 그 함수 이름 들 함수 이름과 매개 변수 이름 들
이 굉장히 중요해요
그것만 있는 것만으로도 굉장히 코드 이렇게 편해지고 코드가 좀 길어지고
로직이 이해가 안될 때는 중간중간 그 템포러리 변수에 넣어 가셔서 그
변수의 이름을 제대로 해 줌으로써 가독성을 높이는 것도 있죠 뭐 그렇게
하려면 또 이제 스페이스 2 잘하고 이런것도 있고 그런 부분은 되게
중요하고 주식보다 훨씬 중요한 거에요
심지어는 제가 뭐 실제 규 성 이렇게 달진 않지만 제가 볼때는 코드를
보면 이해가 되는거 위에 똑같이 주석을 달아놓은 코드 보면은 젊 주석을
지워 버려요 왜냐하면 이것은 말그대로
뭐 a2 콜 원 플러스 원 놓고 1 + 를 한다 라고 주석을 다는 거랑
똑같은 거예요
그런거는 정말 쓸 때문에 주석 이고 또 하나의 문제는 이런 코드가 한번
들어오기 시작하면 은
코드는 * 하는거예요 누군가 그 코드를 터치 하게 되고 코드를 바꾸게
되요 근데 그사람이 100% 주석을 바꾼 다는 보장은 없어요
그러면 좋죠 근데 실제 회사에 다니면서 그렇게 쓸 때문에 주석이 달려
있는 경우에
코드가 바뀌면서 추석에 안 밖의 능력을 정말 많이 봤구요
심지어는 9 추석이 필요한 경우 보니까 코드를 봤는데 잘 이해가 안되는
경우가 있어요 사실은 어쩔 수 없이 코드를 그렇게밖에 못 자는 경우가
있어요
그런 경우에 주석의 다른거죠 이 코드는 왜 이렇게 짧고 이래서 이렇게
작동한다
왜냐하면 사람들이 그걸 이해하고 코드를 보면 이해가 쉬우니까 아니면
코드에는 드러나 있진 않지만 그 어떤 데이터 라든가
뭐 다른 함수 호출을 하는 사람들
그쪽에서 만드는 가정이 있잖아요 데이터를 이 데이터는 반드시 뭐 이렇게
이렇게 오기 때문에 이렇게 처리 해야 한다라는
그런거 에서는 주석을 다는 것은 저는 천성 이에요 코드만 보는걸로 이해가
안되니까
한마디로 제가 하고싶은말은 코드가 일으키게 쓰고
코드가 아닌 그때 주석을 달아 라는 얘기에요
그리고 아까 말했던 뭐 가정 같은거 있잖아요 그건 솔직히 주석의 달기
보다는 써 틀을 박아서 무조건 깊 어 그중에 딱 멈추도록 만드는게 맞아요
그래서 여기까지는 과연 어느 부분의 주석을 달아야 되냐 라는 얘기 했어요
그럼 이제 그 다음은 이게
저는 함수에 도 가능하면 주석을 않다는 방향으로 가요 함수 이름과 함수
매개 변수가 분명하다면 그 자체로 추석은 필요 없다고 봐요
4 예외가 있어요 예외가 뭐냐면
공개 api
이 재미 있는게 뭐냐면 제가 공개 ap 라고 퍼블릭 ap 라고 얘길 하면
사람들이 내 엔진의 쓰는 몹을 모든 퍼블릭 api 퍼블릭 을 된 모든
함수에 주석을 단 한다고 생각하네요
아니에요 회사 안에서 쓰는 거두고 밖에 나가지 않는 라이더를 코드 라면은
까 우리가 어제 소스코드가 다 있는 상황이라면 굳이 거기에 주석을 다는
건 시간 낭비 고 필요없다고 생각해요
오히려 함수 이름과 함수 그 매개변수로 나와야 되지
그거에 대해서 무슨 세세한 것을 전부 다 쓰는거 자체가 저는 잘못된
거라고 봐요
근데 이 이제 퍼블릭 api 가 라이브러리 화가 되서 소스 코드가 없이
남한테 준다
남이 가지고 있는거는 함수 api 뿐이고 후드 내부로 못보게 되어 있는
경우
그런 경우에는 젓은 퍼블릭 함수의 주석의 좋아 한다고 봐요
주석 들어가서 까 함수 이름에서 분명하지 않은 그런 것도 있잖아요 오 이
값은 범위가 별시 아니면 뭐 익셉셔널 던진다 거나 이런 것까지도
주석은 자세히 있어야 되요 그래서 라이브러리 개발자 하시는 분들은
주석을 잘 유지하는 것에 대한 참 오버헤드가 그저 뭐 스트레스도 좀 많고
그래서 지금 제가 여태까지 한 걸 정의 라면은 코드의 기본은 주석이
없어야 한다 요
코드 자체로 읽혀지고 이해가 되어야 되지 거기에 주석을 달아서 이해시키는
하면 코드를 깨 깔끔하게 못자는 가능성이 높고
단 코드를 읽었는데 정말 말도 안 돼 이게 왜 작동한 지도 모르겠소 이게
왜 이런 짓을 하지 라고 하는 부분이 있어요
아까 말듯이 코드 아주 명백히 아니 들어가는거 그런거는 주석을 달아야
되요
그리고 세번째 라이브러리 화에서 소스 코드 없이 나한테 주는 그런
패키지가 있다면 그것은 주석을 다는 게 맞아요
마지막 네번째 이거는 의견이 분분한 거 많이 봤어요
코드에 주석을 달라고 하는 이유가 함수 위에다가
요즘 웬만한 언어들은 아니면 다른 라이벌 있어도 되고 뭐 툴을 써도 되요
그렇게 주석 위에 감수 위에 주석을 달아 놓은 거 그것을 이 프로세싱
해서 도큐멘트를 따로 뽑아 줄 수가 있어요 카트맨 테이션을 문서를 아예
뽑아져 자동으로
저는 그래서 함수에 다는거 되게 좋아요
그러나 어떤 사람들은 함수에 절대 달지 말고 차라리 문서를 땅 처음부터
만들어 란 얘기해요
그래서 뭐 이런 함수가 abcd 모두 썸띵 있다면 이문세 2 수험생을
쓰고 이거를 뭐 고친 다음에 매개 변수도 만들어서 문서를 제대로 만들어
입문서를 줘 라고 얘기하는데
이거는 그냥 의견이 분분 해요 저는 이쪽 진형은 아니에요 문 털을 만드는
진영아
저는 함수 안에 코드 안에 차라리 그걸 박는 지역이고
그리고 나서 그걸 그냥 간단하게 음 툴로 돌려받고 문서를 만들지 않은
중이에요 그리고 심지어는 모씨 샵이나 as 닷넷 같은거 하면 은 자체
패키지가 딸려 와요 html 웹페이지 만들면
거기에 주석을 처리해 같고 그냥 이 슬래시 해풍과 들어가면 은 굳이
곧바로 모든 함수 api 하고 매개변수 쫙 보여주는 그런것 자동을
해주거든요
그럼 그런거를 자동으로 해주는 데 굳이 귀찮게 그러나 생각이 들고
극우 제가 아까 말했듯이 코드의 주석이 있어도 가끔 주석과 코드가 따로
한다고 했잖아요
똑같은 얘기로 함수의 주석이 있어도 따로 가요
근데 그게 따로 가는 경우라도 이걸 어떻게 되죠 박스에 거쳐야만 이렇게
외부 라이브러리 쓴 사람들은 도움이 되니까 그런 걸 감안해서 하는 거죠
어 저렇게 되면 은 칠보 닭튀김 않으니까
그래서 그렇게 가는건데
음 문제는 이거를 따른 문서로 놔두면
오히려 더 틀려 질 가능성이 높아요 사실은 아까 뭐 그 코드 베이스를
평생이라는 사람이 좋지만 처음오신 이번에 이거 고치는 데 이 모 문서가
어디서 거치는 지 모르고 이러면서 문제가 있거든요
완벽하게 단어의 사람은 그 다 되는데 세상에서 완벽하게 들어 회사는 거의
없습니다
그래서 실수를 덜 할 수 있는 방향으로 계산은 거고
음 그래서 제가 생각한 주석 이란 건 그쪽 넘어 같아요
뭐 남이 이해할 수 있을 쩍 붙지 판단이 안 된다
그 다음 코드가 나미애 잘되는 그 다음이 안돼 라고 하시는 분들이 있는데
그 분들은 그냥
아 정신차리라고 하고 싶고 그런 분들이 보통 버거도 많이 만들고 자기
코드 써놓고
한달뒤에 보고 자기 이해 못해요 자기는 지금 짧기 때문에 이해가 되는 것
뿐이죠
변수 a b c d 적어놓고 이런 사람들 어 그거는 그냥 뭐라 그럴까
게으른 것을 반응하는 수단으로 밖에 안보여요 그래서 내가 남의 코드를
봤을 때 이해가 안되는 부분이 있다면 내가 그 따위로 코드 짜면 남기
이해가 안 되는 거거든요
그래서 그런 좀 동일한 기준을 가지고 코딩을 짜다 보면 되는데 이중
잣대를 많이 가지는 사람들은 그렇지 고 말하자 이 코드가 왜 이해가 안돼
근데 그 사람들은 남의 것을 이해 못해 보내 주시오 그저 그렇게 얘기
하고 싶었고 주석은 딱 네 가지로 정리하면
일단 주석은 안 적는게 원칙이다 코드가 있어야 된다
베일 번이고 이번 허나 코드가 1구 섬 가까이 이해가 안되는 경우 이해가
될 수 없는 상황이 있어요 그런 경우에는 주석을 단다
고 위에 그 3번 어 내부적으로 코드를 볼 수 없는 아까 그 외부에 같다
파란 라이브러리 이런 경우일 때는
퍼블릭 apa 가 프라이드는 상관이 없죠 아무도 안 보니까 우리 그만
보니까
퍼블릭 api 쪽에 주석을 잘 되도록 한다
아 4번 문서화 에서 문서를 따로 작성 아냐
아니면 그냥 api 위 코드 위에 주석을 작성한 야를 고려하면 은
이건 어쩔 와 되지만 저는 코드 안에 주석을 노는거 를 훨씬 서너 에요
그래서 한 4가지 정도로 정리 라고
음 포프의 주석 얘기는 오늘 이 정도로 끝내도록 하죠
뽑혔습니다
