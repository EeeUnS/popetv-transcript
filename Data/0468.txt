오늘도 c 플러스 플러스 얘기를 좀 더 할게요
c 플러스 플러스 11
그 이유 전에도 말했지만 이게 요즘 다시 나오는 이유는
아제 4q 아카데미 동영상 강의 를 촬영하면서 쭉 정리 하다 보니까 내가
쓰는건데
그리고 업계에서 필요한 건데 얘길 안 한 것들이 좀 있구나 라는 생각이
들어서 그런 얘기를 하는 거예요 그래서 오늘 할 것들은 아 아 뭐 그전에
제가 포케 아카데미 얘기를 자꾸 만지게 하는 것 같아서 그 그 강좌
링크를 비디오 밑에 걸어 둘께요
설명 해 그러니까 와서 보내고 들으시면 되요 광고입니다
농담이고 아 진담 이고 어쨌든 간에 오늘 얘기할 것은 컨텐트 베이 업을
아냐 컨셉이 아니야 컨디션 얼
베리어블 굳이 한국말로 번역을 하려면 조건 변수 라는 거죠 이게 생각보다
많은 분들이 아직 보시지 나 않았을 건데 음
멀티 뜰에 딩 하면서 에 트레이딩 라이브러리에 있는 것 중 일부인데
멀티 스레딩 하면서 특히 4 베리어 씽크 같은 경우 만들어야 할 때 즉
제가 예전에 한번 슬라이드 보여드리면서 멀티 스레딩 올바른 방법이라고
보여드린 그 비디오가 있어요
오프 티비에 그 비디오에서 말했던 요즘 cpu 가 굉장히 많아 질 때는
워커 스레드 방식 워크 시스템 뭐 잡 시스템
이런거로 해야 되는데 그럴 내면은 동일할 태스크 들을 여러개 한꺼번에
돌리고
모든 쓰레드가 끝날 때까지 베리어 싱크를 걸어야 된다
엄 이런 시스템을 구현할 때 기본적으로 이제
한 쓰레드가 실행이 되고 일단 다시 잠들고 나서 어떤 특정한 조건이
충족이 되면 다시 깨어나서 실행을 해야 되잖아요 그럼 이제 어떤 조건이
충족될 때 라는 거리지 이벤트라고 많이 해요 그래서 이제 이벤트가 올 때
깨어나서 일을 해야 되니까 그 이벤트가 올 때까지 기다리는 것
그렇게 이제 슬리 파는 거죠 그 스레드를 잠들게 하는 데 어떤 이벤트가
올 때까지 뼈 초 이런 게 아니라 그거를 뭐 탐지하는 그런 변수를 아니면
그런 모 쓰레드 의 방식을 이제 컨디션을 베리어블 써서 헤어 그 c
플러스 플러스 에서 제 컨디션을 베리어블 이란 이름을 쓰기 시작했고
아 뭐 굳이 왜 이름이 왜 들어 왔는지는 정확히 알아보지 않았지만
업계에서 그동안 흔히 쓰던 이름은 아니었기 때문에 제 생각에는 처음 이런
개념이 소개된 무슨 학술지 나 거기서 이름을 따온 게 아닐까 생각을 해요
윈도우 서쪽에서 이런거 비슷하게 해보셨던 분들은 보통 이걸 이제 이
이벤트 오브젝트 이런 식으로 생각을 하죠
어떤 이벤트 오브젝트 만들어두고 이벤트 오브젝트를 이제 여기에 시그날
신호가 올 때까지 기다리는 애들이 있죠
그럼 이제 걔네들이 있고 아 그 이제 웨이트 보시 그날 뭐 이런식으로
기다리고
그룹의 따른 쓰레드에서 어떤 조건이 만족 때 썩으면 노티 파이 하면은 그
c 그날을 기다리고 있던 한 오브젝트 한때 레드 만 개 깨어나게 할 수도
있고 아니면 은 모든 쓰레드를 동시에 깨어나게 할 수도 있고 그렇게
이벤트 오브젝트 라고 많이 아실 거에요 이게 들어온게 c 플러스 플러스
의 컨디셔너 데려 볼로 들어왔고
이게 왜 들어 왔냐 그러면 좀 전에 잠깐 얘기 할 때 마심 태를
보셨겠지만 윈도우 3 는 이런 거였다
그럼 당연히 리눅스 개념 폭포 직스 계열에서는
다른거 있겠죠 그래서 플랫폼 맛 공이란 방식이 없었기 때
동일하게 만들려고 이제 속초 계란 거에요
그 2 저도 이제 예전의 게임 엔진을 만들 때 이제 저희 회사 말고 따로
이제 사이드 프로젝트로 뭔가 좀 재미있는 게임 프로젝트를 만들다가 접은
게 있어요 거기서 이제 기본적으로 우리도 모든 제 업데이트 루프를 이런
워커 시스템으로 돌리겠다 생각이 들어서 c 플러스 플러스 11 기반의
컨디션 얼 베이어 벌써 갖고 워커 시스템을 구현해 했었어요
그러면서 굉장히 많은 삽질을 솔직히 했죠
그리고 그 삽질 한거 일부분 내용을 왜 이걸 어떻게 써요 올바른지 등에
대한 내용을 이제 4q 아카데미 강조해도 사실 높구요
뭐 그 다음에 이거 를 제대로 쓰는 게임 nz 아직은 제가
보지를 못했는데 왜냐하면 제가 뭐 이런 최근에 쉬핑 했던 게임들 이미
기존에 있던 워커 시스템이 있었기 때문에 그것을 굳이 갈아 엎을 이유가
없었 쪼 자체 개발해 탔던 게 있었고 걸 쓰고 있었고
내자 어쨌든간에 앞으로 만들어질 게임엔진 이라면 컨디션을 베리어블 쓰지
않을 이유는 없다 라고 생각을 해요
나중에 게임이 잘 되서 어디를 포팅 이 될 때 포터 빌리 티가 이제
보장이 되는 어느 그런 라이벌스 이미 조금 더 좋기 때문에
근데 제가 아까 좀 삽질을 많이 했다고 했잖아요 되게 재밌는 얘기를 들려
드릴께요 제가 강의자료를 준비하면서 이런이런 이러한 이제 단점들이 있다
이런 이러 이런거에 들을 조심해라 그런 개념으로 제가 설명을 했겠죠
당연히 누나한테
그 강의를 이제 이제 리뷰를 봐 주신 이제 괴물 프로그래머 분이 한 분
계세요
꽤 괴물로 인기 이제 명성이 있고 사실은 저희 업계 에서는
그분이 이제 딱 그걸 보고 나서 하신 말이 있어요 그분은 게임프로그래머
쉽기 때문에 대부분 이제 윈도우 스 만 쓰시던 부분이거든요
보고나서 컨디셔너 배려 불 이 꼴인데 왜 이것을 써야 되는지 모르겠다
라고 말씀하셨어요
내가 게임을 그냥 아 윈도우 3사 출시 할꺼면 윈도우 스 이벤트 오브젝트
쓰고 말고 그 이걸 아주 딴 들어 포팅을 하면은 이제 그것을 지금 리벌스
오피 패턴이 라던가 따른 스레딩 라이브러리 그 os 에서 돈 뜰에 딩
라이브러리를 따로 만들어서 쓰면 되는 건데 그렇게 하고 말지 자기네 이걸
안 쓸 것 같다 고 얘기 하시는 거에요
그 저는 그게 솔직히 굉장히 어느정도 동의를 해요 왜 지금 부터 말씀을
드릴 건데 일단 예전에도 몇 번 얘기했지만 c 플러스 플러스 언어의
문제점이 워낙 다양한 사람들이 끌고 가고 있다고 얘길 했어요 그러면 어느
한쪽에서 이것을 추가하려고 하면 다른 한쪽에서는 아 이거는 우리 플랫폼의
살이 너무 어려우니까 이렇게 하면 안돼
요렇게 저렇게 해 줘 라고 해서 모두를 만족시키는 방법으로 라이브리
디자인을 좀 가는 많이 있어요
그 대표적인 예가 컨디션에 베이어 그래서 나오지 않나 싶어요
고 얘기는 조금 뒤 하고 컨디션을 배려 보았을 때 주의하셔야 되게 한
두가지 정도가 있어요 1
컨디셔너를 베리어 보리라는 결과적으로 나는 이 개체를 기다리겠어
그리고 나는 아요 개체 c 그날을 주겠어 이 뮤텍스 라고 하자 그냥 2
락 그러니까 스레드 2개가 접근하려면 뭐 여기서 낙을 걸고 기다리고 락을
다시 풀어 주고 다른 틀에 산 락을 걸고 야 이제 도대
그래도 풀어주고 이런 과정이 필요하잖아요 그런 라 킹을 하는 메커니즘이
있는데 그 라킨 메커니즘은 쓸 수 있는 막이 c 플러스 플러스 에서
유니크 락 이라는게 있어요
그것 밖에 보세요 흔히들 이제 저희가 쓴다면 스코프 더 락을 쓴다거나
이런 식으로만 있을텐데
이거는 뮤텍스 에다가 유니크 락을 써서 말할 수 있고 어찌 보면은
유니크 락을 시프 풀에서 쓸만한 곳이 유일하게
컨디션을 배려 올 밖에 없지 않나 생각을 해요 일반적인 사용 용도 에서는
즉 컨디셔너를 베리어블 유니크 락을 각료 하기 때문에 어쩔 수 없이
유니크 락을 써야해서 유니크 락을 좀 공부해야 되는 단점이 있어요
그리고 그거 때문에 이제 이 여러가지 문제가 생기는 것 같은데
이걸 어떻게 설명해야 될까 좀전에 처음에 말했던 그런 문제점을 얘기를
할게요
모든 이제 언어들을 모든 스 플랫폼을 충족시키고 되게 이상한 표준을 좀
만들어 놓은게 있는데 일단 그 컨디션을 베리어블 하려면요
컨디션 얼 베리어블 그리고 나는 이 조건이 만족될 때까지 잠들게 써 그
아마 함수 이름이 웨이 틀 거에요
그 함수를 호출할때 거기다 유니크 락을 하나를 넣어 줘야 되요
그게 무슨 의미냐 일단 내가 락을 걸고 웨이트 할 때 락을 같이 넣어
줘요
그러면 이 웨이트는 딱 웨이트 하면서 웨이트 에 들어가면서 잠들면 서희
락을 풀어 줘요
그러다가 다른 쓰레드가 막 돌면서 또 자 이것도 뭐 락을 걸고 여기에
시그날 을사 주겠죠
딱 싸주는 순간 얘는 깨어나면서 아까 그 매개변수로 들어왔던 락을 다시
딱 락을 걸고 그 다음에 일을 진행하는 거에요
이렇게 돼야 하지만 이걸 이제 언어적인 거에요 지원을 해줘야 하지만 이
락을 이제 요 우 유 oo 그렇지 뮤텍스 라던가
아 그런거 접근 못하게 하는 것도 있고 c 그날을 쏠 때 속이 전에
잠들고 말게 레이스 컨디션 되면 안되니까 그런거를 보장하는 매우 좋은
방법인데
여기서 굉장히 조그만 이제 문제점은
유니크 락을 걸고 웨이트 했는데 웨이트 에 들어가는 순간 일하기 풀린다는
생각을 처음에는 못해요 왜
일하기 스코프 드랍 처럼 딱 있고 이미 딱 범위가 벗어 하면은 지워지는
락 처럼 되어 있는데 웨이트 라는 순간에 나길 풀린다는 생각을 이제 함수
명세를 아니고 멋모르는 단점이 좀 있는거예요 그래서 정확히 말하면 그
함수가 웨이트 & 얻나
아니면 뭐 그러고 이제 다시 깨어날 때 낙을 다시 잡아 온다는게 함수
이름에 좋았으면 다 있으면 명확하게 찜한 그런 함수를 너무 길어지기
때문에 에이트 하면 콜은 뒤에서 즉 뭐 깨고 풀어주고 이런 이제 과정이
일어난다 고 정도는 거냐
알아 주셔야 되고 거기 까지는 괜찮은데 가장 큰 문제 뭐냐면요
따 웨이트를 걸었어요 그쵸 그러면 이 오브젝트 컨디션을 베리어 브렛
누군가 않아 너 일어나 오더라고 노티 파일의 해주기 전까지 c 그날의
해주기 전까지는 잠들어 있는 게 맞잖아요
윈도우 스 에서는 그래요 근데 따른 어떤 플랫폼에서는 애가 그 조건이
들어 오지 않는데도 깨어날 수가 있어요 그걸 뭐 영어로 하면 무슨 뭐
이렇게 써있는데 까 뭐 뭐 약간 좀 개념이 아직 조건 했는데 좀 이르게
깨어났다
뭐 그때 그걸 뭐라 그러지
아기를 일찍 출산 하는걸 조수 조산 이라고 하나요 그런 식으로 약간 쫌
프리머 추하게 영어로는 이제 완벽히 고 준비가 되지 않네 알았는데 이제
깨어날 수 있다는 개념에 그런
그 단어가 있어요 저 지금 닿을까 먹었는데 에 스피어 쪽으로 시작하는데
그러면 저는 당연히 웨이트 해놓고 당 연 히
2 조건희 왔어 깨어 났다고 생각하고 코드를 작성하고 싶은데 그게 안되는
거야 사실은
이거를 뭐 더 나은 해결책은 다음에 벌 포드 말씀드리고
와 1 루프에 적어서 다 깨워 하는데 정말 내가 노티피케이션 이 들어온건
지를 확인하는 다른 변수를 확인하고 그 변수를 이제 세팅이 안되어 있으면
다시 잠드는 이런 과정을 이뽀 루프로 놓는 놓아야 지만 정상적으로 해결해
돼요 그렇지 않으면 깨어날 때가 있는 깨어나 니까
그래서 또 웨이 탐 술을 따른 이제 오버로딩 된걸 보면 은 아까 말씀드린
락을 받는거 베드 옆에 이제 남자처럼 함수 포인터 라고 할게요 함수 캐
체 함수 개체를 받는 그런 또 두 번째 매개변수가 했어요 그게 뭐 하는
거냐
아까 말했던 게 뭐 아이 루프 있는 조건을 거기에 넣어 지면은 지가
알아서 깨어났다 가도 그 조건이 충족이 되면 안됨을 둘 중 하나의 못
조건이 충족이 안되면 다시 잠들고 다시 잠들고
그러다가 정말 제대로 높이 계셔도 들어왔을 때 때 깨어나서 이 조건을
봤어
그니까 이 조건에 어떤 분리 엄 값이 세팅이 된거죠
그러면 아 이게 실제 노티피케이션 게 맞구나
그럼 그제서야 제대로 깨어나서 처리를 해요
이제 아따 그 분이 제가 왜 이걸 써야 되는지 모르겠어요 라고 했던
부분이 바로 이건 것 같아요
이벤트 오브젝트 걸고 겨 이벤트 시간 할 때까지 기다리라고 했으면 당연히
언어에서 기다려주는 게 맞지 그 그게 무슨
이 언어가 지원한 어떤 플랫폼에서는 이게 조건이 충족이 안 되도 깨어날
수가 있기 때문에
그거를 허용해 주기 위해서 언어 디자인의 이렇게 했다
그 자체가 잘못된 거죠 그래서 뭐 표준화 시키는 것은 되게 좋은데 그
순간에 언어 표준 그 위원회는 누구든 좀 정신 제대로 차리고
그렇게 말했어요 않은것 같아요 아니 이건 너의 os 에 문제지
이 언어에서 이 조건 자체가 시그날 들어오면 깨어나는 건데 그 걸으니
내가 충족 뭐 시켜 니네가 내부에서 뭐 여기서 뭐 코드를 어쨌든 만들어야
되잖아요 컴파일할 때 컴파일하는 과정에서 그 코드에서 니네가 알아서
컴파일 하더니 4 컴파일러가 컴파일러가 해야 될 일이지 뭐 디자이
언어 스펙 자체가 해야 될 일 아니라고 딱 9분 시켜 줘야 했는데
말도 안되게 이런 요건이 들어온 거죠 뭐 제가 그
처음 스펙을 이제 누가 검토했고 누가 제실 했는지 모르겠는데 제 글 안
봤는데
아니면 제시한 사람이 그냥 윈도우에서는 이렇게 제대로 동 가는것 모른 채
따른 os 좀 제대로 안 도는거 에 익숙해서 그게 당연히 그런거겠지 라는
생각으로
뭐 제안서를 낼 수도 있고 그래서 어쨌든 간에 컨디션 얼 베리어블 쓸 때
이제 주의하셔야 될 것은 그 거에요
조건이 만족 않는데 깨어날 수 있는데 그 조건이 만족 됐다는 가정을
어코드 짜면 은 그게
뻑 이 날 수 있다는 거 윈도우에서 돌려 버 게 안 날 거야 아마 그
상황이 없다고 저는 알고 있는데 뭐 또 모르죠 뭐 달지도 근데 제가
알기로는 뭐 윈도우 스 내부 구현 으로 는 분명히 당연히 그런 이렇게
os 지원하는 그런 이제 함수로 대치하고 있을 테니까 내부적으로는
문제가 없을 거라고 생각을 하고 다이제 크게 다른 플랫폼 되면은 이제
버거가 보이기 시작했죠 잘못된 코드 짜 넣으면 곧 좀 말이 안되는 거에요
4t 포터블 et 를 보장하기 위해서 이렇게 만들어놨는데
언어 스펙트 잘못 만들어 와서 한 플랫폼의 제대로 2 연계 따른 플러스
보다 안도는 상황 자체가 나온다는 것
그리고 그 스펙 자체가 정말 뒤집어 보고 까보 고문서 다 읽어보지 않으면
함수 경관 부분은 도무지 감이 안 오겠지 않았다는거
고런 부분에서 약간 좀 아쉬움이 있는 부분이 컨디션을 베리어 버리고 그
뒤에 이거를 뭐 고치겠다는 시도가 없는거 봐서는
뭐 한동안 고칠 일은 없지 않을까 라는 생각을 해요 그래서 어쨌든간에
아
오늘 얘기를 대충 정리하고 넘어갈 수 있을 것 같은데
이벤트 오브젝트 이런게 이제 들어온 거구요 컨디션을 데려 골로 걸로 그
잡 시스템 이런거 만들 때 베리어 싱크 제대로 걸기 위해서는 베리어 마
제대로 걸기 위해서는
이제 포터 빌리 t 를 보장하는 아 그런 코드를 작성하려면 컨디션을
배리어블 쓰는 게 맞다
그런데 지금 말씀 드렸던 제일 마지막 말씀 드렸던 그 굉장히 기괴하고
굉장히 이상한 부분을 또 코드를 작성 을 잘 해줘야 된다
이코 잘 모른 살로 코드 읽어도 이 안될 거 이거 왜이런지 타지 라고
생각될 정도로 그래서
고런 단점은 있지만 어차피 스레딩 라이브러리 라고 하는거
특히 꽤 잡 시스템 이라고 하는것은 한번 만들고 테스트를 충분히 해
놓으면 그 뒤로 부터는 뭐라 킹 않나 키 메타 느 집은 별로 고칠 일이
많지 않으니까
그래서 다 뿐 건 아니라 근데 뭐 기존에 이미 있는 코드가 있으면 굳이
바꾸라고 가 하고 싶잖아요 새로운 코드는 그래도 좀 작성하는 게 좋지
않을까
그 정도로 하면 될 것 같아요 그리고 아까 짜투리 잠깐 얘기했듯이
컨디션을 베리어블 쓸 때는
으
유니크 락을 써야만 한다 그래서 또 유니크 락을 억지로 한번 배워야 되는
단 점 이라고 할 수도 있고 뭐 장점이라고 할 수도 있고 그것도 있다
제가 요건은 4q 아카데미 하기 전부터 알던 건데 제공 위를 제대로 안
한거 같아서 비디오 한번 더 만들었어요
이러고 나서 있는 믿어지지 남한테 또 있으면 되게 황당할 것 같긴 한데
뭐 어쨌든 뭐 저도 망각의 동물인 2
그렇게 하고 넘어가야 줘 예 뽑혔습니다
