예, 안녕하세요 포프입니다. 음..
누가 그랬더라. 얼마 전에 무슨 비디오 보고나서
저 아는 동생이지..?
동생이, 처음 시작할 때 너무 암울하게 시작을 한다는 얘기를 했어요
"어.. 안녕하세요 포프입니다.." 이러면서
뭔가. 밝고 새롭게 시작하려 그러는데. 제가 그럴만큼 별로
밝고 새로운 걸 몰라서 ㅎㅎ 못할 것 같고
고민 좀 해봐야겠어요.
오늘 할 얘기는. 예전에 했던 제 말을 완벽히 뒤엎는
센티미터를 쓰세요 흐흫흐
얼마 전에 그런 얘기 했잖아요. '미터를 쓰세요' 하면서
'미터를 쓰자' 였나? 비디오 제목은 그거 였던 것 같고
그래서 미터를 쓰자는 얘기한 걸 비디오 링크를 걸지 안 걸지
잘 모르겠지만. 귀찮아서 안 걸 수도 있어요
결과적으로, "게임쪽에선 floating point error라던가
그런 걸 생각할 때 너무 숫자가 크면 안좋으니까
적당히 미터정도로 하는게 웬만한 게임에서 잘 동작을 한다"
라고 얘기를 했어요.
그러고, 그 비디오를 보고 라고양이 저한테 딴지를 걸어왔어요.
뭐, 딴지를 건건 아닌데
"일단 한 쪽 면으로는, 왜 미터를 쓰게 했는지 이해가 됐다.
우리 회사에서부터 시작하고 뭐하고
하지만 아티스트한테는 센티미터가 더 편하다"
라는 얘기를 했어요.
그래서 그 얘기를 들어보니까
첫 번째 얘기를 하는 거는
3DS MAX같은 경우에서, MAX나 MAYA같은 경우에서
거기서 센티미터나 미터를.. 예를 들어서
미터로 생각을 하고 작업을 하면
가끔 굉장히 모델에 가까이 가서 고쳐야 될 일이 있잖아요
근데 그럴 경우에, 진짜 센치 단위로 가서 고치고 싶은데
카메라를 너무 가까이 가면
니어 플레인(near plane)을 보통 cut off 하니까
그게 문제다
근데 사실 그거는 크게 문제가 아니기도 하지만
왜냐하면 viewport camera같은 경우는
설정을 바꿀 수 있는 걸로 알고 있거든요?
근데 이제 MAX의 문제는 모든 수치를 넣을 때
소수점 세 자리수 까지 밖에 안들어가요
아니면 increase / decrease 하는 단위가
0.01단위 인가 0.1단위 인가? 너무 커서
그거 일일이 쳐서 설정하기 귀찮다는 얘기도 있고
그리고 마우스 zoom in / out 할 때
mouse wheel 해서 zoom in / out 하잖아요
그게 MAX 인가 MAYA인가
MAYA는 한 방면이고
MAX는 오른쪽 버튼 누르고 좌우로 움직이고
ctrl 누르고 이런 걸텐데
그럴때 그게
움직이는 수치 단위가 정해져있으니까
물론 역시 바꿀 수 있겠지만
그것 때문에 조금 귀찮다는 얘기도 했고
그러고 센티단위 밀리단위로 모델링을 조금씩 옮기고 싶을 때
MAX에서는 숫자를 소수점 두 자리 세 자리 까지 밖에
안보여주니까. 그거를 일일이 손으로 치기도 귀찮고
그런 얘기를 하더라고요. 그래서 들어보니까
맞는 얘기구나. 물론 이리저리 고칠 방법은 있지만
그렇다고 아티스트 work flow를 불편하게 만들 이유도 없잖아요
들어보니까 맞는 얘기고
어떻게 보면 MAX나 MAYA에서 그거를
제대로 지원을, 그런 손쉬운 수치 이런 문제나
UI 문제나 setting 문제 같을 거를 쉽게 안해주는 거.
카메라 zoom in / out 할 때, 그런거 제대로 알아서 다이나믹하게
못해주는 거. 그런 것도 따지면은
그래, 툴이 구린거야 라고 할 수도 있겠지만
구린 툴은 아니지만..ㅎ
UI 쪽이 조금 구린거야 라고 말할 수 있지만
그 UI가 구리다고 아티스트를 고생하게 할 순 없잖아요
그래서 제가 지금 하는 얘기는
cm를 쓰자
물론 게임에서 말고 아트쪽에서
그래서 아트쪽에서 cm를 쓰고
그거는 근데 character artist한테 말이 되는 얘기일 수도 있고
environment artist한테는 말그대로 미터가 더
맞을 수도 있어요 여전히. 왜냐하면
스케일이 다르잖아요. character artist는 기껏해봐야
전체 크기에서 1~2m 다루는 정도의 아티스트지만
environment artist 툭하면은 몇 백 미터, 몇 십 미터를
다루는 artist니까
오히려 미터가 맞을 수 있다는 생각을 해요
근데 뭐 그거야 회사에 맞게
어쨌든간에 하면 되는 거고
중요한 거는 character artist를 cm를 써서 작업을 하게 한다면
문제없잖아요? 솔직히 프로그래머가 tool 하나 만들어서
그 art 뽑아가지고
fbx로 옮겼다가 그 뒤에 게임 데이터로 옮길 수도 있고
아니면 곧바로 게임 데이터를
뽑아내는 경우도 있을텐데
그때 그냥 유닛을 conversion 해주면 될 것 같아요
게임 데이터하고 art 데이터가 다르게
art 데이터가 cm 단위라면 나누기 100 해주면 되는 거니까
그거는 어렵지 않겠다 생각이 들더라구요
제가 저번에 했던 얘기는 너무 프로그래머 입장의 얘기였던 것 같고
artist의 work flow나 이런 것 가지 따지려면
그런 변환 과정이 필요할 것 같아요
그럼 어떤 의미에서는 이게.. 비디오가 너무 짧은 것 같아서
늘려보려고 ㅎㅎ
어떤 의미에서는 이게 사실은 과연 프로그래머가 아티스트에게
뭘 해줘야 하느냐 하는 그런 얘기까지 들어가거든요
대표적인게 아티스트는
프로그래머는 당연히 최종 게임 데이터를 생각해야 되기 때문에
그 데이터를 생각해야 되고
아티스트들은 자기가 가장 일하기 편한 환경이 필요하기 때문에
그런 거를 생각해야 돼요
중요한 거는 이 둘을 연결하는게 결과적으로는 tool 이거든요
게임 데이터 굽는 툴
그거를 어떻게 만드느냐에따라 양쪽 다 편하게
살 수 있는 방법이 있다고 봐요
대표적인 얘기로 옛날에
제가 스페이스 마린 만들 때 customization을 했었어요
근데 customization이 되게 악랄했던게 뭐냐면
스페이스 마린 게임 자체가 원래 table top 게임에 있을 때 부터
페인팅을 되게 중시하는 게임이거든요
customization. 막 갑옷 페인팅 하고
무슨 색깔의 글로스 페인팅 바르고
무슨 데칼 바르고
그래서 그거를 지원하려니까 다 좋은데
페인트 컬러를 보통 아티스트가 정하잖아요
그럼 그 아티스트가 정해서 게임에 접목을 시켜야 하는데
아티스트가 photoshop이라는 간단한 tool 가지고
열심히 모든 걸 쉽게 만들 수 있는데
데칼 들어가는 패턴, 마스크에다가 글로시 색깔에
그런 거 다 있잖아요
그렇게 포토샵에서 간단하게 봤는데
그거를 게임에서도 그대로 접목했으면 좋겠다는 얘기를 하는 거에요
뭐 그러면서 그게 뭐 수치를 적어서 옮기는 방법도 있겠지만
더 중요한 건 거기서 텍스처를 구워내는게 있었거든요
어떤 어떤 어떤 거를 블랜딩 해가지고 이렇게 텍스처를 구워내갖고
그 텍스처를 게임 속에 쓰겠다
그래서 저희는 그 때 work flow를 어떻게 했었냐면
아티스트가 다 그거 한 다음에 만든 다음에
디퓨즈맵, 스펙맵, 노말맵 따로 만들어서
주고 이런 거 다 좋은데
어찌보면 좀 복잡하잖아요
노말맵 스펙맵 디퓨즈맵 다 솔직히 UV 스패이스 같은거고
그리고 스펙맵하고 디퓨즈맵은 상당히 관련이 깊기 때문에
이거를 차라리 아티스트가 한 번만 그리고
저희가 어떻게든 간편하게 뽑아낼 수 있는 방법이 없을까 고민하다가
저희가 그 때 만들었던게 포토샵 스크립트를 아예 만들었어요
포토샵이 스크립트를 지원해요
물론, 어도비니까 굉장히 구리죠
어도비는 구리다고 해도 돼요. 솔직한 얘기로
제가 어도비한테 데인적이 너무 많아서
그 포토샵에 있는 스크립트를 써갖고
온갖 거를 다 할 수 있어요
그럼 저희는 어떻게 썼냐면은 아티스트들이
원하는 레이어들 이런 거 있잖아요. 그런 거 다 원하는대로 해갖고
색깔도 바꿔가면서 지네가 다 테스트 해보고
그러고 이제 노말맵 디퓨즈맵 스펙맵을 다 레이어 그룹으로 만들어서
결과적으로 기반, 베이스 이미지는 같지만
그 위에 어떤 레이어로 어떤 블랜딩 하느냐에 따라
최종 결과가 나오게 그렇게 레이어 스택을 쌓았어요. 포토샵에서
그러고 네이밍 컨밴션을 정해서 특정한 이름으로 지어놓으면
나중에 다한 다음에 버튼 하나, 아마 메뉴 내려가지고 뭐 누르는게 있을 거에요
그 메뉴 하나 고르면, 그 스크립트가 돌면서 그거를 따로따로 떼어내갖고
알아서 뭘 키고 뭘 끄고를 결정해서, 레이어를 뽑아서
최종 이미지 디퓨즈, 스펙, 노말맵까지 저장했던 적이 있어요
그래서 그런 툴 하나 잘 만드는게 상당히 게임 개발이 편해지는 것 같아요
아티스트보고 일일이 그거를 따로따로 저장하라 그러기도
너무 매뉴얼 작업도 많고 실수도 많고
그러고 어찌보면 아티스트가 아트를 그려야 되는 사람인데
그 사람들 보고 프로세스를 어느 정도는 알아야 되지만
알지 않아도 되는 프로세스까지 괜히 잡다하게 시키는 것도 쫌
시간낭비인 것 같고
똑같은 얘기로 프로그래머도 어느정도, 그래픽 프로그래머라면
어느 정도 아트툴도 하고 아티스트가 쓰는 프로세스를 알아야 하지만
제가 굳이 알지 말아야 될 건 다 알 필요도 없잖아요
그래서 그런 면에서 그게 참 좋았다고 생각하고
센치하고 미터를 쓰자 도 똑같은 얘기였고
이런 식으로 아티스트가 쓸 수 있는 그런 툴을 만들어서
아티스트는 그대로 작업을 하고
프로그래머는 원하는 데이터 뽑아내고
그런건 또 하나의 얘기였고
그러고 요즘 그부(?)이 점점 각광을 받고있기 때문에
테크니컬 아티스트라는 직종이 점점 커지는 것 같기도 해요
근데 한국에서는 테크니컬 아티스트가 그냥 아티스트 매니저 개념으로
가는 경우도 있는 것 같긴 한데
사실은 전혀 그런 건 아니구요
아트도 좀 잘 이해하고 프로그래밍도 잘 이해하고
양쪽의 천재는 아니지만 둘 다 적당히 이해를 하기 때문에
그 중간을 연결해줄 수 있는 브릿지 개념을 해줄 수 있는 거죠
말 그대로 포토샵 스크립트 같은 경우에는 순수 프로그래밍 쪽은 아니잖아요
그러면 텍스처 작동방법 알고 아티스트 워크플로우 이해한 다음에
아티스트가 정말 편하게 작업해서 버튼 하나 누르는 스크립트를
만드는 것도 중요한 거고
그러고 가끔가다 아티스트가 해야되는 굉장히 좀
tedious한 일들이 있잖아요 자잘하고 귀찮은 것들
예전에 이제 스포츠 게임 만들 때는
플레이어 헤드 모델이 있었어요
그게 그냥 100 몇 개 있었는데
그게 뭐가 하나 문제가 있어가지고 전부다 바꿔야 했는데
그거를 아티스트보고 고치라 할 수 없으니까
차라리 저희가 MAYA에서 스크립트를 짜가지고
한 번에 배치를 돌린 적이 있거든요
그런식으로 하는 거. 그게 이제 테크니컬 아티스트들이
점점 각광을 받는 이유이기도 해요
뭐 이정도면 주저리주저리 말도 많이 했고
제가 볼 때는 시간도 충분히 늘린 것 같으니까 ㅎ 끊을게요
예 포프였습니다
