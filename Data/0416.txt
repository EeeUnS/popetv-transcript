얘 아니라서 4p 입니다 음 조반 편에 이어서 요금 편도 포프 tv 설치
엔진 얘기를 좀 더 알 거에요
저항 편한 그냥 목이 늠 적 인 내용 왜 만들었는지 어떤 이코 시스템이
있는지 어떤 아이디어를 더 내야 꼬모 얻어갈 방향이 어디인지 이런 걸
얘기해 따면
이번편은 정말 그 처음 기획 이 나오고 나서 젊 생각을 하고 나서 제가
이틀 동안 이걸로 뭘 어떻게 만들었는지를 설명을 하려고 해요
그냥 제가 생각이 흐 쿨러 가던 방식을 제가 신현재 기억하는 한도에서 1
지금은 341 지났기 때문에 그렇게 얘기 할게요 그럼 처음에 이제 이걸
만들기로 했을 때 까 주간 단 했어요 그냥 아 구글처럼 검색 엔진이 있고
키보드 치고 검색 누르면
비디오들 나오게 하자 실상 그 거였죠 그러면 아
간단하게 웹 사이트 올리네 제일 편한게 뭐냐 그러면
었 다 내 코스만 되겠구나 그래서 단내 코어 루
이제 bem 뭐 웹사이트 만들어 갔고 겠다고 올리는거 그것까지 모호한
5분이면 되니까 그 올렸어요 올리면서
내가 과연 여기에서 아 유저 관리가 필요 할까
그러면 보통 사람의 유적 알리는 필요가 없잖아요 그러나 이제
관리자 4 기능들이 어깨가 있기 때문에 그 관리자 기능을 하기 위해서
유저 관리 해야 겟다
유저가 일이 필요 하겠구나 그래서 유저가 입을 만드는데
그 제가 따로 막 유저 아이디 만들고 패스워드 만들고 이렇게 하기가 싫은
거에요 그래서 아 그러면 그냥 우리 흔히 다 쓰고 있는 os 이제
제공하는 사람들이 있잖아요
5포트 그런 서비스드 그러 모습 중에 이제 이 서비스를 이용해서 os 가
되게 하자
단 로그인은 보통 오스람 여는 회원가입에 os 를 적응하면 아무나 될 수
있게 하잖아요
4 그 대신에 아우 리가 이미 알고 있는 그런 내가 알고 있는 사람들만
관리자가 언어를 출 되면 그냥 앱 세팅 같은데 거기에
이메일 주소를 몇 개 집어 넣고 컴 마음으로 분리시켜서
이 사람들 중에 하나며 이제 가입도 허용하고 로그인도 허용하지만 아니면
그냥 아예 안 되게
그래서 그런 이제 os 믿을 모듈을 들어갔고 예치 번 왔죠
그럼 일단은 관리자페이지 보이는 것 까지는 거의 가 된거예요
그럼 그 다음에 이제 제가 하려고 했던 것은 아무 최소한 페이지는 2개가
있어야 되니까 그런 메인 페이지가 있고 메인 피서 뽐 집어 넣고 버튼
누르면 설치 페이지로 가는 데 이 텍스트로 집어넣은 게 이제 url 에
나오게 해야 되니까 그렇게 리퀘스트 뭐 이런식으로 해서
미디액트 헤어 미디액트 아니구나 눌르면 은 캘리코 s 에서 썰 치 퀘스천
마크 쿼리 그런 모르나 오게 검색어 들어가 너까지 만들자
그래서 그런건데 mbc 페이지도 쉽게 만들 수 있잖아요 그래서
만들고 이제 그거 따라 이제
이제 페이지 내비게이션은 만능 거에요 돼지들이 계셔야
그럼 그 다음 해야 될 일은 당연히 데이터베이스 디자인 이었어요 제가
데이터를 있어 어떤 데이터를 넣고 아 뭐 이 데이터를 어떻게 그 건지
4 기본적으로는
뭐 돼 간단하게 얘기하면 뭐 다른 테이블도 있지만 결국엔 제가 필요한
것은 비디오 정보 많이 필요했던 거에요 근데 이제 비디오 마다 id 가
있고 그 아이디는 유튜브에서 이미 비디오 id 가 안 저를 끝장 9
그전에는 텍스트가 있거든요
그럼 그걸 id 로 만들고 그래서 제제 db 에는 크게 id 로 들어가
있어요
그리고 이제 제가 실제 검색할 때 필요한 정보 등 타이틀 뭐 유튜브에서
가꾸어서 긁으면 되는거고
그리고 디스크 픽션 끌고 왔고 그 다음에 이제 필요해 땅에 태그 였는데
태그는 여러개 거든요
전부 이제 당연히 태그 페이지를 따로 마이 테이블을 따로 만들어서 골인
필요 엮어 갖고 여기에 들어간 태그는 이 겁니다 라고 보일수도 있는데
제가 그렇게 걱 태그를 따로 검색을 해야 될 일이 까이 제 1 태그 태그
를 따로 검색해야 될 일이 생각보다
없었다고 하죠 아니면 다른 식으로 설치를 만들었다고 하고 그래서 그냥
태그를 컴 마로 분리시켜서 컬러만 아이 집어 넣었어요
이제 그 다음에 나오는게 캡션 이었거든요 문제는
캡션 이 약간 뭐 전 비디오에서 말했듯이 이제 3가지가 있어요
책에서 나온거 아니면 누군가 선수 만들어서 유튜브에 공원 해준 거 아니면
유튜브에서 자동으로 발판 된거
그 일단 그 셋중에 가장 좋은거 하나만 젖을 거기 때문에 어차피 그냥
방식을 그러시고 만들어 지금 패션 이 들어가고 컬러 마나의 들어가고
이 캡션 타입이 뭔지 만 알면 따른 새로운 캡션 이 나왔을 때 이거
받아와야 말지를 결정할 수 있으니까
캡션 타입의 세 가지 중에 하나를 놓구요 이름은 정확히 뭐라고 했니
기억안나지만 뭐 커스텀 메뉴얼 스탠다드 뭐 이런 실수도 있고
오토 메뉴얼 커스텀 이런 시킬 수도 있고
그래서 그걸로 써요 그리고 마지막에 있는건 왜 단순하게
뭐 이거 비디오가 실제 출시된 날짜 언제냐
그리고 최종적으로 이 티비에서 고쳐 이 날짜가 언제냐
이정도만 박 않았어요 그래서 테이블은 그렇게 디자인을 했고 그리고 그
웃음 제 페이스북에서 누구 한 분이 sql 인젝션 모델의 런데 - 얘기
했었는데 제가 다 좀 더 자세히 sql 인젝션 을 달라 그랬어요 정확히
100
제가 orm 을 그냥 썼기 때문에 sql 인젝션 히트에 대비가 되어
있다고 생각을 했는데 이제 그분 말로는 인젝션 한계 실행이 되더라 라는
식으로 말씀하시는데
저한테 뭘 시행 하시는 지 모르기 때문에 제가 좀 그 쿼리는 달라 그랬죠
그 db 도 그렇게 만들었어요 그러면 이제 그 다음에 할게 가장 큰
일이었는데 그 유튜브 어스를 연결을 해서 거기서 이제
데이터를 그리고 오는 거였죠 그러면 이제 뭐 유튜브 apl 막 지 저보고
뭐 하면서
뭐 제가 필요했던 결과적으론 그 오프라인 모드가 필요했던 거에요 이
서버에서 이 토큰을 가지고 있고 계속 뭐 하루에 한 번씩 몇 시간에 한
번씩 유튜브 api 때려서 새로운 정보가 있는지 보고 가져오고 아니면은
그 관리자가 이제 관리제 페이지가 서모 버튼을 누르면 그거에 따라 유튜브
좀 작업이 진행 하고 이런 거였는데
그래서 오프라인 모드 os 문서 뒤져가면서 뒤 지구 이렇게 만들었죠
거기서 뭐 베트 오브 프랙티스 이거 이렇게 해야 돼 라고 써있어서
따라했다 실제 / 토크 난 놀라워하고 고생도 하고 뭐 어쨌든 다시 한번
구글의 좀 문서와 능력이 약간의 좀
앞쪽 말 안타까움을 느끼는 부분도 있었지만 대부분 괜찮았고 듣고 이제
유튜브 이제 ap 에 페이지가 면은 제가 실행을 해 볼 수 있어요 그
웹사이트 안에서 테스트로
그래서 이제 그런거 해가면서 정보를 막 수집하게 시작을 한 거죠
처음에 개념은 j 제 채널에 있으니까 채널의 있는 비디오로 다 불러 온
다음에
거기에서 어제 본 방에 들어간 비디오만 골라 오는게 목적 이었어요 사실
그런데 그렇게 하려다 보니까
내가 이제 본방 인자 인지 알 수 있는 방법이 쉽지가 않은 거에요 물론
라이브 안건은 본방이 아니라고 할 수도 있겠지만 뭐 그 외에 제가 따로
올림픽 유도 좀 있거든요
그러면 이걸 어떻게 디텍트 를 해야 될까
그리고 또 하나는 제가 비디오를 올릴 때만 1 화이 와 이런 식으로
이름을 달라서 달아서 올린 적은 없어요 근데 아 제가 제목에 넓지만
처음 비디오로 올린 파일에는 숫자가 달려있어요 1 2 3 4 이런식으로
그래서 제가 볕 한지를 거기서 알아서 보고파 같고 내 썰 체인지 4 보여
주고 싶단 생각도 했는데 제가 가끔 들 떨어져 받고 똑같은 숫자를 몇번째
그런적이 있더라구요 그래서 아 그것도 안 되는데 그러면 올린 순서대로
찾아야 되는데
아 뭐 그 거야 이제 비디오 퍼블 시대는 데이트 대로 보여주면 될까
상관이 없지만 이제 그 순간에 이 숫자를 기반으로 해서 본방을 찾아볼까
않은 생각될 쫌 건 좀 헷갈리고 꽂고
그래서 고민하다가 어떻게 했냐면 은 채널로 시작하는게 아니라 플레이
리스트에서 시작하기로 했어요 제가 다행히도
여태까지 나왔던 본방 모두를 플레이리스트 하나의 집어넣어서
거기에 이제 본방 전체라는 플레이 스타 있어요
그럼 어차피 새로 올라오는 본 방들도 계속 거기에 올라 갈 거고 라이브는
거기에 올릴 생각이 없으니까
그러니 플레이 리스트가 바뀌는 걸 보고 있다가 이제 이 플레이스가
바뀌었을 때 마다 새로 정보를 끌고 와서 이제 보여주자 라는 식으로 했던
거죠 그래서 처음에는 채널 기반으로 해서 모든 비디오를 끌고 오려고
했지만
결과적으론 플레이리스트 때가 내가 원하는 플레이스 니 거야 라고 등록을
않아야 두고 그 플레이 리스트에서 새로운 비디오 올라올 때마다 이 새로운
비디오 정보들을 곡의 했어요
그럼 뭐 그 안에 뭐
모든 유튜브 api 2 태그가 달려 있거든요 이 태그 라는건 이제 컨텐츠
해 쉬라고 건 맞는데
그거를 따라서 이제 음
새로운 비디오가 올라 남한은 안 올라와 나를 검색하고 는 법도 있었는데
그건 이제 마지막을 안 했던 이유가
뉴 튜브 ap 가 페이지 네이션 이 되어 있고 한 번에 잎의 어쩔때
50개 이상의 정보를 못 불러오고 거기 달린 이태근 그 페이지에 관한
건데 제가 비디오를 보여주는 순서가 옛날꺼 프 트 의 준수 저 땜에
새로운 비디오가 올라가서 제일 밑에 들어가요
그럼 처음페이지 안 나오거든요 그럼 거기서 간이 택이 바뀌는지 안 바뀌는
정확히 확신이 없어서
그런걸 안하고 대신 2 플레이 리스트에 있는 비디오 수가 몇 개냐
그리고 내가 저번에 봤을 때 비디오 수가 몇 개 연 냐에 따라서 비디오
숫자가 밖에 쓰면 새로 정보를 끌고 오는 걸로 바꿨어요
그럼 일단 플레이스 글고 수 있는 정보들은
아
이제 여러가지가 있는데 어떤 정보로 블러셔 에 따라 이제 과금이 좀
달라져야 유튜브에 2배 쓰는데 물론 처음 얼마간은 뿌리고
뭘 한달에 얼마 얼마 얼마 정도는 공짜고
그래서 이제 거기서 바다와 쓰디 받아왔던 정보가 최소한 아이 플레이
리스트에 있는 비디오 아이템들을 id 줘
근데 그게 이제 뭐 아이디만 블로그 꽁짜 긴 한데 그 아이디가 플레이
리스트 안에 있는 id 기 때문에 실제 비디오 아이디는 아니었고 거기서
비디오 정보를 좀더 보여주는 그 승 2 패 시 라고 해요
그걸로 갖고 최소한 정말 비디오 id 가 뭔지 까지 불러 왔어요
그럼 그거 보아서 아 비디오 아이들 이런것도 있고 그 db 이제 검색해서
없는것도 새로 추가해 놓고
그럼 거기까지 긁어 우는거 그 다음 단계는
다시 db 를 내가 봐서 아 비디오 id 4 있는데 타이틀이 라던가
디스크립터 이런게 없는 것들 그런 것들은 이제 다시 다시 유투브 api
를 이제 때려서
요 비디오에 대한 정보를 불러와 근데 비디오에 대한 정보를 불러오는 게
죄도 50개 까지 한 번에 넣을 수가 있어요 그러면 비디오 id 50개
놓고 최대 50개
그거에 대한 정보다 불러와서 거기서 이제 퍼블리시티 안 데이트
그리고 캡션 태그
아 캡션 아냐 태그 타이틀 아
아 디스크 액션까지 불러와서 저장을 해요
그 다음에 캡션 은 이제 제가 썬 지금 유튜브 api 의 가장 비싼
부분인데
캡션 은 따른 이제 api 엔드포인트 가 있더라구요 그래서 그 캡션을
이제 리스트를 뽑으면서
그 조회되는 아이디가 비디오 아이들을 줘야 되요 이 비디오의 있는 캡션
리스트를 뽑아 줘 그럼 팩션 리스트 뽑아 주거든요
그럼 거기서 볼 수 있는 정보들이 이제 여러가지가 있어요 근데 아까 처음
작업은 플레이스에서 새로 올라온 비디오 긁어서 db 에 느꼈고 두번째는
새로 올라온 비디오에 대한 타이트 디스크 옵션
뭐 이런거 태그 뉴케어 두고 세 번째 단계로는
다시 또 그 db 를 긁으면서 아직 캡션 이 없는 아 그런 엔트리에
대해서 캡션 에 api 를 이제 하나씩 하나씩 호출 해야 되요
비디오 10개 락온 어쩔 수 있는게 아니라 호출해서 거기서 어떤 캡션 이
있느냐
그러면 둘 중에 하나가 보통 나와요 하나는 아주 둘 다 나올 수도 있고
하나는 자동으로 만들어 준거 하려는 누군가 공원의 올린거 어제 스탠다드
타입 이라고 하는데 그러면 이제 보이며 는 그 중에서 내가 제일 원하면
캡션을 고르는 거야 뭐 한국어로 당연히 됐고 지금 현재 퍼블리싱 돼 있는
상태의 캡션 이고
그리고 스탠다드 이면은 그거를 밭 가져오고 아니면은
폴 100 모직으로 이제 오토 베팅으로 만든 걸 가져 오는 거죠 그럼
이제 그 아이디를 갖고 해요 캡션 id
그러면 다시 apa 한번 더 호출해서 캡션 다운로드 a 피해가 있어 이게
제일 비싸
그럼 이제 다운로드 받아서 캡션 딱 받아 지면은
뭔가 이제 캡션 도 종류가 여러가지가 있어요 꼬맹이 여러가지가 있는데
종류가 아니라 그 포맷 중에 제가 가장 손 8승을 하기 쉬움 치운 것처럼
보이는 포맷을 다운받아서 이제 코드를 짠 거죠
이렇게 이렇게 하면 타임 2기 스탬프 빼버리고
뭐 이렇게 뭐 쓸데없이 스페이스 많은 것 좀 없애고 뭐 3 라인으로 돼
있는 것처럼 한 줄에 바꿔 상가 보니까 그냥 뛰어서 한줄의 받고
이런저런 약간 포맷팅 놀이 라던가 그런 클링 이룰 놓았고 캡션을 다 클링
해서 그냥 텍스트 큰 건 와 로 만들어서 db1 때는 박아요
그래서 일단은 그렇게 해서 데이터 글고 오는걸 마쳤어요
그럼 처음에 만들때는 이게 그냥 단계는 내 단계지만
제모 자동으로 실행되는 뭐 이런 단계를 안 만들었기 때문에 그냥 제가
어드민 패널 하나 만들어서 페이지
mbc 페이지 줘 그럼 버튼을 누르면 이거 액션 이렇게 호출해 갖고 그거
제드 함수 호출 하게 만들고 그 테스트해보고 아 되는구나
그리고 이제 그럼 그 다음에는 이제 해야 될 일이
일단은 이거 데이터를 것 같습니까 그 다음에 검색은 가능할 거 아니에요
그리고 왔으니까 이제 검색 을 만들어보자
아까 처음에 말했듯이 쿼리의 놓았고 딱 버튼을 면은 이 페이지가 뜨고 그
커리 스팅이 들어 오잖아요
외제 단어가 1개 이상 들어올 때가 고민이었는데 이거를 두 단어가 동시에
나오는걸로 처리 할 거냐 아니면 따로따로 나온거 를 따로따로 이제 어떤
그 비디오의 가장 이 단어를 많이 가 뿐이지 봐서 이제 그걸 합쳐 갖고
점수 제도에서 보여 줄 거냐 이 고민 이었는데 지금은 따로 따로 보는
걸로 해요
그 예를 들어서 포프 스페이스는 그 tv 내면은 퍼프를 검색해야 그냥
모든 비디오에서 그래서 이거 이제 나온 횟수 라던가 아니면 제모
타이틀에서 나오는지 못해 그 에서 나오는지
그런거에 따라 가게 좀 빈도수를 바꿔서 중요도 로 바꿔서 타이틀이 좀 더
중요하고 태그가 좀 더 중요하고 캡션 은 워낙 이상한 얘기를 많이 하니까
뭐 1
좀 2 중요하고 이런식으로 해서 각 비디오 마다 각 검색어 마다 이제
점수가 몇 점 이 집의 해서 그걸 더 한 다음에 가장 점수가 많은 걸
우선적으로 보여주는 지구로 대충 만들었어요
모든 것을 당의 처음에 만들때는 모든 sql 5
4 sql 이제 검색할 수 있잖아요 아 이 그 이 텍스트가 이거를 이
단어를 포함하고 있으면
목록을 초 모구 정도였어요 일단 테스트만 돌게 해서 테스트를 딱 올리고
도니까
돌긴 돌아요 검색 얻으면 검색되고 대충 돼요 그럼 거기까지 일단 했고 그
다음에 제가 생각한 것은
아이 검색 속도를 빠르게 만들어야 될 내면은 당연히 구글이 하듯이 인재
쌩얼 미리 하는 게 좋겠구나 라는 생각이 있었는데 건 조금 더 이제
복잡하니까 그 전에 자동으로 유튜브 전보다 불러오는 걸 만들자
이거는 뭐 당연히 아키텍트 적으로 얘기하면 뭐 애저 펑션 같은거 하는
올려서 타임 트리거 바가 사야되는데
어제 비드의 간단한 서비스 고 그리고 굳이 여러 컴포넌트 만들 필요도
없을 것 같아서 그냥 긋한 4코어 이제 웹 서버 안에
롱 많이 태스크를 만드는 법이 있어요 옛날 예전에 닷넷프레임워크 4 되게
쉬웠는데 a as b 단 내에서는
지금의 이 스타일의 코어 나온 다음에 약간 좀 그게 쉽지 않았다 가
요즘 또다시 쉬워 징계 쉬워져서 이건 언제나 실행되는 백그라운드 워커
그러나 이제 1번이 잡을 실행하고 나서
뭐 몇일 동안 쉬는 거죠 몇 달 동안 쉬는 몇시간을 쉿 은 그 딜레이
놓았고 이제야 졌다가 다지 다시 깨어나서 작업하는 그런 스레드를 봤고 그
쓰레드가 하는 힘들이 단 단순 했어요 왜냐하면 은 아까 제가 말했듯이
그 때 단계는 어 유튜브 비디오 정보를 들고 오잖아요
그냥 그 함수들을 차례대로 실행 하면 되요 실행 하다가 새로운 것으로 게
멈춰 이래도 되는 거고 그래서 실제 웹 페이지에서 버튼 눌르면 은 실행
되든 어딘 편에서 버튼 누르면 실행되는 그 4단계 로직을 백그라운드로
에도 똑같이 실행되게 만들어 놓았고
뭐 그냥 굳이 둘이 동시에 실행될 이유는 없지 없었기 때문에 뭐
q 를 넣어 갖고 이제 한번에 하나씩만 실행되게
또 생각을 했었죠 왜냐하면 은 누가 어디에 편에서 버튼 눌러 갖고
하는거나 백그라운드로 에서 버튼을 자동으로 되는건 아 이게 같이 일어나
일은 없잖아요
근데 뭐 어차피 이게 스케일이 엄청 될 것도 아니고 당장 그리고 또 q
집어넣고 새로운 컴포넌트 만들어 같고 뭐 이거
모턴 뜯어내기 싫었고 그래서 일단은 그냥
싱글 서버로 보고 있기 때문에 일단은
난 사람은 서비스 하지 않는 이상은 당장은 그냥 그 스 서버 위에 있는
그 슬림 세마포어 갖고 단 악을 그냥 걷는걸 했어요 뭔 축삭 그럼 뭐
나중에 스케일이 될 땐 당연히 q 방식으로 가는 게 정상이죠
일단은 그렇게 했고 그래서 이것도 끝났어요 이제 스타일링 같은건 나왔는데
뭐 스타일링이 아모 2 스트랩 써 갖고 하면 되는거고
그리고 뭐 당이 주변에 따른 사람을 좀 시켰어요 제가 방향을 좀 잡아
두고 이런건 이렇게 해주고
뭐 페이지 네이션 넣어야 되니까 또 페이지 되시는 높고 이제 지금 썰
채진 가보신 분들 하겠지만 페이지 네이션 이제 9 그라고 되게 비슷하게
해 놓았죠 구걸하는 구우 글 써 있는 것처럼 포 오프 이렇게 써 놓은게
전부 거 이제 마지막 남은 게
그리고 어찌보면 가장 기술적으로 이제
귀찮아 없고 실패도 했던게 이제 인덱스 왼쪽 이었어요
인덱싱 이라는 게 뭐냐 제가 지금 검색엔진 당장 만들었던 방식은 그냥
sql 에 있는 텍스트를 실 7시간을 뒤 좋았고 보여주는 방식이에요
지금 비디오 400배 정도 밖에 안되고 캡션 자로 목 있어봐야
뭐 어떤 검색을 루턴 간의 검색 시간은 한 3초 정도 거든요 많이 걸려
봐요
그런데
데이터가 이게 많아지고 많은 사람을 서비스 하다보면 당연히 러지 겠고
인덱싱 을 그냥 넣고 싶었고 예전부터 해보고 싶었기 때문에 아까
그래서 하다가 시카고의 실패해서 옛날 방식으로 가고 있는데
5 이정도 서비스에서는 옛날 밤 또 문제가 없다고 보긴 해요
당연히 속도를 빠르게 하는 방법도 있었지만
인덱싱 을 할 때 인덱싱 이 뭐냐면은
막 되게 많은 문서가 있잖아요 구글이 하고 있는 곡이 되요
굉장히 많은 문서가 있어요 전세계 그런 문서 하러 갔을 때 거기에 나오는
단어들이 있어요 중요하지 않은 단어도 있고 중요한 어디 있죠 예를 들어서
영어 라면은
뭐 전치사 투 인 모양 별난 중요하고
정관사 영업을 안 좋아하고 안 중요하고
그런데 중요한 단어들이 있잖아요 명사 라던가 동사 라던가
그러면 그 이렇게 것들을 모아서
이 문서에서 이 단어가 몇 번이나 오는지 등을 이제 표 같은 걸로 만들어
본다고 생각해 생각하시면 되요
결과적으론 그건데 그러면 전 세계에 있는 모든 문서를 다 모으고 그러면
이제 아 요 단어가 가장 많이 나오는 문서는 이 거야 이제
단어로 모든 얘기할 수 없잖아요 그런 문장이 있고 여러 단어가 있으면 이
단어를 벡터를 줄줄이 해놓고 이 단어가 이렇게 줄줄이 벡터로 아니면
비슷한 곳에 나오는 이런 뭐 가장 많이 나오는 문서는 또 이런 거야
이런식으로 에서 이제 랭킹을 매기는 방식이에요 그러면 검색을 할 때 빠른
이유는 실제 그 문서를 전부다 검색을 하는 방식이 아니라
이게 아마 구글이 나오기 전에 많은 회사들이 짓을 했어 겠죠 그래서 검색
이들이 어떤 버렸고 그런 방식이 아니라 미리 이 문서에서 아 이 문서는
이 단어가 이 만큼 중요하고 자가 이렇게 중요해 라는 그런 정보만을
뽑아서
그걸 지표로 지방 거에요 그리고 그걸 다 합치면 은 요 단어가 나오면 그
다음에 중요한 문서만 이 문서 이 문서 입문서 입문서 입문서 순으로
중요해 라고 냐 표를 만들어 놓은거 고
검색이 그게 들어오면은 찾아갔고 그 문서를 수 그대로 보여주면 되는
거예요
그래서 당연히 구글이 이걸로 이제 혁신적으로 2000년 되었니 90년
되었는지 나왔던 회사고
그 다음에 이제 굉장히 많은 설치 엔진 들이다 인덱스 방식 바뀌었죠
옛날에 윈도우에서 빨 컨텐츠 설치할 때도 인덱스 방식의 아니었어요 한동안
아마 윈도우 세븐 인가에서 들어왔던 것 같아요
그럼 이제 이걸 어떻게 아냐 당연히 제가 직접 만들지 않죠
그거 제가 알고 있었던 가라 가 뭐냐면 예전에 따르면서 이었을 때 루시는
지를 썼어요
루시는 지니 그걸 해주는 엔진이 고 오픈 소스 고 아파치 파운데이션
내에서 개발했던 걸로 알고 있고
성능이 되게 좋아요 사실은 개시제 루시는 진을 이제 하려고 또 막
뒤지면서
요즘은 이제 설치 엔진 루씬 이 아니라 이제 엘라스틱 서치 라던가 이런거
많이 쓰잖아요 그래서
연락시 설측 할까 라고 하다가 그것도 다른 컴포넌트 올려야 되고 서버
따로 돌려야 되고
비디오 400개 는 데서 보이게 왜 필요해 라고 시도한 돌렸는데
그걸 돌렸어요 모든 문제 해결 됐을 것 같긴 한데 일단 것 위에 얘기
하기로 하고 첫 더 찾다보니까 재미있는게 뭐냐면은
제가 엘락 측 설치를 예전에 올린 적도 있고 무신 을 쓴 적도 있어요
근데 루시는 앤 라이벌 이루고 그냥 돌릴 수 있는거예요
서버 에서 c # 용도 나왔어요 근데
뒤지다 보니까 엘라 책 설치 자체가 루시 내지 기반 이더라구요
루시엔 질의 원래 한 서버에서 그냥 뭐 인덱스 빌드하고 이런거 였다면
그거를 루씬 엔진을 갔다가 이제 디스 트리뷰트 설치 엔진 으로 바꾼게
이젤 악세 설치하고 맞아요 그래서 어차피 같은 오직 같은 알고리즘
이더라구요 그래서 가 됐다
그래서 이제 인덱스 이제 필드 하고 이제 모든 문서를 이제 갖고 와서 이
문서는 이런 타이틀과 이런 대구와 이런 디스크 임수정과 이런 캡션 을
가지고 있어
자 이 맘대로 인덱스를 필드에 인덱스를 빌드할 때 니가 써야되는 무슨
알고리즘은 이 거야 라고 골라주는 몇 가지 알고리즘 들이 있어요
플러그인 방식이긴 한데 떴어요 업힐 듯 애써 400개 했는데
어 인덱스 파일 2 1.9 매가 밖에 안나와요 괜찮구나 검색을 했어
안나와
아들이 그때부터 열심히 이제 더 파 보기 시작했죠 왜 안될까
근데 이제 보니까
뭐 결론적으로 얘기하면 은 그 인덱스 엔진 자체가
아 영어를 되게 기준으로 만드는거 라고 맞아요 그래서 이제 한국이나
중국이나 일본을 할 때는 이 알고리즘을 쓰면 된다 이런 식의 나오는데
그게 별로 해요 중국어 쪽은 잘 된다고 제가 얘길 들었는데
한국말은 정말 별로에요 그래서 검색을 해본 결과 한국 커뮤니티 쪽에서도
이건 쓰레기다 거 이런 느낌이거든요 그 이유가 뭐냐면
인덱스를 빌드할 때 중요하지 않은 단어들을 빼는게 맞아요
예를 들어서 영어로 했을 때 뭐 아이 엠 어 포 이러면 은
아이는 별 필요없는 예고 md 별로 필요 니고 어디 필요없는 얘기잖아요
금이 세계라는 무시하고 보위 만 가지고 이제 인덱스를 만드는 그런
방식이에요 뭐 전치사 라던가 뭐 이런 모든 게 다 포함 이에요
그럼 이제 이것들을 보통 이제 하는 얘기가 스타 버드 라고 얘기를 많이
해요
이제 기술적으로 그러면 스타 버드 의 목록을 다 집어넣고 이런 쓸데없는
얻을 이게 나오면 무시하고 다 빼버리고 남은걸로 맞이 인덱스 검색 엔진
을 돌려라
이게 정상 이에요
이제
영어권에서 이게 쉬운 이유는 모든 전 치자
모든 정관사 이런게 그냥 언어의 단어 하나요 단어 단어별로 스페이스 다
분리하고
뭐 뭐 컴 마 뭐 이렇게 마침내 다 분리한 다음에 영단어 나온거 에서
필요 없는건 싹싹 골라 내면 되요
4 한국어는 그게 안돼요
왜냐하면 은 뭐죠 4 전체 다 이런게 그냥 다른 단어가 딱 같잖아요
그러면 이거를 정말 제대로 분석을 해서 아 이거는 조사하고 이거는
전치사구 해서 이걸 따로 따로 분리해 주는 로직이 나오지 않는 이상은
그걸 절대 전 처리를 하지 않는 이상은
이스타 버드 만 가지고 불릴 수 있는 방법이 없어요 근데 제가 이제
이런거 를 만든 따른 알고 있을 듯
m 참 에서 봤는데 대부분 그냥 하는 방이 뚜르
뭐 앗 이게 뒤에 붓고 앞에 뵙고 이런 생각 없이 그냥 이거 나오면
무시해 라는 게 전부였고 실제 그 단어가 중간중간 따른 단어에도 나올 수
있거든요 따른
급 용 맥스 문법상 애가 문맥상 에 근데 그것까지 무시하게 되더라구요
그래서 이 단어 분리와 상어 삭제 스타 버즈 걸리는거 제대로 안되어있고
그리구 루시 렌즈에서 그 시제 kc jk 라고 이제 그게 차이나 저팬
코리아 쪽 쓰는 그런 어 조금 복지 이름이 좀 인덱서 했나
어째 알고리즘 이라고 일단 할게요 그거를 보는데 그거는
b g 이라고 해 같고 이제 뭐
탄자 같은 경우에 보면은 이제 탈자 단어를 2개로 이렇게 쓰면 이거 받고
학교에도 의미가 비슷한 경우가 많나 봐요
그런거를 이제 같은걸로 처리하고 있는 인덱스 검색을 하는데
한국말은 그게 아니잖아요 한국말은 내가 바보라고 했다고 보호하고 같은
의미 아니거든요 사실은 그래서 그것은 전혀 아니더라구요 그래서 더 뒤지다
보니까 그루 신용으로 이제 한국말을 잘 돌게 만들겠다고 이제 그
플러그인을 만드신 분이 있어요
제가 이름은 까먹었지만 그 검색하면 나와요
아리랑 무신 플러그인이 라고 하면은 그렇게 한국 그 아까 말했던 인덱스
검색하는 알고리즘을 만드는 그런
플러그 있는데 그 대충 소스 코드는 봤어요 자바로 짧고 로 신 자체가
원래 시작은 잘 하거든요
닷넷 버전 없긴 한데 제가 단 넷으로 포팅 해볼까나 생각을 한번 가면
뒤져 보게 됐는데 제가 아까 전에 말했던 그런 조사 불리자 던가 이런것들
자체가
제가 이제 그 상식적으로 어떻게 하면 이 검색어만 뽑아 될까라는 생각을
했을 때 거기에 딱 들어맞는 모습도 아니어서
잠깐 주조 했고 차라리 이걸 내가 처음부터 만드는게 낫지 않을까 생각도
잠깐 했지만
일이 너무 많아 지고 그래서
나중에 기회가 되면 은 어차피 지금 루씬 엔진이 많이 쓰이고 이젤 라쳇
설치 엔진이 도 많이 쓰이니까
네일 아트 설치한 이제는 다 넷을 올린 사람은 없죠 그냥 모두가 다
올리는 거니까
아리랑 플러그인 꼽아 쓸수 있고 루씬 단 넷은 굉장히 많은 플러그인을
포팅을 해놨지만 이제 아리랑 은 아무래도
들 유명한 거겠죠 한국 사람 사용자도 좋은거 같고
그거 플러그인 포팅 된게 없더라구요 그래서 나중에 기회가 되면 이걸 좀
더 자세히 읽어보고
단 댄스로 포팅을 해갖고 차라리 딴 사람도 이제 도움 밖에 없는 좋지
않을까 생각을 했지만 제가 하여 제까지 곁 여태까지 코드를 본건 마늘은
정말 제가 생각하는 만큼의 좋은 썰 친히 인해서 나올거 같지 않았어요
그래서 그렇게 이렇게 생각을 하다가 보니까 아 이건 배보다 배꼽이 크구나
차에 3초 딜레이 는게 난거 구나 라는 생각을 먹고 예 루시는 잠깐 접고
코다 들어가다가 다 빼고
아 네이버 이제 검색 엔진에 대해 굉장히 많은 이제 존경심을 가지게 된
것도 그런 부분이에요 뭐 네이버가 무슨 일이라도 욕을 많이 먹고 있는 것
같긴 한데 그냥 이 쉽지 않은 언어를
검색이 되게 만들어 다는 거 그래서
그리고 실제 구글에 비해 검색을 이제 문장으로 쫙 하면은 잘 안되는것
되게 많아요
생각보다 검색 결과가 안좋은 것도 많은 건 사실이고 영어에 비해 근데
그래도 그 정도라도 만들어서 그 정도 속도로 만들었다는 것 자체가 아예
는 원천기술이 확실히 있는 애들이 구나
저거 번 하려고 하 해도 못한 아이들이 또 많기 많겠구나 생각을 하긴
했어요
그리고 이제 제가 루시는 아까 또 이제 포팅 하네 마네 얘기하다가
또 주저하고 있는 게 뭐냐면 제가 2 3초 딜레이가 이제 문제가 될
정도로 주제 문서는 말할 수 딜레이는 커지는 거니까
서비스와 커지거나 아니면 데이터가 많아지면 은 말 그대로 검색엔진은 이제
아예
분산 으로 돌려 될것 같아요 사실은 그럼 근데 그 정도 스케일이 되면은
어차피 l 아틱 썰 체인지 꼽아야 되거든요
그럼 그 순간에 아까 말한 아리랑 플러그인 꼽을 수 있어요
그러면 타며 서포트가 방법이 이유가 없는 거야 그래서 당분간은 좀 음
어렵지 않을까 라 아니 하지 않을 것 같고
영원히 안 할 수도 있다는 생각을 해요 그래서 이제 그것 때문에 이제
저만의 그 sql 클것 같고 검색하는 그 거 이제 좀
페이지 랭킹 이라 그러나 그런 알고리즘 만들어야 했고 뭐가 더 중요하고
뭐가 덜 중요하고 이런 것들
루씬 해서 보면 그냥 부스팅 이라고 하는 부분이죠 그런걸 만들었고 그래도
모든 검색어로 쉴 때마다 3사 추워 걸리는거 짜증이나 잖아요 그래서
그 인덱스를 만드는 대신에 mm 캐쉬 를 많이 봤어요
그래서 이제 맨 캐시를 봐가면서
그러면 일단 이 검색을 한번 검색을 했으면 모든 비디오의 때 대해서 이제
요 검색어에 그 스코어를 주는거죠 검색어는 이 비디오는 100점 저건
32 저녁 550점 이런식으로
그럼 그 스코어를 계산을 항거를 이제 메모리에 박아두고 똑같은 검색어가
다시 들어오면은 그 결과만 보면 은 나오는 거니까 그런 식으로 일단 이미
검색된 결과에 대한 맨 캐시를 바뀐 박았어요 그래서 만약에 포프 tv
있어 채진 들어갔는데 검색을 했는데 갑자기 되게 빨리 나왔다 건 누구나
검색해본 얘기해요
내 일단은 포프 tv 에 오시는 분들 검색 와 비슷할 거라고 생각을 했을
때 시작을 그렇게 했고 그 다음 단계로 이제 이것을 좀더 빠르게 만들려고
한다면 그 검색어에 기반을 해서 그 실시간 을 보낸 인덱스를 만들어서
인덱스를 딴데 보관해 두는 방법도 있죠
그리고 새로운 비디오가 볼때마다 이제 그 인덱스를 다시 업데이트 하면
되는거고
그래서 그거는 수첩 플랜으로 있어요 그래서
실시간 이제 검색어 에 기반한 이제 인덱스 빌딩 스 시스템을 이제 생각을
하고 있고 뭐 페이지 랭킹 시스템을 정확히 얘기하면 은
그거는 뭐 추가될 수도 안 될 수도 있는 거
현재로는 5
검색어 듯 3초 기대라고 나쁘지 않더라구요
일단은 그렇게 하고 있고 해서 거의 까지가 제가 루시 된 진부 부모 하고
참 다양한 걸 배웠어요 그렇게 해 속 그리고 또하나 이제 이 프로젝트
하면서 예
비록 이루어지고 있지요 여기서 빨리 맞춰야 줘
마지막으로 1 얘기하고 싶었던 것은 제가 이제 인터페이스 떡칠 하는거나
팬들은 c 인젝션 남용 하는거에 대해서 별로 안 좋게 봐요
그런데 단내 코어 2 기본적으로 기본 서비스는 테 디 패널티 인젝션 을
다 지원이 되거든요
단내 코어에서 그거를 안 쓰면 되게 불편한 부분들이 많아요
물론 여러가지 들은 이제 따른 패턴으로 바꿨고 이때 할 수도 있고 글로
안 쓰 실제 그러지만
아 tv 컨텍스트 사람은 정말 지 펜스 인젝션 제가 쓰거든요 쓰기에는
걔네들이 넣어놓은 그 온갖 그 트렌 지 언 트 스코프 에 있는 그
라이프사이클 관리 하던가 이게 제가 직접 마디로 너무 싫었어요
e 프로젝트 할 때는 그래 일단 뇌간
디아 2에 대해서 생각하는 바가 있지만 과연 이게
사람들이 말하는 것만큼 그렇게 훌륭한 건지 한번도 에 기회를 한 번 더
줘 보자 예전에도 기회를 좋았지만
그래서 모든 것을 그냥 단 네 코에서 하나는 방식대로
다 디펜지 이전으로 이제 실행을 해 봤어요
그래서 모든 이제 뭐 스타트업 외 서비스가 등록해 그고 dil 한 대로
다 했는데
뭐 디버깅할 때 이제 정확히 어떤 게 어떤거 로 추라고 어떤 생성자가
호출되고 이런 부분에 문제도 있겠죠
네 저는 di 자체 인젝션 을 다 이제 인터페이스가 아니라 컴플리트 매스
콘크리트 클래스 했기 때문에 그 문제들은 적긴 했어요
결과적으로 마지막에 1 걸렸던 거 뭐냐면은
아까 말했던 백그라운드 워커가 있잖아요
유튜브 데이 teflon 이 워크가
이 워커가 이제 실행을 한 다음에 그 다음에 어떤 자료들을 같은걸 db
에 넣어요
그럼 db 에는 tv 컨텍스트가 필요하거든요
근데 백그라운드로 워커는 당연히 싱글턴 될수밖에 없어요
트렌치 언트 는 이제 한 리퀘스트 가 있는 동안 면도는 거지만 이건 그게
아니잖아요
그럼 글로벌 스코프 에서 이제 싱글 터너는 거고
그런데 단 데코 에서 기본적으로 이렇게 db 컨텍스트는 트렌치 언트
스코프 에요
그래서 제가 그 백그라운드 워커 에서 db 컨트 쓸려고 하면 에러가 나요
그럴 수 없다고 왜냐면 라이프 그러니까 오브젝트가 이미 죽어 있으니까
그래서 그분이 또 안되더라구요 그래서 이제 그것 좀 핵으로 일단 해결을
해 놓게 했는데
으 뭐
디아 2를 하면서 이제 콘크리트 1에서 서비스 많이 제 집 얻는다면 은
뭐 처음 이제 시작한 사람들도 약간 러닝 커 분이 있겠지만 아주 나쁘진
않다고 생각을 하는데 결국 이제 di 어가 라이프 사이클을 이제
접목시키면 서 이렇게 만들고 어떤 그런 어썸 샤를 세우다 보니 세우다
보니까
아주 자주는 아니지만 그래도 흔히 쓰는 이런 백그라운드 워커 같은
패턴에서 이제 발목이 잡히더라구요 그래서
아 이거 한 다음에 제가 근로와 있는 저희 디렉터 웬 지녀 친구한테
얘기를 했어야 이런거 땜에 역시 또 아직도 di 가 좀 문제가 잇따라
니까
걔도 얼마전에 자 기대보다 똑같은 걸 느껴 왔고 지금 자기도 좀 아직은
아니라고 생각을 하고 있다고 그래서 그거에 관해서 또 자료들을 찾아
봤는데 궁금한 게 있으니까
그 db 컨텍스트 매니지먼트를
담배 코어에서 쎄 토리 패턴 방식을 했다면 그 문제가 없었을 거다 라는
얘기가 있고 생각해보니까 그것도 맞아요 그래서 어찌보면 은 현재 있는
tng 언트 방식 이외에도 때 토리 방식을 지원할 수도 있다고 생각을
하는데 그러면 다시 한번 이제
di 를 더 많이 쓰는걸 고민해 볼 수도 있을 것 같긴 해요
이제 쓰지 않게 렉터 3명의 않았을텐데
강요 라는 상황에서 이게 안 좋다고 피해가 느라고 여러가지 스택을 쌓는게
여태까진 상관이 없었는데 특히 db2 컨텍스트 쪽에서 되게 힘들어 하고
그래서
그것도 이제 또 하나 고민을 하게 된 것 중에 하나에요 그냥 한번 더
기회 줘 보고
아직은 아니다 이런 방식으로
그럼 오늘 비디오는 그 정도면 될 것 같고 음
너무 길었다 포프 tv 그냥 검색 검색 엔진을 많이 써 주면 될 것
같아요
저한테 광고비가 더 들어오게 뽑혔습니다
