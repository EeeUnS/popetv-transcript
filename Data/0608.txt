안녕하세요, 포프입니다.

제가 코딩 표준을 책임지고 있는 회사, 그 회사에서 요런 코드를 작성하면 빌드가 안 되거나 테스트에 실패하면서 배포가 안 되게 하는 것들을 설명하는 비디오를 와장창 만들고 있어요. 이런 것들의 일부는 제가 웹페이지에 공개해 놓은 코딩 표준에도 들어가 있고 또 그중에 일부는 회사 내부에만 있는 별도의 문서에도 들어가 있는 겁니다. 핵심은 '이걸 안 하는 순간 배포가 안 되기 때문에 프로그래머가 곧바로 고쳐야 해서 반드시 따라야만 한다.', 그리고 이렇게 해서 훈련을 시켜 나간다는 거고, 제가 코딩 표준을 책임지고 있지 않은 회사하고 일할 일도 충분히 많죠? 그럴 때는 그 회사에서 정해놓은 코딩 표준에 맞춰서 코딩하고 있습니다.

오늘 이제 말할 거는 C#에서 개체를 곧바로 해제하는 방법, 보통 Using을 쓰죠? Using 블록을 쓰고 IDisposable을 상속받는 클래스를 넣어서 끝나는 순간 알아서 Dispose 함수를 호출하게 만드는 패턴들이 있죠? 원래는 Using을 쓰는 순간 무조건 이제 Scope를 만들어서 사용해야 했어요. 근데 어느 순간부터 Scope가 없는 Using이 들어오기 시작했거든요? Scope가 없는 Using은 뭐냐? 그러면 이제 C++에서 스택 개체 만드는 경우 있잖아요? 스택 개체 만들어 놓고 그 스택에서 개체가 사라질 때 소멸자에서 뭔가를 없애는 일들을 할 수가 있거든요? 그런 식으로 Mutex Lock도 걸고 이런 식으로 많이 했어요. 그거랑 똑같은 방식이기는 해요. 근데 C++에서는 이걸 할 때는 보통 그 개체 위에 Scope를 짧게 만들어서 빨리 해제되게 하는데, C#은 그 반대로 Using을 한 다음에 그 밑에 범위가 있던 게 전부였죠? C#은 이걸 없앴어요.

그러면 Using을 사용할 때 Scope없이 만들 수가 있는 건데, 이걸 처음에는 허용했거든요? 그리고 처음에는 들여쓰기를 줄이고 정말 이 개체가 현재 있는 Scope에 제일 밑에 가면 그때 없애줘야 하는 거라면 굉장히 유용하게 잘 돌았어요. 그런데 시간이 지나면 지날수록 이게 개판이 되더라고요. 특히 C++에서 스택 개체에 익숙하지 않은 사람들한테. 뭐였냐면 처음에는 올발랐어요. 근데 여기다 코드가 추가가 되기 시작하잖아요? 그럼 코드가 추가되는 순간 얘가 이미 죽어야 하는데 계속 코드가 아래 추가되면서 그냥 개체가 살아있는 거예요. 그래서 개체를 필요 없는 순간 죽이는 게 최고거든요? 그런데 쓸데없이 살아있는 거예요. 이걸 하려면 처음부터 Using 블록을 집어넣거나, 아니면 제가 처음에 C++에서 말했던 것처럼 Using은 한 줄인데 그 위에 Scope를 넣거나 둘 중의 하나예요. 근데 이미 C#에서 Scope 있는 Using을 지원하고 IDE에서도 강제할 방법들이 있는데, 그러면 이걸 사용하는 게 훨씬 IDE가 알아먹기 쉽겠죠? 그래서 저희는 이걸로 강제하기 시작했어요. 그래서 블록을 넣고 하는 순간, 만약에 이 블록 밖에서 이걸 사용하려고 하면 이미 죽은 범위니까 안 된다고 얘기할 거고, 그러면 프로그래머가 고민하고 블록을 증가하고 말고를 결정할 수 있는 거거든요? 그래서 그런 식으로 약간 블록이 명확하게 있다는 거, 그 자체만으로 이 위에 뭔가 있다는 걸 알기 때문에 봐서 한 번이라도 고민할 방법이 있는 거고, 이 블록조차 없으면 개체 읽는 순간에 아래쪽으로 가는데 개체가 있는지 어떻게 알아요? 생각 없이 증가시키고 있는 거죠. '불필요하게 범위를 증가시키는 경우가 있다'는 거예요.

언어를 불문하고 깔끔한 코드의 몇 가지 기본 원칙들이 있는데, 그중의 하나가 어떤 개체든 이게 오브젝트의 개체가 아니라 실제 변수 같은 것도 가장 작은 범위의 범위를 최소화해 사용하는 게 깔끔한 코드를 유지 보수하는 게 원칙 중에 하나거든요? 이걸 흐리게 할 수 있는 방법이 Scope 없는 한 줄짜리 Using이여서 몇 번 사용해 본 결과 '프로그램의 실수를 막기 위해서는 Scope로 만드는 게 맞겠다.'. 모든 사람이 C++ 프로그래머였다면 C++ 프로그래머와 똑같게 Using은 한 줄로 하고 Scope를 Using 앞, 뒤로 넣어서 C++하고 똑같이 만들겠지만, IDE가 쉽게 이해하는 방법도 아니고 간단하게 IDE에서 뭔가를 확인하는 방법도 원래 예전 방식이기 때문에 어쩔 수 없이 이 방식으로 갔죠.

그래서 C#은 저희 내부에서는 Scope 없는 Using은 사용하지 못하게 되어 있어요. 그러다가 제가 코드를 작성하면서 '아! 이건 진짜 굳이 들여쓰기할 필요 없는데 이거 Scope 한 줄짜리가 딱 맞는 건데'라는 생각이 들면서 '아! 이걸 이 제안을 없앨까?'라는 고민을 몇 번 하긴 해요. 근데 과거에 누군가 코드를 추가하고 뭐 하면서 쓸데없이 늘려 놓는 모습을 봤기 때문에 컴파일 수준에서 뭔가를 잡아주기 좋은 게 Scope가 확실히 있는 거고, 이게 아니라도 그 사람이 한 번쯤 더 고민하고 누군가와 한 번 더 토론할 수 있는 방식을 만드는 것, 결과적으로는 '실수할 수 있는 확률을 줄이는 코드 베이스가 뛰어나다.'라는 생각으로 여전히 블록을 사용하고 있습니다. 근데 이게 정말 코드 잘하는 사람만 회사에 있고 모든 사람이 까칠하게 코드 된다면 이 두 가지 방법이 다 사용해도 돼요. 여기서는 저거, 저기서는 저거. 근데 그냥 일반적인 회사에서는 단순한 규칙 몇 개가 있는 게 훨씬 더 유지 보수에 도움이 됩니다.

포프였습니다.