이 안녕하세요 4p 입니다 음 요즘은 참 세상에 재밌어 지고 있는것
같아요
이제 기계들이 되게 발전하고 뭐 인공지능 로봇 이런게 발전하면서
굉장히 모든것에 자동화가 되고 인간의 삶을 편하게 하는 그런 세상이 왔죠
그리고 이제 한 십 년 이십 년 있으면 그 기계의 인공지능이 건너갈 딸을
해서 이제 그 사람들이 이제 지구를 정복을 하고 그래서 저희가 이제 로
모습을 섬기는 몸종 이 되는 그런 즐거운 날이 올 건데 이렇게 농담이구요
사실 그런 공부는 언제 있었지만 아 제가 볼 때는 그 정도로 인공지능이
발전하게 좀 어려울것 같고 제가 하고 싶은 얘기는 사실 그 거에요
아
저희 전임의 엔지니어 잖아요 저는 엔지니어의 보시는 분들 다는 아니겠지만
엔지니어의 단 점 중의 하나는
저희는 굉장히 뭔가 논리적인 걸 좋아하고
기계로서 상당히 많은 일을 해결할 수 있을 거라고 생각을 해요
뭐 저만 그런가 아닐 거라고 믿고 그렇기 때문에 뭐 어떤 것에서 자동화가
되고 있고 그걸로 인해 저희 그 힘든 그런 그런 반복자 거 뭐 이렇게
세세한 그런 귀찮은 일들을 고칠 수가 있다면 저희는 그걸 언제나 하고
싶어하죠 그런거에 가장 먼저 익사이팅 하는 사람들이 기도하고
그런거를 가장 먼저 접목하는 받아들이는 사람들이 기도하고
그래서 저도 집에 일단 마누라 보시거나 있구요
만들어 보시라고 해봐야 로봇청소기 에 그게 하나 있고 그리고 이제는
심지어는 그 바닥 닦는 청소기 까지 살 거라고 생각하시면 돼요 보시죠
그게 살까 라고 고민을 하고 있는데 뭐 여러가지 좀 자동화 부터 그렇고
제가 지금 하려고 되게 하려는 말씀은 그런 뭐라 그래 자기 페임 에
빠져서 오히려 인생을 귀찮게 하지 말라는 거예요
그러는 경우가 실제 게임 업계에서 너무나 너무나 자주 일어나고 있고 저도
몇 번이나 겪었고
그래서 제가 그 그런 예를 한번 들어 드릴께요
뭐 오늘 하고 수많은 결국은 그 거에요
자동화 좋고 기계 맞는 게 좋지만
결국에는 어느 순간에는 그 기계 만능주의 때문에 오히려 사람이 피곤해
지는 경우가 있고 적당한 자동화와 사람의 손길을 다 접목을 시켜야 새로운
인류가 탄생한 이 그 새로운 굉장히 괜찮은
그 시스템이 탄생을 하면서 그게 오히려 효율성의 도움이 된다는 거죠
게임 쪽에서 일하시는 분들이 고씨 플러스 플러스 쪽으로 코딩을 말자 드신
분들은 아마 빌드 서버를 다 알고 계실 거에요
이제 저희가 코드를 보통 짜 갖고 서버 에 집어 넣으려는 서버 쪽에서
알아서 코드를 빌드를 하면서 애라 가 있으면 알려 주고 애라고 없으면
통과시키고 그게 반드시 코드의 제 안되는게 아니라 s 또 그렇게 해서
가는 경우가 있죠 그래서 저희는 걸 보통 다 통칭해서 빌드 서버 라고
해요
그래서 이 빌드 서버에 대한 코로 스토리는 상당히 많아요
1 서버 필요 없단 얘기 아니에요 반드시 필요하고 왜냐면 저희가 코드
체크인할 때 분명히 빼먹고 코드 체크하는 경우가 있고
아 그리고 제가 당장 이 체크인할 수 없는것을 아 빼고 나머지 코드만 도
쓸 때 이 들어간 코드가 제 코드의 아 종속 관계가 있어 갖고 어떻게
에러가 나는 경우도 있고 그래서 그런거라 확인하기 위해서 빌드를 하는건
좋은거죠 자동화 빌드 그리고 두번째가 빌드에 끝나지 말고 빌드는 말
그들을 코드가 제대로 빌드 되고 scg 들을 빌드 된다는 걸 증명하는
거고 그 외에 테스트 머신을 많이도 돌리기도 해요 그 실제 새로 될 빌드
갖고 가져다가 그걸 테스트 돌려 게임 시대로 도는 지를 판단해 주는 뭐
스모크 테스트하고 도 하고 뭐 별 을 이름이 있겠지만
그래서 고 두 가지를 보통 많이 하죠 게임 쪽에서 뭐 아주 영세한 분노는
회사에서는 그러진 않겠지만 어느 규모가 있는 쓰는 분명히 그걸 할 거고
분명히 그것을 보신 사람도 있을거고 그거에 대한 토크도 뭐 ktdc 나
이런데서 몇번이나 나온 적도 있구요
여러가지 문제가 있어 얘는 일단은
갓 그러나 가장 큰 문제는 언제나 그 거에요 속도가 됩니다 일단 10
플러스 플러스 기반의 코드 빌드 시스템 은
언어적인 문제 때문에 벨리 가상 상당히 일이죠
그리고 이 필드가 그냥 단순히 디버그 빌드 1b 는 하는건 상관없는데 기
보급에도 만들고 릴리스를 만들고 프로파일 우리도 만든 고 sd 버그도
만들고
여기서 그치지 않죠 이 거지 멀티 플랫폼을 때 pc 용 빌드 만들고
엑스박스 0 만들고 피해 들여 만들고 ps4 0 만들고 게스트 만들고
그러면 5 곱하기 5 하면은 25개 정도 빌드하면 각 필드 마다 20분이
걸려도 시간이 오래 걸리죠
그런데 이것을 멀티 빌드가 기계를 여러개 서서 동시에 빌드 라도 25분이
걸리죠
또 하나 문제점은 pc 용 빌드 기반 굉장히 뛰어난데 콘솔용 빌드 기반은
굉장히 느린 경우가 많아요 심지어는 예전 같은 경우에는
pc 용 빌드가 뭐 20분이 걸려 따면 꿨던 코털 응 빌드는 1시간
이상이 걸린 적도 있어요
그래서 또 그것을 해결하기 위해 잉크 레드 빌더 라던가 이런 훌륭한
제품들이 나왔지만 건 컴파일 탈만 빨리 해 주십 것뿐이고 링크 시간이
다시 10분이 걸린다 던가
이런 문제가 있어요
그래서 이런 문제가 있었을 때 제가 있던 회사들마다 이것을 처리하는
방법을 다 나았어요
4 저는 언제나 빌드 서버를 하는 보는 느낄 때마다 빌드 서버는
목적이 두 개 요 아 이거 근본적인 목적은 원래 하나요
어떤 빌드가 들어가던 간에 그 빌드가 제대로 된 빌드 고 아무 문제가
없는지 확인한 가장 근본적인 목적이 줘
근데 여기서 한가지 문제가 뭐냐면 그 고장난거 로 발견했을 때 그것을
빨리 고쳐야 되는 것도 사실은 굉장히 중요한 부분이에요 그래서 그걸 찾기
위해서 빌드 머신에 돌리는 거고 근데 빌드 머신이 뭐 단순히 코드가
아니라 했어요 뭐 10000 테셋 이어서 또
빌드한 하는데 40분이 걸린다 그러면 어떤 버거가 들어갔을 때 그 버 가
들어갔다는 걸 찾기까지 가 40분이 걸리는 거고요
그러면 그 버그가 있다는거 차이는 40분이 걸렸을 때 누군가 고쳐먹고
새로 또 뭔가를 집어 넣어도 그리고 차고 z 엔딩 하는데 또는 40분이나
온 거에요 그러면 이 중간에 어떻게 더 이상 일을 못하는 경우가 있는
사람도 있어요 당장 이거를 받아야되는데
새로운 빌드를 받아야만 일을 할 수 있는데 그 비대가 고장이나 왔고 이미
받은 것을 못 하기 전에 꽃 올려야 되고 뭐 이런 엉뚱한 것들 그 역도
빌드가 깨지는 게 40분에 고치면 다행이지만 40분에 고쳤고 놓는데 내가
고치는 동안에도 다른 놈도 계속 체크인 한 거야 그렇게 꽤 또 고장이
나서 검토 그래도 거쳐야
이런 문제 때문에 솔직히 빌드 서버에 문제가 생기는 가장 큰 원인은
저는 언제나 비스타 임 이었어요
차라리 누가 코 들었을 때 재빨리 그게 고장난거 를 잡을 수 있다면
1분이면 안에 잡을 수 있다면 그 일 이 밤에 나와 나온 결과를
프로그래머가 재빨리 보고 철거 들 수 있는 다시고 친구를 눌 수가 있죠
그러면 뭐 이것저것 해만 10분 안에 모든 일에 고쳐지고 그 식품의 누운
것도 나쁜 코드 줄을 보면은 40분 보다 40 라인으로 하며 보다 4분의
1이 작은 거구요
뭐 놓고 고치고 따르면 솔직 1시간 20분 수도 있지만
그런걸 다 했을 때 전 빌드는 속도가 굉장히 중요한 거라고 보거든요
매체가 아까 그랬잖아요 제가 감히 삼아 단 그
기초상식 달랐다고 한군데 회사 나쁜 회사
이 회사는 원어에 상지 반드시 말씀 드리지 않을께요 근데 이 회사는
아
그 빌드 서버를 관리하는 그거에 결정을 하는 그 리드 프로그램 입장이 그
거였어 언제나 모든 빌드가 들어갈 때마다 그 빌드가 나올 때마다 모든
플랫폼에 대해 이 비드가 완벽해야 되고
아 그리고 뭐 잉크의 인큐베이터를 빌드가 있고 처음부터 는 플래쉬 빌드가
있잖아요
잉크의 멘트 빌드로 했을 때 플래쉬 배들을 해야 되는 상황을 컴파일러가
제대로 측정을 못해 갖고 문제가 생길 수 있으니까 언제나 풀 빌드로
가야되고 언제나 모든 게 맞다 확인해서 모든 플랫폼에 맞은 맞은 경우에만
모든 빌드가 맞다고 통과를 시켜 주겠다는 거에요
그리고 그 통과한 은 그 옵션에는 빌드가 잘 했다는 것 뿐만이 아니라
스모크 테스트 다같이 놓았고 빌드 됐고 게임도 정야 전이라 상관 없이
무사히 돌며 는 크게 통과 다
처음에 코드가 작을 때는 문제가 없었죠 메쎄 시작할 때도 문제가 없었고요
그런데 이게 부피가 늘어나면서
제가 사실 이걸 처음부터 제가 이러지 말자고 얘기했었는데
씨알도 안 먹었어요 그러다가 마지막에 게임 정말 마무리할 때 쯤 되서 막
그친 월드 배경 가고 이랬을 때 그 엄청난 게 뭐 깨지기 시작하는 거에요
빌드한 하는데 1시간 20분 이걸
그럼 1시간 싶은 사람들 자기 빌드를 넣어놓고 자기가 코드 체크 임대
체크해 놓고 1시간 20분을 거기에 안자고 기다리며 데이트가 통과해 나를
볼 만한 그런 집중력 있는 사람도 없어요 4시가
오히려 그 사람들한테 는 빌드 넣고 삼성 만에 빌립 나와서 통과 실패를
보여줬을 때 그 때에 오히려 한글의 통과 다 라고 생각하고 다른 이에
넘어가고 신경을 안쓰는게 나온 거지
오늘의 1시간 보니까 따른 일해야지 그렸다는 하다가 이게 뿌 가졌는데 도
모르는 경우가 많죠
뭐 거의 매일 나누고 안 보는 경우도 있고 그럼 누가 어떻게 고쳐야
그러고 이 얼마나 이상한 포스 제가 되는 거에요
그 이 회사의 마음가짐으로 거였어 이 빌드 서버 라는 기기가
이 모든 검증 이라던가 모든 걸 완벽하게 해서
그고 f 하지 않는가 무조건 빠구리 시킨다
여기서 또 하나의 문제가 봤어요
일단 비드 시간이 플루토 만화 닫고 특정 플랫폼 1 굉장히 엘리샤 드렸고
그리고 그 스모크 테스 를 돌리는 것도 그플 통해서 특히 내렸어요
그래서 이 모든 빌드가 끝났어도 그 플루토 만화 를 기다리면서 빌드가
기다려야 되요
소식 다른 빌드는 30분에 끈 났거든요 나머지 하는 50분의 그 비슷한
때까지 기다려야 되는 거에요 그래서 그거 때문에 굉장히 문제가 많았죠
그래서 제가 이 문제를 다시 한번 제기했을 때 그
미드 프로그래머가 사실은 배경이 자기는 멀티플랫폼 개발 대경 이라고
하는데
마이크로소프트 쪽에서 어떤 사람이기 때문에 엑스박스 퍽 개발한 적이 없는
사람이에요
그게 뭐가 문제냐고 스모크 테스트가 시간이 오래 걸리면 그냥 엑스퍼트 때
붓기가 엄청 샀고 한 100개 같이 돌리면 되지 않냐고
그 사람 말은 맞아요 엑스박스 탭을 키는 굉장히 싸 거든요 그래서 그거는
왔는데 문제는 전에 패션스토리 대북 2시 문제였어요 psd 대비 키 된
한 100개 사면은
아파트 몇 할 거에요 그 정도를 있어요
그래서 그거를 제가 그렇게 할 그런 것도 없었고 현실적으로 말이 안되고
그래서 결과적으로는
그 당시 이제 새로 툴 빌드 서버 툴 팀을
이제 담당하던 사람이 더 새로 왔거든요 그 사람은 것처럼 하고 작당을
해서 결국엔 빌드 서버를 분리 시켰어요
어떻게 분리시켜 냐 면 빌드는 따로 스모커 태 쓴 따로 니까 빌드가 일단
통과되면 은 이 빌드는 끝났다고 비로서 보는 마무리 짓고
그리고 그 다음 빌드가 빌드를 잡아서 길 있어봐 찍 빌드 하기 시작해요
그리고 스모크 테스트는 따른 서버 가주 가서 스모크 를 돌리고 그래서
이게 때 1 하면 나중에 11 섭외하고 얘 뺐다 그 때 제 태깅 을
해주나 보고 그리고 또 하나 우리가 한 것은 플랫폼을 다 분리 시켰어요
이유는 회사에서 실제 개발 용어를 쓰고 있는 플랫폼은 pc 갖고
싶었거든요
나머지는 말 그대로 콘솔에 돌리기 위해서 테스트하기 위해 쓰는거 있지만
실제 매일 매일 매일 아티스트가 쓰는
빌드 나 프로그래머 주로 쓰는 빌드가 90화 피셔 써요
그런데 단순히 ps3 하고 x 박스가 망해 실패했다고 해서 그 빌드를
패스를 안 시키려 갖고 개발의 효율성을 저하시키는 게 말이 안 되죠
그래 제가 처음부터 주장이 2명 또 이거 있는데 그 당시 고 때 그 고
빌드 서버를 관장하던 의 리드 프로그래머가 반대했던 이유는
그러면 사람들이 x 박스는 ps3 가 망가졌을 때 신경을 안쓰고 그냥 데
그것은 무시한체 pc 방에서 만든다는 건 없거든요 그래서 어찌보면 저는
물론 그러다 해결책도 하고 있었는데 이 사람이 그걸 이해하지 못했지만
별과 저는 그게 문제였어요 이 사람의 마음가짐은
누구인가 사람이 와서 뭔가를 해야 될 일이 있는 부분에서 사람을 투입하기
쉽기 때문에 그냥 그거를 기계가 되다 바꿔버리고
기회가 굉장히 까다롭게
그렇게 규칙을 강요 겠다는 거에요 그래서 문제는 규칙을 강해서 얻는
이득은 사실은 거의 없었죠
언제나 모든 플랫폼이 만 더 크게 쏜다 절대 그런 일이 없었죠
언제나 모든 플랫폼이 깨 저쪽에 속 그래서 결과적으로 마지막에는 그걸
법칙이 고쳤는데
너무 늦었고 거나 사람들이 고통을 많이 받고 실제 거기서 100명 되는
직원 이모 하루에 1시간씩 1 못하면 되면 100시간의 낭비 한건데
그런 식으로 낭비도 워낙 많았고
이거에 대한 해결 법의 죄가 있다고 했잖아요 이거 다 해 보면 솔직히
굉장히 간단해요
각 플랫폼 막아 담당 인원 1명 을 만들면 되요
그 예를 들어서 그런 일을 하는 회사 새로 제가 옛날에 봤구요
그리고 보통 렌더링 프로그래머들이 그 일을 좀 많이 해요 왜냐하면 뭔가
심하게 뽑아 졌을 때 저희는 실제 플랫폼을 열어보고
좀 레벨까지 보기 할 수 있는 그게 그 능력이 있으니까
무게 토킹 프로그램도 비슷한 능력이 있죠 사실은 그래서 제 모든
네트워크에는 렌즈인 프로 아마 가장 거기에 맞는 사람들이고
어떤 식으로 가야 되냐면 pc 를 담당하는 프로그래머가 있고 ps3
상당하는 프로그램 하나가 있고 뭐 엑스박스 를 담당한 프로나 따로따로
있는 거에요 대해서 이 사람들은 그 거리라 코딩을 만든 사람이 아니라
게임성을 문지기 빌드 문지기
그래서 빌드가 지났는데 psd 가 빠졌다고 나왔다
그럼 제가 ps3 담당 이면 들어가서 코드 여러분은 거에요 어떤 체인지가
있었나
그래서 뭐가 뭐가 뭐가 해서 이런 문제가 있다고 해체가 판단했을 때 제가
고칠수 숨고 치겠지만
그 게 아 니 라 어떤 사람이 집어넣은 코드가 그게 문제 없다는 걸 제가
발견을 하는 거죠 그럼 저는 그 사람한테 가서 이 코드가 지금 문제니까
당장 고쳐 라고 얘기를 하는 거고
여기서 문제가 되는건
그 사람이 내 말을 안 듣고 한곳 친다고 하면 어떻게 할 거냐 뭐 그
사람이다 가 훨씬 이어서 그런 문제가 있는데 그것은 말 그대로
팀 안에서 제 윗사람이 나 미드 뜰이 그룹 무선 분이 확실히 정해 주면
되는 거에요 만약에 이해가 얘는 심지어 좀 주니 하고 인터 미디어 있으며
난 너한테 와서 빌드가 깨었다
그러면 너는 반드시 걸 먼저 고쳐야 한다 라는 그런 강한 규칙을 정하면
되는 거고 그 규칙에 따를 따르면 은 당연히 훨씬 더 빠른거 줘 사람들
개발하는 멈추지 않고 어떤 플랫폼이 구해 놓았을 때 이것은 곧바로 또
고치려고 할 거고 그리고 그 플랫폼을 당장 고칠 수 없는 일이었 5
블랙티 플랫폼 1 목수는 거니까 그런 다 장점이 있죠
근데 또 하나의 어디서 단점이라고 그 저 전에 리드 가봤던 거는
이건 어찌보면 누구를 이제 블레임 하는 게임이 될 수 있다는 그런 거
였던거 같아요 니까 저는 언제 남 빌드 깨지는 것을 짜증나 할거고 보면은
이구용 했으니까 고쳐 주세요 라고 말하는 것 자체를 사람들이 좋게 안
받을 수 있다라는 그런거 기도하는데
초는 그게 무슨 상관인가 싶어요 어차피 기계가 자동으로 않아 알아내서
이메일 보내왔고 그런 됐습니다 라고 하면은
어차피 그것은 모든 게 뭐 이멜로 자료가 남으니까 그게 올해도 쪽팔리지
않나
차라리 그냥 빌드 문제가 갖고 한쪽 했는데요 남들에게 전에 빨리고
추세라는 게 훨씬 그 사람의
그 자존심을 지키는 데 좀 도움이 되는 게 아닌가 라는 생각이 들고
어찌보면 그냥 그런 나쁜 소리를 하기 싫은 사람 이었기 때문에 그냥 기계
의 전하려 했던 것 같아요 그래서 기계만 능과 자동 맞는가 쪽으로 가려고
했던 것 같고 실제
빌드 머신 의 목적이 있지만 그 목적 1차 목적이 있죠 길드 레벨이
peak 션 하는 그 목적이 과연 2차 목적이 뭐냐 이 필드를 빨리
고치고 사람들이 언제라도 시간이 다운드 잡고 일할 수 있게 해야 한다는
그 목적 자체를 보지 못한 단점일 수도 있어요
아니면 오히려 엔지니어 의 입장에서 그냥 아 기계가 이런 일을 할 수
있고 자동으로 처리해 주고 저 굉장히 입사 이 링 하잖아요 근데 귀찮게
하다 코드 여러분을 볼 필요 없고 그런 기계의 만능 화려해서 자기 삶을
좀 편하게 하려고 했으나 오히려 그로 인해 침 전체의 효율성을 굉장히
무너뜨린 그런 경우였다 고 보거든요
그 제가 하고 싶은 말은
튀게 맞는거 너무 믿지 마세요 기계는 굉장히 좋은거 고기가 자동으로 정말
굉장히 좋아요 그런데 거기에다가 적당히 사람의 판단력과 사람의 그런 터치
그런게 포함이 될 때 훨씬 일도 효율적이고 얘도 빨라진다는 것을 좀
알아야 할 것 같아요
그래서 혹시라도 모를 뭐 빌드 자동화 머신 이라던가 이런거 만드시는 분이
계시면 특히 큰 회사에서
그런 부분에 생각해보세요 아무리 자동 하고 열심히 잘 돼 봐야
오히려 개발이 힘들어지는 경우가 상당히 많아요
뭐 대표적인 예로 이제 제가 일전에 한번 얘기해 뜻이구요
무슨 코딩 스타일 자동 와 자동으로 판단해 주기 뭐 이런 플러그인도
있거든요 제가 최근에는 씻어 쪽을 하면서 이제 모씨 샤퍼 라는거 이런것도
좀 봤는데
그래서 거기서 제공하는 모 여인은 뭐 뭐라 그래 아 어드바이스 그 이렇게
고쳐라 코드를 그러면 고치고 수 있는 버튼 아름답고 써주는
굉장히 많은 사람들이 그렇게 됐을 것 같다는 생각을 해요 근데 그런
어드바이스 로 나오는 코드 중에 상당히 코드 가독성을 떨어뜨리고
버그를 만드는 걸 굉장히 쉽게 해주는 그런 것도 많이 봤어요
데 크게 링크 쪽에서 좀 문제가 많이 생기는데 원하는 링크를 많이 쓰라고
이제 시작이다 하지만 실제 시간 링크를 봤을 때
느 링크의 디폴트 비헤이비어 예 그 기본적인 그 동작 방식 에서 문제가
있는 부분이 좀 있어요 거에
시세 볼 완벽히 속을 내내 소금 완벽히 알고 그런 프로그램을 상관이
없지만 코드 가독성이 중요한 이유는
초청 제 프로그램 억만 이 팀의 있는게 아니라 실제 그 정도 수준까지
아직 더러 올라가거나 아닌 평생 안 올라가거나 는 사랑까지도 같이 코딩을
하고
아 협약 협업을 해야 되기 때문에 그런 사람들까지 같이 실수를 안 만들고
코드에서 버거를 줄이기 위해서 가족성 이 되게 중요한 거거든요
제가 말하는 가독성은 말 그대로 무슨 뭐 변수 림이 잘 되느냐 를 떠나서
코드를 읽었을 때 이 코드가 내부적으로 어떤 일을 하는지 한 번에 알 수
있는 그런 코드가 중요하다고 봐요
이제 그런 자동화를 통해서 그런 코드가 올 더 망가지는 경우도 봤고 구모
요즘 이렇게 뭐 탈출한 하는거 많잖아요 오토 라던가 보아라 등 값이 전에
전파하고 c 플러스 lo 토구
타이핑 줄여주고 굉장히 장점도 많지만 그걸 남용 하다보면 오히려 코드만
일이어서 그냥 아 이건 불리언 이구나 이건 이게 이거 겠구나 라고 알 수
있는 것까지 오히려 너무 추상화를 시키는 단점도 있어요
그래서
제가 요즘 코드 자동 컴플리트 기능을 보면서 걱정이 되는건 그런부분이 좀
걱정이 되요
거기에서는 장점도 있지만 오히려 코드 가독성을 주는 경우도 많다는 그런
경우가 있어서 그거에 대한 비디오나 나중에 만들 거고 제가 오늘 드리고
싶은 말씀은 있구요
자동 아 물론 좋지만 자동화를 통해서 이룰 수 있는게 정말 근본적인
목적이 뭐고
그 목적을 이루게 되어 정말 자동화 많이 길인지 아니면 자동화하고 사람의
소개로 적당히 섞는 게 중요한지를 판단 해주시는게 좋을것 같아요 그래서
엔지니어들이 흔히 빠질 수 있는 그런 식 흔히 저지를 수 있는 실수
그거라고 말씀을 드리고 예 이 정도에서 오늘 퍼팅은 끝내게 역 뽑혔습니다
