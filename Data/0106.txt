요즘 들어서 그
올바른 api 설계 에 대해서 좀 생각을 되게 많이 하게되요 그게 이제
뭐 게임 회사 안에서 그냥 일 하시는 분들이면 자체 라이브로 이 쓰고
거의 라면은
뭐 api 가 뭐 앙망 이면 뜯어 고치면 되니까 얼른 이 없을 텐데 뭐
엔진 팀이 따로 있다면 다른 얘기 구요
뭐 예를 들어서 이제 엔진 제조업체 나 아니면 무슨 뭐 하드웨어
제조업체에 이런데 들은 자체 api 를 많지 곰 하잖아요 그런데 이제 뭐
자체의 2패 를 제공하면서 문서가 를 잘해서 좋은 사람도 있고 문서 하라
안에서 주로 사람도 있고
근데 뭐 문서가 되던 말던 간에 문서를 제가 5000장 음악 든 만장을
받든
그 문서를 읽을 일은 좋지 개 많지 않아요 처음부터 끝까지 쭉 몇 백장
을 읽을 사람도 없고
결과적으로는 뭐 옛날부터 그런 얘기 몇 번 드셨을 거에요
가독성이 좋은 코드를 써야 된다 물론 그것도 좀 제가 많이 생각하고 있는
문제고 그 뿐만이 아니라 코드의 기본 비해 입이 없는 기본 동작 이
코드를 이렇게 썼을 때 정작 내부 동작은 정확히 모르지만 상식적으로
생각했을 때 이게 기본 동작이 있 거다 라는 그런
30 수준의 돼 있잖아요 그 기본 농장을 어떻게 잘 맞추어야 도 되게
중요한 거고 그 기쁜 농장 얘기는 나중에 따른 비디오로 만 쓸 말씀을
드릴 것 같아요
오늘 그냥 하고 싶은 얘기는 api 디자인인데
한마디로 코드 함수만 딱 보고 아 이거는 이렇게 작동을 하는거구나
아니면 뭐 어떤 새로운 언어가 있을 때 새로운 신택스 만 보고 아 이거는
이렇게 작동을 하겠구나 라고 딱 봐서 알게되는 그런 ap 에 설계될
중요해요
근데 봐서 모르겠다 그건 그나마 괜찮아요
왜냐하면 은 봐서 모르니까 문서를 되시겠죠 질문을 하거나
제일 문제가 되는게
봐서 이해가 되는것 같은데 그게 잘못된 거야 이제 뭐 제가 당연히
멍청해서 그런걸수도 있겠지만 상당히 많으니까 뭐 상당히 많은 경우에는
오히려 하드웨어 제조업체에서 바버 지자 한계와 더 많아요
제 생각에는 아마도 소프트웨어 쪽에서 일하시는 사람들은 대충 일반적인
저희가 쓰는 일반적인 뭐 프로세스가 있고 일반적인 뭐 이름 짓는 방법이
있고 일반적으로 생각하는 그런 행동들이 있어요 모든 함수를 볼 때 그래서
저희 쪽은 보면서 아 그래 야 당연히 이렇게 보면 아 이거 이 시대 이신
섹스는 이러니까 저것도 저러니까 다 비슷하게 꾸나 이렇게 보이는게 있는데
오히려 하드웨어 쫌만 소개를 하던 사람들이 api 를 만들기 시작하면 은
그 생각을 못하는 것 같아요
뭐가 정말 입기 좋은거 뭐가 안 이렇게 좋은지 생각을 못하는 것 같아요
오늘은 한 가지 예를 들이 들여 들어 드릴 건데
예 콘솔 게임 콘솔 쪽에서 실제 있는 api 거든요
네 제가 이거를 어느 콘솔의 뭐라고 말씀 까지 드리며 는 분명히 저는
고소가 들어오고 그것은 싹 빼고
쉐이더 언어 였어요 쉐이더 넣는데 이 쉐이더 가 이제 좀 오래된 하드웨어
뭐 그래서 쉐이더 언어를 어셈블리어 로 짬 안되는 쉐인 언어 였어요 뭐
샘 분리하면 놀라시는 분들이 있고 얻어 뭐 어려워 하시는 분들이 있는데
프로그래밍 하시는 분들한테 어셈블러 솔직히 가장 쉬운 언어 에요 쓰기에는
왜냐하면 은 어셈블리어 나 딱 이것밖에 없어요
변수가 있어요 뭐 a b 모 레지스터 라고 하죠 보통은 크게 있고 그
에이크 변 3 할 수 있는 명령어들이 몇 개가 있어요
그 대표적인 명령어가 누구라고 해서
그래서 어떤 값을 그래 지체 놓는다 뭐 c 에서 보면 그냥 이코 쌓이는
그와 똑같은 거예요
그리고 보통 에드가 있구요 + 이거 그럼 이제 여기는 세계를 가다 선수를
첫번째 거는 그 최종적으로 들어갈 편수 아닌 몸의 래스터 그리고 나머지
2개는 더할 수 짝이 게 아냐 그 숫자를 가꾼 으로 해서 두 개의 뭐
아니면 뭐 상수 뭐 어쩌고 이런거 그러면 비슷하게
곱하기 있고 뭐 더하기 곱하기 없고 매드 라고 하는거 있고 mad 구모
거기에다 뭐 컴페어 몸은 뭐 이런 것도 있고요 뭐 이 값이 영화 5 가냐
안가냐 같으면 역으로 점프 해라 그 굉장히 간단한 코드 에어 그런데 이제
저는 쉐이더 언어 였으니까 보통 쉐이드 언어는
아 플로 4개를 한꺼번에 연승을 하잖아요 rgb 에 이렇게 해 왔고
그래서 그럼 거기서 이제 오는건 없다 수위 슬링 이라는게 있어요 그게
뭐냐면
이래서 a 라는 멧 이스터 에 xy jw 4개가 있잖아요 그러면 이
중에서 제가 x 하고 지만 뽑아 갖고 쓰고 싶어요 그러면은 저희는 그냥
뭐 아까 a 라고 했나
atl xg 하면은 그 두 값이 순서대로 나오는 거에요 그럼 이제 에이다
xg 하고 몹이 닭 yg 하고
더해 갔고 이거를 c 다모 w x l 좋겟다
그럼 이게 다 되는것이다 w x 2 코 뭐 adr 않고 뭐라 그랬어 xg
2
비다 yc 그랬던거 같은데 뭐 그래서 그게 한 문장을 쓸 수가 있어요
굉장히 편한 거죠 그래서 저는 그래서
쉐드 언어를 열심히 썼고 근데 이상하게 어디선가 버그가 생기는 데
이제 디버거를 붙이 방법도 굉장히 오래
고래 문제를 겪었어요 이리저리 뭐 돌려가면서 이거 대충 이렇게 하면
되는구나 라고 이렇게 글을 봤는데 어느 순간 정말 운이 좋게
잘 작동하는 코드가 제가 모르 실수가 바꾸는 작동 안하는 거에요 그래서
그 순간에 이게 뭔가 이상하다 아까 말한 스위니 이라고 했잖아요 e
규칙이 뭔가 이상하다고 생각해서 열심히 무슨 400p 진짜로 쫙 읽었어요
1 다 보니까 마지막에 딱 한 구절에 있는 거에요 근데 그 구절이 정말
말던 들의 api 디자인을 설명한 거에요
어떻게 되는 뭐냐면 이게 예를 들어서 가장 쉬운 걸 예를 들어볼게요 무후
그럼 무 부 에서 이제 에이다 x y 에 pdr 뭐 xy 를 듣고 싶다
그러면 저희는 일반 좀 살 때 이들 xy 콜트 피다 xy 러 잖아요
아니면 우리가 지금 하고 싶은 게
음 도자
adr
x
음 만족하자 a dry 씨의
빛 앗
xy 를 넣고 싶은 거에요 그러면 우린 당해 그래 삐 다 yg e28 아
xy 하면 들어갈 거 같잖아요
근데 에이핑크 게 아니에요
쉐릴 언어를 해보신 분들은 다 알겠지만 이건 당연한 거라고 생각해야
되거든요 근데 그게 아니더라고
이게 재미 있는게 뭐냐면 아까 쟤네 삘이 온다고 했으니까
또 들어가는데 필요없고 아까 adr xy 라고 했나 그 무 비단 말도
니다 할까요 이럼 안되는데
다시 정리 여기다 xy 의 빛 아래
데이 다 yg 의 plx 걸린다고 해 보죠
그런 빛 exr 하면은 여기서는 b 답 x y 가 올바르게 나와요 근데
여기서 저희는 이것을 y 아버지의 놓고 싶잖아요 그럼 우린 당연히 x 가
y 에 들어가고
아 으
x 가 y 에 들어가고 y 가지의 들어가면 생각을 하죠
근데 이어 이 언어에서는 그게 아니에요 이 엄 에서는
xy 라고 되면은 2x 가 이 변수 x 에 들어가는 거에요 사실은 근데
이 변수에 집어 넣으려고 할 때
여기는 x 가 표현이 안 돼 있으니까 이것은 매스킹 나오셨는데 마스크로
r 잘라내 주는 거야 그럼 x 는 원래 이럴수록 하는거지만 이거 마스킹
아웃이 되고 두 번째와 이라고 해 준 거 있죠 그게 여기 두 번째
들어가는 거에요 그럼 아까 ya 게 들어가고
그럼 지는 어떻게 여기서 액션이 밖의 지역 만 해 주잖아요 그죠
그러면 씨의 들어갈 때는 지정을 해 줬기 때문에 마지막에 지정을 한 번
반복해 주겠다는 거에요 그래서 결과적으로 이게 어떻게 어떻게 내부적으로
되는 거냐면
에리 다 x yg 의 이걸 눕는 건데
x 는 매스킹 이어서 하는 거고 그 실제 우리가 아까 뽑았던 그 피다
xy 가 있잖아요 그럼 이게 per x y y 로 반복의 된 다음에 이걸
다 치고 넣는거 여기서 x yg 의 x y y 를 집어 넣으면서
근데 이건 첫번째 건 마스킹을 하니까 x 를 빼고 yg 에 y y 가
들어가는 거더라구요
그 손해 보면서 이게 무슨 개소리야
이렇게 가량 큰 문제는 몇가지가 있어요 일단 첫번째 문제는
이쪽에서 yg 를 뽑아 없는 것은 굉장히 올바른 방법이긴 한데
그거를
아 그 세번째 걸을까 세번째 나까지 에 넣고 싶은 걸 제가 직접 넣어
주지 않았다고 해서 이걸 반복 시켜준다는 것 자체가
뭔 특상 으로 오는거죠 보통 쉐이더 맞아 많이 그러니까 하지만 이
상황에서는 이게 에러를 줬어야 되면 법학의 넌 듯하게 하기 위해 그
이유는 두 번째 요
이 테스트 레이 션에 들어간 x yg yg sdx 를 마스킹을 뽑아버린
다는거 이것은 스위 지능이 아니라 더 이상 이거는 마스킹 이에요 한마디로
걔는 한 문장 안에
데스티네이션 들어갈 때는 마스킹 쓰고 그 소스 뽑아 올 때는 마스킹
안나수이 지니 글 쓰고 있다는 이거든요
한마디로 개 소리죠 보기엔 똑같아 보이는 문법을 의미가 되게 라는 거예요
그리고 이 두 개의 섞어 놓으면 서 어 그래 여기서 반복할 때 그냥 애가
생각을 하면 밤 반복을 해줄게
이게 여기까지 하면 은 잘 못해서 제가 잘못 데이브 라고 잘못 가정을
세웠을 때 에러가 나는거 컴파일러 해라 그럼 나는 당연히 이게 작동하는
코드를 생각하고 쓰고 있는데 나중에 결국 가문과 이상해 한번 디버그를
정말 힘들어지는 거죠 그래서 진짜 문제를 여기서 거였어요
마스킹 하고
그 수의 실링을 똑같은 방법으로 표했다는 거 그리고 어느 dsc 는 쏠
수 있느냐에 따라 그게 의미가 달라지고
그리고 여기서 만약 내가 실수 로 뭐 씨를 안 썼을 때
여기서는 그게 컴파일러는 그대가 당연히 원하는 거라고 생각하고 기본 비해
이디어 기본 행복 여세를 반복하는 걸로 해 주겠다고 해 너무한거 그 이
문제는 두 가지가 되는 거거든요 이렇게 제가 그걸 보고
몇몇 프로그램은 얘기했어요 사실은 목을 다들 학을 떼어 아니 어떻게 그런
그런 ap 애가 나올 수가 있냐고
주도 이거 없어요 그 그게 어떻게 나올 수가 있는 거지
제가 어셈블리어 를 몇번 해 왔고 여학생들이 쉬운 어떤 작았지만
이렇게 개판 친구 못 본 것 같아요 근데 보면서
예 저런 잊어 콘솔이 그래서 괜찮은 게임이 안나오는건 생각이 들 정도로
엇인가 카 더라구요 그래서 이거는 제가 최근에 겪었던 예일 뿐이고 하도
황당해서 말씀을 드리는 것도 인데 이런 식의
api 디자인이 좀 있어요 특히나 이제 하드웨어 쪽을 열심히 만드는 회사
할 수록 좀 그런게 있고 뭐 정확히 아는 소프트웨어 공학 쪽으로
프로그램을 파는거 쪽으로
시작을 하지 않은 회사는 그런 문제가 좀 있어요 특히나 지아 나중에 이제
하드웨어에 맞는 다가 소프트웨어를 만들기 시작한 사도 그러면 좀 있고
애플 apm 안보셔도 좀 아시는 분들은 그런 생각하시고 오 이거 좀 알이
배어 이상하다 뭐 뭐 기타등등
오브젝티브 c 도 상당히 좀 문제가 있는 어 문제가 있는 언어 라기보단
* 손대고 싶지 않어 였죠 봅 쌍으로 다행히 뭐 스위프트 라는 그런
언어가 나서 다행히 긴 한데 세이브가 옵 2x 보다 나은 건 확실해요
제가 봐도 제가 맘에 안드는 디폴트 피의 기회가 2 두개가 있어요 근데
그거는 제가 나중에 말씀을 드렸고 그것도 상당히
생각없이 만든 부분이라고 생각해요
키보드 위에 불을 굉장히 잘 설정하는데 중요한 건데
오브젝 키스의 살 수 있는 7 수저를 고치겠다고 새로운 언어를 만들면서
똑같이 실수를 만들 수 있는 여지를 그렇게 나면 나면 좀 좀 아쉬운
부분이 한 두어 개 있었어요 그래서 구원자 나중에 말씀을 드리고 오늘
하려고 했던 얘기는
혹시 map 설계 하시는 분들은 좀 그런거를 생각을 하셨을 것 같아요
똑같은 문법에 두 가지 의미를 늦지 말 잘하는 것도 되게 중요한 거고
그리고 일반 사람들이 그냥 코드만 봤을 때 문서를 안본다 과정을 하고
코드만 보고 몸에게 회수한 봤을때 아 이게 이렇게 작동하는 거다 아니면
금봉 문법만 봤을때 이게 이렇게 작동하는 거다 라는 그런 일반적인
공감대를 가지고 있는 분야 라며 는
괜히 이상한 짓을 하면 안 될 것 같아요 그런게 좀 하시고 뭐 그런
의미에서
c 플러스 플러스 나 이런거 해제 그 오퍼 레이르를 엿 연산자 오버로딩
이라고 1
5 라이딩 이라고 1 5 모르게 맞는거죠 5 로딩 하는 것도 한 때
굉장히 이를 끌다가 갑자기 확 사그라 된 것도 있잖아 옛날에 쓰던 다
프로젝트라 할 때 곱하기 있었다거나 뭐 이상한 그걸 쓰면 뭐 라거나 이런
코드가 되게 많았거든요
요즘은 다행히도 모자 바하 부터 시작해서 뭐 시시한 뭐 이런 언어들이
그런 오퍼레이터 를 오버로딩 하는것 보다는 실제 뭐 이름을 제대로 써
같고 뭐 스트링 그 검 검사 할 때도 뭐 이 커서 뭐 이런거 많이
쓰잖아요
그렇게 hd 의 의미 있는 함수를 써서 오히려
뭐라 그래 실수를 막고 보고 가면 명백하게 하려는 걸 움직임이 있었기
때문에 다행히 도저히 10 플러스 플러스 프로그램을 중에도
그런걸 좀 배워서 이제는 좀 연산자를 이상하게 쓰 오버라이딩 하는거
보니까 뭐 로딩하는 걸 되게 버섯 피하려고 하죠 그래서 그런것 좀
다행이라고 생각을 하고
그래서 아예 요즘 에 어이없게 이런저런 새로운 언어도 많이 먹어서 새로운
api 더 많이 보고 새로운 코스도 많이 바라고 그렇게 됐어요 되게 는
그래서 야 아직
이런 큰 회사에서 나오는 코스 요체 이렇게
이 pi 설계가 안 될 정도가 될까 라는 게 좀 어쩌나 쉽고 뭐 하드웨어
엔지니어링 하시는 분들 쪽에서는 뭐 그정도 하드웨어는 뛰어나다고
생각할수도 있겠지만 주로 소프트웨어 쪽이 백그라운드 저로써는 좀 많이
아쉬운 부분이 아직도 많아요 그런 회사에서
정말 제대로 된 소프트웨어 아키텍트 명만 아 채용해서 그런 api 검토한
제대로 시켜도 아니면 자기네가 직접 만 하더라도 실무에 있는 저희 들한테
가까워서 미리 보여주고 그만 제대로 하더라도
이거 이런 문제는 굉장히 고칠 수 있을텐데 콘솔 같은건 한번 나오는 5년
동안 먹고 치는게 문제니까
그런건 좀 아쉽지 5 뭐 또 얘기는 언제나 3
옆으로 되지만 영토에서 끊고 뽑혔습니다
