얘 안녕하세요 포프 입니다 음
오늘은
아크릭 그 얘기를 단 얘기를 하려고 그래요 그
[음악]
특히 웹 쪽으로 그 뭐지
mbc asp 닷넷 그래야 asp 답네 슬
쓰시는 분들이 있을거라고 믿어요
뭐 아직도 자바 스프링 쪽을 쓰시는 분도 계시겠지만
제 뭐 돈 있는 회사는 맛으로 진다고 믿고 있는 자니까 그런 좋은 회사에
다니시는 분들이 면은 분명 이 웹을 만들 때 제 a as b 다녔어 같고
뭐 좀 오래된 프로젝트로 웹 봄으로 많이 만들어 쓸 거고 그다음에 이제
좀 새로 하는 프로젝트를 아무래도 mbc 파이브 라던가 뭐 그 웹 api
등을 써서 많이 만들었을 것 같아요 저도 이제 한 2년전인가 3년 전에
있던 회사에서도 이제 그걸 넘어가는 과정이 얻고
저는 이제 운좋게 mbc 하고 웹 apa 쪽으로 해서 많이 썼었고
아 그러다가 이제 그 뒤에 많은 것들이 조금씩 변해 같죠 제 예전에는 그
모 놀리 딕 서버 라고 해서 서버 1 에서 모든 것을 처리하는 그런
뭐 굉장히 비싼 서버 이런 식으로 써 거기다 최대한 많은 접속을 처리하자
이런 방식이었다면
이제 그 다음에 이제 마이크로 서비스 라는 이제 뭐 신종 이제 뭐라고
해야될까
패러다임 이라고 해야 될까 이제 뭐 그런게 나오면 사람들이 또 그 쪽으로
좀 많이 약을 빨면서
마이코 서비스도 많이 넘어가다 보니까 아예 습관에서 너무 무겁지 않냐
이것보다는 굉장히 라이트웨이트 한 그런 써보다 필요하지 않냐 라는
부분에서 이제 노드 js 가 많이 각광을 받았던 것 같아요 그래서
모노 제이에스 는 솔직히 싱글 스레드로 도는 거였고
아 그렇게 그러고 이제 o 모 싱글 스레드 라고 하지마 이제 블라 킹이
아니라 고통이 제모
모코 루팅 이런거 생각하시는 것처럼 그냥 타임 슬라이스 이므로 이제
하나씩 하나씩 시간을 주는 거였죠 여러가지 이제 에이징 크로 돌기
시작하면
뭐건 자바스크립트가 도는 원리 아 도 비슷한 거 같으니까 그거는 뭐 굳이
설명 안해도 될 것 같고
이제 멀티쓰레드 인 기반이 아니라 그런 식으로
이제 돌게 되면 은 이제 뭐 뭐 메세지의 핸들링은 빨리 할 수 있다는 님
컨텍스트 위치가 없기 때문에 훨씬 낫다는 이 뭐 이런 여러가지 장점들이
있었고 뭐 결과적으론 어차피 마이크로 서비스가 해야 되는 그 기능 하나가
되게 짧은 거니까 서버마다
그거 용어로는 오히려 그렇게 모든게 꽝 창 들어가 있는 asp 담배
보다는 정말 뭐라 그럴까
아주 배워 보니까 아무것도 어디가 원하는 거 맞다 올려 왔고 설정에서
올릴 수 있는 그런 서버 가 낫지 않냐
그러나 안쪽으로 해서 노드의 쓰고 많이 가끔 을 받았던 것 같아요
그리고 뭐 어찌보면 그거에 대한 차이는 이제 모든 기능이 들어가 있어서
그냥 곧바로 아무 생각 없이 쓸 수 있는 윈도우 수가 좋냐 아니면 정말
내가 필요한 것만 같다 구어 갖고 os 를 만들 수 년이 뉴스가 낫냐
이런 개념인 것 같기도 한데 사실은 음
뭐 개발자 입장에서는 어찌보면 은 그렇게 왕창 들어가 있는 게 편하긴
편하죠 내가 쓸 수 있는 것 같으면 좋으니까
거기서 내가 4로 때로 설치 할 거 없이
근데 이제 문제는 속도 상에 문제였고 그래서
논의해서 더 많이 가끔 을 받았고 여태까지 많은 상승세를 거쳐 왔던 것도
맞는 것 같아요
그래서 그 순간에 이제 뭐 뭐 누구 js 를 보고 배웠던 그 때 비슷한
움직임이 있어서 똑같이 시작을 했던가 4
이제 마이크로소프트에서 는 이제
아 bnx 트라고 1동 했었거든요 뭐 넥스트 버전이라고 해서 그랬던것
같은데 그게 지금의 단내 코어 라고 나와 있는거구요 그래서 as 대한
4코어 이런식으로
그래서 이제 그거를 똑같이 만들기 시작을 했고 그리고 뭐 벤치마크를
$100 믿으면 안 되지만
음 벤치마크를 이제 최종 아영 얼마 저희가 작년인가 맞는거 에서는 노드
js 속도 를 눌러 따고 나와 있긴 한데 뭐 그건 뭐 어떤 상황에서
어떻게 돌려주겠다 사랑 거기 때문에 뭐 그렇게 중요한 건 아닌 것 같고
그냥 노드 js 만큼 빠르다 그리고 제가 실제 체감하는 거로 는 실제 착
뭐 돌려보면서 예습이 단내 보다는 빨라요
그래서 그렇게 굉장히 라이트웨이트 1 새로운게 만든게 이제 답네 코어
였죠
그럼 이제 그런 신기술이 나오면 이제
음 뭐라 그럴까 그런 언제 기술을 도입해야 하고 언제 지금 있는 그 걸을
가 높아야 되고 그리고 이 갈아 엎을 때 과연 문제가 없을까
괜히 가 럽게 를 결정하고 두달동안 쳐 박았는데 갑자기 이런 문제 때문에
못쓰면 어떡하나 아니면은 아
뭐 뭐 갈아 없는게 너무 시간이 많이 걸리면 어떡하나
근데 안가 라고 보면 너무 뒤져서 이제 더 이상 새로운 이런 성능향상을
께
뭐랄까 받을 수 없고 점점 서버를 늘려 가야되는데 걸 어느 순간 바꿔야
되는 게 옳은가 라는 고민을 하는 위치에 있는 분들이 많을 것 같아요
이즈모 저두 그런 위치 중에 하나고
그래서 작년까지만 해도 정확히 얘기하면 은 몇 달 전까지 말도 누군가
저한테 담에 코를 쓸 거냐고 물으면
아직은 시기상조 라고 했어요 그 첫번째
몇 가지 이유가 있었네 사실은 아 이제 새로나온 기술을 처음 만나는 것
자체가 일단 제가 100 테스터가 된다는 거고 제가 얼리 아답터 오라고
뭐 좋아하고 이런건 있을 수 있는데
결과적으론 그거는 뭐 랄까 저 혼자 만의 새로운 거 만져보고 싶다는
생각도 때문에 오히려 회사에 누를 끼치는 거라고 생각을 하거든요 그래서
어느 순간에서 는 당연히 넘어가겠지만 그냥 얼리 아답터 새로운 것을
시도하고 싶어서 넘어 가는거 아니었던것 같아요 그리고 그 몇 년 전에
이제 저의 옆에 있던 사람이 이 달래고 어가 이제 내게 섯 온다니까
맥에서 시도해 보려고 했는데 뭐 이런저런 찬송 가야 되는 게 좀 많았어요
뭐 둘도 완벽하지 않아 썼고
아 그래서 아직은 시기상조 따고 생각을 했고 그때 밥에 코 버전도 뭐
릴리스 캔디 데이 셔야 하거나 뭐 프리뷰 버전 1 했거든요
그리고 이제 또 하나 문제는 이제 단 4코어 팀 하고 제 생각엔 비쥬얼
스튜디오 팀 하고 같이 작업을 할 수가 없잖아 같은 프로젝트 니까
서로돕기 나지만 모든 버전을 같이 갈 수 없기 때문에 바로 전 버전 단내
코만 하더라도
비주얼스튜디오 자체에서 지원을 잘한다고 보게 되 게 어려웠어요 자체
프로젝트 4r 파일에 따로 있었고 그리고 거기다가 무슨 좀 약간 j 썬
파 이런걸로 직접 셋팅 해 줘야 할 것도 있었고
물론 그런 세팅 해 주니 나쁘다는건 아닌데 툴루즈 세팅이 한번에 가능한
거면 은 굳이 손으로 세팅해 지 않는게 좋지 않아 대부분의 사람들은
그렇게 생각을 하거든요 그래서 그런 부분도 있었고 툴 기능 거죠 뭐 했고
버전이 프리뷰 버전 이었다는 것 처럼 기분이 나빠 꼭 그 말인즉슨 뭔가
많이 바뀐다 는 얘기입니까
그리고 9 당시의 이제 아
엔티티 프레임워크 쪽도 이제 지금도 건 똑같은데 msdn 을 읽어보면 은
이제 예전의 엔티티 프레임워크 에 비해 이런 이러 이런건 안 된다고 했어
있는게 있어요
그런데 이제 상황이 조금 바뀌었죠 그 뒤에 이제 비주얼 스튜디오 2010
7이 나왔어요
분천 수출의 나오면서 이제 프로젝트에서 cs 프로젝트를 썬 것 안에서
이제 담에 꼭 같이 쪽으로 지원이 되고 뭐 쉐어 드 프로젝터를 뭐 이렇게
프로젝트를 링크하는 거라던가 이런것도 어
예전보다 잘되어 그래서 뭐 약간 더 그는 있는데 여기 저기 그렇게 중요한
것은 아니고 비주얼 ij 샴버그 쪽에 요 툴에서 잘 안보이는 버그 정도
그 외에는 모든 게 작동 하기 시작을 했고 아 그리구
못한 내 나까마 아까 말했던 그 엔티티 프레임워크 쪽 문제는 그대로
있는데 그 외에 굉장히 많은 것들이 좋아 줬거든요 일단 버전도 정식버전
올라왔고 툴 지원도 괜찮아 졌고 내 쪽에서도 이제 비주얼스튜디오 맥이
정식 나왔잖아요
모자 마린 기반이라고 알고 있는데 자 마린 스튜디오 급 입안으로 가
올랐다고 알고 있지만 것도 나왔고 뭐 그게 안되요 비쥬얼 스튜디오 코드
있을거고
툴 지원 는 웬만큼 괜찮아 졌고 제프 패키징 이라던가 이런것도 왜 많은
진짜 괜찮아 졌고 비쥬얼 스튜디오 온라인 쪽에서 모씨 아이를 돌리거나
이것도 자체적으로 지원 잘되구요
그래서 모든 툴이 이제 아 이제
고생을 안하고 이거를 들어갈 수 있을 상황이 왔다 라고 생각이 들었어요
그래서 제가 지금 있는 회사에서 제가 뭐죠
그가 좀 제가 기술될 정도 내리는데 그 회사에서도 이제
교타 네코 5로 돌아섰고 그리고 이 비디오를 만드는 시점에서 오늘 아침에
쉽게 300호 서버가 나왔어요 프로덕션 라이브로
아 그리고 이전에 이제 담배 코어 있는 기능들 잘 쓰면 되는 건데 일단
다 내 코가 이제 뭐라 그럴까
4 아까 말했던 단순히 성능만 빨라진 그외에도 몇가지 장점이 있어요
그 장점도 있고 한 가지 단점이 있다고 정도는 데
이제 단 전부터 계단 전부터 일단은 디펜스 인젝션 에
엄청나게 의존을 해요 물론 그 기본적으로 나온게 이제 모든 게 di 가
되게
이제 나왔기 때문에 그것을 9 뜯어 고쳐 하고 안 쓰고 싶은 마음은
없지만 디아 2를 제가 별로 안 좋아하는 이유가 있고 참 쓰고 싶어하지
않는 부분들이 몇 군데 있거든요
그렇게 가 조금은 이제 조금 번거롭다 는거 그런 단점은 있어요 그래서
그게 뭐 이제 뭐 새로운 프로그램의 패러다임에서 좋다 라고 말하는 사람도
있지만 제가 볼때는
이것도 옛날에 op 에서 막 디자인 패턴 가끔 미친듯이 약빨고
뭐 엉뚱하게 갔다가 다시 좀 정체 정신으로 돌아 오고 있는 것처럼 dis
좀 왕창 갔다가 좀 돌아 올 것 같은 느낌인데 답네 코가 좀 왕창 같단
느낌이 있어서 조금 아쉬운 부분이 있지만 뭐 그거는 일단은 뭐
단 점 하나로 생각하고 있고 장점으로는
이제 예전의 굉장히 제가 직접 라이브러리를 만들어 왔고 해줘야 했던
일들이 있어요 예를 들면 은 내가 뭐 여러가지 서버가 종류가 있잖아요
프로덕션 서버 라이브 서버 가 있고 스테이징 서버가 있고 테스트 서버가
있으면 지금 내가 디플로 된 서버 어디냐에 따라 제모 제가 뭐 변수를
정해 줘 하고 5-0 볼을 에지오 같은 경우에는 거기에 go 웹
대시보드에 있는 앱 세팅 같은데 넣어주고 그걸 읽어 하고 이런저런 다른걸
처리해 줘야 되는 일이 있었거든요
이제 그것 자체를 이제 코스트 인발 먼저 에서 좌측으로 지원해요
이제 뭐 이름을 오디 벨로 보는 으며 는 그거에 맞는 테스팅을 따로
읽어줄 수 있다거나 그게 제가 아는 한 번 째 작 한 가지 장점
그 속도 빠른 것 있으니까 뭐 두번째 장점 이라고 하죠 그리고 또 하나의
장점은
굉장히 많은 것들이 세세하게 모듈 넣어줬어요 예전처럼 그냥 자 as 비담
내 타면 하나로 오는게 아니라 안하는 여기다가 이제 뭐 콜 스를 올린다고
나 c c or s
그거만 올릴게 아니면 나 여기는 그 레이저 비유 엔진을 늦고 싶지 않은
뺄 수도 있고
아
악보 뭣보다 1 옛날에 있던 그 모든 기능들을 하나하나 씩 추가를 할 수
있 되게 있게 됐어요
뭐 구글 쪽에 이제 뭐 sdk 를 이제 빌더를 통해서 쓰시는분들 알겠지만
무슨 빌더 하고 나서 뭐 ado 애드 뭐 에드 뭐 이런 식의 꼬추가 추가
추가하는 과정이 있잖아요 그런 식으로 제가 원하는 것만 골라 쓸 수
있어서 굉장히 가볍게 돌릴 수 있다는 장점이 있고
아 그의 세번째 고 네번째는 이제 로빙 자체가 기본으로 들어 왔어요
옛날에는 여기는 로깅을 놀려면 트레이스 를 해 같고 하거나 n 로그를
꼽아 같고 무슨 제가 로고 취할 스포츠로 만들던 뭐 트레이스 파일롯 아닌
퀘스 발이 래 그 디스크 파일로 쓰든 이런걸 설정을 해줘야 했는데 이젠
기본적으로 일단 거기서 나오는 모듈 누 개 모듈이나 아니면 그런거 에서
요기 1 이제 트랜스포터 쓰는게 잘 나오고
그리고 기본적으로 달래 코어의 이젠 오거 팩토리가 있어서 no 쓰듯이
그냥 로깅 할 수가 있어요
그런데 그거를 잘 설정을 하면 은 음 뭐라 그럴까
그 애저 에서 제공하는 애플리케이션 이 사이트로 도 곧바로 로빈이 쏘게
할 수가 있어요
그래서 그런 장점이 있고 뭐 애플리케이션이 사이트 설정 하는 것도 그런
식으로 간단하게 되구요
그도 그런게 있었고 그로 또 하나 제가 가장 좋아하는 것은 옵션 리딩
하는게 좋아 줬거든요
제가 항상 예전에도 얘기했던 거지만 이제 엔티티 프레임워크 같은거 얘기할
때도 아
sql 을 따로 쓰고 나서 멋있을 때 슬레 테고 끌고 온 다음에 거기서
하나씩 뽑아 뭐 데이터를 뽑는 것보다는 orm 을 하는게 맞다 않으시고
얘기했어요
오브젝트를 만들어 놓고 코드 퍼스트 맨 더 좋고 음극에 곧바로
데이터베이스 뒤에 어떻게 실행되는지 지 내가 알아서 할 일이고 나는
프로그램은 몰라도 되는 것이 좋다
그 이렇게 얘기했는데 옵션도 그런 식으로 많이 갔어요 그러니까 옵션을
이제 어떤 개념이 냐 면 결과적으로 옵션 그 3 팀들이 있잖아요 x 팅
이런게 결과적으론 제이썬 파일로 들어오는데 그 제이썬 파일에 있는 구조가
있잖아요 무슨 뭐 이렇게 뭐 nst 구조도 있고 그 구조 랑 똑같이 그냥
그 클래스 파일을 만드는 다음에 옵션이 다 라고 하면은 제가 지정해 준
그 로그 파일 중에서 i 옵션 파일들 중에서 세 팅 파일들 중에서
그거랑 이름이 맞는걸 찾아갔고 그 오브젝트에 도왔고 돌려줘요
그래서 뭐 이것도 다 di 로 되어 있기 때문에 디아 2를 모든 걸 하면
간단하게 불러올 수 있고 그게 아니어도 그냥 아
oled 섹션이 라던가 이런걸로 해갖고 게 섹션 한다면 그 섹션을 가져온
다음에 그것을
이제 이 클래스 로 집어넣어 줘 라고 말하면 그 클래스를 불러와서 그냥
아 옵션을 쓸 수가 있죠
외전 처럼 무슨 한줄한줄 액 세팅 놓고 그거 하나씩을 들고 와서 컴퓨터를
해야 매니저 라던가 이런것에 읽어 봤어요 제가 옛날에
그런거 읽어와 섬 웹 셋팅 3 에서 읽어와서 1 읽을 필요가 없이 그냥
그 씨의 스파이 씻어 파일로 그냥 클래스를 만들어 놓고 옵션 1번 읽었을
수가 있어요
뭐 지금까지 저희가 쓴것은 그 정도고
아 또 하나 제가 좋은것은 아까 말했지만 모듈 아이도 똑같은 얘긴데
제가 지금 만들고 있는 썩은 대부분이 이제 웹 api 예요 그니까 api
써보고 뷰가 거의 없어요 그냥 보통 데이터를 주고받는 서버 기 때문에
예전에 이제 asp 닷넷 같은것을 때 mdc 따라 오는 거 별로 안
좋았거든요
그런거 다 것 꾹 그냥 솔직하게 그냥 원하는 것만 쓸수 있다는거
그래서 그런 것도 되게 좋아졌고 간편 해줬어요 그리고 실제 지금 느끼는
제가 체감 할수도 빨라졌고
그래서 뭐 답네 코옵 의 제가 보는 장점들을 이렇게 얘기했고
그리고 음 왜 자매 코어를 내가 안 썼냐
뭐 구르고 뭐 이게 왜 나왔는지 따른 거에 비교를 좀 했는데 결과적으로
이제는 써두 될 때가 온것 같아요
뭐 제가 아직 뭐랄까 mdc 쪽에서 뒤쪽을 제대로 지금 테스트 해보지
않았지만 그게 굳이 안 돌 꼭 같은 이유는 없고 아까 말했듯이 엔티티
프레임워크 쪽에서 문제가 있을 수 있는 부분을 한 문제도 읽어보시고 보인
한테 크게 문제가 없는지 확인을 해보고
그게 없다면 은 단 내 코로 서서히 넘어가는게 이제 맞다라고 봐요 그래서
당내 고어를 이제 어 이제 써도 될거 같다는 얘기 라고
으 담배 걸 쓰는 순간 이제 노도 gs 는 조금 더 이제 약간 줄어들지
않을까 생각이 되는데 제가 담배 코에서 지금 문제점이 또한 2개의 지금
막 떠오른 게 뭐냐면
만약에 그
뭐라고 이제 서비스 벗으 쓰시는 분도 있으면 그 쪽 sdk 가 집안 내
코가 제대로 지원이 안될 거에요
서비스 벗으 쪽을 조금 생각을 해보셔야 되고 그 쪽 쓰시는 분들은
그리고 두번째는 어 그 보 드 라
뭐지 빠르다 까먹었어요
뭔가 로또 안되는 게 있었는데 이렇게 따먹고 그냥 다룬다면 그게 문제가
생긴 와중에도 생 하진 않겠죠
음 근데 기억에 면이 관도 하겠어요
그래서 그 그 단점이 몇 가지가 있는데 나중에 기억 기억이 나면 또 다른
만들거나 할 텐데 그렇게 중요한 단점은 아니었을까 먹어 객지 라는 생각을
하거든요
그렇게 끝내야 겠네요 그래서 저는 단 4코어 가다 지금 마음이 되게
편하고
아 되게 이렇게 편해 외 자잘한 것들 좀 많이 안 해 주세요 아 이게
옛날에 윈도우 xp 해서 세븐 올릴때 기분인 것 같아요
그때 xp 가 10년 동안 머문 잡았을 때 세부 떠올렸을 때 라
10년만에 운영체제는 이렇게 발전할 수가 있었구나 라는 걸 느끼게 해준
되거든요
그게 어쩌면 지금 제가 sd 단 내서
이제 답네 코어 넘어 거다 이런 많은게 편해졌고 날 느끼는 얘기랑 거의
똑같은거 같아요
그래서
단 100호 서버 써 보시는 게 좋을 거 같아요
이러면 학교 코스가 또 바뀌어야 되는 앞으로 제 생각이 아니면 뒤
지금부터 2년 뒤에는
새 프로젝트 모두 담배 코어로 하지 않을까 생각이 들어요 사실
아 그리고 담배 코에 마지막 장점이 어느 플랫폼에서도 돌아요
프로그래밍 뭐야 윈도우에서 해도
리눅스에서 돌고 그래서 어느 서버에 들른 상관이 없다고 알고 있어요 물론
저희는
민도 서버 씁니다 에 뽑혔습니다
