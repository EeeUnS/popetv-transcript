얘 아니어서 포프 입니다 음 오늘은
sql 과 도 sql 뭐 요즘은 c 코 놀 수 있고 이렇게 부르는데 그
거대했던 얘기해 보려 그래요
음 제가 예전에 비디오에서 많은지 모르겠지만
일단 이제 아 여기 부터 말하면 안 되겠구나
제가 이 얘기를 왜 하냐면 은 이제 원래 요 전통적으로 저희가 sql
데이터베이스
뭐 릴레이션 을 데이터베이스로 되게 많이 써 왔잖아요
그러다가 이제 안 친한 한 5년 정도 라고 하면 될까요 5년 정도 부터
시작을 해서 제 뭐랄까
sql 관계형 데이터베이스는 너무나 복잡하게 구조를 짜야 되고 스키마 도
있고 이런 상황에서
아 이거 가 말고 좀더 이제 편하게 문서를 아무렇게나 주장할 수 있는
방법이 없나
뭐 그런식으로 나온 게이지 노씨 쿼리 라고 생각해여 sql 이 아니고
그냥 일반적으로 언제는 모든 그런건 아니지만 일반적으로 제이썬 파일을
빠르게 저장하는 그런 시스템이라고 보면 되요 그래서 일단 뭐
즉 뭐 sql 같은 데이터베이스 보면은 뭐 테이블 만들고 이렇게 컬러만
조 컬럼 배로 뒀지만
이건 어제 있어 늘 문서를 넣어버리면 은 그걸 나중에 어디선 갖고 와서
제 2 서브 제트 를 쓰려면 쓸 수 있다
개념 이거든요 이거는 제가 예전에 한번 말했던 이제 orm 이라고 하는
거 있었잖아요 오브제 틀 릴레이션 r 매핑 인가
그래서 이제 sql 데이터베이스 직접 짜지 않고 코드에서 코드 루 실제
오브젝트 짜 놓으면 그게 알아서 db 로 들어갈 수 있는 그런 기술이
라고 말을 했어요 그래서 그게 가는 방향과 쪽에 비슷했던 방향인데
음 이제 orm 쪽은 그래도 여전히 db 스키마 가 있고 그 오브젝트가
바뀌지만 스키마 업데이트를 통하고 마이그레이션을 통해서 문제를 해결하는
거였다면 은
2 노씨 쿼리 라는 것은 그냥 아예 아무 문서를 쳐 박는 건데요
일반적으로 제이썬 문서를 아무데나 쳐다 볼 수 있다
이런 정도로 생각을 하시면 될것 같아요 그래서 뭐 일단 뭐 제 이성관
옷이 콜의 장 단점이 있는데
뭐 그냥 간단하게 말하면 이제 sql 같은 경우는 일단 스킨 하나
있잖아요 어떤 구조가 되어 있고 그리고 이제 어떤 특정 컬럼에 이 집어
캐쉬 를 본다거나 이래서 거기에 대한 설치를 빠르게 하거나 이런게 되게
도움이 되는
아 그런 시스템이라고 맞아요 그만큼 구조가 잘 잡혀있고 제 약점이 있기
때문에 으 썰 치가 빠르다 그리고 뭐 이렇게 아무 제약없이 이상한
데이터가 들어올 수 없다
뭐 그 정도의 장점으로 보면은 노씨 콜의 장점은 그냥 말 할 말 그대로
c 쿼리 너무나 복잡했다 이 거에요 내가 이거 뭐 하나 추가하려고 해도
스키마 추가 해야 되지
구르고 어찌보면 은 이제 뭐라 그럴까 효율적으로 하기 위해서 막 그 노멀
라이즈 션을 많이 하잖아요
데이터를 뭐라고 해야되지 걸을 음
그러니까 이제 db 가 워낙 그
행위라고 하나이고 롤을 로 를 저장하는데 로우를 저장은 되게 특화되어
있는 언어 답 5 보니까
컬럼을 추가할 때마다 그 툴이 맨션으로 갈때마다 이계원 투매니 하나당
여러개가 이렇게 들어갈 수 있는 그런 컬럼에 생기기 시작하면 은 컬러 몇
개까지 만들어야 되지
많이 만들어 놓고 이건 비워 둬야 되나 이런 문제가 생겨요 그래서 그렇게
2d 맨션으로 있는것을 이 제원 디멘션 을 2개짜리 테이블 해야 하고
서로 연결시키는 게 골인 킬레이션 시비나 노 말라 이제 시라고 하는
봤거든요
그런 쪽으로 이제 하는 것도 복잡하고 이렇다 차라리 모든 것을
오브젝트 개념으로 이 오브젝트는 얘 2 가지고 일꾼이 뿌리 크다는걸 된거
하나로 합쳐 갖고 재 있으면 초 박자 라는 것에서 좀더 간단한 있었다는
거죠 그래서 어쩌면 사용하기 용이함 으로 확장 애용 2함대 성능 의 차이
어떤 것 같아요
물론 이제 반드시 노스 코리 성능이 나쁜 야라 건 두고 때매 하지만
어쨌든 기본적으로 특정 컬럼에 이제
뭐라 그럴까 인덱스를 걸어놓고 참는 성능이 라던가 데이터의 효율적인 저장
이라는 부분에서는 딸리는 건 사실이고
그러나 이제 여기서 가 되게 재밌어 지는 건데
음 뭐라 그럴까 이젠 옷이 콜 그런 기반 중에는 음
컨 시 스턴 ce 가 이제 보장되는 긴 그냥 일반 c 코라 곤드레 달라요
일반 데이터베이스에서 는 그냥
와이트 할 때마다 락을 걸어 놓기 때문에 무조건 아토믹 오프 레이 션으로
가서 내가 바로 라이트 한동안 따라 내가 동시에 바이트 할 수 없고
레이스 컨디션 도 없고 이런 것을 전해야 db 수준에서 해주는 거죠
그래도 제가 예전에 한번 멀티 스레딩 얘기할 때도 그 cpu 쪽에서 하지
않고 그 멀티 스레딩 레이스 컨디션 처리하는 걸 db 쪽을 꼽아서 해
버리면 자동으로 해줌 나라 아니게 됐었던 것 같고
그리구 제가 지금 알고 있는 현존하는 그런 기술 중에 sql 데이터베이스
만큼 튼튼한 기술이 없어 아무리 이상한 짓을 하고 아무리 고 빡 하려고
해도 빡 애기 어려운 기술이 이제 sql db 라고 좀 보고 그리고
심지어는 어떻게든 있어 서비스를 뭐 따옴 시켜 보겠다고 별별 이상한 짓을
다해도
결과적으로 서버가 죽으면 죽었지 db 가 죽는 일은 드물다 라고 생각해요
db 가 제일 마지막에 죽는 일이라고 점포 중 는 놈이라고 봐요
그래서 그런거 에서 일단 그 여태까지 트랜잭션 아까 만 아토믹 오퍼레이션
이런 부분에 있어서 db 워낙 튼튼하게 만들어 왔고 그래서 그런 튼실
성이 중요한 그런 분야에서 라면은
여전히 sql db 를 쓸 수 밖에 없어요 그 게 아 니 라
이제 대표적으로 제가 모노 스콜 쪽에 이제 뭔고 db 를 쓴 프로젝트
대표적인 프로젝트를 제가 하는게 지 트레일러 오거든요
트레일러 같은 경우는 말그대로 그냥 보드에 그란 올리는거 고 그 모카단
올리는 거고 이 카드의 개념이 점점 바뀌어 갈 때마다 빨리 빨리 받으려면
은 그냥 뭐 db 스키마 전체가 바꿨고 마이그레이션 하는 것보다는 새로운
j 점프 r 추가된
뭐 필드가 있거나 있나 필드가 사라져 거나
그것을 집어 넣으면 그냥 새로 이제 오브젝트 새로 만든 버전에서는
읽어와서 없으면 안 쓰면 되는 거고 있어요 쓰면 되는 거고 그런 식으로
해서 이제 발전 됐고 또 하나의 이제 장점이 뭐냐면은
sql db 에서
예전에 무슨 서버 한대 있고 뭐 이제 엄청 빠른 서버 하는데 엄청 빠른
뭐 db 한데 이렇게 돌릴 때는 크게 문제가 없었는데 막 규모 엄청나게
큰 그런 서비스도 있잖아요 아마존 이라던가 페이스북 이라던가
동접 이 몇 백 만 명 막 이런데 동제 병인가
한달 사용자가 - 안나 버스도 엄청 많은데 그걸 다 버티기에 는 db
하나는 어렵다는 거예요 왜냐하면 은 아까 말씀드렸듯이 db 는 라이트 할
때마다 전체를 뿐 그 필요한 분은 락을 걸어 했기 때문에 그 락이 걸려
통한 다른 위드 오퍼레이션 달 뭐 제대로 돌지 않고 라이트 플러스 돌지
않고 이런 문제가 있는 거죠
그래 이제 그거 같은걸 해결 하려고 했나 부터 별별 짓을 다 했어요
사실은 그래서 뭐 가장 간단한 방법은 라이트 하고 미래로 분리 하는 거죠
라이트 하는 것은 마스터 미드는 이제 여기서 뷰 리플리 케이트의 갖고
언제 믿음 안된 as there's 금 위조된 인스턴스는 랑 의 원리를
거의 없으니까 그런 식으로 한 경우도 있고 아마존 같은 경우는 이 제
3자가 워낙 많으니까
db 를 여러개 만들어 놓고 사용자 1본부 2만원까지 디버 사용자는
많이만 1번부터 이만 멋까지 db2 벌 이런식으로 의사의 db 인스턴스
여러개 만들어 두고 사용자가 어떻게 들어오면 따라 db 를 이렇게 나눠
가지기 시작했던 거죠 그래서 그렇게 사는 경우도 있었고
근데 이제 노스 콜 쪽으로 오면서 는
굉장히 뭐 이제 그만큼 세대가 바뀌었고 그만큼
디스트리뷰터 시스템 그러니까 분산 시스템을 돌리시는 환경 됐고 제모
클라우드 도 나왔기 때문에 그런걸수도 있지만
그리고 새로운 기술이기 때문에 새로운 환경에 적용하는 쉬웠던 것은
처음부터
그래서 기본적으로 이런 뭐라 그럴까
분산 db 를 지원하는 노씨 코레 굉장히 많아요
뭐 얘네 개념도 수직이 되게 간단해요 왜냐면 은 제이썬 파일 들어갈 때도
집 엔트리에 대한 유니크 키니 있어야 되니까 그 유니크 키가 이제 9
2개가 됐던 해쉬 키 가 됐던 해쉬 키 가 있고 회 시키라고 가족은 키가
있어야 되거든요
그럼 해쉬 키 라는거 개념 자체가 거잖아요 이제 수학적으로 어떤 숫자일
뿐 이고
그거를 뭐 나누기 연산을 하면 64 개로 쪼갤 수 있고 뭐 128 로
쪼갤 수도 있고
그럼 그런 식으로 쪽에서 아 내 헬스케어 0번 이면은 뭐 이제 저쪽
db2 인스턴스 여기에 들어가고 1번이 면적이 들어가고
그런 쪽에 노스 콜 같은 경우는 자체적으로
이제 분산을 그렇지 않은 경우가 많고 내가 만약에 이미 10개 정도의
인스턴스를 돌리고 있었는데 5씩 골 db 를
그 중에 한 알도 올리면 또 알아서 볼 때 나눠갖고 분산시키는 그런
기술이 있어요 정확한 이름이 있었는지가 지금 까먹고 그런 식으로 디자인
는게 많기 때문에 처음 인스턴스 한두개만 올려 놓고 있다가 나중에 사람이
몰리는 것 같아요 그러면 또 10개를 올리는 시계로 올리던 자기
마음이라는 거죠 그럼 자기가 내부에서 알아서 서버 가한 아주대 죽었을
때도 문제가 없게 끔 이렇게 데이터 리플리 케이트 해놓고 그런데 이제 뭐
기술 따라 마스터를 요즘에 하나인 경우도 있고 뭐 여러 개 경우도 있고
쓰는 순간 모든 노드가 나올때 째는 경우는 경우도 있고 아니면 2
나중에 올해 있으며 업데이트 되는 경우도 있고 뭐 그런 여러 가지 키
주의 나왔던 거죠 그래서
뭐 간단히 말하면 sql db 해서 쓰면 무조건 있다
이런 보장이 생기지 가 않는 경우가 많아요
그걸 보장 하려고 하는 기술도 있지만 그래서 이제 그거 에 따라 어디에
모를 써야 될까 이런 고민들을 많이 하게 됐던 거죠 그래서
노씨 꼴 쪽에서 나왔던 것 중에 굉장히 주목해 볼 만한게 카산드라 였던것
같고
그건 이제 속도도 빠르고 뭐 근데 아까 말했던 쓰자마자 데이터가 있는건
아니고 언젠가 있는거고 쓰자마자 데이터가 있어야 되며 는 옛날에
아파치 진행에서 나온거 같은데 h 베이스 라는게 아마 그게 될 거에요
이름이 제가 정확한 지 모르겠는데 잠깐 보고 넘어 같기 때문에 그런 것도
있었고
4 또 하나 재미있는 것은 이렇게 뭐
도쿄만 티비 생기고 못생기고 다 좋은데 결과적으로 클라우드에서 돌리기에는
금액이 조금 있어요 이상하게
sql 보다 비싸요 뭣 sql 이 워낙 일반화되고 누구나 쓰는 거고 뭐
그렇기 때문에 경우도 있지만
회 정장 뭐 스타터 미니언 내가 돌리려고 하기에는 조금 이제 한계가
있다는 것을 좀 아까 이던 내고 못 올리는데 그래서 그냥 sql db
려져 있으면서
막 제 2점 또 아이를 거기도 박기도 하고 받기도 하고 여러가지 일들을
하고 있어요
이제 제 생각에는 뭐 sql 서버에서 xml 지오는 꽤 됐잖아요 제이썬
지원도 금방 뭐 지금 제 건 아니고 근막 나오거나 그럴 것 같은데
으 재미있는게 않아 뭐냐면은
결과적으론 이제 노씨 콜의 장점이
아까 말한대로 음
예 유연하다 뭐든지 원하게 되게 막 그 데이터를 추가할 수 있다는 개념
이거든요
이제 그거 또 저는 이제 orm 쪽에서 얻는 이득과 좀 비스트 라고
생각을 해요 사실은 오히려 마이그레이션 문제가 있지만
그래서 이제 뭐 반드시 둘 다 곧 하는건 아닌데
미련은 점점 어떻게 될거 아냐 면 즉 sql 자체가 가지는 내재적인
문제점들이 있었죠
이제 뭐 아까 말했듯이 이렇게 남은것 여러 이스터 싸 놓고 쓰는 것도
자동으로 및 그렇게 줘 안해주고 내가 손수 막 갈라 줘야 되고 이런 것도
있었고 데이터가 이제 오브젝트 개념에서 접근하게 너무 이 스키마
문제라든가 이런게 좀 복잡했다 는거
그 정도가 아니었을까 싶어요 사실 그렇지 뭐
근데 요즘 재밌는 또 이제 트렌드 중의 하나가 이제 뭐 분명히 아마존의
도 똑같은 있을거라고 생각하지만
이제 애 저의 보면은 마이크로소프트에서 하는 클라우드 웨어
거기에 보면 은 이제 엘라스틱 풀이라는 db2 인스턴스 가 나오기
시작했어요 그래서 정확히 개념이 뭐냐면
sql db 를 있는 그대로 쓰는데 이 엘라스틱 풀만 켜주면 지금 그
배는 되게 비싸요
지 내가 알아서 로드가 어떻게 들어오는지 따라 여기서 아까 말했듯이 뭐
유저를 뭐 맘 몇 번 더 로프 가짜 한다고 했잖아요
그런 식으로 제가 짜르 든 뭐라든 내부에서 관리하겠다는 거야
서버 하나가 아니라 내가 로드를 봐서 뭐 필요한 만큼 서버 50개가 되는
200개가 된 알아서 지 내가 뭐라 할까
확대 축소 해주겠다 그럼 아까 말했던 인스턴스 마구 던져 왔고 만 리플
케이트 하고 막 막 그 뭐랄까
나 누구 이래서 속도 빠르게 딴건 다르지 않게 해 줘 했다는 거죠
프로는 보면은 지금 sql 이 굉장히 튼실한 풀어졌다 이건 뭘까 아
기술이고
두르고 굉장히 오랫동안 써 왔고 그리고 여기서 있는 아토믹 을 보장해
주는 그런 부분들
그런 장점과 진액 알아서 샤 등까지 해주겠다는 이거든요 그걸 굉장히
갑자기 괜찮아 보이는 거에요 이제야
그리고 이미 모든 클라우드에서 아니면 모든 서버 에서 너무나 잘 지원하고
있고
노씨 퀄 서버를 올리려면 생각보다 할 일이 많거든요
일반 sql 수업 보다는 그런 장점도 있고 아까 말했던 유연하게 확장하는
것은 아직도 노씨 쿼리 조금 낫긴 한데
5
그 사용 내 마다 다르겠죠 트랙을 같이 엄청난 나라의 양의 데이터를
이렇게 그냥 정말 읽기 전용 보드 식으로 갖고 있는 서 있어야 되는 거면
당인 옷이 꼴이 날 수도 있고 그게 아니라 일반적인 회사에서 어떻게
하는거 라면은 제 생각에는 오히려 c 콜 쪽으로 가서 마이그레이션 루트를
타는 것이 깔끔할 수 있다고 생각을 해요
음 그래서 생각보다 노씨 쿼리 정말 많은 새로운 방식과 새로운 패러다임을
열어 주었는데
지금 있는 노 식 쿼리 레 이제 뭐랄까
터프 let 그 유명세 거 인기도 에서
자극을 받는 sql 이 다시 비슷한 기능을 올리기 시작을 하고 그래서
그럼으로 인해서 오일의 노씨 콜 쪽에서 시작했던 것 좀 더 빼서 가지
않을까 라는 생각을 해요 그래서
솔직히 한 3년 전쯤 noc 콜 한참 많이 일어 났을 때 사람들이 몽고
딜을 쏘고 못써 보고 엄청 했던것 같은데 오히려 그 뒤에 그때 지도
사람들 실수한 것도 있고 sql 에 맞는 데다가 또 c 컬 썻던 경우도
있고 또 적당히 많은 사람들이 또
약간 sk 쪽으로 들어오게 됐고 그래서 제가 볼 때는 이제 sql 쪽으로
이제 시작을 해서 음 조금 더 얘 내가 그 도시 코에서 배운 걸 더
강하지 않을까 생각을 했어요 그래도 뭐 여전히 이제 sql 기반에 들은
메모리 오니 인스턴스 넘는 경우가 좀 많거든요 까
하드에 안쓰고 메모리 에만 있는 그런 노씨 콜드 있잖아요
모 래 디 스 도 그렇지 그 중에 하나라고 봐야죠 미랠 맨 멤 캐쉬
대신에 이용할 수 있다 db 에서 글고 온 거
다농 말라 이제 되어있던 것을 하나로 합쳐서 뒤 노멀 라이즈 에서 전체
5개 통한 는 다음의 제 2선으로 메모리에서 얹어놓고 캐시 처럼 쓰겠다
그리고 캐쉬가 서버 가는 공유가 되겠다 하면 은 예수님의 디스 같은
경우는 값어치가 있는 거지만
데이터 스토리지의 만으로 에 노씨 쿼리의 장점이 얼마나 올해도
갈 지는 모르겠어요 지금 보다는 조금 줄어들 거라고 저는 생각을 해요
그럼 이제 sql 쪽에서 일단 강화 시작하고 그리고 일단 클라우드 저도
굉장히 쓰기가 편하기 때문에 제가 보는 도시 코가 c 콜은 그 거였고
음
구르고 또 뭐가 있을까
구르고 어떤 의미에서는 이제
c 쿼리 발전하는 게 참 재미 있다고 생각을 해요 왜냐하면 은 예전에
아마씨 코리 나오기 전에 처음 나왔던 게 뭐 db2 이런거나 있었을텐데
c 코스로 나왔어요 3d 되게 비우 속도가 알고 있거든요
아 이게 이렇게 허접해서 얻어 쓸 거냐 뭐 이런식으로
근데 이제 그게 다 끝나고 이제 실제 4시 코리 이거 짜 나요 d 비트를
그 온갖 뭘 허접한 단계를 끝나고 그리고 굉장히 튼실한 기술돼 있다고요
그러면 이제 c 컬 에서 나왔던 문제점은 로시 쿼리 제 고치려고
나온거라고 오른쪽 맞는데 이게 시 퀄 저는 언젠간 그대로 넘어 같지
않을까
이제 더 이상 뭐 데이터베이스 무슨 뭐 뭐 뭐 아톰이 이런게 뭐가 필요해
라는 이상한 세상이 오면 은 그럴 수도 있겠다 이런 5c 코에 색을 같이
볼 수도 있겠다고 생각을 했거든요 그런데 생각보다 그렇게 되고 있지
않는게 조금 신기하긴 해요
어찌보면 은 이제 db2 에 들이 했던 만약 실수 들의 도식 c 컬
쪽에서 빨리 깨달아 고치고 있는 걸 수도 있고 아니면 c 퀄트 쪽에 지금
가장 크게 드라이브 하고 있는게 오라클 하고
마서 인데 요 두 회사가 이제
굉장히 c 코에서 버는 돈이 엄청 많잖아요 그래서 이 그거 때문에 오히려
시장을 계속 지키려고 의심도 로 가는 걸 수도 있고
그래서 그런 그런 생각을 해봤어요 그래서 뭐
학교에서 가끔 이제 학생들 얘기 들으면 안 5c 코리 훨씬 더 중요하다
이것도 다 많이 배워야 된다 이런 식으로 이해를 하는 사람도 바꿨더니
학생 중에
근데 솔직히 노씨 콜은 별로 배울 건 없어요 그냥 그냥 제 2.8 수장이
되는 거기 때문에
이거를 무슨 뭐 세팅하는 회사 세팅하는 그런 과정 it 써포트 이런거
않은 그런
뭐 it 회사 그러니까 it 직원 설비 하고 이런 쪽 하는 사람들이
아니라면 굳이 이거를 한번 스포이트 하는 동안에 자기 혼자 싸움이 될거
같거든요 프로젝터 남의
굳이 이걸 배울 게 뭐 있나 생각은 들지만 sql 데이터베이스 나 아까
말했듯이 그
무조건 1g 맨션으로 가야 되는 것 제약 때문에 막 그 뭐 쓸모없어 넘어
노말 꿈이라 그렇죠 세컨드 맛볼 떠나 폰 이런거 하는데 그런거 하는데
드는 식으로 되게 많았기 때문에 그것은
사고의 전환이 필요한 것도 배운 약간 좀 처음에는 좀 이게 뭐지 라고
하는 부분도 있기 때문에 그런 걸 더 가리키는 게 맞다고 보고 그래서
그냥 좀 노씨 코가 c 콜에 대한 얘기가
한참 많았지만 요즘 많이 좀 줄어든 상황에서 갑자기 생각나서 예 비디오를
만들어 봤어요
예 뽑혔습니다
