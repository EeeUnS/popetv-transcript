'이런 테크 회사는 때려치우는 게 답입니다'라고 말씀을 드리면 다들 머릿속에 생각나는 게 있죠? 

'코드 리뷰가 없는 회사 때려쳐야 해.'

'TDD를 하는 회사는 때려쳐야 해.'

'TDD로 하지 않는 회사는 때려쳐야 해.'

'클린 코드하면 때려쳐야 해.'

'클린 코드하지 않으면 때려쳐야 해.'

'OOP의 제대로 된 원칙을 정하지 않으면 때려치워. 다 개소리'

이거는 주관적인 거고 회사의 구성원끼리 협의 하에 정하는 회사의 스타일입니다. 사실 별로 중요하지 않고 그 스타일에 내가 안 맞으면 떠나는 게 전부예요. 이런 주관적인 거 갖고 이러면 '때려쳐야 한다'고 말하는 것 자체가 그냥 쓸데없는 약팔이인거고 어그로 끄는 겁니다. 더 중요한 국룰은 바로 그 회사의 코드 베이스에 있고, 굉장히 객관적인 겁니다.

비유를 하나 들고 시작할게요. 제가 개인 병원에 갔어요. 근데 가보니까 바닥이 되게 더럽고 막 쓰고 남은 주사기가 옆에 늘어져 있고 그런 곳인데 믿고 가겠어요? 안 갈 것 같죠? 내가 어떤 식당에 갔어요. 주방이 너무 더러워요. 청소를 하나도 안 해서 먼지가 뽀얗게 쌓여 있어요. 안 가게 될 것 같죠? 그런 거랑 마찬가지입니다. 그냥 상식적으로 말이 안 되는 걸 얘기하는 거지, '주관적으로 이게 나아', '망하는 거보다 저게 나아' 망하는 거보다 게거품 물고 싸우는 그런 거 말고. 오케이? 

그러면 그런 것들이 뭐가 있을까요? 볼 수 있는 것들이 굉장히 간단해요. 내가 처음 회사에 들어가서 컴파일을 딱 했어요. 컴파일러 경고가 수백 개 나오네요? 때려치우세요. 이미 존재하는 도구들이 알려주는 무수한 문제점들을 아무도 해결하지 않고 그냥 어떻게 '잘 되겠거니' 하고 있는 겁니다. 컴파일러 경고 수백 개도 문제죠. 수백 개가 나오는데 건들지 않고 있다? 그거는 그냥 회사의 코드 자체가 더러울 가능성이 매우 매우 높습니다. 그냥 뜨시면 돼요.

두 번째, 디버그 빌드가 어마무시하게 느리다? 그래서 디버그 빌드로 뭔가 디버깅하려고 했더니 '아 그거 느려서 못 해요. 그냥 릴리스 빌드나 이걸로 하세요'라고 말을 한다? 그러면 디버그 중단점 다 키고 디버깅하는 사람들이 많이 없다는 거거든요? 그럼 여기저기서 어설트가 나오는 것도 보는 사람들이 없다는 거거든요? 그러면 눈 가리고 아웅이예요. 디버그가 쉬운 환경이라고 하면 굉장히 많은 것들이 있어요, 만드는 데 굉장히 노력이 많이 드는 것들도 있고. 하지만 '디버그 빌드가 느리게 돈다'는 건 '코드에서 굉장히 쉽게 고칠 수 있고 빠르게 만들 수 있는 부분들도 안 하고 있다'는 겁니다. 그게 느릴 때까지 갔다는 거는 과거에 해온 삽질들이 쌓이고 쌓여서 더 이상 손댈 수가 없고, 그러면 '이제 디버그 빌드 말고 릴리즈 빌드로 하면 됩니다'라는 이상한 개소리를 하고 있다는 거죠. 한마디로 디버거나 컴파일러의 효용을 거의 못 보고 있다는 겁니다. 유지보수가 안 된 코드, 한마디로 먼지 뽀얗게 쌓인 가게랑 같은 겁니다. 그냥 개발이 힘들고 쓸데없는 이상한 거에 시간 낭비할 거기 때문에 뜨시는 게 좋습니다. 물론 자기가 개발자로서 실력을 높이고 싶은 사람, 거기서 그냥 뭔가 바쁜 듯이 계속 지키고 있고 시간 끌면서 버그 하나 고치는 데 세 달씩 걸리시는 분들, 그런 사람한테 좋을 수도 있죠. 코딩 못 하는 게 드러나질 않으니까.

세 번째, 기존 코드를 바꾸는 거를 더럽게 무서워한다. 실제 코드가 나오면 그 코드를 한 번에 몇 년 동안 유지되는 코드를 만들기가 되게 힘들어요. 이유는 첫째, 이걸 처음 만든 개발자가 올바른 스펙을 이해 못 하고 만들었을 수도 있고, 아니면 지금 당장 보이는 뭔가에 맞춰서 만들었는데 조만간 생길 일들을 생각을 못 한 걸 수도 있고, 아니면 조만간 생기지 않을 일인데 어마무시하게 미친 짓을 해놔서 사용이 어려울 수도 있고. 결과적으로는 지금 필요한 거, 그리고 조만간 필요해질 것들. 그런 것에 맞춰서 설계가 나오고 코드가 나와야 하는데 그게 안 된 거죠. 사람은 당연히 실수도 하고 비즈니스 로직도 계속 바뀌기 때문에 이거는 계속 바뀔 수 있는 거예요. 그럼 지금 상황에 제일 맞는 방향으로 빠르게 고치고 넘어가야 하는데, 고치는 데 시간이 많이 들고 노력이 많이 들어요. 그러면 코드 자체를 단순하게 못 만들어 놓은 거예요. 유지보수가 안 되게 만들어 놓은 게 첫째예요. 둘째, 안 바꿔요. 그러면 그냥 안 바꾸면서 남 탓하고 있는 거예요. 그리고 거기다가 이거 괜히 바꾸면 고장 날 것 같대요. 그럼 그 코드를 이해하지 못하는 사람들이 많다는 거거든요? 바꾸고 고치고 테스트하고 나가는 게 맞는 건데 그 코드는 그대로 두고, 버전 B 코드를 만들어서 뭔가 다른 코드들이 양립하는 이상한 짓을 하고 있다는 거죠. 일반화 추상화 되게 중요하다고 OOP 쪽에서 과감하게 말해요. 그게 왜 중요하겠어요? 일반화 추상화해서 코드가 유지 보수 가능하게 한 통째로 묶어두면 변화를 계속 시킬 수도 있다는 거거든요? 그런데 거기서 이상한 SOLID 원칙 하나 갖고 와서 코드가 '변화하면 안 돼 새로운 거 추가해야 해'. 이거는 이미 OOP의 기본 정신 자체를 까먹은 거죠. 그런 것들 따지면 한 번 만든 코드는 최소한 2년 안에 한 번은 갈아엎을 일이 생겨요. 보통 한두 번, 세 번 갈아엎으면 거의 바뀌지 않는 코드가 나옵니다. 이게 실제로도 해외 논문에서 평균을 내봤어요. '코드를 바꾸는 비율이 얼마나 되냐?', '몇 프로다'라는 게 나와요. 생각보다 굉장히 많이 바꿔요. 정확히 숫자는 까먹었는데 굉장히 많이 바꾸고 50% 이상이었던 걸로 기억해요. 바꾸는 코드가 이렇게나 많은 거고, 리팩토링이라는 용어도 결과적으로 이쪽에 가깝기는 해요 코드는 어쨌든 갈아엎고 바꿀 일이 많다, 이거를 두려워하면 안 된다는 거예요. 세상에 어떤 일을 하고 어떤 업무를 해도 처음에 나왔을 때는 일단은 대충 돌다가 두 번, 세 번 바꾸면서 제대로 자리가 잡히고 더 이상 바뀌지 않고 훌륭한 계속 유지 가능한 코드가 나옵니다. 그걸 안 한 채 계속 이상한 걸 추가만 한다면 계속 이상한 것만 추가하다가 뭔가 깨끗하게 정리 안 되고 하나로 처리할 수 있는 걸 10개로 처리하고 있는 이상한 코드가 나온다는 거예요. 그러면 내가 나중에 더 재미있고 새로운 일을 하는 게 아니라 그런 코드들을 하나하나 바꾸다가 이거 바꾸면 저거 깨지고 저거 바꾸면 이거 깨지고 이런 일들이 생긴다는 겁니다.

네 번째, 버그 개수를 보여주는 대시보드가 회사에 있을 거예요. 없다면 그것도 뜨시는 게 좋고요. 버그 개수가 안 줄어요. 계속 올라가요. 우상향이야. 주는 일이 없어요. 그럼 이게 뭐냐? 있는 버그 안 고친다는 거 + 고치긴 고치는데 나오는 버그가 더 많다는 거. 그러면 일단은 버그를 고치는 데 버그가 나오는 일은 당연히 있지만, 그 숫자가 언제나 1 대 3이다? 그러면 실제로는 버그를 제대로 이해하고 고치는 게 아니고 대충 땜빵 치기하고 있다는 얘기고요, 새로운 버그가 계속 나오는데 못 고치고 있다는 거는 이 버그가 올라가는 트렌드 속에서는 결과적으로 어떤 구조가 문제가 있을 가능성이 높은데, 그 구조를 개선하지 않은 채 대충 떡칠하고 있다는 거죠. 그리고 뒤로 가면 갈수록 버그는 쌓이는데 고쳐지는 건 없어요. 그러면 나중에는 버그만 고치고 있고 기능은 만들지 않겠죠? 근데 그 버그를 제대로 고치고 있는 것도 아니죠. 그러면 이 회사는 어쨌든 간에 품질, 유지보수가 안 된다는 겁니다. 한마디로 자동차 정비 안 받고 50년 달리는 그런 느낌이라는 거죠.

다섯 번째, 코드 안에 Todo 코멘트 보통 달잖아요? 그거를 달지 않는다. 그게 많은 거는 일반적으로 문제가 아니에요. 뭐 많은 거를 언젠가 찾아서 고치면 되니까. 근데 달지 않는다는 건 무슨 의미일까요? 코드를 작성하다 보면 지금 당장 못하는 것들이 있어요. 미래에 '바뀌면 뭘 해야 한다.' 이런 것도 있고 지금은 Iteration 1만 했고 2, 3을 해야 하는데 프로젝트 관리 툴이 없고 그러면 Todo라도 달고 넘어가야 하거든요? 근데 안 달려 있는 경우들이 많아요. 그거는 뭐냐? 지금 이 일이 안 끝났다는 사실 자체를 명시적으로 적어두지 않은 거예요. 적어두면 뭐가 좋아요? 나중에 코드 속에서 누가 코드를 보다가도 '아 이 일이 안 끝났구나' 알 수도 있고, 여기서 이제 전체 검색을 하는 것만으로도 '여기 코드가 더 나아질 게 몇 개 있구나'라는 것도 알 수가 있는데 그 정보조차 사라진다는 거예요. 그럼 그 정보를 다시 찾기 위해서 뭘 해야 해요? 모든 코드를 다시 읽으면서 그 코드에서 뭘 했는지 이해를 하고 이 코드에서 구현이 안 된 게 어떤 건지 다시 원래 나왔던 업무 지침이라든가 스펙을 보고 다시 비교하면서 찾아야 한다는 얘기예요. 얼마나 시간 낭비예요? 지금 일하면서 이거 안 됐으니까 다음에 할 거 적는 게 뭐가 어려워요? 안 적는 거는 무슨 이유일까요? 그냥 더 해야 할 일을 숨기고 싶은 거겠죠? 그러니까 어느 지향점이 일을 제대로 끝내는 목적이 아니라 그냥 '지금 당장 필요한 뭔가만 하고 숨기고 넘어가자'라는 게 되게 강한 거죠. 그러면 일을 끝내는 게 목적이 아니라, 주어진 일을 그냥 없애버리는 게 주목적이라는 이상한 결론이 나오게 되죠. 그래서 차라리 Todo가 많은 코드는 이해할 수 있습니다. 언젠간 해야 할걸 명시해 놓았고, 코드를 보는 사람도 '아, 이게 뭔가 해야 하는구나!'를 알게 되고, 언젠가는 'Todo가 너무 많이 올라갔으니까 이제 처리하자.' 버그도 그럴 수 있거든요? '많이 올라갔으니까 처리하자.' 그런 식으로 찍고 넘어갈 수 있는데 그것도 안 달면 코드 상태가 어떤지 아무도 모르는 거죠.

마지막은 바로 다섯 번째에서 말했던 거랑 똑같은 경우예요. 이것만 잘 되는 것만으로 '회사가 꽤 노력하고 있다'는 게 보이기 때문에. Todo를 넣을 때 정해진 포맷이 없다? Todo를 넣을 때 여러 가지 방법이 있어요. 백 슬래시 2개 하고 한 칸 띄고 Todo 한 다음에 콜론을 찍을 수도 있고, 백 슬래시 2개 하고 한 칸 안 띄고 Todo를 넣고 콤마 찍고 할 수도 있고, 콤마 안 찍을 수도 있고. 이 굉장히 다양한 패턴이 코드에 존재한다? 그러면 이런 문제가 있습니다. 나중에 Todo가 몇 개 있는지 찾아야 하는데 어떻게 찾을 거예요? IDE에서 제공하는 Todo를 찾는 기능들이 있어요. 물론 있긴 한데 IDE가 바뀌면 바뀔 수도 있고, 텍스트 기반으로 검색하는 것보다 정확도가 떨어지는 경우도 굉장히 많아요. 그래서 코드를 많이 작성하신 분들은 코드 내에서 전체 텍스트 검색을 굉장히 많이 사용하세요, 뭐를 찾을 때든. 왜냐하면 그거는 워낙 단순한 기능이기 때문에 실패하는 경우가 거의 없어요. 그래서 코드에서 이거 사용하는 모든 거 찾기 이런 거 있잖아요? 그런 거 작동 안 할 때들이 있어요. 하지만 전체 검색은 작동을 안 하는 일이 없고, 그리고 스크립트로 작성해서 그걸 찾기도 쉽고 스탯을 모으기도 쉽기 때문에 그런 식으로 많이 사용합니다. 그래서 정해진 포맷이 있다면 어느 순간에서도 굉장히 빠르게 이 Todo 카운트가 몇 개 있는지 알 수 있고 그거에 따라 스탯을 뽑아서 이게 어느 정도 넘어가면 문제라는 걸 알 수가 있어요. 한마디로 내가 일감을 놓치지 않겠다는 거, 유지보수가 잘 되고 있다는 증거를 보여주는 여러 가지 수치들이 있는데 그중에 하나가 Todo 스탯이거든요? Todo가 몇 개냐? 그것까지 신경을 쓰는 거. 그래서 '지금 당장 바빠서 못할지라도 나중에는 고칠 거다'라는 방향성을 보여주는 게 있기는 해야 합니다. 이것까지도 없다? 그러면 꽤 큰 문제라는 거죠.

지금 말한 것들, 무슨 주관적이고 원칙이 많고 이런 거 아니에요. 굉장히 단순하고 수치화할 수 있는 거예요. 그죠? 몇 가지 안 되는 거 한두 개 빼고. 이런 것들부터 신경을 쓰고, 그게 되면 그다음에 무슨 뽕을 맞아서 어떻게 하고 무슨 약을 먹어서 어떻게 하는 것들 고민하면 됩니다. 이거 안 한 채 다른 걸 주장하시는 분들이 꽤 있죠? 이거를 내가 이미 제대로 안하고 있는 걸 알거든요? 근데 이렇게 새로운 거 뭔가 말을 하면 아무도 제대로 하는 경우도 없고, 대충 뜬구름 잡는 얘기 같은 거 하고 있다고 말하면 내가 여태까지 못하던 모든 것들이 사라질 것 같은 기분을 받는 거예요. 그런 거 있죠? 과거에 내가 잘못하고 있었던 것들이 있어요. 그거를 고치기보다 '뭔가 새로운 거 하나 해서 잘 나아지겠지', '이 책 한 권 보면 나아지겠지' 이런 발전하지 않고 실패를 거듭하는 사람의 습성들이 있죠. 어르신들이 말하는 게 '공부 못하는 놈들이 그렇다'라고 하는 걸 수도 있지만, 그 당시에는 모든 게 공부였으니까 그렇게 표현하신 거겠죠? 비슷한 겁니다. 그래서 이런 테크 회사는 그냥 빨리 뜨시는 게 개인 발전에 좋습니다.

포프였습니다.