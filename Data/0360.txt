얘야 에서 부품입니다 음 오늘은 코딩 스탠다드 에 대해서 코딩 컨벤션
스탠다드 에서 또 한번 말을 하려고 해요
제가 쓰는 코딩 스탠다드 해서 음 온라인에 다 널려 있는데 제가
공개했는데
거기에 썼는지 안 썼는지 는 기억이 안나는데 안 썼을 것 같아요
제가 회사를 돌리던 제 프로젝트를 하던 음 한가지 제가 돼 카페 스럽게
분은 군은 부분이 또 하나가 있어요 뭐냐면
쓸데없는 함수 중 만들지 말라고 그 까지 잭이 되면 쓸데없는 암수가
뭐냐면
그러니까 이제 함수의 개념을 이제 이해하는 사람들의 방식이 되게 닳는 것
같아요
이제 퓨어한 op 진영의 예전에 약 많이 빨던 사람들은 모든 것은 이제
오피에서 모든 것은 함수로 결정이 된다
그래서 10년 한 줄짜리 꼭 코드까지 함수로 짜서 맞추라는 경우 되게
많이 봤어 딱 한번 있을지라도
그래서 예를 들어서 내가 파일 스트림 이 있고 빨 시점에서 이제 단어를
하나 읽어서 그걸 이제 네 뭐 이름 이라고 하자 이름을 있는 코드가
있으면
솔직히 그냥 빨 스트림의 놓고 이제 뭐 이 있는 코드가 뭔지 모르겠지만
제 읽은 다음에
네임 이라는 변수에 넣으면 되잖아요 그럼 한 줄에 이미 보여 아빠 이러한
수 있는거구나
근데 이것마저도 그냥 위드의 네임 이란 함수를 만들고 거기다 이제 파일
스팀을 패스 해준 다음에 거기에 파일 시스템에서 읽고 스트링 바다에서
반응하는 경우도 있어 이제 제가 옛날에 생각해보니까 여기서 학교 다닐 때
그때가 이제 닷컴 버블 2개 되고 얼마 안되서 되거든요
그때 지 한참 잡아 교우 이제 신자들이 많이 학교로 돌아왔죠
직장을 잃었기 때문에 그 사람들이 꼭 그런 식으로 코드 잤어요
그 교육의 남아 있는게 아닌가 싶고 그리고 어떤 경우에 아까 뭐 일단
나쁜 일을 한 가지 그걸로 2 줘 뭐 뭐
자세가 뭐가 중요한 거 냐에 따라 그런 코드 짤 수 있다고 생각하는데
난 그게 왜 중요한 지도 모르겠다는 거죠 제가 보는 함수는 뭐냐면
함수를 짜는 순간 그 함수는
약속이라고 생각을 해요 약속이라고
저는 이제 함수에서 이제 그 함수가 있다는 거죠 그 멤버 함수 라고 하죠
그러면 결과적으로는 저희가 흔히 생각하는 인터페이스 장 비슷한 거예요
인터페이스가 뭐냐면 프로그래밍 인터페이스가 아니라
전구 키고 끄는 스위치가 있잖아요 그러면 아 이거 로 올리면 이렇게
전구가 켜지는 거고 이건 그 반대의 상황이 이런 아는구나
이런 주 약들이 있는 거거든요 그럼 이제 이것은 그 모양은 그냥 정부
스위치 모양으로 있는거고 프로그래밍에서 는 게 함수 이름으로 있다고
생각을 해요
그래서 그 함수 이름이 있기 때문에 이 함수 이름이 있고 여기에 들어가는
매개변수가 있어요 그러면 내가 매개 변수를 눈 릇인가
이 매개 변수를 가지고 이 함수 이름이 의미하는 그런 행동을 한 다음에
그 결과를 반환 해주는게 함수 라고 생각을 하거든요
그러면 이 모든걸 함수로 짧다고 생각을 해봐요
예를 들어서
나중에 이 함수를 바꾸고 싶어 줘 그런거 되게 많거든요 프로그램이 하다가
이제 뭐 굉장히 필요한 쪽에서는 또 아 그러면 은 그가 무슨 바꾸는 건
말이 안 된다
새로운 함수를 만들 만들어야 된다 아니면 새로 오브젝트를 만들어 같고요
또 매핑이 하고 이상한 짓을 해야 된다 라는 말도 안 되는 약을 파는
사람도 있는데 큰 양 책임 거에요
어 자동차가 고장이 났어
그 부품의 하나가 좀 문제가 생겼어 이 부품을 이렇게 개량 만하면
좋아하죠
그럼 개량 하는게 좋은거 아니에요 그분을 낮춘 데 따른 부분을 올려야 돼
건 아니잖아요
그래서 그런 개념으로 고치는 일이 생각보다 많아요
그리고 뭐 그런 퓨어 하게 이제 모아 op 를 되게
사람들이 이해 못하는 수준까지 굉장히 추상화를 시킨 사람들은 이미
약을 팔다가 많이 망했다고 보고 이제 요즘은 그런 얘기 좀 들 이거든요
그래서 오히려 사람들이 이제 제가 말하는 쪽인 이렇게 함수를 고쳤으면
쪽을 흔히 하는 것 같아요
근데 재미있는건 은 함수를 만들었어요 무슨 하면 순간에 그 함수로 거쳐
요
그쵸 그러면 그 함수에 행동이 약간 막기 있는 경우가
행동에 바뀌니까 함수 꽂히는 거지 자식을
그럼 바꿔요 그러면 이 함수를 호출하는 모든 코드를 확인 해야 되요
과연 애가 바꾸는거 전에 있던 그런 행동을 이제 거기에서 이상하게 이지혜
해소 그래서 그거를 쓰고 있지는 않은지 아니면 이 함 4 잘못 반하는
갑자 체를 또 어떻게 뭔가 해가 더 이상의 돌려 쓰고 있지 않은지 그
확인하게 전장 해요 그쵸
그러면 내가 암술 다고 치는 순간
딴데서 이 코드를 바꿔야 될 거야 확인해야 되는 건 이 함수에서 옵션이다
찾아가고
이게 물론 저는 이제 가정 자체가
제가 라이브러리를 가져다가 클로저 또 써야 꼭 바이너리를 만들어 왔고
나한테 파는 그런 경우는 아니라고 생각하는 거예요 내가 소스 코드를 다
가지고 있다는 전제하에 그게 대부분의 이제 회사들이 그렇게 많이 하니까
남의 라이브러리의 갔다가 쓰는 경우도 있지만 굉장히 많은 이제 코드를
내부에서 개발하는 게 정상적인 회사로 전 보거든요 지금
그럼 이제 다 차려 고쳐야 되는 거예요
근데 이 코드가 정말 한번만 쓰이는 하셔서 딱 한번만
그러면 이 함수의 5천원대 그 함 사체가 있어야 되는 거에요 그냥 함수
아니고 코드로
그럼 그거 하나 고치는 것만으로 하는 고쳤고 쿠나 그럼 넘어갈 수가 있는
거죠
아 이게 뭐 큰 문제냐 딴 데다 돌아다니면서 1 찾아보면 되지 이런
얘기할 수 있어요
이제 이건 어찌보면 기 기 이제 가져다주는 이제 장점 중에 하나가
즉 잇으니 제 자기가 체크인 한 다음에 플리커 에스더 코마 이렇게 하는
경우 많잖아요
워크플로 자체가 그렇기 때문에 이제 웨비나
아니면 이동중에 모바일폰 이런걸로 코드 리드를 볼 수 있다는 거죠
얘가 이 체인지를 이제 마스터 브랜치 두려고 해 코드 a 를 보면서 아
이걸 났구나 ok 라고 해 줘야 되는데
바뀐 코드에는 함수와 맡겨 짠 아 그 함수를 호출하는 코드가 뭐가 있는지
미디어는 모른다는 거예요 그럼 코드를 바꾼 사람이 이걸 4 제대로 철이
없다고 생각을 하기에는 되게 애매한게 그럼 코드 입이 안 하고 말이지
코드 리뷰를 한다는 것 자체가 이 사람이 실수 할 거 있다고 생각을 하는
거고 그걸 좀 더 잡아주기 위해 보는 거고 이 알수없는 보이지 않는 코드
실수가 더 큰 거거든요
그럼 이제 거기서 코드 리뷰가 어려워져 요 그럼 내 컴퓨터로 와서 코드를
또다시 자 찾았고 보고 이런 일을 해야 되죠
그래서
그런 부분은 이제 약간의 문제점이 있다고 얘기를 하는 거예요 그 제가
기본적으로 생각하나 함수는 코딩 스탠다드 해서 제가 하는 것은 제 사용이
가능하다는 순가 재사용할 지금 제 속 여러 번 호출하거나
아니면은
끝 논리적으로 이것은 여러 번 호출될 수 밖에 없는 코트 그래서 제가
지금 뭐 매트릭스 클래스를 만들고 있어
그럼에 책상에서 멀티 플레이 하는 일이 있잖아요 이것은 지금 당장 코드
한 번만 할지라도
이건 굉장히 정용화 되는 그런 기능이고 이제 굉장히 많은 곳에서 따 중에
쓸 거라는 게 뻔히 보이는 상황입니다 이건 함수로 만드는 게 맞는 거죠
똑같은 얘기로 중복되는 코드가 보여요 한줄이 든 한 주는 괜찮아 뭐 1
3 2 정도의 중복되는 코드가 한테 매번 이 보여요
그럼 저는 이건 반드시 함수로 가야 된다고 생각해요 왜냐하면 은 나중에
오호 이게 뭔가 문제가 되는 부분이 다나와
그러면 예를 고칠 때 한군데만 고치면 나머지 세 번째 서영이 뻥 나는 거
잖아요 그럼 이게 함수로 돼 있으면 그거 하나면 고치는 것만으로 아
그렇구나
이거 하나 고치는게 만능 거구나 그러면 이제 토 추출하는 다른데서 또
이제 살펴 는 봐야겠죠
이제 그래도 여러분들 찾으면서 고치는 것보다는 한군데 고치는게 얼씬 더
실수 에 가서 적다는 것이 영어를
그래서 함수는 재활용이 될 때는 반드시 할까
여러번 사용되는 똑같은 코드 라면 반드시 함수가 되는게 맞고 그리고
굉장히 단순한 함수 긋한 3 할수없죠
그 안에 와이프 에서 50개 박는 이런거 말고 그런 함수를 좋고 아까
반복되는 것 함수 반복되지 않는 함수가 아닌 것
그러니 개념으로 저는 굉장히 까탈스럽게 커요 근데 재미있는 건 뭐냐면
반복되지 않는 거 임에도 불구하고 함수 인정하는 경우가 제가 가끔 있어요
가끔 그게 뭐냐면
이제 함수가 그니까 하나의 코드 자는데 코드가 너무 길어 지는 거야
천 줄이 천주 3 초 2년 정도 까지 그럼 이제 그 안에 막 변 술도
수십 개가 왔다갔다 하고 실제 중간에 코드 올라 백주에 있는데 쓰는 변수
인데 뒤에서 다시 땀 변수와 크게 덮을 수도 있고 여러 가지 문제가
있거든요 그런데 그때는 함수를 따로 만들어 쓰는 경우도 있었죠
이제 거기에도 는 단점은 함수로 한번 호출할때 스택 0 교회 되고 메모리
점프 해야 되고 이런 것들 의 성능이 약간 떨어지지만 약까지 꼭 100주
500주 을 돌리는 함수에서 한 번 그 스택 이렇게 뭐 푸시아 고파 파는
게 얼마나 걸리냐
괜찮다라고 가는 경우 였는데
이 똑같은 문제는 사실은 그 스코프 지정 하는 그 브래킷 있잖아요 그 중
가로 브래킷 뜻이나 못 잡아 해서 그걸 한번 중간에서 이렇게 그 함수로
만들 코드 볼라 거기에 중과를 넣어주는 것만으로도 사실은 지금 말했다
이제 변수가 섞이고 이런 문제는 해결이 되요
이제 그건 좀 해 기지 않냐
여전히 보이가 어렵지 않냐 이런 식으로 이해가 나오는 경우도 있고 그래서
그 부분에 대해서는 제가 어느 쪽으로 가도 크게 뭐라 그러지 않았는데
아 뭐 요즘은 ib 에서 코드를 볼 때는 이런 중 가루가 있으면 그냥
이중 가로 사회 초콜렛에 버리면 이게 한 줄로 들어가서 이 사이에 코드가
있는데 아직은 안 보여줄 뿐 이야 이렇게 나잇 있고 시샵 같은 이제 샵의
위 전 & 비전 을 넣는 것만으로 역시 콜 x 가 가능한 것들
그런것도 이제 비주얼 라이즈 하기에는 나쁘지 않아요
그리고 이제 그렇게 컬 x 할때 용이다 번호를 놓는 법이 있죠
코드가 천 술자리에 야 백주에 씩 10개가 있는 거야 그러면 커멘트 놓고
1번 뭐 클랩 싸고 이번 뭐 컬 x 하고 3번 뭐 컬 x 하고 하면은
보는 것만으로 아루 즉 이렇게 가는건 알 수가 있어요
그 넘버를 굳이 박는 이유 뭐냐면 음
예 아까 말했던 코드 리뷰 오면서 코드를 넣을 때 옆에서 코드를 볼 때는
콜렉션은 플랫폼이 아이 잘 없거든요
그러면 이제 백주 를 막 쭉 이어 가면 이 코드가 뭐하는건지 스코프로
바뀐 건 알겠는데
그렇게 헷갈릴 수가 있잖아요 그런 상황까지 막기 위해서 뭐 제일 위에
커멘트 다고 1번 뭘 한다 그리고 이 백질 이후에 이번 보호한다고 로스코
받고 이렇게 하는 것도 저는 허용을 해요
으 개인적으로는 이제 아까 말했다 함수를 만드므로 인해서 그 함수에서
뭔가를 고칠 때 여러가지 하다 확인 해야 되고 이런거 때문에 개인적으론
함수 하나에 들어가는 걸 되게 좋아해요
모든게 그냥 따로 뽑는 게 아니라 한 번 쓰는 암수 면 그냥 원래 호출한
함수의 도서 끝내라
그리고 그렇게 할수록 컴파일러가 최적화를 좀 더 잘할 수 있는 강승모
빠질 거라고 저는 그냥 생각을 하고 그냥 코드가 바로 가까운데 있고 이제
함수로 만들어 중간 따른 함수가 또 호출할 수도 있는 거니까
그래서 그렇게 제가 생각을 하고 있어요 그래서 제가 지금까지 말한 것은
아 함수를 만들 때 한 번만 쓰는 코드 라는 함수를 만들지 말아라
정말 이게 아까 워낙 정형화 되고 누구나 호출할 수 있는 함수 하게
명백하지 않은 이상은 내 코드에 놓고 나중에 이걸 두번째 누어 출 때는
함수를 만들어라
그 외에 아까 말했던 것처럼 코드가 엄청 길어 주고 변수가 섞일 때
함수를 한번만 쓰이는 코드 함수를 만들 수 있지만
굳이 그렇게까지 안 가도 된다 저는 이 부분에서는 그렇게 까탈스럽게 가
아닌 하지만 제 입장에서 함수를 만들지 말자는 게 좀 더 가까워
그래서 코딩 스탠다드 가 아니라 이거는 그냥 제가 프리퍼런스 제가 이제
그 좀 더 낫다고 생각하는 방향 그러나 아주 강력하게 이건 잘못된 거야
라고 주장할 수 없는 부분
그다음 여기까지가 이제 제가 생각하는 코딩 스탠다드 고
조금 더 하나가 더 나가면 더 재미있어지는 게 뭐냐면
특히 이제 잡아 라던가
이제 c 에서 포인터를 쓸 때 이제 널 어 볼 제가 늘 너를 좋아한다고
전에 얘기 했잖아요
너를 사랑한다 그랬나 그 널 이라는 걸 넣을 때 아 어떻게 될 거냐 되게
재밌는 게 이거예요 함수를 호출해 요 함수가
인재를 받아요 2인자가 자바에서 보면 레퍼런스 타입 오브젝트 클래스 고
c 에서 보면은 이제 포인터 타입이야
그리고 얘가 바나나는 것도 역시 넓 어 불이야
아까 마인드를 클래스나 p 타입 그럼 이 함수는
이 포인터를 받을 때 몇 선을 술을 받을 때 이 레퍼런스 간 어린 어릴
수 있다고 가정을 해야 되느냐 말아야 되냐
이 함수가 반환하는 값에 널이 들어갈 수 있냐 아니냐
이 문제가 또 생겨요 그럼 이제 이제 제대로 코딩 못 배우고 또 이제
약발 면서 이제 약 빨은 사람들한테 배운 사람들은 아 익셉션 와 처리하면
된다
널 들어 믹스 전 날리고 널 가 밑에 좀 날리고 트라이 캐치 여기저기서
뻑 칠하고
전 이 것은 아니라고 보거든요 예전에 익셉션 비디오를 만들었지만 이것은
말그대로
아 뭐랄까
허 똑똑한 사람들이 하는 짓인 것 같아요 가면 갈 수
오히려 코드 메인터넌스 아이가 되기 어려워 지고 그러니까 그 특정한 를
따르 러니까 해야만 될 때도 있어요 그런데 지금 이제 그 익셉션
추종자들이 하는 것만큼 그 정도로 너무 과한 것 같아요
그전에 이제 다른 비디오에서 익셉션 어느정도로 봐야 되는지 말한 적이
있기 때문에 건 넘어가기로 하고
이거는 솔직히 말하면 굉장히 간단하게 코딩 승아 도 해결이 되는
부분이에요 굉장히 간단하게
어떤 함수도 인자도 널이 들어오지 않는다 그
허나 정말 너를 들어야 할 때면
변수 배가 인자 이름을 넣지 않아 패러 m 이름을 거기에서 예를 들어서
이게 뭐 아이디어 따고 해봐
아이 조 미래학 네임 이라고 하죠 스팅이 내 입만 쓰니까
그럼 네 이 또는 널 이렇게 쓰면 되는거 이름 자체를 내의 모아 널
그래서 제 코딩 스타일에 대해서는 페러 m 에 넣어 l 올 수 있는
경우에는
레 이 모 어 널 오해 갖고 실제 함수를 호출하는 입장에서도
그 코드를 짤 때는 아이디로 보잖아요 어떤 패러 미터가 들어 그 이름이
뭔지
아 여기 너를 로 상관이 없구나 그럴 때만 너를 은 거고 그렇지 않은
단어를 안 들어오게 하는 거죠 그럼 함수를 원래 만들어 4 입장에서는
모든 매개 변수 가 널이 아니라는 가정하에 코드 짜는 거고 그걸 디버그
좀 동안의 디버깅하는 동안 을 잡고 싶다면
었어 틀을 강릉 거죠 i 겐 어릴 경우에는
아 뭐 었어 틀을 쏘고 디버깅에 작고 프로덕션 도중에는 널이 들어오며
컴퓨터 뻑이 나게 하는 건데
컴퓨터 뻐기는 말이 안되지 않냐 이런 얘기 하죠
그 익셉션 애들이 하는 얘기지만 내가 가지고 있는 데이터 있잖아요 제가
호출하는 코드 와 내가 눈은 코드가 우리 회사 안에서 모두 관리하는
코드는
널이 안드레 코드를 짜는 되요 널이 안들어 데이터를 만들면 되고
널이 문제가 되는건 내가 컨트롤할 수 없는 부분이 잖아요
뭐 네트워크 에서 패키지 들어오는데 널려 들어왔다고 하나하나가
아니면은 빨리 읽었는데 누가 파일을 핸드 모디파이어 코너리 들어와 따거나
그렇게 내가 바운더리 아 갈리는 부분 그럼 그 후문에서 널이 인지 아닌지
확인을 하고 그 값을 위젯 해 버리거나 아닌 거기서 익셉션 을 던지면
되요 깜 마디로 바운더리 가 바뀌는 부분에서 있어서는 바꾸면 되는 거고
그 외에서 익살을 던지면 되는거고
그외는 내가 만든 코드는 반드시 널이 아니다 라고 가정 하는게 굉장히
코짱 이 편해지고 깔끔해지고 이해가 쉬워 져요
단순하게 좋은거라고 그러나 당연히 웹서버에서 타입이 있고 저는 너를
좋아하는 사람이고 너를 사랑하는 사람이기 때문에 너를 울 경우가 있어요
그러면 이제 5와 널 이런식으로 넣거나
뭐 그렇게 하는 것만으로 깨끗해 지는 거죠 반환값은 뭐냐 똑같다고 봐요
반환값은 함수는 기본적으로 너를 반환하지 않는다
그러나 오케 네임 이라고 하 좋겠네 2 그럼 얘는 언제나 내 임을
받아내어 언제나 스트링을 받았네요 그런데 얘가 너를 바라 내 생각이
상황이 있어
그러면 겠네 이 moon 덜 이걸 함수를 며 차기 받아서
얘는 더 를 발매할 수 있으니까 이가 처리해라
그러면 이게 재밌어 지는 게 뭐냐면 코드 리뷰를 볼 때
웹에서 보는 것 만으로도 너무 철이 제대로 하는지 안하는지 알 수가 있는
거예요 그러니까 함수 인자 호출할 때는 조금 애매한데 함수 그 바디를
보지 못하니까
최선 위통 값 에서는 확실히 조 미 탕감 하자
그래서 그거 이제 이렇게 하면은 실수를 만들 가서 굉장히 적어지는 거에요
왜냐하면 은
뭐 이제 포인터 유애나 윤아 아니면 잡아 쪽에서 문제가 언제나 널 왜
8온스 하다가 뻥 나는 경우 많기 때문에 그게 문제다 라고 얘길 해 왔고
그걸 해결하는 방안 으로 어찌보면 굉장히 이제 아 이렇게 익셉션 을 쓰면
담아볼 수 있어 라고 하면서 모든 인셉션 을 박아 라고 했지만 생각보다
이제 모자반 은 이제 함수 자체가 어떤 색상을 뚫어 아니던 적어주고 그걸
캐치 않으면 문제가 생기니까 강요를 했었는데
코드가 굉장히 들어 지는 단점이 있었고 그래서 그 이후에 많은 언어들은
그 익셉션 캐치 하지 않아도 문제가 없게 했지만 그러면 코드를 보면
볼수록 애가 이 섹션을 던지는 g
이 함수가 던지는 지 아님 이 함수가 따라 함수 10개 를 호출하게 그거
던지는 지도 모르겠고
써 어찌 보면은
한번더 2 익스트림 아이스 쇼 흔들리고 갔다가 알 건 정말 어렵구나
약간 돌아왔다가 아 이건 이렇게 제대로 작동을 못 하는구나 라는 상황이
온것 같아요 그래서 이런 부분은
이런 부분을 해결하기 위해 있는게 코딩 스탠다드 줘 그래서 제가 오늘
말했던 코딩 스탠다드 는
그치면 되지 않을까 함수는 반복될 때 만든다 최대한
함수에서 아
뭐라 그럴까 매개변수가 이제 들어올 때는 거기에 널이 들어올 때는 반드시
이름이 제제 oo 아 너 리라고 넣어준다
반환 값에 너를 받았을 때는 오한 오리라고 높습니다
그게 지금 제가 정형화 스탠다드 고 모 업계 표준 이라고 할 수 없어요
그렇게 너를 까탈스럽게 고민하는 사람들이 생각보다 없어요 이유 중의
하나는 이런 코딩 쓰라 들을까 탈 수 없게 하는 것 자체가 이제 이렇게
프로그래밍 잘 이해하고 그 정도 능력이 되는 하자드 인데 그런 회사가
이제 예
뭐라 그럴까 웹 쪽에는 별로 많이 얻고 생각보다
이제 게임 쪽에서 시프 펄스는 회사에서 꽤 많은데
치프 퍼스는 회사는 이제 이 문제를 해결하기 위해 널이 될 수 없는 웹
프랑스를 만들어 버렸잖아 요
그 이제 포인터 라는게 있었고 이제 그 외에 레퍼런스 만 되겠지만 4+
더 오르려면 좋지만 먹지 9
기본적으로 널이 안 된다 레퍼런스 그 개념이기 때문에
아
오히려 그 문제는 이제 집을 뿔에서 스탠다드 가 이제 나아지면서
그 언어적으로 해결 한번도 순이고 이제 그 외에 이렇다 용어들은 이제
포인터와 포인터 가 아닌 오브젝트 그래 프랑스와 이제 밸류 인 오브젝트를
9분하지 않는 그 꽤 많은 모던 프로그램인 랭 기주 에서는 이부분을 아직
제대로 해결을 못한 거죠
익셉셔널 하려고 있는 못했고 그래서 코딩 스타드 에 이제
의존할 수밖에 없는 으 음 예 그래서 그런 코딩 스타들을 잘 쓰고 있어요
다음에도 아마 코딩 스타답게 길기 때문에 제께
언제 한번 또 더 이상 말아 더 말할게 있지 않을까 생각을 해요 그래서
좀
오늘은 그 정도 음 포프 였읍니다
