으 예전에 한번 그 인터페이스 의의에 대해서 좀 땄던 적이 있는것 같아요
그래서 이제 그거를 저는
인터페이스 를
어찌보면 좀 잘 제대로 이용하지 못하는 거 많이 갔던거 같아요
인플레 멘트 신 하라고 인터페이스가 하나다 그리고 이 모든 라이브 가
내부적으로 안쓰는 라이브 외부적으로 내주는 라이브를 없는데 굳이
인터페이스를 모든 불임의 되시면 마다 만들 이유가 뭐가 있냐
실제 나중에 인품에 듯이 여러 개고 뭐 실행 도중에 인플레이션을 여러개를
동시에 실행 해야 될 일이 있거나 아니면 바꿔줄 일이 있을 때 그 때
에서는 필요한 거 아니냐
그때서야 무슨 뭐 디펜더스 인젝션 이라고 그때 필요한 게 아니라는 얘기를
제가 썼어요
이제 그러다가 최근 해도 이제 직장 동료가 한번 그 얘기를 다시 하게 될
기회가 생겼는데
일단 뭐
이런식으로 아키텍처를 짜는 회사에는 내가 그 동안 일해 본 적이 없었고
그런 아키텍처를 왜 나왔는지 이해할 때까지 줘 시간이 좀 오래 걸렸던 것
같아요 예전에는 단순히 왜이러지 이런 말이 안되는거 뭔가 들어오는데 뭔가
인터페이스를 잘 못쓰고 있는데 뭔가 이건 미스 유진 데 그런 생각을 하고
있다가 최근 들어 이룰 더 알게 된거죠
그 이유가 뭐냐면 어찌 보면은
그 엔터프라이즈 아키텍처 라고 이렇게 아마 라고 사는 사람들이 굉장히
많이 따라온 뭐 개인 그 사람들은 패턴 이라고 믿고 있는 것 같은데 제가
볼때 안티 패턴 이고요
그 이유가 저 간단하더라구요 사실은
유니 테스트를 위해서 래요 예 어이가 없어 없이 까 굉장히 뭐냐면
일단 유니 테스트를 할 때 어떤 모듈 1 테스트 해야 되는데 이 모듈이
다른 뭐 클래스라고 나타는 모듈의 이렇게 뭐라 그럴까
키 펜던트 하는 경우가 있잖아요 그러면요 위 님만 테스트 해야 되는데 이
다른 모듈의 2
이거 호출하고 하면은 유니테스트 가 아니니까 이 모듈에 있는 원래 인플레
멘트 전 대신에 따른 인플레이션 테스팅 인플레이션이 라던가 뭐 흔히 든
뭐 듯
뭐 킹 1 데이터 라고 하죠 그 한마디로 가짜로 데이터를 이렇게 뭐 뭐라
그럴까 클래스를
가짜로 만들어 실제 클래스가 하는 일은
저희가 원하는 데이터를 반한 만하게 따른 뭐 시스템 호출 하는 게 아니라
예를 들면 은 이제 서비스가 있고 db 를 호출할 있으면 dbo 직접
연결해서 호 처럼 유니테스트 하겐은 그러니까 모인 택을 전 탈수
하더라구요
자치 22개 이 db 에서 4 있는 모든 그 함 수도 있잖아요 뭐 애드
업데이트 뭐 딜리트 이런거를 저희가 이제 직접 코드에서 코드 수준에서
가짜로 짜 갖고 필요한 것만 데이터만 돌려서 이 데이터는 아 분명 에
문제가 없다는 가정하에 제가 먼저 서비스는 테스트하는 밑에 유니 테스트를
하기 위해 그랬다고 하더라구요
그럼 이제 그러기 위해서는 당연히
뭐 dll 수확을 할게 아니라면 처음부터 인터페이스를 만들어서 그
인터페이스를 인자로 밖에 만들고 이 서비스 에서는
실행 도중에 는 재료 4인 플랜테이션 넣어주고 테스 중에서는 뭐 킹 1인
프리맨틀 넣어준다 얘긴데
아 예
제가 하고 싶은 걸 어떻게 하나요
할 수 있다고 해서 반드시 그것을 이용해서 뭔가 해야 되는건 아니에요
무슨 얘기냐 하면 테스트는 테스트 줘
씩 그 뭐랄까 런타임을 만 타임 해요
캐스트는 말 그대로 뭔가 문제를 캐스트하게 있을 뿐이지 이 테스트를 하기
위해서 런타임에 있는 아키텍트 여체를 개판을 처럼 일은 없다고 보거든요
그럼 그 태스크 생각 자체가 잘못된 거죠 뭐가 주구 뭐가 종이나 생각
자체를 못하는 거에요 사실은
예를 들어서 제가 요즘 주 니한테 많이 이렇게 다 듣는 이야기가 온갖
인터페이스 보면서 까이 뭔가를 함수만 아 뭐 보려 그래도 인터레이스 안에
모인 플랜트 있는데 그 인 플랜테이션 도 하나가 여기 있고 테스팅에 있고
뭐 다른게 있고 좀 이상한 거에요 결국은 실행 중에도 는 플레이트를
하는데 모든 걸 인터페이스를 앞에 디렉션 하다 보니까 이게 한번에 코드가
아니고 애들 헤매기 시작 을 하는 거에요
물론 실력이 좋은 사람들은 그렇게 열심히 차 살 수가 있어요
하지만
제가 볼때 소프트웨어에 퀄리티를 높이는 가장 중요한 것은 윗 어빌리티
라고 보거든요
예를 들어서 만약에 정말 잘 아가씬 이어가면 나갔어요 그 시니어 를 구할
수가 없어요 우리가 주니어 3명을 몸빵을 해야되요 근데 주니어 들이 이
복잡한 인터넷 자체를 이해를 못해요 마케터 라는걸 다음에 시간이 더 걸려
이해하게 10% 더 어린 아이 입헌 더 멀리 가는가
그럼 메인 턴에 메인터넌스 할 수 있는 그런 메인 터너 빌릿 이라고 하죠
뭐라 그러지 관리를 얼마나 쉽게 쉽게 할 수 있냐
그런 것도 떨어지는 거고 및 어비스 떨어지고 그러면 굉장히 코드 유지보수
아이가 힘들어 지는 거거든요 사실에
차라리 제가 여태까지 봤던 모든 엔진 이라던가 코드 베이스를 보면은 딱
읽었을 때 정말 내가 기본적으로 기본적인 oop 개념 확실히 잡혀 있을
때 이해할 수 있는 코드가 그 최상의 코드 였어요
뭐 거기서 뭐 디자인패턴 이것저것 하더라도 솔직히 디자인 패턴
왠만한 거는 오피 개념을 확실히 잡히며 이야긴 어렵지 않거든요 그런데
거기다가 알 수 없이 인터페이스 쳐 받기 시작하고
뭐 인터페이스 한 두개 정도를 앞 섹시한 하고 나서 소개 있는 인플레
시작 감춰 버릴 때도 문제가 된거죠
전에 비디오에서 말했듯이 인터페이스는
두가지 경우에만 굉장히 머
두가지 어쩜 한가지 수 있는데 두 가지 경험에 굉장히 유용해요
첫번째는 진짜 아키텍트가 처음부터 끝까지 모든 함수 박 분리해 내고 다
디자인 끊는데 매 2 인터페이스 니 거야 되고 저희 인터페이스 이 거야
되고 인턴 지정이 다 해주고 다른 사람들이 인 플랜테이션 할 때 대부분의
그런 일은 많이 없죠 사실 저희가 이라는 그 소프트웨어
어 그 뭐야 분야에서는 드문 분야에서 있어요 굉장히 그 사람의 생명이
달리는게 중요한 부분에선 그렇게 모든 걸 알게 되고 들어간 경우가 있는데
특히 칸 뭐라 줘
허 고객들을 직접 상대 야 되는 그런 소프트웨어 에서는 밀크 한자 계속
바뀌기 때문에 그 인터페이스 언제나 바뀌게 되어 있어 만들 면 적
그래서 그렇게 티끌 만들 수 있는 경우가 굉장히 드물고 요 그리고 두번째
저희가 라이브러리 만들어요 그리고 라이벌 누군가 죽는 줬는데 그 사람들이
또 다른 기능을 추가해야 될 일이 있잖아요 그럼 인터페이스를 오픈을 해
줘야만 저흰 라이브에서 인터페이스를 바닥은 온갖 올리더라도 그
인플레이션은 그 라이브리 내부 전 소스에 컨트롤 뭔가 접근성이 없는
사람들이 할 때만
접근성이 없는 사람들 뭔가 인플레이션을 만들 수가 있는 거죠
그래야 다같이 도니까 그 정도야 사실
근데 여기 다 지윤이 테스트를 하기 위해서 인터페이스를 모두 만들겠다
그러고 di 를 이용해서 테스트 모듈과 테스트 아닌 모듈을 바꾸겠다
진짜로 이렇게 생각하면서 이게 맞는 얘기가 굉장히 고민 오래 했어요
그러면서 이제 저는 개인적으로 굉장히 들어 없다고 생각했기 때문에 저는
언제 뭔가 들었다고 생각하면 들어 없다고 계속 이렇게 불만 하는데 확실한
입장이 생기기 전까지는 확실하게 절대 틀린 거다 라고 말을 못 하거든요
근데 그게 굉장히 이름 들어온 기분이 많이 들면서
이제 인터넷을 뒤지기 시작했어요 과연 누가 이따위 한테 패턴을 만들어낸다
과연 왜 이런 일이 생기는가 tlt 디펜드 c 인젝션 이란 개념을 처음
만든 사람은 굉장히 훌륭한 아이디어로 얘기한 거예요
그리고 뭐 때 토리 패턴도 어찌 보면은 디펜스 이니셜 게시판 관리 관련이
있어요 저 결혼은
디펜 할 수 있는 션 이라고 하는데 그니까 종속된 관계의 그 상어 관계를
뒤집었던 얘기죠
그거 그 낡은 굉장히 뛰어났는데 이 아이디어를 잘 못해서 칸 사람들이
만들면서 뭔가 개판을 12,000원 거더라구요
그래서 결론적으로 얘기하면 은
g+ 인젝션 뭐 이런게 좀 다 좋아요 사실은 그 런 탄 중에 인플레이션을
바꿔야 될 일이 있다면
근데 제가 여태까지 봐온 중에 그의 아들 소프트웨어는 거의 없었구요
사실은
그래서 그건 말그대로 한 뭐 하니 10% 정도의 소프트웨어가 그런다고
보죠
그러면 20% 정도에 맞는 그 패러다임을 전체 소프트웨어 맞는 것처럼 그
집어넣으려고 하는 그런 잘못된 풍습이 생겼고
그리고 유니테스트 이걸 할 수 있다는 것 자체가
그래 이걸 이용하면 위택스 이렇게 멋지게 할수있겠다 생각하기 시작한 같긴
해요 근데 개념 잡자 본거 같아요 이미 시작부터 예전에 c 에서 보면은
템플릿 코드 나올때 캠 플레이스를 엄청난 짓을 할 수 있었거든요 메타
프로그램이라고 낳았고 그 메타포 는 엄청나게 한샘 도망하여 사실 새로운
거니까 하고 싶으니까 막 쿨 하니까 제가 그런 게임 스튜디오가 근데
봤어요
메타 프로그램 죽이게 하는 데 들 지금 그런데 를 다 게임 마음 하셨어요
제발요
왜냐하면 코드가 보수 유지가 안 되어도 이상 베터 프로그래머 뭐 이상한
막 템플의 엄청 찍어 가면 보기도 어렵고 뭐 하는 거지 이게 필요도 없고
왠만한 경우에서 뭐 어떤 경우에 그냥 뭐라 그럴까
템플릿으로 안 하고 코드 쪘을 때 그냥 코더 뭐 한두번 더 짜는 것 그게
전부인데 이걸 엄청난 메타포로 짜서 짠 사람은 이해를 해 보는 사람 시간
엄청 하면서 이거 왜 이렇게 되는 거지
고민하면서 보수 유지가 안 되고 부수지 하더라도 개판 적 나는 거예요
그래서 그냥 항거할 수 있다 졸라 쿨하다 그래서 했는데 오히려 코드
가족석 망하고 메인터넌스 메인터넌스 하기 정말 어렵게 만들고 그다음 경우
많이 봤어요 뭐
진짜 말도 안되게 무슨 게임에서 쓰는 행위 놀이인데
행렬에
행렬을 뭐 만들까 템플릿으로 만들었다 던가
행렬 템플릿을 만 더 좋은 일이다 들었을 때 아 이사람이
더블로 하는 행렬 데 필요하고 플러스 란 행렬도 필요하고 인테 관행으로서
필요했고 뭐 걸어 했나
근데 왜 그 시 그랬지 어차피 게임 했을 것은 플롯 아니 플러쉬 거의
전부 올텐데
물리 쪽 들어가지 않는 이상은 근데 나중에 얘길 듣고 보니까 그 행렬을
맞는게
행렬에 열과 행 수를 템플릿으로 바꿨다고 하더라구요
그럼 128 고프레 백 이십 함유로 만들었다는 인가
근데 게임에서 그럴리 뭐 있지 뽑아 있고 아니면 3y 쓰기 스토리가 전
볼텐데 물리적 들어가지 않는 이상은 그 생각하기 시작할 거에요
그리고 그걸 템플릿으로 만들기 시작하면 은 그 신비 라는 거 있잖아요 그
팩터 프로세싱 물론 내게 학교나 처리할 수 있는 거 그걸로 에서 속도
향상도 못할 거고 도대체 이걸 재미 카게 만들어서 뭐하자는 걸까
행렬 을 만드는 이유 자체가 뭐 계산을 빠르게 하고 성공 빠르게 하기
위해서인데 그럼 결과 중심 빛깔이 들어가는 도움이 되는 건데 이걸 왜 또
그렇게 했을 거라는 업 쓰는거 에서 정말 이상한 사람들 많이 봤었고
문제 턱 다행히 은 그런 실수를 많이 했기 때문에 이제 그 검 이제
사람들이 안 해요
그것을 우르르 몰려갔다 새로운 거라 그래서 악 할 수 있을까 해보자 라고
했다가 아 실수 고단해서 다 돌아왔어요
좀 좀 깨끗한 코드를 짜려고 근데 문제는 제가 지금 이제 그 이 아키텍츠
왜 토프 하지 않겠지요 쪽에서 아직도 보는것은 그 뭐 이런 모의테스트
디펜스 인젝션 일어나는 걸 보면서 아직도 정신못차리고 있구나 생각을 많이
해요
유의태 쓰기로 돌아와서 자 이제 그래서 많은 걸릴것 같다고 했잖아요 그
뒤에 만 인터넷도 많이 쳐보고
근데 결과적으론
저하고 똑같은 의견을 가진 사람이 있어요
그리고 이제 굉장히 존경하는 사람 중에도 있고 어떤 의미에서는 제가 이제
그 사람의 철학을 굉장히 좋아했던 사람 이름이야 어찌 보는 그런 철학이
비슷하기 때문에 제가 똑같은거 에 동의 라는 걸 수도 있죠 뭐 당의
성공한 사람이고 그 사람의 얘기를 보고 또 교육 사람과 동일한 다른
사람의 얘기를 보면서 유이 테스트에 도예 여러가지가 있다는 걸 알았고
그리고 제가 단순히 그냐 아 이거 주의 테스트한 케이스 이렇게 인터페이스
개판 책은 정말 문제있다 잘 안 하는 게 낫다 라고 거냐
뭐라 그럴까 겁 딜링이 줘 사실은 육감적으로 이렇게 말고 정말 이상한데
뉴 tts 차림 완전히 포기에 하고 서라도
실제 런타임 해서는 코드를 깨끗하게 단순한 유지한 게 맞겠다 고 저는
어떻게 포기하는 마음까지 갔는데 그게 아니라 그걸 해결할 수 있는
방법까지 도 있다는 사람을 봤어요
그래서 이제 그 얘기를 하죠
아비도 진짜 이루어지는가
일단 유니텔 3 4가지가 있대요 네 가지가 뭐냐면 첫 번째가 10레벨 번
테스트
그게 이제 말 그대로 함수 안에서 모든 게 끝나는 것 예를 들어서 제
가장 좋은 것은
행렬을 곱하는 함수 같은거 있잖아요 행렬 곱하면 함수는 이렇게 행렬 a
b 받으면 씨는 언제나 같아야 되잖아요
그러면 유니티에서 쉽게 할 수 있죠 햄 12개 주고 미터라는 깝 보고 씩
값이 동일한 야 l s 그래 그런 이에요
그리고 어찌 보면은 제가 흔히 알고 있던 2대 쑥 개념은 이거예요
게임 쪽에서 했던 것도 그렇고 여태까지 알고 있던 밑에서도
시에서 주로 하는 위치에 쓰겠죠 어떻게 보면은 두번째 유이 테스는 레벨
원인데 에러를 2.12 니까 내를 텐데
이거는 자체 오브젝트 안에 한정된 이 테스트 해요
그러니까 상태 변화가 있는 리 테스트가 오브젝트를 보면 이렇게 뭐 변수
같은거라고 상태를 바꿔 주잖아요
하지만 그래도 같은 뭐고 모듈 안에 있기 때문에 모듈의 보는 오브젝트
해야겠죠 클래스 안에 있기 때문에 그 상태가 변하는 것도 이 태슬 자기
안에 살 수 있다
초초 여기까지가 제가 최대한으로 둘이 됐어요 그 이상이 넘어가면 저희
최소 지금 보지도 않았어요
그래 그 쓰리는 뭐냐면 모듈 간의 디펜스가 있다
그러니까 예를 들어서 아까 말씀드렸죠 뭐 서비스 있고 db 가 있을 때
이 두 모듈이 들게 있어야겠죠 빼낼 수가 있을 때 이것을 말도 안되게
유이 테스트를 하려면
한마디로 이 거의 db 걸 다 먹히게 하겠다는 거예요 그러면 이제 먹힌
안되는게 dv 5% 뭐 킹 하는게 얼마나 시간이 낭비가 많은데요
이걸 낭비한 응고가 과연 유이 테스의 가치가 있냐 없냐
뭐 거야 뭐 어느 어깨 다 다르겠지만
그리고 네 번째는 이 모듈의 지켰는지 하는 것도 있고
그리고 이 못 다른 모듈의 상태 까지도 상쾌 해도 의존하는 게 있어요 뭐
그런 a 그 좀 잘 모르겠다
그러니까 즉 한 가지가 더 해요 의존을 하고 내 상쾌 의전 1
상대방 상태의 줄 알아요 어째 둘중에 하는데 그렇게 좀 더 복잡해지는
거에요 그러면
일리는 인터넷을 무조건 돼요 3사는
있잔아 인테르 테스트하고 이미 있어요 다른 모듈 반의 디플로이 대한
테스트는 테스트 사실 있어요
뭐 어떤 men's 노크 테스트 라고도 하겠고 그 테스트를 않아 고유의
테스트 를 만들 만들려고 모든 데이터를 워킹 하냐 아니면 그냥 인텔의
스트레스에 우전 하겠냐 라는 두 가지가 있죠 인텔의 테스는 실제 위 얼
데이터를 보태서 하는 거에요
제 개념은 무조건 1 2 까지 위 테스트는 3사 버리고 인터넷에 무조건
u 자 자 인텔의 테스트할 수 없다면 그걸 할 수 있는 어떤 뭐 뭐라
그랬죠
실제 라이브 머신이라고 나요 데모 머신 그걸 만들어서 거기서 모든 할 수
있게 만들자는 게 제가 하려고 의견 이었어요
근데 최근에 봤던 블로그 중에 심플하고 그 래 밍 닷컴 일하고 있어요
이제 거기서 페트 베이직 쓰라는 4 3g 가 있거든요 거기에 그 사람이
취한 게 이거예요
두가지
이런 창 다른 모듈의 의존하는 경우에
이거를 다 뭐 킹을 하긴 하는 대신에 이 함수 자체가 그 모듈을 직접
받는게 아니라 금호 주에서 결과적으로 나오는 데이터를 받게 함수를 바꿀
수 있다면 그 데이터 받았고 똑같은 테스트할 수 있다
그럼 데이터만 가짜 아이템은 제공하면 되는 거니까 그런 모든 함수를 먹힌
할 필요가 없이 그냥 데이터만 주면 된다 고 실제 그렇게 디자인을 할 수
있으며 는 함수나 클래스 굉장히 간단해 진다 고 하고 저도 건 동일해요
물론 모든게 그럴 수 있는 건 아니지만 그럼 데이터를 쪘을 때는 문제가
없는 것 같아요
아니면 심지어는
그 다른 모듈에서 아이 조 2 이미 모듈에서
함수가 2개가 있어 되죠 리포트 토리 라이 받아 갔고 거기서 함수를
호출하고
데이터를 얻은 다음에 그 데이터를 다른 함수에 노 좋았고 호출하게 되는
경우
뭐 프라이를 맨 뭐 라던가 그러면 결과적으로 첫번째 없으며 단지 리포트에
호출하고 데이터를 받은 다음에 데이터를 다시 있다는 함수 집어넣는 거니까
그 두번째 함수만 테스트 한다면은 첫번째 함수는 단순히 그래 포기 토리가
옳다고 가정 하는거니까 상관이 없는 거고 두 번째 함수로 테스트가 되는
거죠 그러면서 앞으로 수 있겠구나
모든게 그럴 수 없지만 그럴 수 있구나 그러면 굉장히 많은 부분에서
데이터는 먹히는 필요가 없어져요
그랬을 때 무시하는게 안해도 되는 거죠 그럼 이게 그게 레벨 쓰레드 내려
트럭 아끼는 거죠 어떤 의미에서는 데이터만 받은 거니까
그리고 마지막으로는 많이 그런 얘기 할 수 없대 어떻게 아냐 이거 다
데이터를 워킹 할 거냐 아니 그 함수를 다 워킹 할 거냐 그 블로그 자는
그러지 말라고 해요
사실 이 사면 얘도 조금 이해가 되는게 유니 테스는 소프트웨어에 품질을
생성 시키는 게 아니라 프로그래머 아까 실제 코드를 작성한 프로그래머
만족도를 높인다는 거에요
나는 이 프로그램을 짧고 재밌는 건 그 거에요 이 프로그램은 이렇게
동작한다고 나는 가정을 하니까 그 가정을 화기 확인하게 유의태 쓰자는
거에요 근데 어찌 보면은
4 틀안에 마친 거잖아요 제가 생각하는 맞는 비해 비어 와 급 입에 막
게이트의 땄어요 근데 실제 따른 제 저희 실제 소프트웨어 이 함수를
호출할 때는 그 가정의 맞지 않을 수도 있어요 그러면 내가 내가 전야제
가정의 오냐 의 차이죠
리퀘 l 먼트 확실히 나와 있으며 녹일 수 있겠지만 그런 경우 거의
없구요
결과적으로는
어차피 etx 를 얻을 수 있는 것은 내 가정이 말단 테스트 밖에 없다는
거에요 소프트웨어에 가정의 맞다는 게 아니에요
소프트웨어 과정이 맞으려면 차라리 흔히 만 오토메이션 테스트 하고
있거든요 어떻게 웹 쪽에서는 이제 웹브라우저 떼어놓고 웹브라우저
드라이버라고 있어요 실제 삽 유저가 어떤 어떤걸 클릭한 한지를 이제 대충
시뮬레이션 해 같고 그 결과가 어떻게 된 테스트는 한마디에 블랙박스 캐스
인데 오토메이션 테스 줘 뭐 게임 쪽에서 스모크 테스트 라고 하는건 되게
비슷해요 어떤 의미에서도
인텔의 테스트 9 약간은 또 비슷하고요 인텐트 에서는 좀더 뭐랄까 그
모듈과 모듈만 확인하는 것이 전체 테스트 하는게 아니라고
그이 저자는 그 거였어요 블로그 저자가
어차피 어떤 태슬 짜증 안에 시간은 똑같이 라는 걸려요
근데 ues 걸러서 시간 해야하고 이 함수나 테스트 하는게 과연
소프트웨어 전체적인 가치에서 얼마나 의미가 있을까 이 함수가 되게 중요함
쓸 수도 있고
뭐 1 만번 의 만명 들어오면 한번만 후 추진함 수도 있잖아요 근데 그걸
알고서 엄청난 데이터를 워킹 하는 것과 그 똑같은 시간을 들여서
그런 오토맨 셋을 짜는 것과 그러면 오토메 테스 짜면 은 실제 유저가
가는 대부분의 것을 많이 테스트를 하는 거잖아요
과연 어떤게 가성비가 좋냐 그 얘기예요
물론 저희가 모든 펜스 다닐 수 있으면 뭐 그것도 하고 익었다 겠지만
그런 경우는 저수지 못 바꿔요 소프트웨어 그래서 결과적으로 있는 시간조차
서 테스를 적당히 만들고 어느정도 회사는 만족하고 넘어가야 되는데
저희가 유이 테스트 시간을 백날 들여와야 소프트웨어 품질 향상에 는
굉장히 큰 효과가 없다는 거에요 차라리 저희 만족도가 높아지는 거지
저희 소프트웨어를 위해서 1회 위해서라면 그런 오토메 스트레스를 잘
짜는게 훨씬 아 뭐 중요한 테스트 많이 잡고 중요한 버그도 많이 잡을 수
있다는 얘기죠
동 해요 솔직히 보고서 아 맞는 얘기나 그럼 저는 이제 오토메이트 했을
잘 몰라요 아직 사시려면 거
차라리 내가 un 테스트에 이 데이터 워킹 하려고 시간 낭비한 바에는
오토메 테스 좀 해 보는게 낫겠다 는 생각이 들었어요
예전에 그런 얘기 한거 같아요 뭐 트위터 했는지 비디오 왠지 모르지만
큰 이 말하는 피어 리스트가 있어요 뭐 번 지점이 많이 하시는 분들이
일수도 있고 뭐 순수하게 완벽하게 만들려는 분들
그 사람들은 정작 회사나 소프트웨어에 도움을 주는 건 없어요
그 사람들은 자기 만족도 그거에 도움이 더 인생의 전부야 사실은
않아 정말 때 나온 나만 이렇게 뛰어난 프로그램 만들 수 있어 그런데
그런 살 백날 회사의 많아봐야 소프트웨어 안나는거 때만 해도 또 실제로
굉장히 잘 나가는 소프트웨어 들다 보면 은
그렇게만 철저하게 뭔가 잘 되어서 광경을 진짜 없거든요
어찌 보면은 유저들 그 성향 분석해서 그래 빨리 발맞춰 나서 움직이는
사람들이 많았지
그리고 결국 그거에 하는 얘기는 역시 똑같아요 오토메이션 센스 잘해 갖고
유저들이 하는거지요 대부분 테스트하고
쥬드 내부에서는 것을 당연히 완벽히 개판 어쩔 수 없죠
밸런스가 필요한 건데 그러면 유니테스트 100% 갖고 이걸 완벽하게
만들겠다
이 잡아채는 말 그대로 한 마디로 그냥 좀 이기적인 사람들 같아요
나만 잘하고 자기가 다음 응 나 있는 그 단체가 성공하는 걸 바라지 않는
뭐 그것도 나쁘진 않은데 뭐 혼자 일 하시는 분들한테 좋죠 그래서
얘기가 길었는데
결과적으로는 한마디로 마무리 할 거 같아요
자기가 만드는 거에 최종적인 가치가 뭔지 를 보내게 될 중요한 것 같아요
그 최종적인 가치에 따라 자기가 뭘 해야되는지 바꿔야 하는거 아니면 그
가치가 자격 안 맞는다면 은 그 회사 있으면 안되는 것도 같구요
매체가 저는 굉장히 실용적이고 빨리 빨리 움직인 걸 좋아하기 때문에 그런
없게 된 제가 일부만 들어가는거 어떤 의미에서는 모르게 뭐 항공업계
라던가 거기 들어가면 은 제가 코드를 잘못 쓰는 사람도 죽지 않아요
그럼 그거 이미 테스 자야지 그럴 자신이 없어
그런거구요 음 제어된 비디오가 되 길어진 것 같아요 니까 대충 끝 낼게요
포 폈습니다
