포프 입니다 음
오랜만에 정상 머리를 돌아왔어요 때까지만 피부암 통키
홈리스 이런거 하다가 오랜만에 정상 머리를 돌아와서
좀 이번 포프 tv 로 차분하게
신행을 할리가 없겠죠
6 아 오늘은 유니테스트 에 대해서 얘기하려고 해요 예전에 잠깐 따른
편의 얘기 했나 안했나 기억이 안나요 솔직한 얘기로
퍼팅이 많이 만들다 보니까 그리고 가끔 사람 만나면 제가 똑같은 얘기를
해요
아 제가 믿고 잇는거 제가 아 뭐 뭐 놓고 모든 나쁘다 에 저만의 소신이
있으니까 그걸 사람한테만 하다 보면은 어느 순간 제 포프 tv 를 만들어
성가 이마를 의미한 것도 같고 아닌것도 같은데 어쨌든
아 그냥 할게요
사실은 다른 얘기를 먼저 하려고 했는지 고유의 테스트 얘기 때문에
그럼 원래 따른 얘기하려는 것부터 먼저 하 죠 왜냐면 그거 듣고 제가
애들의 유니테스트 얘기랑 몫이 들으신 분이 속에 끊고 안들어 주면 되니까
제가 이제 왜 회사를 다니다 보니까 c # as 비단 내리고 되게 많이
써요
그것이 # asp 시샵 이라고 해야겠죠 시 샵에 장점이 아 그래도
리플렉션 시스템이 잘 되어 있기 때문에
실행하는 순간부터 모든 거에 뭐라 그럴까
으 오브젝트 타입에 라던가 뭐 멤버 타입이 라던가 뭐 클래스 에 관한
모든 정보를 알 수가 있는 장점이 있죠 물론 성능 의 단점이 있지만 그
c 샵에 제탄
장점 중에 하나가 그런거니까 리플렉션 시스템
그들의 그 덕분에 시 잡 에서 테스트 코드를 짜는 것도 굉장히 쉽더라구요
12 저는
디젤 스튜디오에서 만약에 유니 테스팅을 하려면
말그대로 그냥 테스트 프로젝터 만들고 나서 뭐 그냥 배출돼 있잖아 이렇게
각과 로써 갖고 하는 거기에 무슨 이제 테스트 메서드 라고 해주고 뭐
이름 정해주고
그리고 그냥 코드 안에서 한 실행하고 싶은 테스트 를 적어주고
그 어썰트 아시죠 어썰트 가 이제 그 테스트에 어썰트 가 있어요 그
어썰트 해하고 이게 이 값이 많이 냐 라고 확인을 하고 그게 아니면
자동화 테스트 카페 일에 대해서 결과를 나오게 해주는
그리고 테스트 실행을 간단하게 그냥 비주얼 스튜디오에 있는 테스트
익스플로러로 같고 그냥 뭐 전체 테스트 실행 시키거나 아니면 칠한 아마
시키거나 이러면 되더라구요
물론 아우터에 편하다는 것을 많이 했어요
아 그래서 제가 뭐 게임 쪽에서는 보통 잘 앉아 하여 사실은 이 테스트를
그래서 안 하다가 요번에 웹 쪽으로 와서 bb 테스트 번 해보고 나서 아
유니타스 굉장히 짧게 편해졌고 나 아 그렇게 생각을 하다가 c 플러스
퍼스 생각을 해 본 거죠
그러다가 이제 예전 같은 경우에는 이제 뭐 비주얼 스틸 대체해서 이런
테스트 엑스포로 이런걸 제대로 지워 안 해 줬을 때 무슨 여러가지 테스트
플랫폼 있어 유니테스트 를 쓰려면 은 이런 이런 이런 코드를 써 같고 뭐
앞에 이런거를 뭐 좀 복잡해 짝 프리 프로세스로 붙여주는 2
전철이 문 그래서 막 별별 이상한 짓을 해서
유니테스트 해야 됐었는데 어찌 보면은
괜찮은 방법이기도 했는데 모든 날에 새로운 시스템을 가지고 넣고 세로
새로운 전처리 문을 집어 넣기 시작하면 굉장히 전체 시스템에 복잡해지고
그만큼 뭔가 하나 망가지는 것도 많고 원아 설치할 때마다 또 새로운 사람
들어와서 뭐 떼러 8 되면 설치해 되는 것도 많고 그래서 개인적으로
굉장히 피하는 편 이었거든요
그래서 가능하면 모든 설치를 최대한 적게하고 효과를 낼 수 있는 것들이
좋아했는데
다인이 이제 비쥬얼 스튜디오 토다 오전 2r 후 2011 있었던거 같고
2013년에는 확실히 있고요 있는 기능중에 하나가 테스트 익스플로러 고아
까지 가시 샵에서 말씀드렸듯이 그렇게 거의 간단하게 그냥 비쥬얼 c
플러스 플러스 연 프로젝트 테스트 포레스트 만들고 나서 거기서 테스트
메서드 정해주고 그냥 하는 것만으로 약 컴파일 하면 곧바로 실행이
되더라구요 그래서 아
dc 플러스 프레스 굉장히 유의태 쓰기 편해졌다 그냥 비주얼스튜디오
쓰시는 분들은 거기서 쓰시면 되더라구요
물론 비쥬얼 스튜디오를 안식 안쓰시는 분들은 따른 뭐 아까 말씀드린
시스템을 모이 태그 오베이션 하고 해야겠지만 전 개인적으로 이제 뭐 게임
만드시는 분들은 대부분 비디오 스튜를 쓰실 테니까
아니면은 따른 분야에 계셔서 더 비디오를 뛰어 쓰시는 분이 계시면 이걸
쓰시면 진짜 편한 것 같아요
특히 따로 할 거 같고 물론 플러스 플랫폼을 안되겠죠 나는 2
그래서 이제 거기까지가 이제 제가 따로 하려고 했던 얘기고
그래서 아직까지 dc 플러스 플러스 를 만약에 쓰시는데 유니테스트 한번
해보고 싶었는데 아 복잡해 단 하셨던 분들 한번 그렇게 3 아파서
해보세요 굉장히 편하고 빨라요 시접은 너무너무 편하고 빠르고
그러면 이걸로 원래 뭐 유용한 정보는 걸
그리고 이제 그 다음에 제가 하려는 말은 제가 믿고 있는 유니테스트 의
효용성 이라고 해야하나요 그걸 말씀드릴께요
최근 들어 어떤 또 뭐라 그럴까
어떻게 보면 은 순수 주의자 고 까 조인 뭐 한국만 순수 cd 가 아닌
것 같은데
아 여성의 필요 있으랴 그런거냐 굉장히 필요한 것을 원하는 그런 엔지니어
그런 사람일 수도 있고 아니면 그냥 또 뭐 정치만 하는 사람일 수도
있는데 굉장히 유니테스트 를 강조하는 사람 않았어요 그 모든 프로그램은
모든 코드 e 테스트가 돼야 된다
이 테스트를 해서 쑨 코드 커버리지 라고 하거든요 실제 테스트는 코드가
* 풀어내야 그 코드 거의 뭐 90% 100% 가 된다 이런 얘기를 한
사람을 봤는데 제가 여태까지 마운 사람 중에 그런 뭐 예전에 이렇게 해
남겠네요 빌드 시스템 얘기할 때 됐나 라고 했던거 같고 그런 표 이스트
마인드를 가지고 있는 사람들이 굉장히 효용성이 라던가 초 율 썽 실용성
등을 다 저희 시키고 회사 돈 엄청 낭비하는 명을 많이 봤어요 솔직한
얘기로
그래서 저는 일단 그 사람은 겨레는 반대 요
꽤 유이의 테스트가 필요한 것이 있어요 왜냐하면 은 저는 왠지 말에
앵커가 대전의 유이 테스트가 필요한 것이 뭐냐면 정말 핵심적인 부분이
있잖아요 예를 들어서 뭐 금융권이 라면은 뭐 계산하는 그런 코드 로직
이라던가
거기서는 말 그대로 몇 센트 몇 번만 틀려도 사람들 수백명 수백 명
수백만 명 더하면 손실이 크니까 그런 부분이 라던가 아니면 사람의 생명을
좌지우지 하는 그런 모 분사 기억 그런데로 백퍼 다 해야죠
아니면 무슨 메디칼 쪽 의료기기 쪽 그런데 당연히 100% 하는게 좋죠
그래서 이제 유니테스트 라는 건 뭐예요 이 함수를 만들어 두고 이 함수가
이 테스트를 통과 하게 해 놨어요
그러면 나중에
만약에 실수로 다른 사람이 코드를 바꿨을 때 이 테스트의 페이를 하기
때문에 곧바로 아 뭔가 버그를 만들었다는 걸 곧바로 캐치 할 수가 있는
거죠 그래서 이제 그런 시스템이 당연히 잃는 것은 좋은 데가 있어요 근데
결과적으로는 유이 테스트를 작성할 때 드는 비용과 그건 나중에 라는
사람의 시간이 들어가니까
그 비용과 실제 버그가 나서고 치는거 에 기용을 따 줘야 되는 거죠
그러니까 만약에 정말 뭐 분사 기계 나 아니요 뭐 건축적 같은 경우는
처음부터 굉장히 이 콰이어 많다 확실하게 나와 있거든요 그래서 이제 그런
부분 이라며 는 당연히 그 부분에 대해서 리퀘 못해 맞춰 유니테스트 를
만들어 두고
기능을 만들면서 그 유니테스트 돌리는 방법이 있어요
아니면은 그 아키 팩트 물다 전체 시스템 디자인 하고 뭐 클래스
다이어그램 더 만드는 사람과 api 9k ap 에 설계하는 사람 과 실제
구현 한 사람이 다른 경우 그런 경우도 당연히 유니테스트 가 있으면
좋아요 왜냐면 armed 만들고 나서 유의태 쓸만 들어오는 다음에 이거
구현 했을 때 유지했을 토끼 테스트를 통과해야 된다 라는 그렇게 재미도
있고요
4 제가 지금 있는 모양 쪽도 그렇고 실제 게임 쪽도 그렇고 6화 먼트
라는 것 자체가 정해진 내가 아니에요
계속 바뀌고 그에 바뀔 때마다 굉장히 많은 부분을 갈아 봐야 되고 실제
어떤 함수의 그 비디오를 바꿀 때도 있어요
a 피해를 받고 되어 있고 네 그럴 때마다 유니테스트 를 계속 업데이트
해줘야 되는게 과연 올바른 것이라 생각을 하게 되는 거죠
그 어떤 경우에는 그럼 6화 면서 봤기 때문에 유니테스트 가 테스트 하는
그 로직 철수 받기 때문에 그거를 바꾸다 보면 은 뭐 거기 서버가 생길
수 있고 어떻게 보면 시간낭비 얻어 말할 수도 있다는 얘기에요
그렇기 때문에 저는 기본적으로
유니테스트 른 정말 핵심적이고 정말 안 바뀌는 부분 그런 부분에는 쓰는게
맞다고 보지만 그게 아니면 은 차라리 안 쓰는 독일의 시간을 아낀다고
보거든요
그리고 어떤 의미에서는 뭐 좀 스크럽 많이 하시되 시 그 뭐라 그래요
계속 빨리 변화하고 빨리 어댑터 하고 뭐에 적응하고 빨리 뭘 계속
2000 레이 션 해야 하고 계속 또 발전시킨다는 개념 요즘 강 하잖아요
그런데 가이 스스로 유의태 쓰는
조금씩 힘들어지는 거 기네요 그래서 유니테스트 정말 100% 주장하는
사람들 가치가 1회 봤을 때 느낌은 이 사람들은
비즈니스를 자리에 못하고 정말 실용적인 생각보다는
그의 엔지니어로서 아 모든걸 이제 완벽해야 되라는 그 마음가짐 완벽하고
싶은 그런 욕망 그거를 너무 잘못 써 봤고 회사에 돈을 낭비하는 야구 줘
내가 아까 말씀드렸듯이 디펜스 줘
그러니까 군사 쪽이나 뭐 메디컬 조금 말이 돼요 그럼 그쪽은 심지어는
어느 정도까지 아냐 며 내년에도 말했을 지도 모르겠는데 제가 아는 그
연구 모집 댄스 회사에서 일하다 1
일하다 오신 분이 계 되시 거든요 그분이 하는 얘기 그 거였어요
뷰티 펜스 쪽은 매일 아침마다 까 일단 작업을 버추얼 머신 해서요
내컴퓨터 사는게 아니라 공통된 버추얼 머신 이미지 나세요 왜냐면 모든
사람의 환경이 똑같아야 되니까 내가 뭔가 다른 프로그램을 깔아서 그게
따른 프로그램에 영향을 미쳤고 그게 내가 짠 프로그램이 몹이 a b 로
바꿨는데 실제 최종 머신에 들어가는 그 인발 못하고 달랐을 때 거기
서버가 생기면 미사일 썼는데 엉뚱한 알아서 두고 죽을 수 있으니까
그래서 더 출 먼지를 쓰고 그러고도 재미있는것은 버추얼 머신 이미지도
매일마다 위 이미지 거래요
원래 있던 그 이미지로 한마디로
자기가 실수로 다른건 다운받아 거야 이런 경우 있잖아요 자기가 뭘 바꿔
따거나 그런 격게 까 모두 똑같은 환경에서 일하고 모두 똑같은 코드가
나한테 그 코드가 모든 머신에서 똑같이 돌아간다는 보장하는 시작하는
거에요 그걸 또 제가 아는 따른 친구의 뭐 뭐
누나의 남편은 굉장히 큰 항공 회사에 다녀요 그 항공 회사 가 되게 큰
의사예요 뭐 이런 더 있으면 딱 알 정도 회사인데 뭐 그래봐야 2개 밖에
없겠죠 사실을 둘중에 하는데 그 회사는
엔지니어도 정말 많은데 일 진행이 너무 느려요
그 이유가 뭐냐면 모든 뭐에 그런 유의태 짱 을 해야 되고 모든 걸
굉장히 까다롭게 검토를 해야 되는 고액 곳이거든요 차 못해 서빙이
나갔다가 뭐 하자 있었고 추락할 수도 있잖아 테스트에 단 듯 한데 나중에
그런 경우 그리고 여기는 아직까지도 비주얼 베이지
6.25 제 2의 6을 그 이유는 만약에 비주얼 베이직 닷넷 시가 이런걸
넘어갔을 때 많이 짤 되는 코드가 다시 많으니까 그 코드를 짜면서 나오는
버그가 버그가 나오잖아요 아무래도 새로 코드를 짜고 옮기다 보면 은
그거를
용납 못하는 거에요 이미 돌던 라이브로 이런걸로 이미 덜렁 거버 그다지
기자 받고 잘 도는거 를
새로운걸 해놓고 더 걸어 새로이 출수 해가꼬 거기서 문제가 생기는 걸로
채울 수가 없으니까
이런 신기술 좀더 사용하기 편한 id 이런거 다 무시하고 라고 그냥
우리는 안전하게 가야 된다는 것에서 여전히 비쥬얼베이직 쓸쓸 고 있어 그
제가 말한 뭐야 정말 필리 스트의 마인드로 가려면
그런 회사가 더 올릴 수도 있어요 근데 웨비나
제가 볼 때 이 쪽으 게임 쪽이나 웹은
그건 확실히 아니에요 저희는 모든 날에 빨리빨리 바라는게 중요한 거고
그래서 그거에 그 죄 소비자 2호 입맛에 맞게 빨리 바라는게 안될 중요한
거거든요
그고 실제 뭐 엄청나게 뜨고 유명한 그런 제품의 코드 베이스 를 보면
대부분 코드 자체는 그렇게 뭐 깔끔하고 하는 훌륭한 품질의 코드는
아니에요
이런 그 사람들은 말 그대로 빨리빨리 뭔가 되어 는걸 중요했기 때문에
물론 그렇게 너무 개판 치면서 아무 생각 없이 빨리 낫는다 보면은 몇 년
동안 성장을 하나가 그 순간에 성장 잊어 줘 왜냐하면 코드 1 고치는게
너무 힘들어 지는 경우가 있거든요 그래서 그런 경우는 뭐 그런것도 밖에
봤는데 뭐 결과적으로 밸런스가 중요한 것 같아요
그래서 뭐 말그대로 전세 이 스벅 얘만 보더라도 이 친구들은 모든걸
php 로 짧고 처음에 코드 기반 이렇게 뛰어난 코드 기반 도 아니었고
그래서 버거도 되게 맞잖아 연동한 이제 그걸 잡으려고 노력 했지만 그들이
친구들의 장점이 뭐 있냐면 페이스북도 그래서 트위터도 그렇겠지만 뭐 ab
테스트 그런게 있잖아요
예를 들어서 새로운 기능을 구현 했는데 이 기능이 과연 좋은지 안좋은지
모르니까
아 이 어떤 유적으로 매는 예정 기능을 보여주고 또 다른 유저 보면
새로운 기능을 보여서 그 사람들이 과연 어떻게 값 아들이냐 더더 뭐
클릭을 많이 하는 이런 걸 봤고 그 중에서 나은 방법을 찾는 뭐
결과적으로는
어찌 보면은 필히 스 테 마 음 한가지 밭에 자는 거예요 피트에 망가진
모든 걸 확실하게 만들어 놓고 리크 하면 또 혹시 를 만들어 놓고 설계
자란 다음에 설계 끝난 다음에 자 제품 그 이것은 반면에
그 게 아 니 라 이렇게 뭔가 사람들의 반응을 봐가면서 테스트 해 가면서
않은 그런 방법은 최대한 어떻게든 빨리 캐스트 할 수 있는 환경을 구축해
서 서 를 제공하고 나서 이게 괜찮다고 보면은 그거대로 가능 거죠 그리고
대로 만들고 어느정도 당연히
해킹 만으로는 솔직히 코딩 어떤 제품도 1년 이상 일 년 정도 넘어가는
너무 시 유지가 힘들다 고 보거든요
그래서 그게 해킹이 안될 정도로 적당히 다듬어서 서비스를 하다가 또 다른
새로운 아이디어가 있으면 똑같이 또 만들어서 ab 테스팅 에서 해서 가는
이런 방식이 만든건데
해서 그런 퓨리 스테 마음가짐 그런걸 보면서 참 가끔은
카페 요 의 사람들이 여기서 돕는 매고 있나 차례 자기들이 정말 트위스트
되고 어찌 그렇게 자기가 실력이 될 거라고 우리 되면 좀 더 빡센 대를
가지 거 증가에 걸쳐서
그냥 나는 퓨리 쓰다 나는 나는 뭐 너네들이 하지 않는 그런 뛰어나
엔진이 유행 길을 가고 있다 이거에 뭐 만족을 느끼며
뭐 자위를 하고 있는 것 같기도 하고 그냥 그래서 제가 생각한 유의태
쓰는 그거에 사실은 웹이나 그런 모
게임프로그래밍 쪽에서 유니테스트 의 가치가
전환 20% 정도 있나 라고 봐야 사실은 코드에서 커버리지 20% 는
굉장히 이태수 많은 거라고 보거든요 2처 이쪽에서 한 10% 만 되도
상관 없을꺼 같고 그리고 또한가지 되게 재미있는 점은
뭐 제가 깨에 모 게임 코드 꽤 많이 악수하고 그랬지만 어떤 엔진도
그렇게 장수만 엔진이 없는거 같아요 한 5년 정도 쓰면 잘 쓰는 것 같은
그런 느낌
뭐 키면 10 년 그래서 저희가 모든 제품을 만들 때 저희는 5년 동안
이 제품
이 코드를 잘 쓸 수 있냐는 생각하고 시작을 해 내는 것 같아요 5년
뒤에는 다시 한번 또 머리색 저희 가게 되고 바꾸게 되고 이러니까
그런데 이제 5년 정말 갈 정도의 코 드 라메르 유니테스트 박는 거 좋죠
그리고 골 동안 바코드 라면 근데 오늘 동안 저희가 매년 한번씩 받고
코드다 그러면
유니테스트 는 조금 그 문제가 있는것 같아요
문제가 있는게 아니라 이쯤에 당이 좋은데 그거 작성하는 시간과 유지하는
시간이 떠나 봤을 때 차라리 뭔가 빨리빨리 내 나서 좀 더 편식 변화에
빠르게 적응하는 게 맞는 것 같다 이제 생각이 해선
제 가이드라인은 모 게임 엔진 일하다가 왜 코드에서 유니 테스는 대강은
10% 에서 20% 정도가 맞지 않나 싶어요
뭐
50% 이상은 죽어도 아니고 뭐 30% 40% 도 가능하게 했고 제 생각
10% 20% 5
그정도로 유니테스트 일을 마치고 중요한 것은 사실은 비쥬얼 스튜디오 c
플러스 플러스 에서 유니테스트 플랫폼이 굉장히 좋아졌고 굉장히 짝이
쉬우니까 한번 해보라는 말하고 싶었지만 그에 덧붙여서 다른 얘기도 했네요
포프 였습니다
