[음악]
w
안녕하세요 뽑습니다 동영상 제목을 몰라 올까 라고 고민하고 있는데 뭐
어쨌든 눈길을 끌만한 걸로 나갈 것 같긴 해요
제가 poc 아카데미에서 개칭 설계 및 프로그램 있
그 과목을 가르칠 때 했던 얘기는 해요 객체지향프로그래밍 자체가 뭐
대단한 개념은 사실은 아니요 우리가 굉장히 포장해서 대단 하다고 말하고
싶어 하긴 한데 고는 캣츠의 재앙을 한참 약 8시간 분들이 그렇게 해서
좀 정리하는 것도 있고
그러나 뭐 지금 다 쓰고 있는 방식이 하는데 뭐 당연한 얘기고 결과적으로
그 당시에 개 층의 막 나오기 시작할 때 고런 말을 하신 분들이 있어요
어떻게 깨어 계신 컴퓨터 과학자 중에 기체의 지안 프로그래밍이 대기업에서
굉장히 인기가 많은 이유
대기업의 굉장히 이것을 빨리 접목한 이유 타실 한가지가 실력 뛰어나지
않은 프로그래머들이 이것저것 만져 각 고정해 지 못하게 하기 위해서가 란
이래요
그 얘기를 들어본 분들은 별로 없을 거에요 왜냐하면 은 그 이후에 실제
대학에서 프로그램이 가르치시는 분들 특히 개체의 양쪽 가르치는 분들이
그런 업계에서 뭐 훌륭한 위치에 있어 하고 뭐 어떤 언어로 왜 사용을
하는지 모르시는 분들도 꽤 있었기 때문에 것 같아요
이거를 말씀드리면 그 말이 100% 는 아니지만 굉장히 맞는 이야기
겠네요
예전에 c 언어 같은 경우에는 이제 접근권한 제약을 하기가 굉장히 어려운
모은데 있었어요 헤더 오빠인 그르다고 별 거 보고 다 할 수 있고 소스
코드 빨다 만질수 기타 그 이름이 있었고 누가 어떤 소스 코드를 가지고
뭐 소유하고 있는지 그 권한을 관리를 좀 어려웠고 기타 등등 이런게
있었는데 할 수 있었지만 그 조금 귀찮아 쪽은 데 개체 장을 들어오면은
결과적으로 모든거 x 모디파이어 첫번째 어제가 생기기 때문에 클래스를
누구 한 명이 책입니다
요 그룹의 프로그래머가 요 클래스를 책임지고 따라 사람 웃고 친다 라는
규칙을 확실히 바가 버리면 그 클래스 대부를 손댈 수가 없는거죠 아무나
그렇기 때문에 그런 식으로 약간 책임 사람들한테 책임을 딱 불리하게
좋았어요 그래서 이게 그런쪽으로 근데 사용이 많이 됐냐 라고 질문을 하면
대기업은 그런 식으로 좀 많이 사용했어요
대기업으로 갈수록 정말 이상한 코드를 많이 볼 수가 있어요 그거 한 예를
제가 좀 뒤에 말씀을 드릴게요 그러나 소규모 기업이 라던가 아니면 모든
언어가 그렇게 진행을 흘려 간이가 지금 말했던 것처럼 그런 실력없는
프로그래머가 코드로 망가뜨리는 게 문제가 아닌 실력 있는 프로그램 굉장히
많은 쪽 그런 어깨 들은 그 개체 지향 을 좀 이상하게 사용하는 듯한
습관을 안따라 같죠 그래서 실제 언어는 op 언어 지만 코딩 습관 자체는
오피 언어가 아닌 듯한 게임업계 이런 애들이 좀 그렇죠 게임업계 쪽에
굉장히 훌륭한 프로그램이 많이 들어가 있었기 때문에 고르 쪽은 이제 좀
다른 쪽으로 갔어요 그래서 그쪽은 개체 지향 의 편리함도 사용하면서
성능도 최대한 뽑아 내는 쪽으로 갔고 그게 아니라 이제 저쪽 아까 좀
이상하다고 정말 한쪽 뜰 개체 지향 을 사용하면서
5 코드 몽키 라고 할게요 코드 원숭이들이 코드 망가 튀는거 막기 위해서
온갖 배리어를 떡칠을 하면서 성능은 포기하는 그런 쪽으로 가게 됐죠
그래서 뭐 어느 쪽에 오냐 틀은 야 이거는 별 의미가 없어요 그냥 어떤
사람들과 일하는 야 정말 좋은 프로그램을 가지고 있으며 는 제약은 많이
풀어 되고 그게 아니라 실력없는 프로그램 않으면 어떻게든 제약을 마구
걸고 실력 좋은 소수를 있거든요 그 소수만이 그 제약의 제한이 없이
이거를 그 속을 다 만든다거나 아니면 다른 사람들이 사용할 수 있는
클래스
뭐 이런걸 만들어서 제약을 타 걸고 요거만 사용해 잠옷 버튼 하나만 눌러
따는 것 죽어도 하지만 이런 식으로 알려주었고 그렇게 할 수 있는 것
중에 하나를 제가 말씀을 드릴게요 이건 저도 이제 회사의 운영하는
입장이고 웹 쪽을 하는 상황에서 게임 쪽에 있는 프로그래머 보들 보다는
조금 실력이 그렇게 뛰어나지 않은 프로그램 언어가 일하게 되면서 아 이게
저 사람들이 정말 우리 코드를 유지보수가 너무 힘들 정도로 망가 3g
않을래 면은 어쩔 수 없이 해야 되겠고 제약을 걸면서 발견한 것들 중에
하나요 이런 상황에 있다고 생각을 해봐요
어떤 함수가 있어요 이 함수에서 받는 매개변수가 여러 개가 있어요 4
매개변수 형이 어떤 경우에는 클래스를 받기도 하고 어떤 경우엔 에인트 뭐
이런 그 기본 데이터 형을 받게 되요
즉 예를 들어서 만약에 어떤 매개변수가 휴먼 이다 그러면 아 내가 뭘
만드는 지 모르지만 코드 사람이라는 개체를 가리키는 굉장히 특정적인
데이터 타입이 걸쳐서 강한 타입이라고 얘기해요 컴 크리티컬 구체적인 타입
그 제가 말하는게 무 스틱 타입 무슨 뭐 다이나믹 탈 이런게 아니라 그냥
개념 상으로 빡 하나만 가리키는 굉장히 강력한 타입 근데 그게 아니라
가끔은 이런것도 받아야 하잖아요 어떤 사람의 나이
그럼 인 트 아니면 뭐 바이트 부르고 상관없고 아이언사이드 인트로
상관없고 나이
뭐 어떤 사람의 키 cm 까지만 그럼 또 인 트
이렇게 받고 그 사람의 무슨 전 확보 너 또 인 트 이렇게 알 수가
있잖아요 그럼 그런거를 한 4개 정도 를 발라 함수가 있다고 생각을
해봐요
이 앞으로 작성했어요 그러면은 누군가 함수 호출 하잖아요
그러면 대부분 잘 호출 할 꺼라 생각을 하죠 근데 생각보다 안 그런
사람들이 있어요 얘를 그냥 뭐 함수 구두가 실수의 오르지만 실제 실수 한
사람도 굉장히 많아요
왜 똑같은 인트 형이야 생각이 없이 내 머릿속에서는 나이가 뭐 보다 먼
좋아야 내 머릿속에서는 키가 나보다 먼저 와야 맨 나는 사람도 생각할 때
키 다음엔 아예 생각하고 저사람은 나이다 미키를 생각하니까 자 기능의
코드 작성하되 g
oid 가 뭐 이거는 ag 를 넣을 때 보여줘도 잘 신경을 안쓰고 치는
거야 집중을 안하고 그렇게 돼요 그럼 그렇게 코드를 넣으면 은 자기가
지금 넣었던 숫자에는 제대로 작동을 해요 테스트도 적당히 가더라
그럼 자기 됐다고 생각하고 끝난 거야 근데 그 자기가 사용한 데이터 알고
실제 올바르지 만 다른 데 있다 단 크게 내가 맥이 번들 잘 모르며
깨트릴 수 있는 요 그런 경우로 넣었을 때는 쫄딱
망아 줘 실제 라이브 돌면 서버가 나오죠 그거를 코드 입에서 잡을 수
있다
쉽진 않아요 왜냐면 코드들이 모든 사람은 호출하는 것만 보지 실제
메서드의 시그네쳐 어떤지를 다 사라 보긴 어렵거든요 바뀐 코드 안 보는
일반적인 이 까자 함수 호출 같은 경우에는 어떤 매개변수가 들어가 있다고
뭐지 그게 올바른 순수한 지 판단하기가 어려워요
코드 리뷰 본 사람은 그래서 못잡고 넘어가요 테스 텍스타일 스 잘 돌아
이렇게 나갔어 갑자기 밤에 나 있는건 터지는 거야 그런 경우들이 있어요
포크 에서 그런일이 최근 있었어요 사실은 뭐냐면은
요 것보다는 조금 복잡한데 최근에 이제 뭐 조금은 님들을 위해서 어떤
학생들의 에 빌드 같은 걸 보면서 좀 검토 해 줄 때 학생들의 파일 몇
개를 다운받을 수 있는 모 일찍 과제 관련 파일을 그 기능을 넣었어요
그럼 기능을 넣을 때 이제 먹어야 되는 것들 보면 그 파일을 가져와야
되잖아요 그럼 넣어야 되는 것 중에 하나가 학생이 만든 빌드가 제가 빌드
id 가 들어가야 되고 9위 돼요 구이 스타일 uuid 타일 그리고 길다
2 da 즉 학생 의 유저 id 가 들어가야 되요
그 학생이 유저 id 폴더로 막 찾아오면 되는거니까 소크 두개를 만들어서
하면 되는거예요 근데 함수의 9 위드가 2개가 들어 가잖아요
그죠 그러면 첫 번째 만들 수 있는 실수 가 뭐냐면은
유저 id 하고 아까 빌드 아이들 했죠 이 두 개 스스로 바꾸면 문제가
되겠죠 그러나 이거는 구현한 사람이 당연히 뭐 테스트하면 탕이 잡힐
거예요 그 두 개의 9 위드가 바뀌었을 때 폴더로 목차 1 테니까
요번 상황에 뭐냐면은 극우 2d 순서로 똑바로 먹었어요 근데 문제가 뭔지
마까 유저 id 라고 말한 거 있죠
유저 아이디를 우리 프로그래머가 원래부터 학생의 uid 로 들어가
있었는데 자기 딴에는 이걸 리팩토링 한다고 맛 좀 예쁘게 바꾸다가 로그
한 유저의 유주 아이들 은 거에요 자 내가 조교 야 내가 학생의 빌드 이
포트를 보고 있어 로그인 한 사람 누구에요 조교 줘 그럼 조교의 유저
아이들 놓고 이 사람이 만든 저 파일을 가져오라고 했는데 빨리 못했잖아
그래서 크게 모두 자꾸 서버에서 뭐 문제가 생겼고 rv 문제가 생기는
거예요
흐미 프로그램 왜 거점 않냐 테스트한 데이터가 자기를 조교를 등록해 두고
자기가 빌드를 한 다음에 자기 빌드를 본 거예요 그러면 로그인은 좋아
빌드를 만든 학생의 유저에 대한 똑같잖아
자기 딸의 는 그 죄를 검색어 넘어갔던 거야 그리고 코드 넣어놓고 신경도
안쓰고 있다가 다음날 새벽 인가에 문제 턴 썼어요 3급 보면 소
어이 는 없죠 사실 왜냐하면 은 여태까지 저희 프로그램은 그런 문제를
만들 저 사실은 없어요 여태까지 뭐 일하던 프로그램 얻을 다시 굉장히
잘하는 친구들 많이 썼고 지금부터 서서히 좀 사람들 채용해 내가 뭐 이런
경우 인데 생각보다 부주의한 프로그램 어디 있어요
이제 그 부주의 항거를 보면서 요런 문제를 일으키는 프로그래머는 당연히
고민 차라 일으키진 않겠죠
다른 비슷한 것도 이렇게 없겟죠 클라 같은 생각이 드 거에요 그러면
우리가 첫 번째 문제는 그 매개 변수를 uid 로 받는 게 문제다 왜
빌드 id 유저 id 어떠한 일이든 과제 id 다일 uid 로 부터
관리를 하는데 실수로 잘못 놓거나 1 처음에 제대로 노는 데 나중에 누가
함수 시그네쳐 로고 쳤어
외치면서 다른데 있는 모든 것을 확인한 거야 기본적으로 프로그램 해야
돼요 근데 안하시는 분들이 또 있어요
제가 좀전에 마디 그런 문제 만드시는 분들 절대 아니에요 그러면 자기는
몇 개 테스터로 또 넘어가는데 딴데서 깨지는 경우도 있 거다 그리고 그게
라이브 중에 언제 나올지 모르고 그런 것들이 있는거예요 그래서 보면서
아이 쉽지 않겠구나
uuid 가 있는게 문제다 그러면 우리가 네빌 did 라는거 받고 싶어요
그러면 차라리 빌드 id 라 클래스를 만들면 돼요 그게 내부적으로는 9
위드 하나만 가지고 있어도 그 클래스를 만들면 어쨌든간에 매개변수는
빌드에 id 라는 클래스를 받아가자 나 돼서 그걸 잘 못 낼 가능성은
없어요 그런데 우리가 준 유저에게 문제는 로그인한 유저 유저 있느냐
빌드를 만든 섬유 주 idi 문제가 있잖아요 그래서 유저 id 잖아
그럼 어떤걸로 작동 하니까 똑같은 쑨 발생을 해요 그럼 뭐가 있느냐
우리가 지금 생각하나 컨텍스트가 있죠 그 문맥에 맞는 객체를 또 만들면
되요 클래스를 빌드 오너 id 빌드를 소유하고 있는 사람의 id 그리고
로그인한 유저 일이면 모인 로그인 uid 그 클래스가 따로 아이 생겨
버리면 클래스 섞어 될 수가 없어요 얘기를 하며 는 무슨 미친 소리
이해할 수 있어요 왜 불편하고 든 당연히 처음 클래스를 만든 사람
불편해요 그러나 그 클래스가 저도 사용한 사람 그 사람들에게 차이가 없죠
왜냐면 내가 유저 id 불렀고 넌 나 아니면 어떤 함수가 유저 아이디를
바라는데 그 유저의 딥 오브젝트로 가난해서 때가 넌 나 별 차이가 없어요
그래서 처음에 이 베리어 막고 칠수 막으려고 하는 사람들만 정말 꽃 음
아 쓸데없는 거 많이 작성하는 거지 그 사용하는 사람들 문제고 그 이게
되고 아니면 이게 어렵다면 코드에서 분명히 보이도록 어떤 네이밍 컨벤션
이 들어가면 겉 잡을 순 있어요 코드 2위 하면서 그거는 제가 지금
고민하고 있는 5 아직 최종 결정이 안 났는데 데이터 트랜스포메이션
데이터 브릿지 이런 식의 개념으로 좀 개념을 잡아 가려고 해요
예를 들어서 길 대사 유저 id 가 있고 그 이걸 우리가 가져가고 있다
로그인 유지 id 가 아니라 그러면 어떤 트랜스포머 클래스 브리치
클래스를 사용해서 빌드를 넣어주고 거기서 유저 id 를 직접 반응을
하는데 최소한 트랜스포머 라는 클래스를 사용하는게 코드를 위해서 볼
테니까 5 트랜스폼 5점 개 필드 id 뭐 이런식으로 유저 id 하면서
그러면은 그 안에 매개 변수를 빌드가 들어갈 거 아니에요 최선 4개 변수
안에서 아 이건 빌드의 유저 id 구나 라는 모습은 보여요 텍스트로 서고
렁 걸로 좀 추가 보완하려고 생각하는거 뒷얘기 고 다시 원래 얘기로
돌아가면 이렇게 필요한 문 맹 마다 클래스를 만들어서 사용하는 법 그래서
최대한 일반적인 데이터 형태를 줄여 버리고 그리고 기본 데이터 형을
클래스 로 바꿔 버리고 이러면 정말 실수를 많이 막을 수가 있어요 특히
부주의한 사람이 실수
이거는 어려워서 않으실수가 아니에요 그냥 희귀하고 기본적으로 자기가
일하고 확인하는 습관이 안 돼 있는 애들 할 생각도 없는 애들 그런
사람들 잡을 수 있는 거예요 이걸 잡아서 그 사람들이 나아진 야 절대
아니에요 그 사람들은 고 사람들이 할 수 있는 정도의 수준에 코드를
작성할 뿐이고 근데 그런 코드 작성이 필요
하거든 물론 간단한 일 주는 거죠 왜냐하면 비싼 프로그래머 데려다가 그
간단하지 시켜 좀 가성비가 안 맞으니까 이게 어찌보면 대규모 코드 몽키
군단 가꾸 이제 회사를 운영해야 하는 대기업의 어울리는 방식이죠
이 생각한 물론 이상은 약한 흉도 있을 거에요 근데 자기 회사에 있는
코드를 봐요 정말 세상에 있는것 조그만 인 트 하나까지 클래스 로 만들고
있는 데가 있는지 분명히 있어요 저 그럼 코드 굉장히 많이 봤어요 특히
한국에서 하 처마는 자바 코드 베이스 정말 많이 봤어요 그 이유가 이걸
부검 앞 으 려고 재밌지 않아요 이거 근데 잡아 쪽에서 이런것 성능을
드럽게 죽이는거 기네요 그래서 실제 성능을 생각하던 괜찮은 프로그램들은
자바 코드를 구하려면 굉장히 싫어해요 왜냐하면 야 아무리 우리가 못하는
프로그래머가 있고 걔들이 실력에 안 올라간다고 해도 기 좋게 제품의
성능을 줄이면서 까지 약 2배 3배 10배 21 들어 이거 빼줄 수
있어요
그러면서 까지 시슬 해야되냐 그럴 파이는 이걸로 해서 성능을 에서 서버
더 쳐박아 야 되는거 생각하며 차라리 5 탄핵을 짜르고 자란 아이는
채우게 사는게 다 맞지 않는 이런 고민할 수밖에 없는 들이 있어요 사실을
그러나 자바는 그 배경으로 10시 발전해 언어이기 때문에 그 상황에
머물러 있는 거고 그게 아닌 잡아 랑 비슷하면서 그 성능 의 제약을 많이
받지 않는 그런 어디 있어요
대표적인게 시샵 이에요 저희 회사는 어쨌든 시작을 사용하기 때문에 약간
익스트림 하고 미친 것처럼 보이는 방향으로 서서히 가구는 있어요 이거에
장점이 뭐냐면 이렇게 강하게 코드를 망가 7 수 없는 장치를 자바가
주면은 앞에서 뭐 컨트롤러의 들어오는 코드는 뭐 주니어가 어떻게 작성한
코드를 대충 안해도 되요 것은 기능 상으로 볼 테니까
데이트도 명백하고 단 그런 아까 말했던 막 클래스 작성하고 함수 작성
하고 이런 것도 있죠 라고 어떤 타입 들어오게 스트링 만 타입으로
작성하는 그런거 작성하는 부분 그런 코드가 있는거는 씨니어 급이다 자
라는 프로그램을 다 코드를 보겠죠 즉 코드 리뷰를 볼 부분과 안 보니
확실히 9분이 돼 버리고 프린트를 레이어는 좀 많이 망가져도 신경안쓰고
그 답이 못보고 다시 우리 시가 없었고 내부의 중요한 것들
그거만 깔끔하게 유지할 수 있는 방법도 있는거예요 어쨌든 시상식으로
돌아오면 시사에 뭐가 있냐 구조체가 있습니다
시샵 의 구조체는 요 데루 타입 에어 cc 프 플 공부하신 분들은 알죠
베르타 이 뭔지 자 이거 함수에 던지고 패스해도 흰 뱀 오리알 오케이션
하고요 무조건 스템 레알 로케이션 해요 그거를 참조 로 전달하는 먹고
있어요 시점에서는 참조로 전달하며 는 카피를 하지도 않아요
스턱 터가 쌓이자 클 때 그러면 c 풀 풀에서 보면은 개체를 직접
전달하는 거가 개체를 스펙의 안만들고 뉴로 만들어서 그것을 포인터
전달하는 까 그 차는 다 아시죠
대부분의 경우에 개체를 스택에 만들어서 그 전달 해 버리죠
그게 거의 무조건 빨라요 대체 크기가 엄청 크지 않는 이상을 스택에
장점이죠
스틱이 빠른 이후 힙 느린 이유 다 줘야 되죠 그렇기 때문에 그걸 아는
사람들은 잡아야 되고 개체를 수백 개씩 만들고 패스하고 짜증나 줘 가비지
컬렉터 2
올 거고 괴롭게 들어 있고 하니까 근데 그럴 이유가 없다는 거예요 d
샵에서는 스트럭 틀을 사용하는 순간 그것은 벨르 타입이고 그거를 매개
면서 전달할 순간 카피를 일으키 던가 아니면 시프 불에서 그런거를
전달하면서 레퍼런스 전달할 수 있듯이 스택에 있는것을 그러시고 전달 해
같고 제가 속도를 빠르게 하는거 가능한 거죠
프로 이게 그 교체 이렇게 9 위드가 하나만 들어가 있어요 예를 들어서
그러면 cc 플 하신 분들은 이게 어셈블리어 로 어떻게 될지 대충
머리속에 감이 오잖아요
그냥 내가 9 위드 1 전달하는 거나 스트럭 타라 만들어가고 전달하는
거라 어셈블리의 레벨 내려가면 은 최적화 만 잘 된다면 거의 똑같아요
실제 성능 의 저하는 없는게 정상 이에요
그게 성능의 저하가 있다 그럼 이제 마이크로소프트의 열심히 따구리 쳐맞고
고체 라고 해야 되는 거죠
근데 마소 2 스트럭 트 시장 얘기하면서 금액이라도 전달한 얘기하면서
이럴 때 성능이 좋고 많은 비교 다 해놓은 게 있어요
제대로 해 놓은 거에요 그러면 여기서 이제 또 한가지 있는거는 트럭 틀을
패스 해요 그러면 이게 아 뭐 매개 변수를 그냥 패키지로 만들었고 한번에
패스 하는거구나
단일 매개 변수 더라도 그냥 스톰 타입 스터프 로 만들어 갔고 패스에
버리는거 구나 금실 설리 진짜 정말 없어져요 처음에 척 작성하는 비워져
들지만 사용하는 사람들 비용은 거의 안 들어가게 되요 그죠
그럼 여기서 한 가지 문제가 생겨야 데 어떤 개체를 패스 했어 그 개체를
패스 했을 때 함수 안에서 또 스튜어트 개체를 또 바꿀 수도 있잖아요
그럼 기분이 나빠요 왜냐하면 은 라는 맵에서 전달 한계 순수하게 마인 트
라던가 플롯이 라던가 그 전달해 한거고 그걸 바꾸고 로 생각하진 않거든
오디가 바꾼다고 내 쪽에서 바뀌는 건 아니지만 나는 순수하게 데이터를
그냥 전달해 주려고 한 거야 이걸 무슨 상태를 위해서 데이터를 바꾸고
우리가 생각하는 개체 개념이 아니라구요
개 책을 상태를 가지고 함수 호출을 통해서 상태가 바뀌는 게 중요한 거
잖아 우리는 이제 스튜어트를 사용한 이은수 데이터가 머리야 데이터 저장도
아니야
예 전달할 때 쓰는 거야 이거든 이럴때 사용할 수 있는게 또 있어요
g 샵에 미드 온 리스트 루트 읽기 전혀 스 트 로 트 한번 만들면 소개
내용을 절대로 빠 거야 자 그러면은 실제 내용을 바꾸던 말든 어셈블리의
랩에서 큰 차이가 없어요 근데 히 샵에서 스트럭 틀을 위도 으로 만들어
순간순간 컴파일러 나겠죠 아 얘는 순수하게 정말 스택에 값 복사하고 그거
사용하는 게 목적이 구나 그 외에 별로 생각 하는거 다 복사할 필요도
감시 도마 쓰는구나 딱 알죠
그래서 그걸 하는 순간 그리고 리더 미로 만들고 그런 식으로 매개변수
전달 하는 순가 최적화 축가 다 해줄 수 있겠죠 그래서 최적화 같아요 히
샵에서 믿을 리 스트로크 사용해서 스톤 타이 픽 타입을 굉장히 강하게
만들고 굉장히 구체적으로 만드는것 잘하면 은 제 생각에는 정말 이상한
실수 하는 사람들 꽤 많이 잡을 수 있을 거에요 나중에 함수 시그네쳐
바뀔 때도 타이트 체가 바뀌거나 아니면 타입이 들어간 위치가 바뀌어
버리니까 컴파일 에러가 나겠죠 컴파일 시에 다 잡을 수 있어요 뭐 이거를
그거 잡기 위해서 모유 이 테스트를 많이 만들면 됩니다
왜
g 그냥 함수 시그네춰 다 해주는 건데 거기다 스트롱 타일 지금 다
끝나는 건데 그리고 시 샵에서는 성능 좋아도 없는데 왜 그걸 굳이 시간을
쳐 부어서 그런 매개로 제대로 누 것까지 유채 수 작성해야 할 말이
안되죠
자 이렇게 언어 설계가 잘 되고 그리고 정말 막으려고 하는 문제와 걸어
어떻게 풀려고 하는 헤어법 그리고 해법이 배보다 배꼽이 안 크게 하는 법
이거를 닮은 요 하드웨어 다 알아야 되고 언어나 알아야 되는거 고막에
달아야 되는 거지만 길 걸을 알면은 그 회사에 맞는 적당한 해법이 나올
수가 있어요 이런 식으로 자체의 개인적인 입장에서 이 해법이 정말
뛰어나고 내가 정말 좋아해 법이냐 아니요 저는 그것보다는 훌륭한 프로그램
아니라는 것도 좋아 하기는 해요 사실은 그러나 어쨌든간에 뭐 주니어 가
들어오면서 주니어가 뭔가를 들 망가 튀어야 되는 상황 누군가가 리뷰 10
[ __ ] 수험 상화 그 주니어 잘하면 성장을 하겠죠 그러냐
어쨌든 간에 처음에 실수를 막아주는 방언 있어야 되고 그 방어를 시스템
적으로 만들려면 이런 방식이 있다
그 방식을 보고 어떤 중요한 왜 이거 이렇게 불편할까 그 고민을 하고 아
이게 이래서 부터라고 나라 깨달으며 는 훨씬 좋아지는 중요하고 이걸
보면서 아 불편하거나 목표로 하는데 뭐 내 알 게 아니니까 사용해야지 음
이렇게 생각하면 돼
사용하다가 아무 생각없이 나중에 뭔가 좀 더 중요한 일 하라고 좀 자유를
줬어
그 순간에 딱 보게 된다면 은 이 사람은 시스템을 보면서 왜 그 시스템이
있는지 고민을 하지 않는 사람이 줘 그러면 역시 발전 가능성이 있는 지
없는 지도 알겠죠 얘기는 중구난방 적으로 많았어요
그러나 op 가 나왔던 이유 그중에 하나가 프로그래머가 다양한 것을
망가뜨리지 못하게 하는 거다 란 얘기했고 그런거를 하는 방법 중에 하나가
지금 제가 말씀드린 것처럼 굉장히 구체적인 타입을 사용하게 강제하는 것
그래서 모든 게 개체와 가 되고 모든게 클래스가 되는게 방식이었다 그거
방식이 있고 실제 대기업에서 많이 보이는 방식이고 소규모 기업 뭐 이런
데서는 좀 잘 안하는 이유가 그거 하나 하기 힘들고 이런것들이 고 잘하는
사람들 이 뭐 있는 소금만 살수록 그 성능 저하를 다리가 넘 힘든 거예요
그래서 못했지만 시샵 같은 훌륭한 언어가 있다면 충분히 할 수도 있다는
말씀을 드리게 어 저도 시도를 해보고 했다가 또 장점은 대개 받으니까
단점이 또 나오면 은 그 때 또 다른 미드를 맞는가 할게요 참고로 요것도
ux 일부 에요
내 프로그램 어떤 사람이냐 그 사람들에게 실수를 하지 않으려면 어떤
시스템을 줘야 되고 그 시스템에 제도 도울 수가 있느냐 그 사람들이
얼마나 시간을 낭비하는 야 그거 를 하기 위해서 시스템 만든 3시가 넘어
낭비하는 야 그럼 그 시스템을 만드는 사람 낭비할 시간은 어떻게 보상해
줄 수 있느냐 저는 그 해답을 코드 리뷰 복구에 거칠어 진다 라는 얘기로
쪼금은 드렸죠
어쨌든 뭐 그렇게 다양한 얘기했고 중간에 말도 엄청 빠르게 쓰니까 대충
이정도로 끊겠습니다
되었습니다
