얼마전에 알파 고 생 중에 생 중에 아니야 라이도 생방송 생방송을 할 때
그제 머신 러닝 에 기초 개념에 대한 얘기를 했잖아요
거기서 나왔던 질문중에 라이브 체에서
어떤분이 아비 isc 디스크에 대해서 어떻게 생각하냐 라고 물어보셨는데
제 처음 말 좀 디스크가 뭔지도 몰라요 비석을 차 봤어요
밴쿠버 아일랜드 무슨 스쿠터 커뮤니티
음 이거 아니면 되니까 디스크 cpu 로 가 처벌 해요
비스크 cp 를 외쳤는데 제가 라이브 한도 작가 읽어 시간이 많지
않잖아요 그래서 1일 입은 읽어보고
어 이거 제가 볼 때는 이미 쉴드 cp 와 이택수 중에 있는 아웃 오브
오더 익숙히 션 이라고 있는게 있는데 그건 한걸 다를 거 같진 않은데 그
분에게 가지는 메리트가 뭐죠
으로 넘어갔어요 그래서 이제 그 분이 비디오 아까 나중에 읽어 보게 되고
좀 자세히 비디오로 만들어 달라고 말씀을 하셨거든요
제가 그럴 일 없을 것 같아요 라고 말했는데 읽었는데 어 재미있어 그의
비디오를 만드는 거에요 그분 제가 이름은 까먹었는데
이건 말해서 정말 고마워요
일단 디스크를 말하기 전에 현재 cpu 아키텍쳐 부터 바랄께요 뭐 예전
엑스박스 360 있었던 파워 pc 이런 좀 구우 cpu 말고
인텔 같으 12 움 오히려 잘나가는 cpu 해서 이 & 똑같아요
그런 회사 보면은 cpu 에서 대 재밌는 게 뭐냐면 어셈블 4배까지
내려가면 모든 명령어가 있어요
뭐 a 를 b 옮겨라 a 와 b 를 더 해라 이 아비를 빼라 이런
명령어들 그리고 각 명령 하나하나가 실제 cpu 가 이해할 순 명령어 랑
일대일로 대입이 되고요
그 명령을 하나마다 이제 보통 빈 al 이유 라고 하거든요
그니까 뭐 산술 처리 eu 니산 산술 처리장치 그래 그럼 겠는데 더
거기서 거래 하는거예요
arb 를 더 하는거 a 에 비해 옮기는 것도 이런 것들
근데 요게 연산 따라 그 사이클이 들어갈까요 cp 가 몇 번 생각 티카
곳이 피가 되거든요
그 cpu 와 도는 사이클이 이것은 3번 싸이클이 걸리고 이건 다 오빠
사이트에 올리고 이건 캔디 어퍼 사이클이 걸리고
이런게 있어요 그럼 그걸 또 외에도 a 앞 1을 더한 다음에 씨의 놓고
c 와 d 를 더하면 시 값이 나오는데 기다려 되잖아요 그럼 사이크 2
갈때까지 cpu 는 아무짓도 안하고 멈춰요
다음 연사를 처리 못하고 그래서 그런 게 어를 이제 해결하기 위해 이런
cpu 연산 드리게 순서가 있을 때 cpu 자체 내부에서 기계의 요
기계에서
분석을 하는 거에요 여기 뭐 명령어 이렇게 그 열 개가 있는데 이 서로
간에 서로 참조하는 게 없어
그러면 이 처음 명령어 첨 10개 있는 명령어 중에 몇개를 실행하다 딱
멈춰 있을 때 이 다음 명령으로 곧바로 하고 실행을 시켜
그렇게 아 우드 보드 익스큐즈미 라고 해요 오라고 하는데
순서대로 명령을 쭉 실행하는 게 아니라 순서를 바꿔서 허로 이게 벌어졌기
팬 는 c 가 없으면 순서를 바꿔서 땅볼을 그 기다리는 동안에 실행을
시켜 준다는 게 오이 개념 이에요
아 s 박스 360의 켜기 없었어요 그래서 그래서 좀 느렸고 요 cpu
가 인텔 된 주로 있어요 그래서 아마 다 있을 거야 지금은
그래서 그런게 이제 cpu 자체에서 최적화로 나오는 거예요 기계 좀 있어
그래서
문제는 이게 아까 황씨 필요 없잖아요 cpu 하나가 아저씨 cpu 코어가
뭐 4개 8개 달려 있잖아요 4개면 은 각 cpu 가 그 일을 하는
거에요 그래서 cp 하나의 프로그램 돌 때 다른 코어는 놀고 있지 라
있더라도 이거를 보내지 못하는 거야 그래서 같은 cp 요철 병목 있고
다른 건 넣을 수가 있다
이걸 고친 게 비스 커요 그래서
디스크에 개념 뭐냐면 약간 소프트웨어 레이어드 하드웨어 더 있는데 가장
간단하게 말하면 거예요
프로그램의 각 돌려요 그러면 이 프로그램이 곧바로 이 코코 영 방 에서
실행되는 게 아니라 실행이 되는데 뭐 일단 모아 카페 앞에 10개 얘기한
거 있잖아요
위의 5개를 코 영광이 실행을 하다가 담고 2 스토리 되고 있는데 다음
걸을
돌릴 수가 있어 독자적 으로 그러면 이것을 다른 cp 해주겠다는 거에요
그니까 한마디로
아 인스트럭션 단위의
음 찹 시스템 이라고 하죠 그게 맞는것 같아요 그렇게 보면
그럼 이제 얘 내가 말하는 것의 장점 뭐냐면
그러면은 cpu 가 이제 여러 개로 분산이 되기 때문에 올해 속도가
빨라진 다 맞는 얘기에요
이게 지금은 cpu 아키텍처 로 나와 있고 이 아키텍처를 만든 회사
이름을 제가 지금까 먹었는데요 적어 놓은게 있을 거야 그래 지금 이게
스타트업에 회사고
음 잠깐만요 5
안쪽은 나 만족 않네 그래서 결과적으로 얘네 가려는 게 뭐냐면 아키텍쳐를
만들었고 이 아키텍처를 이제 라이센싱을 주겠다는 거에요
arn 회사가 그렇듯이 그래서 amd 에서 투자를 했고 삼성에서
투자했다고 알고 있고 그 자기네가 쓰려는 거죠
근데 인텔은 주자나 있어요 제가 부터 인텔은 비슷함 을 들고 나올 거에요
이 정도의 개념이며 못뜨고 나올 리가 없어요 그래서
이거에 개념은 한마디로 모든 cpu 코어를 하나로 보자
근데 하나로 볼 수 있는 방법이 두가지 방법이 있겠죠
첫번째는 기존에 존재하는 그런 소프트웨어 라면은
아우름 오더 인스트럭션 하는 것처럼 분산을 시키고
소프트웨어 있기 때문에 그 분산하는 것은 조금 드릴 수도 있는데 결국에는
남아있는 al 이라던가 싸이클 더 많기 때문에 더 빨라지는 얘기 구요
두번째는
자체 컴파일러 건 이미 있는것 같아요 그래서 프로그램을 이제 컴파일 할
때 보통은 뭐 인텔 x86 용 으로 x64 용으로 컴파일 하잖아요
그걸 떠나서 이제 얘네 디스크 용으로 컴파일 하는 컴파일러 나오겠죠
그러면 그 아까 말한 그 dt 에디션은 뭐 소프트웨어
버추얼 하드웨어 이건 있자나요 그 글에 이어 르 좀 될 쓸 수 있겠죠
알아서 분사를 시켜주고 중간에 베리어 걸어주고 잡을 수 있겠죠
그래서 그런 면에서는 이게 분명히
메리트가 있는데 여기서 두 가지 주의해야 될 게 있어요 두가지
아 그전에 얘기부터 제가 옛날에
언제나 그 얘길 했어요 세상이 완벽해 따면 프로그래머는 절대 멀티스레드
멀티 스레딩 을 할 이유가 없다 라고 그 이유가 뭐냐면 저렇게 멀티
코어를 쓰려고 어떤 얘긴데
이제 멀티코어 쓰고 멀리 떨어진 하다 보면은
2 레이스 컨디션 있잖아요 마 콕스 레드 0에서 편수 이고 최대 스레드
ps 변수에 것처럼 누가 먼저 덮었습니다 살라미 뭐 이런것들
그런 현상이 없기 위해서는 양 싱글 코어 로 가면서 모든 것을 이제
술사들은 시간을 쉬워 하는거죠 너는 요만큼 시간 숄더 실행하고 동시에
실행되는 건 없어요 이 다음엔 2 가 실행되고 다음에 니가 진행되고
이렇게 하는데 시간을 잘게 잘게 잘게 쪼개면 멋들어진 같아 보이니까 그게
자바스크립트가 도는 걸리기도 하죠
그 저는 그렇게 되는게 맞다고 하는데 그게 안 된 이유는
하드웨어의 발전 입 불가능 하니까 더 이상 cpu 클럭을 높이는 게
불가능 하잖아요 물리적인 1j 원리 물리적인 원리 때문에 그저 과학계에서
얘기하는 물리적인 한계점을 갖고 그 다음부터 코어를 던지면서 사람들이
싱글 스레드로 코딩을 짜는 습관을 머스터드 로 바꿔야 되는데 그래서 그
잠깐을 좀 힘든 기간이 있었고
전원 자에게 급료 그건 9세는 완벽해 뜨면 멀 3d 는 절대 필요 없다
근데 이 비스크 라는게 그걸 갖다 줄 수 있는 거기에 해요
디스크가 들어 오면은 그런 코어 간 의
그 뭐야 프로그래밍 불리는 비스크 레이어가 해주는 거기 때문에
하드웨어에서
프로그래머는 재중이 쓸데없는 거에요 그냥 모든건 싱글 스레드 짜 버리면
되는 거야
싱글 세드 란 말이 좀 웃긴데
싱글 코 그러자 9 스레드는 여러개 나올수도 있어요 근데 동시에 실행이
안되면 되는 거에요 사실은 뭐 그 타임 쉬어야지요 그래서 뭐 뭐 그렇게만
되면 되는거고
oss 아예 그가 뭐라 그럴까 웨이스 컨디션이 안 나게 막아 줄 수가
있는 거죠
어떤 의미도 모든것을 일직선을 실행해 주고 코 1 에서만 실행하고
이걸로 분리해 주는 게 전부니까 그렇고 그 안에서만 실행하게 되면
되는거예요
그런데 이거 주의해야 될 게 뭐냐면 아까 두 가지 있다 그랬죠
첫 번째는 아궁 피 스 크 에 싫고 프로그램을 집어넣으면 빨라지게 거야
아니에요 왜냐하면 이미 싱글 코 프로그램은 이미 싱글코어 체험하며
나왔어요
신규 코에 돌린다 엄청 느린데 훨씬 코 돌리는 프롬 적다고 먹거든요
그거를 단지 비스크 된다고 해서 빨라지지 않을 거 같아요 물론 가끔 정말
엄청나게 드리는 것도 몇 번 봤어요
그런거 달라지겠지만 일반적으로 게임 같은 경우는 2 싱글 코어의 나왔다면
실리콘의 잘 보니까 나온 거예요
그런게 아니라 뭐 가끔 포토샵이나 이런거 신코 에서 뭐 엄청 써도 느린거
그런거는 빨라질 수 있겠죠
몹이 조회수 열린 그도 그렇고 그 정도
두번째
과연 디스크를 쓰면 은
멋이 트레이딩 하는 것보다 빠를까 인텔 칩 3 에서
아니라고 봐요 이게 재밌는 게 뭐냐면
제가 좀전에 프로그래머는 완벽한 세상에서는 절대 멋스런 코드를 짤 필요가
없다고 했죠 근데 그 완벽한 세상이 아니에요
누군가가 이 밑에서 저희가 할 일을 대신 해 줄 뿐이에요
중요한 것은 이게 절대 저희가 직접 호수 가 몇개인지 봐서 그 코에 딱
맞춰 갖고 메뉴라 이 코딩을 하는 것보다 성능은 느리게 나올 수밖에
없어요 왜냐하면 이것은 보다 범용적인 시스템이고 자기가 이제 실행중에
막아내야 꼬마 이렇게 찾아야 되는 건데
저희가 직접 짬을 저희는 미리 코드 하잖아요 프레드 4개 있으니까 4개의
분리해서 내리면 이렇게 잡 시스템 안에 꼭 돌린다 이런식으로
그래서 빨라질 수 없는데 이걸 어떤 개념으로 봐야 되냐면
생산성
실제 프로그래머가 멋있을 헤딩을 직접 손으로 짜고 카드 해가 어떤건지
고민 할게 적다면 코드를 대충 싱글 스레드로 짝 어린 다음에 cpu 가
이것을
비스크 cpu 가 알아서 처리하게 만들어주면
그리고 이게 충분히 빠르다면 그렇게 느리지 않다면 그게 왜 최적화를 더
심했을 일은 없잖아요
그럼 그 순간에서 아 옛날에는 이 단순한 구하기 위해 엄청난 머스터드
해야 했는데 지금은 안해도 돼
이런 개념으로 갈 수가 있는 거죠 그러면 생산성 이라는 측면에서는
좋은거죠 그래서 그거는 무시할 수 없을 것 같고
극우 과연 디스크에서 그렇게 내가 직접 메뉴라 게 멀티 스레딩 멀티코어
올 수 있는 기능을 줄 지는 모르겠어요 주면 좋겠죠
네 그건 잘 모르겠어요 그래서 그 정도 9 그래서 성도는 절대 인텍스
보다 빠를 수 없다고 봐요 당장 으로는
뭐 나중에 더 그럴 거 같고 그냥 막자고 상관이 없는 그런 cp 가 좀
나온다는 건데
또 이제 뭐라 그럴까
그래서 제가 잠깐 찾아봤어요 그 * 오래 보진 않았고 전 몇시간 본건
아니고 잠깐 해봤는데
그래서 어절 때 성능이 뺄 수가 없는데 왜 봤는데
결과적으로 내가 프리젠테이션 한 게 있잖아요 거기서 나온 것은
성능 진행 빠르다고 나오는데 그 기준이
절대 성능이 아니라요 와트 소다가 전력 소모 다 성능이 빨라요 그러니까
뭐라 그러나 똑같이 막 파워를 뭐 쓸 수 있는 최고 파워 쓰면서 돌리면
제가 볼때 인텔이 빠를 것 같고 똑같이 1 와트 를 쓰나
이렇듯 을 쓸 때 과연 어떤 시킬 것 아마 빠른 야
그럴 때는 디스크가 빠르게 나와요 이제 퍼포먼스 벤치마크 로는 그런데
그건 자체 벤치마크 고 자체 칩도 없죠 그래서
근데 그래도 저는 그게 당연하다고 보고 그래서
왜냐면 하냐면 멀티 코 cp 가 들어가는데 코 하나에만 절여 놓고 하나면
다른거 전력을 별개로 좀 한다는게 좀 애매 하잖아요 사실은 그렇게
효율적인 것 같지도 않고
그래서 코가 하나가 만땅 이더라도 따른 코드 적당히 돌고 있다고 보거든요
마트가 그래서 거기 낭비하는 있는걸 b 스칸은
그 점이 다 분산 되는거니까 왠만하면
비슷하게 와트를 전부다 분산을 시키면
모든거 가 100% 거의 활용되고 있다고 보기 때문에 그것때문에 빠르다는
얘기죠
베이커 때문에 전력 소모가 적다는 점이 줘 그래서 지금 amd 나 amd
는 이제 인텔의 원한 밀리고 있기 때문에 어떻게 들어가고 있는 것 같고
삼성의 거기에 지금 돈을 투자한 이유는 제가 볼때는 모바일 쪽 cpu 에
관심이 있어 것 같긴 해요 그래서 그런거 같고
2 비스크 란 시스템의 설사 범 영화 되고 누구나 쓰는 시스템이 되더라도
제가 볼 때는 당연히 인텔 쪽에서도 뭔가 비슷한 걸 만들 테니까 이런
방법이 다음세대 할 방법이라고 생각을 해요
최선아 o 에서 지 내가 전문사 라는건 만큼이라도
그렇게 되더라 고 해도 이게 모든 cpu 를 교체하는 데 걸리는 시간은
1
심령 더 걸릴 수도 있고 10년이 걸린다고 거죠
그 10년 동안은 비스크 검으로 막고는 못하 요즘 신경 써야 되요 코드를
못하거든
그럼 과연 우리는 어떻게 해야되냐 아직까지 머쉰 따로 팔 거니 야 그럼
나중에 또 트랜 쉬멜 또 괴롭지 않아요 그래서 제가 생각하는 가장 좋은
방법은 제가 예전에 한번 말한 것 같은데 이제 시샵 을 쓰시는 분이면
패러럴 코어 베이어 시스템이죠
까자 pu 만들어 놓고 모든 쓰레드가 4개면 스웨덴의 개혁을 리스트를
만들어 가장 리스트를 그리고 쫙 돌린 다음에 끝내 때까지 기다리는거
그거도 가면 요
아 그게 잘 알꺼 같아요 왜냐면 그게 cpu 가 1 면은 그거는
추를 한 알 거 같거든요 씹히고 내게 매개를 뽑아주고
로 이제 10볼 17도 그게 들어와요 이제
그래서 그런 개념 배리어 시스템 잡 시스템 태스크 시스템 거죠
그걸로 가면 요 컴파일러가 까 비스크 하고 cpu 가 2개가 들어 올때면
컴파일러는 뭐 척 저스틴 타임 컴파일러 든
뭔 유비의 미드 그 뒤에 배경이 뭐냐 에 따라 그걸 자기 내가 알아서
판단할 수가 있잖아요 제가 비스크 면은 일부러 싱글 코어 건너에 디스크
핫하게 막 바뀌는 맞기 던가
인테 멀티 코믹 멀티 코로 벗어 4개를 따로 돌리 던가 어제 베리어 는
걸리니까 마지막에
그런 식으로 cpu 하고 컴파일 컴파일러가 그 일을 담당하게 해주고
그럼 나중에 이 코드는 비스크 아들한테 가야 제대로 작동한다는 이제
생각이거든요
그래서 정말 미래의 대비해서 코딩을 짜는 사람들이 라면은 그 성능
상으로도 지금 잡 시스템 훨씬 빨라요
이 잡 시스템을 좀 더 많이 쓰도록 권해드리고 싶어요
이거를 좀 많이 써 주면 미래에는 코딩을 바꿀 이적을 거에요
1 2 1 뜰에도 뽑았고 하는게 필요한 경우도 있죠
아 안 할 수 없는데 그런 경우가 아니라면 잡 시스템을 진짜 많이 쓰도록
하세요 그러면 프로그래머 입장에서는 10년 동안 그러면 하이브리드 르
내부에요 내가 하는게 아니라 돌다가
모든 게 비스크 로 넘어가면 그 때는 그것을 걷고 싱글 스레드로 바꿔도
그때 바꾸면 되니까
않아 안 바꿔도 성능은 똑같으니까 어이 그게 맞는거 같고 제가 생각하는
디스크는 굉장히 좋은 아이디어 고
미래 내리게 할 것 같고 비 스 케 생 자가 누가 될지는 저는 감히
예측할 수 없어요 전력으로 봤을때는 뭐 arn 이라던가 이런 회사가
당연히 잘 갖고
순수한 성능만 으로 봤을 때 저는 인텔이 결국 훨씬 나아질 거라고 봐요
제가 나중에 언젠가 만든 비디오 지만 그 전 테크 회사를 볼 때 큰
회사를 볼 때 주로 그 미스터 치파오를 보거든요
인 테마를 의사 지파로 갇힌 회사가 별로 없어요 사실을
그래서 amd 드 처음에 막 나왔을 때 막 뜨고 엄청 인기가 많았지만
카드 엔지니어들이 am 되고 인텔 칩셋 디자인 보면은 그때부터 예측을 했
거야 15년 전부터 10년 전인가 10년 전 10년 전부터 예측을 했어요
제가 나도 엔지니어가
얘 md 하드웨어 엔지니어링 딱 한번 보고 디자인 보고
입히는 필요가 없는 건데 왜 만들었지 이런건 엣지 라고 보고인 태그 보다
좀 필요 없는게 없군
인텔이 결국엔 일 거라고 했거든요 그런 개념에서
인텔은 이 새로운 아이디어가 뭐 당연히 뭐 특화 걸리겠지만 비슷한 다른
아이들을 찾아 갔고
이거를 더 낮게 발전시킬 것 같아요 그래서 두 가지 패러디 이 패러다임은
결국에 존재할 것 같고
그건 좋은 아이디어 고 미디어 내일로 갈 거라고 봐요 일단은
어 근데 누가 승자가 될지는 가늠하기 어려운 데 저는 성능 상으로는 인텔
전력상 으로는 애매하다 이은 지정 도구
어 프로그래밍하는 자세나 아까 말씀드렸죠
어이 이거 의 준비가 되는 프로그램 하려면 가능한 패러렐 없고 뭐 잡
시스템 데스크 시스템 베리어 가 이걸로 주로 가시길 바라고 그 정도면 은
제가 비스 클 잠깐 보고 나서 제가 여태까지 믿고 왔던 가치관 제가 뭐
이렇게 주장했던 거랑 맞는 부분이 이렇게 합쳐 하고 생각하게 그 정도에요
어 저는 당연히 이게 완벽히 메인스트림 들 때까지는 이고 전문용어로
코딩은 안 찰 것 같아요
어 아니메 제가 급 해야 될 일이 있지 않는 이자
으 돈 받으면서 써 9 정도고 음 저는 편하도록 했을 거야 에 뽑혔습니다
