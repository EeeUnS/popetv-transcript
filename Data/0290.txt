얘 안녕하세요 버프 입니다 오늘은 무슨 얘길 해 볼까 고민을 하다가
예전에 저희 자 이제 안 저번주에 제가
op 에 대해서 얘길 한 김에 똑같은 개념 오리 z 동맹 드립은 디자인에
대해서 얘기하려고 해요 기기라고 많이 하는데 아 솔직한 얘기로 이제 뭐
제가 도메인 드립은 디자인을 소개하고 싶은 마음은 아니고 제가 이제 웹
회사 쪽의 제대로 가서 일을 하기 시작을 했을 때 거기서 그 배들이
이렇게 도메인 드림은 디자인을 하겠다고 굉장히 많은 일들을 하고 있었어요
아 도인 티브 디자인 있고 뭐라 그럴까
굉장히 대단한 것이 있는 것처럼 게요 저한테 그랬었는데
저는 문제는 도메인 드린 디자인이 문지를 그전에는 전혀 모 들어본 저도
찍게 없었고 관심 덮었어요
그래서 아 뭔지 모르는거니까 아 이게 뭘까
잘 모르겠다 그런 생각이 들면서 으 뭐라 그래 그 나중에 뭐 별정 을 뭐
이게 과연 정말 나쁜 건지 모르겠는 거예요 들으면서
모두가 제대로 설명해주지 않고 도민들이 번지지 아니라고 하면서 코드를
보여 줄 다 이런거구나
그래서 뭔가 좀 이상한데 왜 이런걸 할까 라는 고민을 좀 많이 했어요
사실을 그러다가 나중에 졌죠 미제 브레드를 이끌고 이라면서 제대로 좀
보고 애들을 실제 도메인 드리면 디자인 어떻게 한 지도 보고 뭐 계획에
유명하다는 책도 읽어보고 그 강의도 한 번 보면서
그때부터 의 도메인 들이 문의 대학의 아 이런거구나 라는 개념이 잡혔는데
그 개념이 잡히는 잡히도록 어 이거 뭔가 좀 이상하다 생각이 더 많이
들었어요 사실은 왜냐하면
붐에 인들이 군 디자인 이제 정확히 뭐냐 라고 얘기 라며 는 음 그
동맹인 이 문제라는 좀 이해가 되 걸 내게 웹 폼의 이런게 아니라 도덕
그런거 있잖아요 내가 으 이 회사에서 50년의 이라며 이런 제품을
만들었으면
제가 그 제품에 대한 이해가 되 게 없잖아요 그런 거를 이동 메인
지식이라고 많이 해요 그래서
음
그 어떤 어 비즈니스에 맞는 프로그램 안들 때도 그 회사가 도는거 에
대해 토메이 날리지 가 있거든요 그 동맹 지식이라고 근데
년을 더 제가 무슨 아 애견샵 을 운영한다 그러면서 애교살에 구축해 는
시스템이 있잖아요 고 판매 시스템 이라며 결제 시스템인 언어로 고객과의
시스템
이런 것들은 할 때 우리가 고객 관리를 어떻게 하고 우리가 실제 판매를
어떻게 하고 이런 비즈니스 쪽에 대한 지식이
도메인 지식 인데 그걸 알리지 못하면 은 그거에 맞는 제품을 만들기가 좀
어렵다는 것에 시작을 하는 것 같아요 전 제가 그러면 그런 도메인 지식을
가지고 그 톰 앤 지지 이글 중점으로 해서
서비스를 만들어라 이런 개념이 에요 그래서 뭐 이 그전 예전에는 분명히
즉 된 이게 결론부터 말하면 저는 그 op 랑 굉장히 비슷함을 봤어요
오브젝트로 렌트도 의 디자인 이라는 것도 오브제 토리 nt 드 프로그래밍
ioe 오브젝트 오리의 ddns 센 디자인 이런게 보통은 현실에 있는
우물 차례 가져다가 그거하고 만 맞게 비스타 등 프로그램 안들면 은
그만큼 프로그래머가 2 개 차라 그러죠 물체를 이해하는 데 도움이 되고
그래서 그거에 맞는 비애를 좋게 로지컬 하게 만들 수 있고 에너지 코럴
이라기 보다는 좀 상식적으로 누가 들어 같은 상식적으로 아 이게 구나
보이게 이거구나 볼 수 있는
그럼 오브젝트 만들 수 있고 그거에 대해서 그것을 추천으로 크고 네임
하다 보면은 직접 받았다
이런 개념 이었어요 제가 볼땐 근데
도면이 들여온 디자인도 되게 비슷해요 원하는 많은
그래서 그거는 거라고 그러면 이제 도메인 드림은 디자인이 왜 이게 굳이
나왔을까
저는 그 생각 되게 열심히 했거든요 결국 오피 란 게 비슷한 개념인데 왜
이걸 굳이 d 라고 따로 뽑아서
이걸 굳이 하면서 어 이게 왜 좀 약간 그런 느낌의 제가 신처럼 모시는
느낌이 게 제가 전에 뭐 잡아줘 신자인 은 미리 부풀리기 했잖아요 무슨
특정 언어 신자라고 해서 아니면 특정 뭐 빗발 하던가 보 이런 거에
대해서
저정도로 이것을 광신 하고 맹목적으로 추정 할 이유가 있나 라고 생각이
들 정도로 좀 범인을 많이 했는데 제가 이제 그 때 데이터베이스 프로그램
얻으라고 좀 많이 해 보니까 이해가 되더라구요 조금씩 왜냐하면
즉 소프트웨어 엔지니어 왼쪽으로 한 사람과 달리 짐이 쪽을 많이 다루는
엔지니어들을
그 세상의 모든 기본을 기로 생각을 해요 그 db 에 들어가는 이제 그
관계 영입에 들어간 어떤 지도 몰라 이제 전인 나도 말라 요놈 하나이죠
주니 족 을 많이 하잖아요
엄청 된 거 굴리다 따른 탭을 넣고 꼬리 키로 연결하는 이런것들
그런거를 받아보니까 모든 프로그래밍을 그 데이터베이스 테이블의 맞게
만드는 거에요
그러다 보니까 예를 들면 제 5편 제가 예전에 컴퍼넌트를 하는게 좀
달아줘 얘기 많이 했잖아요
그런 컴포넌트 하나하나를 따른 개체로 보고 그거에 대한 프로그램의 막자는
거에요 이걸 하나로 오는게 아니라 그래서 이 모든걸 하나라면 1st
도메인 1한 게임 솔직히 나오거든요
그렇게 해서 이제 오브젝트 개념이 듯이 동행 개념으로 만들기 위해 그것을
주장하기 위해 만들었더니 디딘 것 같고 그래서 오히려 즉 db 쪽
프로그래머가 아니었던 전화 체에 이제 예전에 같이 동료들은 gd 를
몰랐던 이유가 아마 그게 aop 란 개념을 이 적립이 되어 있었고 데이터
스토리지를 어떻게 하는거에 대해서 문제는 주로 뱀 오리의 꿈 어디 비해서
청 노을로 피규어 이걸 뭐 뭐지 도 말라 주의하고 말게 이거 유지하고
이런게 없었기 때문이었던 것 같아요
그래서 결과적으로 제가 느꼈던 것은 아직 및 이나 오비가 되게 추구하는
과 비슷한데
gd 는 이제 집이 프로그래머 니까 어찌보면 해지 소프테니 길 왼쪽에
대한 개념이 자 없었거나 아니면 그냥 데이터 위주로 코딩할 때 사람들을
위해 나왔던 op 의
약간의 a 장 느낌이 오고
들이 재미있는게 전적으로 느낌 4 그래서 지디가 op 보다는 덜 알려진
거구나 생각이 들어서
gd 책을 찾아 봤어요 왜냐하면 얼마나 책이 있을까 되게 유명하지 뭐냐
있어요 dd 로 계속 거니 있게 하시는 분 그분 책이 하나 있고 제가
아무리 dad 책을 찾아봐도
아마존에서 그때의 en 집인데
뒷 이 책으로 찾을 수 있는 책이 5번이 안됐어요 사실은
그래서 그만큼 좀 아 뭐라고 까지 dd 를 다룬 책을 쓴 사람 다섯명이
않던가 뭐 저도 되게 적었어요
여러분께도 아닌데 보면서 아 짓 이란 게 아 이게 어찌 보면은
약간 작은 인도 작은 인 억제하거나 어려운데 특정 인더스트리 해서
여태까지 겪어왔던 문제점을 해결하기 위해 오피를 제 포장해 쭉 내놓은
감이 있구나 라는 생각이 들어서
약간은 좀 사기 치는 거 아닌가 라는 생각이 들었고
왜냐면 내가 op 라 한다 그러면 이제
사람 들어 이미 다 있는것 이건 뭐 새로운 걸 얘기할 거야 그렇지만
새로운 다만 어떻게 돼야 이러면 것 이라 대단한거 하는구나 라고 생각할
수 있거든요 그래서 그렇게 하다가 너무 이제 그래서 뭐
도메인 질문지 전에도 많이 하구 막 이랬는데 결과적으로 느낀 건 뭐냐면
정맥내 드림은 디자인해서 한가지 정말 좋았던 점은 있어요 그러니까 뭐
필요하다 비슷하고 뭐 하고 뭐 이런 얘길 떠나서 op 프로그래머 더 잘
생각하는 한가지 좋은점은 뭐냐면은
톰의 인들이 분 디자인은 아 뭐 변수 이름을 짓거나 테이블의 이름을
짓거나 컬럼 이름을 칠 때 db 에서
거기 쓰는 용어들 있잖아요 뭐 클래스 이름 지을 때도 그 용어를 실제
비즈니스에 쓰고 있는 용을 쓰 다 그래요
예를 들어서 제가 만약에 물건을 받아다가 대파는 직업 뭐 쇼핑몰이 나
이런거 라면
쇼핑몰의 물건을 제공하는 사람들을 두 가지로 부를 거에요 하나가 써
플라이어 가 있어요 그러니까 써 플라이 서플라이가 제공한 하니까 그리고
또하나 벤더 라는게 있어요
벤더는 이제 보통 붉은 제작하거나 메뉴 따처럼 도 있어 세 가지 용어가
있는데
비즈니스 따라 그 나한테 그냥 물건 떼어다 주는 거니까 도매상 소매상
때어 줄여 내들은 밴드 라고 부른 애도 있고 서플라이 라고 분해 어딨어
이 두 용어가 되게 문제 되거든요 그래서 안 우리가 뭐 프로그램은
생각하게 된 이유가 마저 라고 주장하기 보다는 그냥 시리즈 피지의 쓰고
있는 용어를 써라
그렇게 돼야 나중에 캔 애들한테 또 추가적으로 리커 m 어떻게 더 링
하거나
아 모스펫 뽑거나 이럴때 요가 통해 돼서 되게 편하다 라는 식으로 얘길
했는데
적다는 얘기가 되요 그래서 그분은 저도 되게 이렇게
그 전에 그렇게 많이 생각하지 못했던 거고 제가 비즈니스 담담 하고 많이
얘기 해 본적도 없었고 그리고 프로그램하고
프로그램 용어 제대로 정립하고 말할 때만 이렇게 말하면 돼지 라는 생각도
있었는데 어찌 보면 그렇게 탑 으로 인해 이 백그라운드 다 모르는 따른
8 오랜만 악인의 들어와서 그런 비즈니스 사람들하고
아 딜링 할 때 아 뭐 얘기하고 이럴 때 분명히 에로 사항이 있을 거에요
그래서 그런 부분은 좀 괜찮다고 생각을 했고 그것이 도메인 드문
디자인에서 이제
op 랑 똑같이 oo 2d 랑 똑같이 디자인할 때 한번에 디자인 잘
나오지 않아요
당연히 여러분 디자인 해야 되고 뭐 패턴 처럼 이렇게 이번 이렇게 했는데
저건 저렇게 해야 되는 약간의 있는데
워낙 그 뭐랄까요 춤 수 테크가 아니라 비즈니스 소포 타는거 면은
논리적으로 말이 안 때로 응가 프로세스를 있을 수밖에 없어요
땜빵 치기 처럼 했던거 그걸 바꿀 수 없다면 결과적으론 그거를 맞추기
위해 여러분 디자인이야 되고 처음에 맘에 안들어도 기장이 갈아엎고 이런
일 있거든요 그래서 어
심지어는 그 ddd 뭐 강사들이 나 뭐 책 쓴 사람도 몇 번이나 그래요
이렇게 뒤를 한번 양이 되게 어렵다
여러분 것이 생각해라 그래서 그런 얘기를 해요 그리고 집이 뒤에서 또
한가지 약간 맘에 들었던건 은 음 그 거에요 그 모즈
맘에 드셨다니 보다는 외적 오피 같은 경우는 상속이나 재활에 함성을
위해서 공통된 데이터를 공유하는 걸 되게 중요시 하잖아요 근데 o 그니까
d&d 에서는 그것보다는 도메인은 분리를 되게 중 시에 예를 들어 서울의
커스텀 아가 있고 페이먼트 가 있으면 이 커스터머 다 페이먼트 둘다 유저
정보가 들어갈 수밖에 없잖아요
근데 유저 정보를 한군데 2구역 이를 가져오는 방식이 아니라 테이블
두개를 분리해서 여기도 유저가 있고 여기 대 유저가 있으랴 그래요 그래서
여기에서 컷을 연번 여기서만 쓰고 여기서는 여기서 맞서라
뭐
약간 뭐라 그럴까 그 당시에는 조금 더 말이 됐던 것 같기도 해요 뭐
유저정보 보자 1d 있었고 기타 정도 있었는데 아 요즘은
뭐라 그럴까 약간 마이크로 서비스가 다시 뭐라고 부각을 받으면서 이 전부
케이블 분리 가 좋긴 좋은데
유저 정보를 어차피 관리하는 마이코 서비스 따로 만들고 그 안에 모두
정보가 있다라는 그런 개념으로 하기 때문에 뭐 dd 에 의해서 말하는거
란 크게 다른 것 같진 않지만
d&d 에서 말한 것보다 미 약간 좀 한 서비스가 하나만 책임진다 라는게
좀 더 강해지는 것 같아요
그리고 페이먼트 할 때 거의 유정 거로 보고 그 뭐랄까 좀
주 클릭해 노란 얘기도 있지만 어떤 의미에서 미 유저가 정지된 유저라면
들어가지고 이 서비스를 히트하고 다시 새로운 규정을 받아와야 되거든요
때때로 써 그런걸 따지면 은 뭐 데이터에 결국에는 뭐랄까
으 차우 유우가 그 라이트 폰 오너라 그런데 뭐라 그러지
그 이 데이터가 정말 옳은지 틀린지 를 유일하게 검증할 수 있는 그런
서비스는 하나가 될 것 같고
정말 그 데이터가 템포러리 하게 임시적으로 딴데서 필요한 회복하여 쓸 수
있겠죠
보덤 d&d 에서 말한 그런 부분도
마이크로 서비스가 되돌리기 전에는 좀 좀 많이 따라갔던 것 같은데
마이크로 서비스가 되고 되면 얇다는 다시 조금
그렇게 심각하게 하지 않는 부분이 아닌가 싶어요
그리고 이것은 분명히 j 뒤쪽은 아닌데
dvd 를 하는 사람들은 대부분이 있습니다
그 서비스 하고 미포 개념을 쓰는것 같아요 이제 뭐 서비스는 이제 우리의
대해서 계속 위한 프로그램 에서 호출되는 서비스 같은걸 줄이야 유저를
클링 테란 유저를 아 뭐 정보를 단락 이런거 고 교 하는 말 그대로
서비스의 만담 강을 하는거고 실제 리퍼를 따로 분리해서
일이 폰은 저장만 관련 하는거예요 저자 그러니까 일이 포가
집이 가해 더빨리 됐든 리퍼로 여러개 만들수 있고 그건 박하 바꿔 끼는
것 만으로도 서비스 리퍼는 분리될 수 있기 때문에 따로 할 수 있다 라는
개념으로 서비스 2% 분리하는 패턴이 되게 많은데
마이크로 서비스가 는 개념에서는
초 일찍히 그렇게까지 할 이는 많지 않아요 왜냐하면 마이크로 서비스
자체가 그 서비스가 굉장히 많은 일을 하지도 않기 때문에 서비스 산업
2부 1 의 개념이 되게 많고
그렇기 때문에 그것을 서비스 꿈 가르다 보면 오히려 생각 이상으로 되게
복잡하게 가는 경우가 많아요
그러니까 전에 말해도 인터페이스의 남 영웅에 대해서 얘기 했던거 로
비슷한 것처럼 어차피 인플레이션은 한데 윈터 되지만 느냐
거의 그 개념으로 갈 가능성이 있기 때문에 마이크로 서비스 쓰면 오히려
미포를 곧바로 히트하는 경우 되게 많아요 서비스 레벨에서
그런데 동맹인 들이 분지 자인
이 만에 얘기도 아니지만 서비스인 퍼 의사가 잘했던 건 뭐냐면 그 의미도
우크라 는 개념이 있어요 예를 들어서 우리가 db 가 여러 개가 있으면
아 어떤 오퍼레이션 하야 이 db 에 뭐 썼다가 이걸로 적게 옮겼다가 뭐
햇다가 뭐 읽다가
저장하는 끝인데 근데 문제는 주당 2 까지 가는데 살 단계에서 에러가
나고 이거 조장으로 됐소 그럼 처음 주 단계도 뻑이 나 정사 이거든요
그럼 이걸 하라 무거워 이게 사실은 한번에 끝나야 된 아톰이 오퍼레이션
같은 거니까 망하면 가치만 해라 라는 개념의
이제 아 뭐랄까 어찌보면 익셉션 세이프 프로그램의 어떻게 비슷한 개념
이에요 그래서 그거를
많이 추구했고 솔직히 굉장히 좋은 아이디어 요
그래서 그 부분에 대해서는 높게 사는 데 생각보다
프로그램적으로 계신 모 그거를 되게 간단하게 할 수 있는 부분은
없어요 유일하게 할 수 있는 부분은 데이터베이스 트랜잭션 쓰는 방법이에요
그래서 그게 가장 잘 간다는 건데
정확히 게 뭐냐면
제 제가 예전에 익셉션 3일 프로그래머 되게 하기 힘들다 그랬잖아 사실은
생각보다
근데 이걸 가 db 를 아마 도입하면 제가 되게 편해진다 고 얘기
했었던것 같아요 뭐냐면 첫 유저 시작한 다음에 db 오퍼레이션 막 해요
그리고 마지막에 커밍스 라는 거야 그러면 이게 한꺼번에 쭉 검시 되거든요
근데 그게 중간에 빼 라면은 롤백을 하면 되요 그럼 여태까지 했던 것들
난 원래 지켜줘요 db 해서 더 db 라는 게 어찌 보면 은 현존하는
기술 중에 가장 투표 난게 줄 정말 제가 현존 한테 극히 좋았을 때 즉
가장 안 깨지는 소프트웨어 비스를 제가 고르라면 db 를 몰라요 가장
튼실하게 만들었고 몇 십 년 동안 이미 뭐 경험으로 버틴 그럼 제품이고
제가 어떤 스팅 을 구축할 때 도 딴건 다 깨질 지 몰라도 db 는 가장
늦게 깨진다고 얘기 하거든요 드디어 막이 낫다고 그래서 그럴 정도로 db
는 솔직한 얘기로 그만큼 잘 만들어 놓은거 찾으시면 뚜렷하고 그래서
오히려 데이터베이스 쪽에 저장하는 프로그래머 들으니까 노씨 콜 말고 그
관계 0
it's 액션 개념 때문에 그 익셉션 cf 1 프로그램을 굉장히 자기가
쉬 워즈
그래서 그거는 되게 좋은거 에요 자세 그리고 제 기억으로 wcf 도 이런
식으로 많이 만들었고 그래서 wcf 가 사실은 현주 라는 모든 언어 웹
패러다임을 10
뭐라 그럴까 갈아 엎을 만한 새로운 언어 였거든요 근데 뭐 이제
아
비즈니스 적인 문제 때문에 이제 마소가 열심히
애조를 미 기 때문에 떠돌이 싶을 아니고 있는것 같은데 그래서 죽을 거
같긴 한데 그 좀 아쉬운 부분중에 하나죠
그래서 스스 근데 중요한 건 이런 처장 기반으로 뭔가 하는게 정말 아까
말했던 동 외인들이 혼 디자인 정도가 갈 때 좀 복잡한 서비스의 패턴이
수밖에 없거든요 는 그 도메인 자체에서 하나의 봄에 를 관리하는 서버
같이 함께 많은 일하기 때문에 그때는
이런거를 많이 해먹게 이해가 되고 정말 올바른 방법 이었어요 근데
마이크로 서비스로 가면 갈수록 이 서비스가 해야 될 일은 굉장히 단순해
줘요
그래서 이 서비스 1 다할 때 결국에 데이터를 저장 하는거에 돼야지
그러고 있었어요 그 db 가 들어간 마이크로 서비스 에선
익셉션 이 났을 때 뭐 상태가 이상하다 는 것은 변수 라기보다는
결과적으로 데이터의 문제거든요 데이터베이스 드러내 테니까
금 기회가 어느 순간에 뻑이 나도 문제가 없을 정도로 고치려면 어떻게
아니라는 그 질문이 나오잖아요
생각보다 마이크로 서비스는
상 그 a 탈 상태가 바뀌는 게 기껏 해봐야 1 준 3번 많아봐야 맑고
속에 3번 호주 들어올 때마다
그렇기 때문에 거기서는 차라리 지비츠 렌즈 소니 없을지라도 익스펜시스
프로그램을 하는게 그렇게 에러 어렵지는 않아요
이제
그리고 마이크로 서비스는 기본적으로 되게 깊이 간
낫죠 함 소체 깊이가 처음 리 커서 들어와서
아모 서비스 6펜스 만들더라도 뭐 이제 밸리데이션 하고 서비스 호출 하고
그의 b4 고추랑 게 끝이 것 은
4 서비스 부분에 하나로 뭉쳐 벌에서 곧바로 리퍼로 접근 하더라도 그러면
밸리데이션 안다면 미포 조건에서 log 간주 세게 하고 끝나면 되기
때문에 그 집에 들어가는 스테이터스 와 그리고 이제 dv 게 추가할 때
유니크 키가 있잖아요 그 유니 그 키에 커 스트레이트 만 커쳐 잉
일어가 줘 그 그 보라지 제약 똑같은게 극히 2개 못 들어간다는 거 그
커 스 라인만 잘 잡는거 만으로도 어
익셉션 추가 하는거 에 대한 입센 동식 먹어
중복 추가는 막을 수 있고 그 다음에 그 상태가 바라는 것도 상태가
변하는 플로우가 언제나 하나면 스테이트 머신 가드 g
익산 색 프로그래밍을 할 수 있다고 길이 쳐낼 수 없이 도 그래도 아
거기까지 이제 말하고 싶어 시작으로 성들 하니가 될텐데
도메인 드립은 디자인이 으
으 의미 4 있는데 그 요케
그 역사적 옷 이미경 애들 분이 처음 제가 나왔던 인 천 년 된
2002년 정도로 생각을 하거든요
이미 14명이 지날 정도로 생각보다 그거에 관련된
뭐 라며 책이나 이런게 많지 않고 그리고 오히려 제가 볼때는 d
데이터베이스 프로그래머가 는 컴프레서 더 열심히 발표만 하고 있는것 같고
그리고 그 이제 점점 더 약간은 죽어가고 있는 것 같아요 마이코 서비스가
대두가 되면서
어물 마이코 서비스도 마이크 쏟은 서비스 남의 굉장히 단청이 파나요 사실
4 클라우드로 꽂고 쓰는 사람들 말고 서비스가 말이 되는게 점점 맞다는
거지
또 정말 마이크로 서비스가 즈음에 도메인 질문 디자인이 음
데이터베이스 프로그램의 생각 전화해도 좋다고 생각해요 데이터베이스에서 바
생각하는 것보다는
화 다 제가 볼때는 op 의 개념을 그냥 리 브랜딩을 한데 쪽 같고
그리고 아까 말했듯이 도매 의해 쓰는 그 용어에 써라 한 거 되게 좋게
보구요
그리고 뭐 굳이 도메인 드립은 디자인 얘기는 아니었지만
db 트랜잭션을 이용해서 이제 섹션 세부 프로그램이 처럼 하는것 되게
좋다고 생각한다
음 그정도로 오늘의 그냥 몇해 까지는 생각해왔던 것들을
아 프레이 펌프를 에 한걸로 꺼내 줘 봐 20부터 들었다
폭 되었습니다
