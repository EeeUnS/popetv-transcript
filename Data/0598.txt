안녕하세요, 포프입니다.

오늘은 방어적 프로그래밍, 정확히 얘기하면 방어적 프로그래밍이 아니고 방어 기제가 강한 프로그래머들이 득보다 실이 될 수 있는 경우의 예가 하나 있어서 설명을 해드리려고 해요. 저랑 오래 알고 지냈던 프로그래머한테 있었던 일이고, 이미 기간은 지났어요. 과거를 돌아보면서 '이랬구나' 좀 더 객관적으로 판단할 수 있어서 만드는 비디오입니다. 이건 어쩌면 제가 예전에 만들었던 '믿음과 발전 속도' 에피소드하고도 굉장히 관련 있어요.

지금 말하는 프로그래머는 솔직히 탐나는 프로그래머기는 해요. 굉장히 뛰어나고, 초 천재고, 어디 가도 내놓을 수 있는 아키텍트급의 뭐라도 할 수 있는 이런 사람이 아니라, 당장 회사에 급한 일이 있을 때 어떤 일이든 빠르게 이해하고 빠르게 쳐낼 수 있는, 약간 스타트업에 특화된 프로그래머예요. 단, 이 사람의 코드가 굉장히 더럽고 재활용성이 거의 없을 수도 있어요. 하지만 어떤 버그가 나오든 간에 그 버그를 고칠 수 있고, 문제는 그 버그를 고친 거로 인해서 가독성이 떨어질 수 있어요. 근데 그 버그는 확실히 고치는 스타일이었어요. 그 이유는 뭐냐면 이 친구가 일단 게으른데 머리가 되게 좋아요. 장기적인 머리가 아니라 단기적으로 머리가 좋아요. 그래서 굉장히 이해력이 빠르고, 이제 뭔가를 꼼꼼히 배워서 몸에 익숙해지는 게 아니라 그냥 후딱 처리하고 '끝났으니까, 흥미가 떨어졌어.'하고 넘어가는 스타일인 거예요. 그래서 새로운 것들이 막 나올 때 누구보다 빠르게 비즈니스 니즈를 파악하고 자기가 이해 못하는 걸 확실히 물어봐서 이해하고 고치고 이런 거죠. 근데 코드를 작성해 놓으면 함수 이름이 DO IT, DO that 거의 이런 수준의 함수 이름을 만들어 오고 변수명도 abc 이렇게 만들어 오고 자기 딴에는 이제 함수 재활용성을 높이겠다고 10가지 기능이 합쳐진 함수를 만들고 그 함수에 매개변수가 12개가 들어가면서 그 하나가 불리언 플래그를 하나 켜고 끄고 이런 식의 이상한 코드도 짜는 사람이에요. 하지만 중요한 건 거기서 어떤 버그가 나오든 간에 자기가 확인하고 고치고 고쳤을 때 제가 문제가 없다 그랬죠? 코드가 깔끔해서 딱 코드를 읽으면서 '문제가 없다'가 아니라 이 친구는 어마무시하게 테스팅을 하는 친구였어요. 테스트 코드 작성도 안 해요. 그런 거 할 사람도 아니고 게을러요 어차피. 그런 거 안 한 사람이고, 이 코드를 바꿨기 때문에 이 코드에 관련된 모든 경우의 수를 테스트할 수 있는 사람이었어요. 이게 회사에서 한, 두 개 정도 하면 상관이 없는데 이게 2, 3년이 지나갔을 때 그걸 하는 친구였어요. 그만큼 자기가 한 거의 뭔가 터지는 거에 대한 방어는 확실히 하는 친구였어요. 나중에 그걸 고치라고 하면 고치는 데 시간은 다시 또 걸리지만. 왜냐면 자기 코드를 이해 못하기 때문에 다시 다 이해해야 하거든요. 

이 친구가 이렇게 활동을 하다 보니까 회사에서 오래 있으면서 어느 순간부터는 프로덕션 데이터베이스에 쓰기 권한까지 받아 갔어요. 왜냐면 한 번도 뭔가를 뽀갠 적이 없고, 워낙 검토를 꼼꼼히 하고 query 하나 돌리기 전에도 DB를 복사해서 다 테스트해 보고 검증해 보고 돌리는 스타일이었던 거예요. 어쨌든 간에 회사에서는 급한 일이 생기면 곧바로 DB 접근해서 고칠 수 있는 사람이 있긴 있어야 하거든요? 그 일을 이 사람이 가져갔던 거예요. 이 사람이 가져가서 아무 문제 없이 또 몇 년이 돌았어요.

근데 어느 순간 이 사람이 한 일이 나중에 데이터 누수가 난 일이 하나가 발생했어요. 그래서 복구를 아마 100% 못 했는데, 큰 문제는 아니었지만, 데이터를 유실했다는 건 '나중에 DB 권한이 있으면 또 유실할 수 있다.'는 얘기거든요? 그래서 그 순간에 그 사람 포함해서 관련된 사람들끼리 모여서 미팅을 시작 한 거예요. '네가 한 번도 몇 년 동안 이런 문제를 일으킨 적이 없고, 그래서 솔직히 이렇게 된 이유를 우리가 알아야지 대비를 할 수가 있다.' 회사는 그래야 하는 거거든요? 그래서 회사 사람들의 기본적인 생각은 뭐였냐면 '이 친구가 그날 뭔가 피곤했거나 뭐 했거나 어떤 이유로 하나로 급박하게 뭔가를 못 봤거나 약간 실수를 한 거다.' 그러니까 대부분의 사람은 능력이 안 되는 걸 실수라고 얘기하고, 이건 보통 '사람들이 다 실수한다'라고 말을 하지만, 모든 사람의 평가는 '이건 정말 뭔가 이 사람이 그냥 그날 하루 실수를 한 거다'라는 거로 갔어요. 왜냐하면 한 번도 데이터를 문제 생긴 적이 없고 버그도 이런 문제를 만든 적이 없는 사람이었거든요? 그래서 '이제 이런 경우라면 한 번은 그냥 넘어가고 그다음에 다시 문제가 혹시라도 또 생긴다면 그때부터 대응책을 마련하는 게 옳지 않겠냐?' 왜냐하면 Product DB Wright 접근 권한을 없애고 그걸 검토를 받고 넣는 프로세스를 이 사람한테까지 강제해 버리면 어쨌든 간에 개발 속도 자체가 굉장히 느려질 수 있는 상황이기 때문에 이런 얘기가 나왔던 거거든요. 그런데 이 친구가 기본적으로 세상을 바라보는 시각은 굉장히 부정적이에요. 누군가가 채팅하다가 '이것 좀 해주세요' 그러고 :)을 딱 넣으면 그 웃는 표정이 '네가 안 하고 배길 수 있어? 이 XX야!' 이런 식으로 받아들이는 사람이었어요. 그래서 우리가 고객 상담 메시지도 '최종적으로 너무 잘 됐으니까 다행입니다. 좋은 하루 보내세요. :)' 보내면 '이거 비웃는 걸로 보지 않을까?' 이런 고민을 하는 사람이었거든요? 약간 좀 부정적으로 보는 게 있는 거고 뭔가 사람에 대한 신뢰가 굉장히 적은 사람이긴 했죠.

어쨌든 미팅을 갖고 이런저런 얘기를 하면서 결과적으로 이 친구한테 물어볼 수밖에 없는 거잖아요? '자, 그러면 네가 정말 이 일이 난 게 한번 실수로 인해서 생긴 거라면 이렇게 하고 싶은데 그래서 어떻게 생각해? 넌 이런 실수를 또 만들 것 같아?'라고 물어봤어요. 그런데 대답이 '응'이에요. 그러니까 이제 사람들이 좀 당황하기 시작하는 거예요. '정말?' 그러니까 자기는 이걸 안 만들 자신이 없대요. 그러면 앞으로는 이제 DB 같은 걸 바꿀 때 네가 이런 파이프라인에 넣어서 검토받고, 자동테스트 돌리고, 우리가 구축을 해놓은 걸 이제 너한테도 좀 더 사용하게 하고 강화를 시킬 건데, 그러면 이거 하나 하는 게 예전에는 쉽게 쉽게 할 수 있던 게 이제는 리뷰 보고 뭐 하고 하면 그만큼 시간이 걸릴 수 있어. 그래도 괜찮냐?'라고 그러니까 자기는 '그렇게 가겠다'는 거예요.

근데 문제는 그렇게 가면서 이 친구가 여태까지 보여왔던 많은 효율성이 그 이후에 거의 반토막이 나 버렸어요. 왜냐하면 아까 말했지만 '이 사람이 변수명을 잘 짓는 것도 아니고, 남들이 이해 안 되게 코드 짜고 이런 게 되게 많다' 그랬잖아요? 이런 걸 누군가가 리뷰를 봐야 하면 그 사람이 이해하는 데 시간이 또 걸리니까 서로 왔다 갔다 하고 해서 딱 1~2시간에 끝내야 했을 일이 다른 사람한테 의존하게 되고, back and forth가 몇 번 되다 보니까 막 반나절에서 하루까지 걸리는 거예요. 이게 하나가 일이 진행되고 있고 다른 건 문제없이 자기가 쭉 하고 있는 일이 있으면 상관없는데, 이것도 갑자기 리뷰가 한 3~4개가 섞이면 얘는 한 번에 끝내고 다음 거에 집중하면 되는 걸 집중이 계속 왔다 갔다 왔다 갔다 하는 거예요. 이 사람의 효율이 그 이후로 절반 이하로 줄어들고 새로운 시스템에서 적응하고 올라와야 하는데, 적응을 못 해서 최종적으로는 회사에서 퍼포먼스 미팅을 갖고 '이런 이런 문제가 있다. 네가 이걸 네 원래 수준으로 올려놓고 퀄리티를 올리지 못하면 회사에서는 어렵다.' 그랬는데, 결과적으로는 안 돼서 퇴사하게 된 사례가 있어요. 이 사람의 성향을 제가 알고 있으니까, 제가 생각하는 대답은 뭐냐면 '야 이거 네가 이제 앞으로 실수를 또 할 것 같냐?'라고 했을 때 분명히 자기는 왜 실수했는지 알고 있을 거예요. 근데 그걸 말하지 못 하는 이유가 뭔가 있거나, 아니면 제 생각에 더 큰 건 '아니야 이거 한 번했던 실수고 다음에 실수 안 할 것 같아'라고 말했는데 다음에 실수하면 회사에서 이미 얘기했잖아요? '이때부터 이런 걸 돌려야 된다'라고. 그걸 안 믿었던 것 같아요. '네가 안 한다고 했었는데, 실수하면 너는 문제 있으니까 자른다'라는 느낌으로 받아들였던 것 같아요. 여태까지 회사에서 그런 부정적인 이야기를 한 적이 없음에도 불구하고. 그래서 어느 순간 이게 자기가 말한 걸 책임져야 하는 순간을 피하기 위해서 그러면 자기 생각에는 '책임을 안 지는 게 또 일어날 것 같으니까 시스템적으로 고쳐줘'라고 우겼던 것 같은데, 문제는 이런 얘기 있잖아요? '일을 잘하는 사람한테는 프로세스를 없애줘야 하고 일을 못하는 사람한테는 프로세스를 만들어 주는 게 맞다.' 그리고 제가 지난 에피소드에 소개했던 레이 달리오의 '원칙'이라는 책이 있으면 '일 잘하는 사람을 못 하게 하기 위해서 프로세스를 만들지 말아라. 차라리 그런 경우에는 일 못하는 놈을 자르는 게 낫다'라는 식으로 얘기한 부분도 있거든요? 그런 거랑 마찬가지였던 것 같아요. 자기가 굉장히 잘 돌 수 있는 환경을 회사에서 잘 만들어 줬는데, 한 번의 솔직한 대답을 안 하고 뭔가 방어 기제를 발휘함으로 인해서 거기부터 갑자기 프로세스가 들어오고 뭐 하더니 원래부터 프로세스 잘 따르지도 못하는 사람인데 따르면서 뭔가 이렇게 되면서 그 회사에서 최종적으로 퇴사하고... 문제는 이제 회사에서 퇴사한 다음에 다른 회사 가면 되잖아요? 부정적인 성향 때문에 어떤 면접에 가면 굉장히 부정적인 느낌을 많이 줘요. 그래서 대부분의 회사에서 데려가지 않아요. 이 친구가 저랑 오래 일했던 경우가 저는 이 친구는 학교 친구거든요? 그래서 어떤 성향인지도 알고 뭘 할 수 있는지도 알기 때문에 제가 괜찮은 자리에 있으면 계속 데려갔었어요. 그리고 '회사에서 굉장히 중요한 일을 해야 하는데, 얘처럼 똘망똘망하고 빨리 뭔가를 끝낼 수 있는 애들이 없다.', '굉장히 중요한, 새로운 일을 할 수 있는 애들이 없다.' 그러면 스카우트를 해가는 방식으로 데려갔거든요? 그래야만 어쨌든 그 프로젝트가 끝나고, 그로 인해서 이 친구도 많은 인정을 받았는데 이런 부분에서 안 됐다는 게 저로서는 되게 안타깝지만 '회사가 보여준 몇 년간의 자세들과 신뢰가 있는데 그걸 통해서 믿음을 얻지 못하고 부정적으로 가서 이렇게 된 게 아닌가?'라는 생각이 솔직히 되게 들어서 씁쓸한 기억이 있어요.

그래서 제가 그 뒤로는 만약에 되게 부정적인 성향을 가진 사람이 있다면, 그런 사람들이 저랑 회사 관계가 아니라 그냥 지인 관계가 된다면, '전문가의 도움을 받아서 그 부분은 고칠 수 있으면 고쳐라.'라고 얘기를 많이 해요. 그 이유는 뭐냐면 정말 남들은 선의인데 본인 혼자 선의가 아니라고 생각하고 이상한 악수를 둘 수가 있어서죠. 그런 경우를 봐서 좀 안타까운 게 있어서. 뭐 이런 얘기 하면 또 '우리 회사에 이런 사람 있어요!'라고 생각하시는 분들 많죠? 열심히 댓글 남겨주시고요. '내가 그런 놈이 아닌가?' 의심이 드시는 분들은 열심히 댓글 달지 마시고 전문가의 도움을 받기를 권해드립니다.

포프였습니다.