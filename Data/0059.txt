뭘 얘기해 볼까 아 얼마 전에 트위터에서 했던 얘기에요 어 얘긴데
음 포인터 라는 거에 대해서 좀 얘기해 볼게요
일단 포인터 랑 거에 대해서 얘기해 하려는게 아니라
과연 아직도 포인터가 중요한가 이런 얘길 좀 해보려고 해요 왜냐하면
얼마전에 제가 이제 c 샵 을 굉장히 좋다고 말을 해 왔고
성능 상으로 c # 2 c 플러스 플러스 보다 유리하다 는 얘기도
했었어요
어 뭐 그리고 예전에는 이제 뭐
게임프로그래머 테크트리 고민하면서 시 샵으로 입문을 하는게 좋지 않을까
라는 얘기도 했었고
더 태우고 는 의미 비디오 세계에서 시 #52 너무 차량을 했어요
내 시작을 차량을 하면 할수록
당연히 동의하시는 분들이 대부분이고 아 그리고
동의안 하시는 분들이 소스 계시고
그리고
그러니까 지금까지 몇 동이 하셨던 동의 안 하셨던 분들 모두는 다 일시
플러스 플러스 해봤고 시샵 또 해보신 분들이 줘
근데 이제 그 중에 어떤 분들은 정말 c 플러스 플러스 저녁은 안되시는
분들 중에
아 그런 내가 이제 c 플러스 플러스 를 배울 필요가 없겠구나
아 좋다 이렇게 하시는 분도 있어요 물론 당연히 그 분들이 필요한게
아니면 안 배우셔야 되죠 그러면
c 플러스 플러스 곳이 접하고 물론 여러 가지 다른 점이 있지만 아
아무래도 가장 큰 다른 점은 제 생각엔 포인터 라고 생각을 하거든요
그래서 과연 씨플러스 포스를 배우 필요가 없냐
그 답부터 말씀드리면 그렇진 않아요 저는 c 플러스 플러스 를 배워야
한다고 생각을 해요
진짜 프로그래머라면 뭐 모르는 사람이 가짜 프로그래머라는 얘기는 아닌데
일단 포인터가
뭐 저도 처음 시작할 때는 좀 개념이 잘 안 짧고 뭐 그런것도 있지만
포인터 에서 그치는 이야기가 사실은 아니에요 일단 포인터가 왜 프로그램을
아 프로그래머 한테 중요한지를 말씀을 드리면
이제 포인터는 단지 그 포인트를 쓸 수 있다는 그 자체가 아니라 그 모든
프로그래밍에서 다른 변수나 뭐 이런 것들은 사실은 곧바로 그 값을 변수에
대입하고 그 값을 쓰는 거잖아요
근데 포인터 란 개념은 이제 인 줄 아 쿠션이 라고 하거든요 이게
디렉터는 직접 일하는 거고 인 질레트는 간접적 이라는 건데 그런 그
사고의 인주 액션이 있어요 사고로 직접적으로 사고를 하는 게 아니라
간접적인 사고방식이 거기에 내재되어 있다고 생각을 해요
그 예를 들면 은 이제 포인터를 전에도 말씀드렸듯이 아 이 포인터는 단지
메모리 주소를 저장할 뿐 애고
그러면 이 포인터의 값을 참조 할래 뭐냐는 2 메모리 주소에 있는 값을
불러와 라 메모리 주소는 뭐 뭐
fl 그러면 그 메모리 주소로 가서 거기에 있는 값을 불러와 나 그래서
결국에는 거기에 변수가 들어 있는 건데
우리는 변수의 주소를 알고 있다는 거죠 그래서 결과적으로 1단계 건너뛰어
생각하는 방식인데
프로그래머가 그 사고방식이 안 되면 굉장히 제한적인 것 같아요 일단 뭐
이렇게 뭐 인주 액션 이란 개념은 단지 포인트에서 끝이 는 건 아니죠
사실은 함수 투더 어떻게 보면 그런 개념이고
그릇도 함수 중에 재귀함수 하고 있잖아요 그 제기 함수가 어찌 보면 그런
개념이 에요
난 이런 문제가 있을 때 요만큼 여기서 처리하고 나머지는 저쪽으로 겁네
떠서 젖어서 처리하게 맞는다는 개념이나
내가 값을 찾아 와야 되는데 지금 값을 여고생이 갖고 있는 게 아니라
여기가 이 보물이 숨겨져 있는 장소를 알러지가 그동 50개는 장소로 가서
봄으로써 싸우겠다 이 기념해 거든요 근데 그런 사고의
아 인질 약점이다 결과적으로는 몇 단계의 사고로 거치는 거죠 그냥 결과를
한번에 가져오는 게 아니라 여기서 절로 뭐 띤 다음에 간다 이런 개념
근데 그런 사고에서 이렇게 헷갈리시는 분들 있잖아요
그러면 결과적으로 건 제가 원래 논리력 이 조금 부족한거 라고 생각을
해요
그리고 그 부분은 당연히 훈련을 통해 낳을 수 있는 거고 뭐
꼭 그런건 뭐 수학에서 가끔 나오고 논리 문제시 가끔 나오는 것 같긴
해요 그래서 그런 단순히 프로그래밍 테크닉이 아닌 그런 사고를 않다는
것에서 일단 포인터는 중요한 거 같아요 굉장히 논리적인 측면이 중요하고
보르 포인터를 다루 정도 그런 논리를 갖추면 당연히 여러가지 프로그래밍
알고리즘 을 기타 나올 때도 도움이 된다는 거죠
그 첫 번째가 그 거에요 그렇게 두 번째는
모 씨 #29 10 플러스 플러스 고 코드를 있다보면 은 어느 순간 그런
게 생각이 드는 경우가 있을 거에요 아 과연 이 코드가 하드웨어에서
어떻게 될까
코드를 짜고 다 볼 수가 있는데 어떤 코드는 하동에서 드럽게 내리고 어떤
코드는 하듯 이렇게 빨라요
물론 그런 경우에는 당연히 모타드 그러자 알고리즘을 머니 체크 해 봐라
알고 임 새카만 당연히 좋아요 근데 알고리즘을 체크할 때 이게 과연 어떤
하드웨어에서 빠른 애들이 냐 아니면 뭐 하드웨어로 범용적으로 보더라도 그
제한 하드웨어가 아니라 일반적인 하도 에서 빠른 하늘이 너를 결정할 때는
더 이상 단순히 알고리즘 적으로 해결될 수 없는 문제가 상당히 많아요
아 그러면 은 뭐 단순히 알고 개인적으로 해결될 수가 있다고 쳐도
과연 그게 하 두면서 어떻게 돈은 지가 쓰이게 이해가 되야 되는 거거든요
그러면 결과 좋은거 언어 자체가 언어를 딱 봤을때 아 이게 하드웨어에서
이렇게 돌 겠구나 라고 1대 1이나 모 아니면 곧바로 거의 직접적으로
대응이 되는 코드 예수를 훨씬 더 유리하다는 거죠 예를 들어서 이제
메모리 쪽 잘 모르시는 분들 한테 뭐 시세를 가비지 컬렉터 는 과연
어떻게 작동을 할까 물어보면 은
수칙이 코드만 보건 알긴 어려워요 그냥 아 순수하게 뒤쪽에서 어떤 이렇게
마 목적인 일어나서 다 해 주는 거겠죠 라고 생각을 하거든요 근데 그
동작 원리를 알면 은
그럼 메모리를 마구 쓰면서 가비지 를 만들면서 그 초래하는 성능 저하를
줄일수가 있어요
그런 부분에 있어서는 아 상당히 c 플러스 플러스 라는 개념 자체가 그
코드 c 플러스 소스 코드 하고 진짜 뭐 어셈블리 레벨 아니면 그 머신
시접 3레벨까지 굉장히 가까이 너 너 거든요 포인터가 가장 좋은 이에요
아까도 포인터 말씀드렸잖아요 이건 그냥 메모리 주소로 가서 거기서 값
불러 오는것 아 그럼 5 시스템 구조 공부하신 분들 하겠지만 그 메모리
인주 역시 란 개념이 얼마나 중요한 건지 알아요 메모리를 한번 가서
불러옴 으로 인해서 거기에 나오는 이제 뭐 아 딜레이 드 있고 뭐 뭐
메모리 밴드 베이스 개념도 있고 그리고 메모리 옆으 레이 션 캐쉬 문제도
있고 멀티 트레이 등에서 메모리 덮어쓰는 뭐 이런 문제도 있고 그
그런거를 생각을 해보면
정말
촌 적인 코드를 쌀 짤 수 있는 사람이 되기 위해서는 그런 포인터에 대한
지식이 좀 강하고 c 플러스 프로 쪽을 많이 만져본 사람일수록 다른
스크립팅 언어를 넘어가더라도 개념이 온다는 거죠
아 이정 이렇게 코드 짜면 분명히 뭐 코드를 짜 놓으면 a 가 있고 삐
가 있는데 둘 다 읽게 는 똑같이 편한 코드의 어 근데 뭐 예의를 짜 쓸
때 이것은 당연히 하드웨어에서 빨리 2 거 갈 고삐를 돌며 는 좀
의심스럽다
뭐 그 코드가 정말 상관없는 코드 고 별로 중요한 코드가 아니면 액자
상관 없겠지만
어차피 있잖아 저기 있잖아 읽기 똑같고 이렇게 또 깎아 사람이 보기에는
별 차이가 없는거 를 굳이 느리게 짜리 건 없잖아요
그럼 여기서 또 프로그래머가 나중에 이 코드가 문제가 될 때 돌아가서
고쳐야 되는 일이 줬기 때문에 올해 효율적으로 짤 수 있는 방법도 있는
거죠 그래서 2호 이에 관련된 얘기는 이제 예전의 파 프로그래머라면
하드웨어를 알아야 되는 얘기 했었는데 그런 얘기예요 제가 강조하는 것은
하드웨어의 좋은 코드를 만들기 전에 모 가독성 이런걸 12 저녁에 죽어도
아니에요 그런 똑같은 그런 초이스 가 있었을 때 보다 효율적인 코드를
그냥 선택해서 고를 수 있는 그런 지식 정도는 갖춰야 좋은 프로그램은
얘기 나왔던 것 뿐이에요
그래서 그런 의미에서 저는 포인터로 여전히 알아야 된다고 생각을 해요
그래서 지금 다시 말씀드리면
아 포 인 트 랄 되는 두 가지 이유는 논리력 에 논리력을 증명할 수
있고 놀이를 키울 수 있는 가장 좋은 앞에 패러다임 중에 하나 퍼 포인터
라고 보고요
그 두번째는 아까 말씀 듯이 하드웨어를 쉽게 이해할 수 있는 그런
아 프로그래머가 되기 위해서는 하드웨어 잘 이해하는 프로그래머 되기
위해서는 포인트 정도는 자주 자유자재로 만들 수 만질 수 있어야 된다고
생각을 하고요 그래서 얼마전에 또 이제 뭐야 그 제가 저번 비디오에서
한번 이름을 한번 떨어졌던 것 이름을
언급했던 것 같은데 종찬 씨라고 있잖아요 그 분도 씨를 잘 안 했었어요
네 제가 그분 굉장히 대단한 프로그래머가 될 거라 생각을 하기 때문에
반드시 씨는 해 주라고 했어요 나중에 쓰든 안 쓰든 을 떠나서 해도 라
일단 뭐 잘 하고 있을 거라고 전 믿고 있고 음 그리고 주변에서 이제 아
그럼 c 를 곱해 암벽 되나요 라고 하시는 분들 중에는
뭐 그냥 특별히 성능이 문제가 안되고 비즈니스 로직이 더 문제가 되는
그런 부분들이 있잖아요
예를 들어서 뭐 비즈니스 에스닉 애플리케이션 이라던가 그런거 하시는
분들한테는 굳이 배울 필요 없다고 생각을 해요 이미지 # 만으로 충분히
모든걸 할 수 있다고 전복이 때문에 몹시 #2 아니라 조그마한 좋은것을
치려면 잡아 쓰시면 되고 제가 잠을 별로 안좋아요
아 그래도 되고 근데 뭐 게임프로그래머 지망 하시고
언젠가 쩍 에서 좀 오래 하시거나 아니면 뭐 그외에도 여러가지 분야가
있죠
하드웨어 쪽에서 프로그램 하는 사람들도 있고 성능이 중요한 뭐 리얼타임
애플리케이션 돌리시는 분들도 있고 그런 분들 한때는 씨는 반드시 하라고
전해 드려요
당장 쓰던 말든 간에 그때 예전에 뭣이 #2 좋아요 유니티가 좋아요 뭐
이런거 1 얘기도
어 입문을 일단 해야죠 사람들이 흥미를 갖고 게임도 만들고 뭐 프로그램도
만들고 그럴려면 좀 쉬운 언어로 입문 해야 되지만 결과적으로는 시나 c
플러스 플러스 정도의 이제 포인터를 어 사용하는 어느 정도는 해야 되지
않나 라고 생각을 하고요
뭐
이제 더이상 어셈블리어 를 직접 자버리 이유는 좀 드물고 요 모 하드웨어
쪽 직접 만드시는 분 아니면 그렇게 어셈블리어 를 따로 공부해 된다고
생각하지 않고 씨하고 10 플러스 플러스 를 하다가 그냥 어셈블리어 로
컴파일이 되는것을 뒤 덧셈 본래 하고 보면은
아 보다 오면 건 이해가 되요 어치 어셈블리어 제가 이제 인스트럭션
자체가 많지가 않아서
하그 보라 그래 페이셜 아이스
으 인내와 아
끙끙 기저 끈기 하고 그냥 논리력 말씀은 볼 수 있는게 어셈블리어
있는거니까 어셈블 보면서 아 이건 이렇게 됐구나 정도로 마이걸 수 있는
정도면 되는거 같구요
그 정도로는 말씀을 드리려고 하고 포인터 예전이 중요하고요
어 한동안 계속 중요할 것 같아요 뭐 모르겠어요 언제쯤 포인터의 신경 아
손에는 하드웨어가 나올지 모르겠는데
여태까지 하드웨어 발전하는 것 같은 여전히 중요한 것 같아요 근데 뭐
10년 20년 뒤 늦어도 모르겠고 일단은 중요하다고 해 줘 예 4p
였읍니다
