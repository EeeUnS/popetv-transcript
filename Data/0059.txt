예 안녕하세요 포프입니다
무슨 얘기를 해 볼까
얼마 전에 트위터에서 했던 얘기에요
포인터라는 거에 대해서 좀 얘기를 해 볼게요
포인터란 거에 대해 얘기하려는 게 아니라
과연 아직도 포인터가 중요한가
이런 얘길 좀 해 보려고 해요
왜냐하면 얼마 전에 제가 C#을
굉장히 좋다고 말을 해 왔고
성능상으로 C#이 C++보다 유리하(ㄹ 수도 있)다는 얘기도 했었어요
그리고 예전에는 게임 프로그래머 테크트리 고민하면서
C#으로 입문을 하는게 좋지 않을까라는 얘기도 했었고
그래서 어떻게 보면 이미 비디오 3개에서
C#을 너무 찬양을 했어요
근데 C#을 찬양을 하면 할수록
당연히 동의하시는 분들이 대부분이고
그리고 동의 안 하시는 분들이 소수 계시고
그리고
그니까 지금까지 말했던 동의하셨던 동의 안 하셨던 분들
모두는 다 C++도 해 봤고 C#도 해 보신 분들이죠
근데 그 중의 어떤 분들은
정말 C++ 전혀 손 안 대시는 분들 중에
아 그럼 내가 C++를 배울 필요가 없겠구나
아 좋다 이렇게 하시는 분도 있어요
물론 당연히 그분들이 필요한 게 아니면
안 배우셔도 되죠
그러면 C++하고 C#하고 물론 여러가지 다른 점이 있지만
아무래도 가장 큰 다른 점은 제 생각에는
포인터라고 생각을 하거든요
그래서 과연 C++를 배울 필요가 없냐
답부터 말씀을 드리면
그렇지 않아요
저는 C++를 배워야 한다고 생각을 해요
진짜 프로그래머라면
모르는 사람이 가짜 프로그래머라는 얘기는 아닌데
일단 포인터가
저도 처음 시작할 때는 개념이 잘 안 잡혔고
뭐 그런 것도 있지만
포인터에서 그치는 이야기가 사실은 아니에요
일단 포인터가 왜 프로그래머한테
중요한지를 말씀을 드리면
포인터는 단지
그 포인터를 쓸 수 있다는 그 자체가 아니라
모든 프로그래밍에서 다른 변수나 이런 것들은 사실은
곧바로 그 값을 변수에 대입하고 그 값을 쓰는 거잖아요
근데 포인터라는 개념은
indirection이라고 하거든요
direct는 직접이라는 거고
indirect는 간접적이라는 건데
사고에 indirect이 있어요
그니까 직접적인 사고를 하는 게 아니라 간접적인 사고
방식이 거기에 내재되어 있다고 생각을 해요
그 예를 들면은
포인터는 전에도 말씀드렸듯이
이 포인터는 단지 메모리 주소를 저장할 뿐이고
그러면 이 포인터의 값을 참조하려면
이 메모리 주소에 있는 값을 불러와라
그니까 메모리 주소는 뭐 FFFFFF라 그러면
그 메모리 주소로 가서 거기 있는 값을 불러와라
그러니까 결국에는 거기 변수가 들어있는 건데
우리는 그 변수의 주소를 알고 있다는 거죠
결과적으로 한 단계 건너뛰어서 생각하는 방식인데
프로그래머가 그 사고 방식이 안 되면
굉장히 제한적인 것 같아요
indirect이란 개념은
단지 포인터에서 그치는 건 아니죠 사실은
함수 호출도 어떻게 보면 그런 개념이고
그리고 또 함수 중에 재귀함수라고 있잖아요
그 재귀함수도 어찌 보면 그런 개념이에요
난 이런 문제가 있을 때 이만큼은 여기서 처리를 하고
나머지는 저쪽으로 건너뛰어서 저쪽에서 처리하게
만든다라는 개념이나
내가 값을 찾아와야 되는데
지금 값을 여기서 그냥 갖고 오는 게 아니라
여기가 보물이 숨겨져 있는 장소를 알려주니까
그 보물이 숨겨져 있는 장소로 가서 보물을 찾아오겠다
이 개념이거든요
그런 사고의 indirection..... 그러니까
결과적으로는 단계의 사고를 거치는 거죠
결과를 한 번에 가져오는 게 아니라
여기서 저기로 뛴 다음에 간다 이런 개념
근데 그런 사고에서 헷갈리시는 분들 있잖아요
그러면 결과적으로 그건 제가 볼 때는 논리력이
조금 부족한 거라고 생각을 해요
그리고 그 부분은
당연히 훈련을 통해 나아질 수 있는 거고
그런 거는 수학에서도 가끔 나오고
논리 문제에서도 가끔 나오는 것 같긴 해요
단순히 프로그래밍 테크닉이 아닌 그런 사고를
안다는 거에서 일단 포인터는 중요한 것 같아요
굉장히 논리적인 측면이 중요하고
그리고 포인터를 다룰 정도의 그런 논리력을 갖추면
당연히 여러가지 프로그래밍 알고리즘을 풀 때나
그럴 때 도움이 된다는 거죠
첫 번째가 그거에요
그리고 두 번째는
C#이고 C++고 코드를 읽다 보면은
어느 순간 그런 게 생각이 드는 경우가 있을 거에요
아 과연 이 코드가 하드웨어에서는 어떻게 돌까
코드는 짜고 다 돌 수가 있는데
어떤 코드는 하드웨어에서 더럽게 느리고 
어떤 코드는 하드웨어에서 더럽게 빨라요
물론 그런 경우에는 당연히 다들 그러죠
알고리즘을 먼저 체크해 봐라
알고리즘 체크하는 거 당연히 좋아요
근데 알고리즘을 체크할 때 이게 과연 
어떤 하드웨어에서 빠르냐 느리냐
아니면 뭐 하드웨어를 범용적으로 보더라도
굳이 한 하드웨어가 아니라
일반적인 하드웨어에서 빠르냐 느리냐를 결정할 때는
더이상 단순히 알고리즘적으로
해결될 수 없는 문제가 상당히 많아요
그러면은
뭐 단순히 알고리즘적으로 해결될 수가 있다고 쳐도
과연 그게 하드웨어에서 어떻게 도는 지가
이해가 돼야 되는 거거든요?
언어를 딱 봤을 때
아 이게 하드웨어에서 이렇게 돌겠구나라고
1:1이나 아니면 곧바로 거의 직접적으로
대응이 되는 코드일수록 훨씬 더 유리하다는 거죠
예를 들어서 메모리 쪽 잘 모르시는 분들한테 C#의
가비지 컬렉터는 과연 어떻게 작동을 할까 물어보면은
솔직히 코드만 보고는 알긴 어려워요
그냥 순수하게 뒤쪽에서 어떤 마법적인 일이 일어나서
다 해주는 거겠죠라고 생각을 하거든요
근데 그 동작 원리를 알면은 메모리를 마구 쓰면서 가비지
를 만들면서 초래하는 성능 저하를 줄일 수가 있어요
그런 부분에 있어서는 상당히 C++란 개념 자체가
C++ 코드라고 진짜 뭐 어셈블리 레벨(assembly level)
아니면
머신 인스트럭션(machine instruction level) 레벨까지
굉장히 가까이 있는 언어거든요
포인터가 가장 좋은 예에요
포인터 말씀 드렸잖아요
이건 그냥 메모리 주소로 가서
거기서 값 불러오는 거다
그럼 시스템 구조 공부하신 분들은 알겠지만
그 메모리 인디렉션(memory indirection)이란 개념이
얼마나 중요한 건지 알아요
메모리를 한 번 가서 불러옴으로 인해서
거기에 나오는 delay도 있고
memory bandwidth 개념도 있고
그리고 memory operation하면 cache 문제도 있고
multi threading해서 메모리 덮어쓰는 이런 문제도 있고
그런 거를 생각을 해 보면
정말 효율적인 코드를 짤 수 있는 사람이 되기 위해서는
그런 포인터에 대한 지식이 강하고
C++ 쪽을 많이 만져 본 사람일수록
다른 스크립팅 언어로 넘어가더라도
개념이 온다는 거죠
이렇게 코드를 짜면은 분명히
뭐 코드를 짜는 방법이 A가 있고 B가 있는데
둘 다 읽기에는 똑같이 편한 코드에요
근데 A로 짰을 때 이건 당연히 하드웨어에서 빨리 돌 것을
알고, B로 돌면은 좀 의심스럽다
그 코드가 정말 상관없는 코드고 별로 중요한 코드가
아니면 대충 짜도 상관없겠지만
어차피 이리 짜나 저리 짜나 읽기는 똑같고
사람이 보기에는 별 차이 없는 거를
굳이 느리게 짤 이유는 없잖아요
그럼 여기서 또 프로그래머가
나중에 이 코드가 문제가 있을 때
돌아와서 고쳐야 되는 일이 적기 때문에
효율적으로 짤 수 있는 그런 것도 있는 거죠
이에 관련된 이야기는 예전에 탑 프로그래머라면 하드
웨어를 알아야 된다라는 얘기를 했었는데 그런 얘기에요
제가 강조하는 거는
하드웨어에 좋은 코드를 만들기 전에
뭐 가독성이나 이런 걸 줄이자는 얘기는 죽어도 아니에요
똑같은 choice가 있었을 때
보다 효율적인 코드를 선택해서 고를 수 있는
그런 지식 정도는 갖춰 줘야 좋은 프로그래머
라는 얘기를 했던 것뿐이에요
그래서 그런 의미에서 저는 포인터를
여전히 알아야 된다고 생각을 해요
지금 다시 말씀을 드리면
포인터를 알아야 되는 두 가지 이유는
논리력을 증명할 수 있고 논리력을 키울 수 있는 가장
좋은 패러다임 중의 하나가 포인터라고 보고요
그리고 두 번째는 아까 말씀드렸듯이
하드웨어를 잘 이해하는 프로그래머가 되기 위해서는
포인터 정도는 자유자재로 만질 수 있어야 된다
라고 생각을 하고요
얼마 전에 저번 비디오에서
이름을 한번 언급했던 것 같은데
종찬씨라고 있잖아요
그분도 C를 잘 안 했었어요
근데 제가 그분은 굉장히 대단한 프로그래머가
될 거라고 생각을 하기 때문에
반드시 C는 해 두라고 했어요
나중에 쓰든 안 쓰든 떠나서 해 둬라
잘 하고 있을 거라고 전 믿고 있고
그리고 주변에서 이제
아 그럼 C를 꼭 안 배워도 되나요
라고 하시는 분들 중에는
뭐 그냥 특별히 성능에 문제가 안 되고 비지니스 로직이
더 문제가 되는 그런 부분들이 있잖아요
예를 들어서 뭐
비지니스에서 쓰는 애플리케이션이라든가 그런 거
하시는 분들한테는 굳이 배울 필요는 없다고 생각을 해요
이미 C#만으로도 충분히 모든 걸 할 수 있다고
전 보기 때문에
뭐 C#이 아니라
조금 안 좋은 거 쓰시려면 자바 쓰셔도 되고
제가 자바를 별로 안 좋아해요
그래도 되고
근데 게임 프로그래머 지망하시고
언젠가 게임 쪽에서 좀 오래 하시거나
아니면 그 외에도 여러 가지 분야가 있죠
하드웨어 쪽에서 프로그래밍하는 사람들도 있고
성능이 중요한 리얼타임 애플리케이션
돌리시는 분들도 있고
그런 분들한테는 C를 반드시 하라고 전해드려요
당장 쓰든 말든 간에
예전에 C#이 좋아요 유니티가 좋아요 이런 거 한 얘기도
입문을 일단 해야죠 사람들이
흥미도 갖고 게임도 만들고 프로그램도 만들고
그럴려면 좀 쉬운 언어로 입문해야 되지만
결과적으로는 C나  C++ 정도의, 포인터를 사용하는 언어
정도는 해야 되지 않나라고 생각을 하고요
이제 더이상 어셈블리어를 직접 짜 볼 이유는 좀 드물고요
하드웨어쪽 직접 만드시는 분 아니면
그렇게 어셈블리어를 따로 공부해야 된다고
생각하진 않고
C하고 C++를 하다가 그냥 어셈블리어로 컴파일이
되는 거를 disassembly 해 갖고 보면은
보다 보면 그건 이해가 돼요
어셈블리어 자체가 인스트럭션 자체가 많지가 않아서
인내와 끈기하고 논리력만 있으면
볼 수 있는 게 어셈블리어 읽는 거니까
어셈블리어 보면서 이건 이렇게 됐구나 정도만
읽을 수 있는 정도면 되는 것 같고요
그 정도로 오늘 말씀을 드릴려고 하고
포인터 여전히 중요하고요
한동안 계속 중요할 것 같아요
모르겠어요 언제쯤 포인터를 신경 안 써도 되는
하드웨어가 나올지는 모르겠는데
여태까지 하드웨어 발전하는 거 봐서는
여전히 중요한 것 같아요
근데 뭐 10년, 20년 뒤는 저도 모르겠고
일단은 중요하다고 해 두죠
예 포프였습니다
