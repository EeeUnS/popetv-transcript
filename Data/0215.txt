오늘은 진짜 올드한 얘기 하나 해보죠
곧 튀는 거야 나쁜가
그 요즘 이렇게 뭐 프로그램을 배우시는 분들은 당연히 고투 같은거 에
대해서 배우실 하는거 여자 아니면 들어도 고투를 정말 나쁜 거 다 쓰지
마라
이정도 여기 들으시는 데 저는 이제 고 투 시절부터 코딩한 사람이에요
사실은 그
뒤 wage 제가 처음 만졌던 프로그래밍은 없고 실제 는 거기는 무슨
고 2말 군은
함수 비슷한 걸 만들 방법이 없었던 것 같아요 뭐 있었을지도 모르는데
제가 코딩을 그냥 스크립트 짜듯이 처음 배워 갖고 모르는 볼 수도 있죠
재밌는 게 뭐냐면 고투 가 뭐냐
뭐 3 물리 언어의 정원 점프 헤어 이미 어셈블리 언어 있는 내용이고
시체 못 함수도 점프 로 이루어져 있는 건데
결과적으로 냐 모든 프로그램 하나를 한줄로 쭉 학자는 거에요 그렇구요
뭐 함성 했단다 생각하시면 좍 짜고 코드가 가잖아요 그럼 가다가
그래 나는 이제 이거 이렇게 됐으니까 그러면 이 밑에 코 들어간 실행을
해 줘
그리고 코드를 실행하여 다시 점프 라는게 코트에서 여기로 또 실내 문의
한마디로 는 2 고투 되는 위치 하나하나가 함수 라고 보시면 되게 편한데
옛날에 그 함수 같은 코딩을 나갈 때는 그냥 한줄에 다 짜놓고 라인 넘버
1 오거 토 일 요거트 절로 오투 연루 것도 이게 정도였어요
그래서 이제
습하게 키 코드 라는 말을 들어보신 분 있잖아요
다 틀어 받겠죠 사실은 스파게티 코너 뭐냐 결과적으로 이렇게 코드가
진행해 쭉 게다가 척 점프 라는걸 밑으로
음청 팔아서 쭉 연결 리나 데다가 다시 땀 들여 점프에서 또 가다가 다시
점프 하고 돌아서 점프하고 점프 화가도 보면은 스파게티 갖고 있듯이
코드의 플루가 꼬여버린 다해서 보트가 나오고 oi 코트 하는게 그게 이제
스파게티 코드라고 한거고
가장 고개 큰 문제는 지금 제게 음악 스포츠 체험 그려 가사
그렇게 보여 드리니까 알겠지만 코드의 흐름을 따라 잡기 가 되게 힘들고요
코드의 흐름을 따라갈 때 힘든 게 뭐냐면
변수 같은걸 쓰잖아요 코딩을 하다보면 은 그럼 변수에 어떤 값을
업데이트하고 이걸 상태 라고 하거든요
어디에 고쿄 점프 했는데 한참 지나서 물건의 상태 가 뭔지 감이 안 오는
거예요
디버거 걸구 디버깅 하지 않는 이상은 정말 이게 어디서 상태가 바뀌었는지
이런게 없는걸까 모든게 글로벌 스코프 라고 하지요 절약 스코페 아
아무나 와서 아무나 바꿀 수 있는 거 거 뭐 좋은 예를 들면 은
예를 들어서 그 뭐라 그래 뭐 집이나 그런데 가는데 팩스 코드가 있잖아요
키가 있거나 2킬을 아무나 열 수 있다고 생각해봐요
아무나 이로써 근데 어느순간 집안의 때 근거가 없어진 거야 그럼 누가 엄
친 거야 이런 이런 문제가 생기지 않아요
근데 각 사람마다 키가 따로 있고 열 수 있는 문이 따로 있다면 그것만
요 금 안 보는 것만을 누가 문을 연 지 알 수 있어
누가 어떤 상태를 바꿨는지 를 알 수 있다 고 되 게 중요한 거 였거든요
그래서 결론적으로 말러 고 퉁 은
나빠요 근데 언제 나쁘진 않아요
그게 재미있는거 이제 고추를 크니 쓰지 말라고 하는 이유는 이런 문제
때문에 쓰지 말라고 하는 거고요
심지어는 제가 아마 거의 유일하게 존경하는 c 플러스 플러스 교수님 하나
있어요
정말 $10 앞서 잘하시고 정말 op 잘 하시는 분인데
2분도 심지어는 곡추가 한가지 했으면 상관없다 식으로 얘기를 딱 한 가지
그게 뭐냐면
루프 빠져나올 때 그니까 이게 왜 이게 왜냐면
고투 가 기본적으로 이제 고투를 없애기 위해 모든 언어가 지원하기 제
함수
요 부문의 코드를 따로 함수를 뽑아서 이 함수 호출 하고 돌아오면 다시
로 돌아옵니다
그리고 두번째가 루프 문 돌때 포루 프와 일로 그런거 2 때 중간에
브레이크 걸 수 있고 컨티뉴 걸 수 있잖아요 브레이크 하면 중간에 빠져
나온 거고 컨트롤 다시 고루 판으로 돌아가고
2개 옛날에는 고쳤다고 보시면 받고 지금 어셈블리 랩에서 여전히 점프
에요
가다가 점프 가다가 점프 인데 그런 사용 레를 굉장히
스틸 타게 봐 갔음 잡아 둔 거죠 할 수 있는 이런 요것 밖에 없다 함수
호출 컨택이 구해 그 밖에 없다
이 거였는데 고투 가 루프 면에서 좀 더 편할 때가 있어요 예를 들어
이런 경우 생각해봐요
아마 많이 코딩을 했을텐데 루프로 이중 루프를 돌려 야코 아이하고 후
제의를 돌리는 거죠 그럼 돌리다가 이제 제 의해서 모를 막 하다가 판단
하다가 어 어 여기서 내가 높은 5 끝내야 돼 그랬는데 브레이크를 걸며
는 아이 루프에 걸어서 ci 로 가잖아요
사실은 얘기하고 싶은 것은 브레이크를 거는 순간 제이드 빠져나오고 아이도
빠져 나와야 되는 거거든요
그럼 이런 경우엔 보통 어떻게 하냐면 요즘은 또 아이 놓고 포제 이 바로
위에다가 무슨 아 아니다 뽀 아이 위에다가 변수 같은 하나요
뭐 엑시 노프 이 콜트 paul's 이렇게 한 다음의 표 무늬 아이 그걸
하면서 코 암 에서는 또 하나 체크한 거의 이브에 섹시 노프 q 브레이크
이런식으로
그래서 이제 이 루페 돌다가 완벽해 나가야 될 상황이라면 그 불리언
변수에 이제 엑셀로 부추를 봐 가지고 그러면 아이로 올라가다 다음 거 딱
보는 순간 아 아 이게 들어오니까 여기서 브레이크를 걸어서 나 와야겠다
라고 하는
그러니 품 을 두 번 쓰는 개념인데
사실은 코딩을 뜨다 보면 이게 좀 들어 보여요
왜왜왜 제이가 안쪽에는 루프에서 아예 밑쪽 루프 가지 빠져 나가지 못할까
이런 경우에 고통이 없으면 정말 간단 하시거든요 j 에서 딱 보고 a
사가 브레이크의 되는 순간이 야 그러면 고투 뭐 뭐 이름을 잘 정해야
겠죠 뭐 잘 모르겠네 이런 뭐라고 정말 쟤는 뭐 뭐 엑스포 슬로프 라고
하는건 모건 넣고 모르겠어요
그럼 그 of mara 라고 하자 그냥 편안하게 그러면 곧 에고 2a
해버리면 은 둘 다 빠져 나오는 거에요 그냥 그래서 그런 경우에는 고투
가 편하고요 실제 그런데 고투를 써도 그거 갖고 문제를 삼는 프로그래머는
별로 없어요 아마 문제를 삼는 씨는 프로그램은 대충 고토와 나쁘다 악마다
라고 만 듣고 왜 나쁜지 도 이해를 못한 채 납 보니까 쓰지 마라 얘들아
생각해서 그들은 그러다 버스 지마 이런 개념인 것 같은데 그거는 제가
예전에 한번 어느 비디오에서 말인지 모르겠지만 아마 익셉션 세이프
프로그래밍 쪽에서 말했던 것 같은데 거기서 그런 얘길 하거든요 제가 그
프로그래머는 자기가 한줄한줄 짜는 코드의 내 누군가 이거 왜 1 그 가스
라고 물으면
이유를 될 줄 알아야 된다고 제기 2 거야 누가 고투 일단 물어봤을때 엇
않은 이 배려 올 색이 있어서 이게 더 깔끔하고 1픽 아쉬워서 결국 이
읽기 쉬운 야만 야의 문제에요
이렇게 하셔도 고투를 했어 이런건 이해가 되거든요 근데 고투 컨텐츠는
쪼금 애매하죠 사실은 왜냐하면 은 제가 고트 에 대해 지금 유일하게 쓸수
있는것 제가 아는것은 루프를 이렇게 두개 나올 때 뿐이고 심지어 다른데
쓸 수 있을지도 모르겠는데 제가 고투를 허용을 한다면 정말 사용을 한다면
언제나 아래쪽으로 점프 하는 말로 갈 것 같아요 그러니까 고투 에서
아래쪽으로 점프 하고 다시 위로 점프 하고 이런 사지 말라고 무조건
코트는 아래쪽으로 만 그러면 코드의 있다가도 그게 복잡해 지지가 않는
거예요
어차피 빠 루프 나가는 그 범위나 고쳐 이 밑에 나가는 범위나 그러나
빠지지 않고 는 똑같고 훈련 가독성 부분이 부분에서는 그리고 어디가
스테이트 가 바뀌는 지도할 수 있고 뭐 마찬가지 논리로 코드 중간에
하루에 중단 l 문을 열어 개방 는 경우도 있어요 어떤 사람에게 나쁘다
이 부문으로 다 바꿔서 아래 트위터는 1 비타민 해라
어떤 사람은 아니다 중간 미터를 빨리 해서 뭐 2푼 같은 이렇게 여러
가지인데 테이션을 빼라
이거 두 가지 부린 데 저는 리턴을 중간에도 상관없다고 생각하는 이유가
뭐냐면
그리고 좀 2탄 하는 순간 코 들어간 나가는 거거든요 밖으로 그러면
그거는
가독성 에서는 크게 문제가 없다고 저는 봐요 근데 이제 뭐 다른 쪽
주장도 제가 크게
틀렸다 라고 생각하지 않아서 저도 이렇게 적당히 밸런스 맞추는 것에 너무
인데 테이션 5개 6개 로 들어가 버리면 복잡해 지니까 중단에 적당히
얼리 악스 타기도 하고 아니면 무슨 책을 위해서 애라 채 카자미 턴
곧바로 하는 경우는 차이 괴력 아딸 끝나니까 그런게 옷 하기도 하고
그거는 결국에 가독성에 문제고 어머 한쪽이 반드시 옳다고 못하는 것 같고
이 고토를 얘기라도 되게 재밌어 주는 게 뭐냐면
제가 좀전에 익셉션 세이프 프로그래머 익셉션 핸들링 쪽을 얘기 했으니까
2구 투가 나쁘다고 한 이유가 바로 코드 상태를 예측할 가 너무 어렵다는
거에요 정확히 얘기하면 고추가 위로 아래로 왔다갔다 며 내가 지금 변수가
값이 어디서 뭘 설정 인지 모르겠는데 이물질 않아요
이게 되게 재미있는게
익셉션 세이프 프로그래밍 이라고 제가 한번 말했죠 까이 섹션이 나도 뭐
현재 상태에 문제가 어떻게 코드 인가가
익셉션 인 않은 상황에서 보통 디셉션 이 그 라인에서 뚫어 가면서 코드
밑에 코드를 실행한 시키니까 그 생 왕 에서 아 이 밑에 실행이 안
되더라도 현재 상태는 문제가 없게 하는 코드를 만들지 아모 길어 이런
개념이 기존 세이프 해요 뭐 여러 가지 단계가 있지만
결과적으로 이제 완벽히 퍼펙트한 상황에서는 그런것도 익셉션 이 나도 아무
문제없이 코드 돌게 하자 뭐 그런데
예를 들어 익셉션 이라도 그전 상태가 망가지지 않게 하자 이런건데
이게 되게 애매해 지는게 뭐냐면 그 예전에 한번 그 익셉션 세이트 가
되기 어렵다고 하면서 코드 샘플을 만드신 분이 있는데 되게 유명하신
분이에요 레이먼드 채니 얻나
그분이 나온 샘플하우스 실수를 한 부분이에요 나중에 누가 했고요 실수
했다는 것 고 친구예요 그렇게 엄청 훌륭하신 프로그램 얻으 실수 하는
정도의 그런
부 정도를 잘 제도하기 어려움이 2 3 이쁜데
재미 있는게 뭐냐면 예를 들어 이런 경우가 있다 생각을 해봐요
4 함수에서 어떤 오브젝트를 만들 소위 턴을 해요
그리고 그 올해부터 화면에 보여지는 오브젝 되기 때문에 기저부 풀풀
블랙을 트로 해줘야 되는거 이건 눈에 보여야 된다고 그래서
그리고 그 코드 m 따른 그 오브젝트 안에 따른
뭐라 그럴까 음 서버 오브젝트를 또 클릭해 주는 그 로직이 있다고 봐요
그러면 코드가 어떻게 되며 는 뉴 오브젝트 이렇게 나올 거 잖아요 뭐
게임 오브젝트 블로그 다음 줄에 모 게임 오브젝트 닭이 접을 리콜 추억을
해주고요
뭐 이건 프로퍼티 개념으로 이해하고 있네요 사실은 뭐 그리고 그 밑에는
거기다가 이제 뭐 뭐야 아까 그 오브젝트 달 뭐 자 차일드 원희목
스켈레톤 5년차 꿈 었다는 필요한 정보를 그리고 눈을 떠 붙였는데
예를 들어서 이 두 번째 위해서 익셉션 있나봐요
그러면 곧바로 나면서 전에 함수를 올라가는데 그럼 이 미비점을 플래그
쎄쎄쎄 투로 해봤자 나요
근데 아내의 일이야 차일드 없으나 잎이 좁은 도 안되게 하는 게 정상적인
비해 일이야 그러면
이거는 이제 나중에 오브젝트 올라왔고 b 적으려고 하니 그 그리려다 가
떡이나 여쭤 이런거 그럼 이 이 섹션에 안전하지 못한 하는거예요 그래서
이것을 올바르게 하는 먹은 뭐 그런 얘기에요 이제 그 처음의 오브젝트
만들고
비저블 초로 세팅한 이전에 차일드 를 먼저 만들어 주라는 거에요 유로
해서 차일드 에서 뻑이 나면 비주얼이 치료가 아니기 때문에
딸은 함수에서 걸 봐도 비쥬얼이 출국하면서 처리를 안 한다 뭐 이런 식의
내용인데
아
이해 근데 만약에 빚어 부른 폴스 이더라도 업데이트 해줘야 액티브는 또
기본 죄가 출하 봐 그럼 또 헷갈리는 것 이게 이 굉장히 매매 줘요
그리고 실제 뭐 뭣이 시험이 다 잡아 같은 위에 그 뭐라 그럴까
디폴트 패러 m 설정해 주는 법이 있잖아요 제가 왜 c 플러스 펄스가
이제 허용한다고 했던 것 같긴 한데 제가 지금 그건 정확히 기억이 안
나요
시 접하고 잡아 같은 경우에는 그냥 프라이 변수 c 선언하면서 곧바로
값을 갖게 돼 입하 잖아요 그럼 그거를 빚어 볼트를 해줬으면 은 또 이런
일직선 안경은 어떻게 해야되
트라이 캡쳐도 잡아 줘야 돼 이 이게 문제가 뭐냐면
아까 고투 가 문제라고 했던 그 상태를 볼 수 없다는 거 있잖아요 그게
똑같이 익셉션 이 들어 인데 는 코드 베이스 하다보면 그 문자가 똑같이
생겨
익셉션 이 나도 안전 되게 코드를 만들려고 태양 둘다 보면은
내 코드 한 주 한 주를 볼 때마다
이 코드가 6억 위에 와야 되나 말아야 되나 를 고민해야 되는 거야 로직
쌍으로 나온 문제가 없는 건데
예외 상황에 발 팔 될 발생할 때를 생각을 해서 이 코스가 이쁘다 전에
y 를 아니지 그러면 이게 여기서 액션 나오면 이게 만가지 4
그럼 이게 이게 돼야 돼 막 그런거 생각하다보면 은
장난아니게 이상해지고 것가
그리고 이제 트라이 2기를 뭐 캐치해서 파이널까지 돌다보면 은 당연히
캐치 안에서 뭔가를 도 처리할 때 이 섹션에 알수 것도 있어요 그걸 또
캐치 해줘야 되고 이런 이런 말도 안되는 센가 라면은 코드가
어느샌가 스파게티가 되는거예요
진짜 그게 문제가 코드가 지내다가 어느 한쪽에서 익셉션 이었으니까요
길었죠
그러면 이게 과연 상태가 여기서 오는 것은 그 다음 주 에서 오는 거랑
똑같이 유지가 되는가
이런 것들을 생각하며 는 코드가 깔끔하게 나올 수가 없어요
사람들이 가 독이 불가능한 정도의 코드가 나와요 그래서
이건 정말 어려운 개념이다 라는게
이제 뭐라 그럴까
일반적인 견해라고 봐야 저는 쉽지 않다 어렵다 는 일반적인 견해 고
그래도 이게 올바른 방법 이라는 거 반대 진영이 있는건데
저는 이거는 전에 몇 번 눈에 말했지만
예전에 문제를 고치기 위해 나온 그런 방법중에 하나죠
사실은 근데 그 방법을 제대로 고치지 못한 경우라고 봐요 잘못된 시구
저는 그래서 지금 젊은 지금 이게 어서 밖에 어떻게 고쳐야 될 지는
모르겠는데 제가 생각하는 것은 트라이크 치는 최소 하는게 맞고 보니
건축할 수 있는 코드는 그냥 다 고체 된다고 봐요
아 익셉션 상황 자체가 안 나도록 그리고 이제 으
크리가 작품 문제의 사실 소
시작 그곳 개당 가지 이제 뭐 이렇게
언어를 배우시는 분 도 그렇고 언어를 디자인 하시는 분들 제가 좀 뭐라는
건데 소치가 언어 디자인이
뭐라 그럴까 아카데미 위주로 디자인은 어느 로 이런 모순 이라고 하나요
그런게 빠지는 게 업계 막 많은 것도 같아요
그에 비해 이제 큰 회사 규모로 이제 진행되는 프린트도 있어요 그 언어
지원 되는게 이제 시작도 좋은 해요
이었고 잡아도 처음엔 누가 써니 할 때는 좋았다 그러더라구요
즈그 좋은 이었고 지금 라스트 라이드 사실은 오픈 소스 라고 하지만
모질라 회사에서 진행하고 있는 거잖아요
그 파이어폭스 봤는데 그런 언어들을 보면은
그 일어 이런 그 뭐라 그럴까
실수를 만들 수 있는 부분을 굉장히 줄이고 있고 그리고 그 그게 좀 몬순
되는 것들 그러니까 한가지 원칙이 쓴 그 원칙에 따라 가야 되는데 그
원칙을 여기서 이러고 적에는 저러고 그런 사랑 할 이유가 없는 그런 애가
많이 나와요 왜냐하면 그만큼 어느 한 사람이 끌고 가는 게 아니기 때문에
그래서
음 그 익셉션 이 이제 그 핸들링을 통해서 팩 열라고 해결하려고 했던 건
아는데
결국엔 고투 에서 생각했던것 문제를 그대로 다시 또 부활시키는 그런
경향이 있어서 저는
유지보수가 되는 코드가 쉽게 나오고 생각하시나요
2 그 그 익셉션 핸들링에 쪽에서 세이프티 코드로 그렇게 열심히 만들려고
노력하는 순간에
그리고 아까도 말했지만 굉장히 훌륭한 프로그래머 들도 언제나 실수는 문이
거고 그게 실수 한다는 경우는 결국에는 회사에서도 코드 절대 실수가
쉽다는 거고 이건 휴 아이의 문제지
그 절대 제가 볼땐 익셉션 을 어떻게 처리하고 만덕 않고도 만든 문제가
아닌것 같아요
그래서 뭐 이전에 굉장히 유명한 책 하나 있잖아요 러이 라이팅 스퀘어 코
등 가 마이크로소프트의 낳은 채 거기서 솔직히
뭐라 그럴까
입 섹션 에 대해서 그렇게 큰 비중을 두지 않아요 그렇게 안전한 코드를
쓰자 라는 데에서
익셉션 에 지금 받고 있는 비중은 생각보다 적은 것 같아요 오히려
남용을 해서 지금 문제지 그래서 하고 싶었던 말은 교주는 고투 는 유학을
해야죠
포트는 기본적으로 나쁘다 그러나 루프를 빠져 나올 땐 sd 루프를 빠져
나올 때는 쓸모 없을 뭐가 있다
정말 어디 그거에 쓸 때가 있다면 제가 여태까지 겪어보지 못한
그런게 있다면 무조건 코트는 아래쪽으로 만점 파하게
그런 식으로 하는게 맞고 똑같은 얘기를 이제 그 부수적인 얘기로
이제 뭐 새로운 언어가 나오는 새로운 기능이 나오거나 이랬을 때 건 제가
다음 비디오에서 얘기 할 건데
거기에서 오는 어떤 그 문제가 있는지
예전에 겪었던 문제 다시 우리가 부활시키고 있지 않는지 이거는 한번쯤 더
생각해 봐야 되는거 같아요 그리고 다행히도 소프트웨어 깨는 그 정도의
실제 프로그램 경우도 많아지고 실물도 제대로 돌아 보셨고
그런 분들이 이런 문제를 째 파악해서 이거는 문제라고 지퍼 주시는 분들이
있기 때문에 그나마 좀 다행이라고 생각해요
4 제 그거는 프로그래머 좋은 프로그램 되려면 은 그 조 그런 자세는 더
가지는게 좋은것 같아요
그래서 이제 그 정도로 오늘 포프 tv 는 마무리 하죠 예
포프 였습니다
