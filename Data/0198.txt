예 안녕하세요. 포프입니다.
오늘은 예전에 만들었던 비디오 두개를
좀 합쳐가지고 다른 얘기를 좀 해보려고 해요.
처음 합칠 비디오는
'코딩 스탠다드가 이렇게 빡셀 필요가 있나'
라는 말을 옛날에 했어요.
되게 오래전에 한 얘기인데
어차피 규칙은 깨는 놈만 깬다고
그런 얘기 했었죠
그르구
다음 할 비디오는
예전에 한번 아키텍트 코스를 다녀왔다는
얘기를 했었잖아요?
그래서 거기서
강사가 이제 뭐 
"애들다 코드 몽키다."
"걔네는 말그대로 별로 생각이 없고 
그냥 주면 코드만 열심히 짤뿐이다."
"걔네는 엔지니어가 아니다."
이런 얘기를 했었죠.
그 사람이 했던 얘기 중에 그런게 있어서
얘기를 하려고 그래요.
코딩 스탠다드가 왜 필요하냐
그런 얘기를 했어요.
이제 코딩 스탠다드..
그사람이 한 얘기가 뭐였나면
코딩 스탠다드는 길면 안된다.
그건 저하고 얘기가 똑같아요.
'길면 안된다'
몇 페이지 안으로 딱 하고
코딩 스탠다드는 반드시
뭐를 하고 뭐를 하지 말고만 써야지
그 외에
왜 그러면 안되고 왜 그래야 되는지를
하지 말라는 거예요.
어차피 그거 해봐야
걔네가 이해해서 할만한 사람들 별로 없고
어차피 코드몽키들은
"규칙 정해주고 그거 따라서 해"
뭐.. 조삼모산가?
뭐 그런 것처럼
따라오기만 할뿐이지 걔네들이 무슨
뛰어나 엔지니어가 되고
이런 거 생각하지 말라는 그런 사람이었거든요
그래서 이제
저는 이제 개인적으로
뭐라 그럴까
그 사람이 말하는 의도가
뭔지는 알아요.
워낙 그런
80% 90%의 코드몽키들을 
많이 봤기 때문에 아는데,
그 처음 왔던 코드몽키, 주니어들 중에서도
분명히 엔지니어급, 아니면 엑스퍼트급, 아키텍트급으로
올라갈 수 있는 애들이 있거든요?
그런 애들은 이유를 알고 싶어 하거든요?
그런 애들을 교육하기 위해
저는 오히려 그런 것까지도 설명을 좀
넣은 거까지 포함해서
몇 장이 안 넘어가야 된다는 생각을 했었는데
지금 뭐가 옳은 방법인지에 대해서는
정립은 안서요
근데
제가 예전에 이제 코드몽키..
아니 코드몽키가 아니라
코드 스탠다드가 까다로울 필요가 없다고 했을 때
그걸 이제 
코드 스탠다드가 까다로워야 된다고 말하면서
이런 저런 코딩 스탠다드를 말하는 
사람들이 있었어요. 사실은.
그 중에 뭐.. 당연히 올바른 말들을 하는
사람들도 있었고
근데 또 하나의 문제는
그 중에 굉장히 헛소리를 하는
사람들이 있었던 게 더 문제에요.
그런 사람들이 만드는 코딩 스탠다드를 보면
정말 의미 없고 이유 없는
코딩 스탠다드인 경우가 있었거든요?
그냥 "내가 이렇게 짰으니까 편해서"
이런 식의 개념이에요.
한 마디로 이제 뭐,
어쩌면 종교전쟁인데
"내가 믿는 종교는 이거고",
"내가 믿는 종교는 이거구"
"우리 신이 맞다."
이거의 개념으로 봐서
저는 그걸 별로 안 좋아 하는 건데,
문제는 그런 사람들이 만든 
코딩 스탠다드를 따라서 하면
정말 말 그대로
정말 제대로 코드 이해하고,
컴퓨터를 제대로 이용하고 이해하고
언어를 이해해서
코딩 스탠다드를 만들 수 있는 사람은
진짜 많지 않아요.
그래서 대부분이 이제 
다른 코딩 스탠다드 가져다가
많이 적용하는 거고
근데 그런.. 이렇게
좀 다른 나라에 사는 사람들이
스스로 코딩 스탠다드를 만들어 버리면
복잡하면 복잡할수록
저는 예전에도 말했지만
장점과 단점이 많다고 생각하거든요.
이거는 말 그대로 
그런 거 있잖아요
정말 똑똑한 사람들이 뭔가를 하면
정말 뭔가 잘하는 사람들이 뭔가를 하면
뭔가 잘해
그러구
정말 그런 사람이 아닌데
"아 그래 나는,"
"이걸 할 수 없어" 그러구
"내 자리를 찾아야지" 그러구
내 일을 또 열심히 하는 사람들은
또 잘해요.
근데
그런 사람 있잖아요.
"나 정말 못해!"
자기가 정말 잘났다고 믿는데,
하나도 잘나가는 게 없어
내 아집으로 버텨
"내가 잘났다는 걸 증명하고 싶어"
온갖 이상한 짓을 해요.
그러면 이제 그런 애들이 만든 코딩 스탠다드
뭐 이런게 있거든요
그거 따라하면
정말 힘들어지거든요
제가
회사 다니면서
뭐 온갖 유수한 회사
다 많이 다녀봤지만
본 코딩 스탠다드 중에서
훌륭한 코딩 스탠다드는
확률적으로 되게 적었어요 사실은.
그러구 이게 사실은
코딩 스탠다드의 문제보다는
정말
언어가 구릴수록 코딩 스탠다드를 
만들어야 되는 부분이 있어요.
언어에 실수할 수 있는
기본 동작들이 있기 때문에
근데 그거를 제외하고는
정말 코딩 스탠다드는
문제가 많은 경우가 있어요.
확실히.
이렇게 보면 제가 반대한다고 생각하는데,
저도 개인 나름의 코딩 스탠다드가
있거든요 근데
제 코딩 스탠다드가
남들이 이런 얘기를 했을 때
딱 봤을 때
"어 그것도 상관없어"
이러면 그니까 둘 다..
봤을 때 문제 없는 거면 다 그냥
같이 써요. 저는.
특별히 뭐 나찌처럼 무슨
뭐 반드시 '이 캐릭터가 이거고..'
막 이런 건 없어요
저는 가독성만 되면
코딩 스탠다는 크게 문제를 안 삼아요.
가독성 되고
크게.. 뭐라 그럴까
시스템을 날려 먹지않을 
그런 실수를..
시스템을 날려 먹을 만한 
실수를 막을 수 있는 코딩 스탠다드
그런 건 찬성을 하는데
가끔 그냥..
스타일 갖고 이렇게 하는
사람들이 있어가지구..
그건 좀 문제인거 같아요.
뭐든간에
제가 오늘 하고 싶었던 얘기는
그 사람이 말하는 것처럼
코팅스탠다드가 존재해야 되는
이유는 있긴 있어요.
단지 코드몽키들이 따라오게 하기 위해서라면
그러구 말 그대로 걔네들이
말 그대로,
뛰어나 엔지니어가 될 사람들이 아니라
그냥..
매일매일 코딩하면서
그냥 그런 거 있잖아요.
예전에도 이제 뭐 자동차 뭐...
공장 얘기를 들으면
자동차 그..
설계는 사람들 있고,
결과적으로는 그 설계본을 가지고
그거대로 맞춰서 만드는 사람들이 있어요.
그럼 그 맞추서 만드는 사람들이
우리가 흔히 말하는 코드몽키라고 본다면
이 사람들은 어차피 설계를 안 한다고 본다면
그런 규격을 주어야 되는 거는
맞을 수도 있다고 생각을 해요
제가 그런 직업이 지루하기 때문에
저는 그런 일을 하고 싶지가 않아서,
다른 사람들이 이제 지겨워 할 거 같기 때문에
저는 이제 그 사람들을 코드 몽키로
다루고 싶지 않다는..
그 마음이 있는 것 뿐이죠
근데 그게 이해는 돼요.
이해는 되고 맞는 얘기고
코딩 스탠다드의 의의는 그렇게 있고
그러구 그래도 코딩 스탠다드를 만든다면
말 그대로
이유는 없는 게 맞아요.
"이렇게 해야 되고"
"저렇게 하면 안된다."
-끝-
그게 맞긴 맞아요.
걔가 질문을 던지면
그제서야 나중에 뭐 이렇게
설명을 해줄 수는 있겠죠.
근데 뭐..
모르겠어요.
아직도 이 부분에 대해서는
그 사람한테 100프로 동의는 못해요.
그 아키텍트 강의하는 사람한테..
근데,
코딩 스탠다드가 적어야 된다는 건 
이해를 하고
그러기 위해서는 설명을 안 쓴다는 게
맞기도 한건데..
'코딩 스탠다드 또 많아지면 누가 그걸 외워서 쓰지?'
그런 생각도 들고
뭐 그런 결과적으로는
전에 말했던 그런 규칙을 어기는 놈만
어긴다고 그랬잖아요.
그러면
그런 애들은 결과적으로는
잘라내야 된다는 얘기인데
과연 회사 입장에서
당장 사람이 없는 상황에서
그런 애들 다 짤라낼 수도 없고
그럼 그런 애들을 위해 코딩 스탠다드를 만들면
결과적으로 언제나 규칙을 잘지키는 애들은
점점 할일만 많아지고
외울 것만 많아져서 힘들어지고
저는 거기서 언제나 갈리는 거 같아요.
코딩 스탠다드 보다는ㅡ
전에도 말했지만
똑같은 분야의 일을 여러명한테
바꿔가면서 주는 거
돌아가면서 주는 게 되게 중요한 거 같고
서로간에 코딩을 이해 못하면
어차피 망하기 때문에
서로 이해가 되면 되는 거고
그러구 정말 코딩 스탠다드가 엄청 빡세가지고
다른 그거랑 다른 코드를 
이해 할 수 없는 사람이 있다면
결국 어떤 사람은 그런 주장을 하거든요.
"이게 안 읽힌다"
이렇게 다른 스타일로 쓰면
근데
다른 스타일로 쓰더라도
읽히는 코드들이 굉장히 많아요.
사실은.
그거를 못 읽을 정도의 사람들이라면
어차피 그 사람들은 프로그래머의 자질은 
저는 없다고 보거든요
그런 거 있잖아요.
제가 만약에
어느 일을 하다가
뭐 이 커피숍에서 일하다가
다른 커피숍에 일을 해서
다른 머신을 만들더라도
내가 커피를 잘만드는 사람이면
다른 머신을 가지고 한다고 해서
못 만들지는 않거든요.
그런 거의 개념이에요.
상황이 바뀌는 거, 툴이 바뀌는 거,
규약이 바뀌는 거, 규칙이 바뀌는 거에 대해서
잘 적용을 하냐 마냐
내가 잘 적응을 할 수 있냐 마냐
그것도 굉장히 중요한
프로그래머의 자질이거든요.
뭐 엔지니어의 자질이기도 하고
그러구 마찬가지로 어느 회사나
프로세스가 다르기 때문에
그런 사람들 있잖아요.
이제ㅡ
한 회사에서 굳이 있을 필요 없고
그냥 여러 회사 가면서 크게 프로젝트별로
맡아주고 가는 사람들
그런 사람들 말 그대로 여러가지로
돌아다녀야 되요.
그런 사람들이 가장 돈 많이 받는
엔지니어이기도 하고 사실은.
그런 사람들은 결과적으론
그런 새로운 환경에서
보고 적응하고 빨리 이해하고
그걸 이해해서 새로운 걸 만들어내는
그런 게 되게 빠른 사람들이에요.
어찌보면
똑똑한 사람이기도 하고
이해력 빠르고
뭐 그런 사람들
일 잘하는 사람들이죠.
그런 사람들이라면
그런 주장은 하지 않을 거 같아요.
그냥 제가 볼 때는
둘 중에 하나죠.
이제 프로세스 좋아하는 사람들은
말 그대로..
뭐라 그럴까
자기가 실력이 없어서
프로세스 타령만 하는 사람
그런 사람도 많이 봤고요.
아니면
정말
자기가 가진 그런
직원들이
너무나 형편이 없어서
프로세스를 확실히 잡아가지고 돌리지 않는 이상은
절대 능률이 안 나오던 상황에서 프로세스 돌리는 사람
근데 이제
그런.. 그런 사람들이 있어요.
근데 이제 만약에 새로운 회사에 들어와서ㅡ
처음 들어왔어.
들어오자마자 프로세스 운운하면서
여긴 프로세스가 개판이기 때문에
자기가 일을 못한다고 말하는
시니어들이 있다면
그거는 보통은 실력이 없는 사람들이에요.
그런 사람들은,
실력 있는 시니어면
어떤 프로세스에 일단 적응을 한 다음에
그걸 다 이해하고 나서 고치거든요.
뭐.. 얘기가 샜는데
뭐 그냥..
제가들은 생각
그러구 제가 들은 이야기
코드 스탠다드에 대해서
그러구 저도 정립이 안된 얘기기 때문에
이렇게 던져보고
사람들이 뭐라고 하는지 좀 보고 싶어서
한 것도 있어요.
언제나 말도 많고 탈도 많은
코딩 스탠다드
음.. 또 얘기를 했네요.
네 포프였습니다.
