안녕하세요, 포프입니다.

버그를 고칠 때 가장 좋은 게 뭔지 알아요? 나한테 버그를 고치는 데 도움이 되는 거? 바로 Repro Case라는 겁니다. Reproducible Case, Reproduction Steps. 뭐냐면 이 방법만 따라 하면 버그가 재현됩니다. 프로그래머 입장에서는 이거를 따라 하면서 버그를 재현해 보고 중간에 디버그 브레이크 포인트를 걸든 뭐 하든 간에 몇 번씩 재현해 보면서 문제가 어디서 발생하는지 찾아서 그 원인을 고칠 수 있어요. 그런데 Repro Case를 빨리 캡처를 못했다거나, 어떤 장애가 났을 때 나온 많은 정보, 보통 로그 서버에 찍히죠? 그것들을 미리 수집 못해서 사라지는 경우들이 있어요. 그런 경우에는 보통 버그를 만들어두고 'Repro Case를 아직 못 찾았다. 다시 한번 뭔가 더 발생할 때까지 기다리자' 아니면 'Repro Case를 찾아주세요, QA님' 해서 need more info라는 버그를 재현가능한 상태를 찾아달라고 합니다.

근데 이거를 악용하시는 분들이 있어요. 그게 주니어이신 분들이 그러신 분들이 꽤 많습니다. 여기서 말하는 주니어는 보통은 연차 좀 쌓이고 대충 이렇게 해도 사람들이 주니어라고 안 보니까 뭔가 말하면 믿어주는 그런 주니어인 거죠. 약간 고인 물 주니어. 어떤 경우냐면 need more info 같은 걸 기다릴 때 갑자기 버그가 다시 재현될 때가 있어요. 그러면 그 순간에 곧바로 모든 데이터를 모아서 Repro Case를 구성할 수가 있거든요? 그럼 나와 있는 버그가 있고, 나와 있는 로그가 찍혀 있어요. 그 로그를 보고 잘 분석하는 것만으로도 '어떻게 해서 어떤 방식의 문제가 생기겠다'라는 결론이 나올 수도 있고요. 아니면 '이 로그만으로 충분하지 못하다', '로그를 더 박자', '데이터를 다 모아보자' 아니면 '이런 게 가능할 수 있으니, 누구한테 더 Repro를 하게 해 보자' 이런 2~3가지 결론이 나와야 해요. 그 상황에 다시 한번 이 세 가지 중에 아무것도 안 하고 아직 모르겠으니 need more info를 박는 거는 장난치는 겁니다. 한마디로 지금 발생했는데 내가 고칠 능력은 없고 고치기 싫고 그러니까 냅두면 '누군가 나중에 또 문제가 생겼을 때 보고 고치겠지'라는 그런 이상한 마음을 가지고 있는 거고요. 그게 실력이 안 돼서 그런 사람들이 굉장히 많아요. 고칠 능력이 안 돼서, 문제 파악 능력이 안 돼서, 과학적 사고방식이 안 되기 때문에 가정을 세우고 검증해 가면서 여러 가지 경우의 수 쳐내 가면서 실제 문제 해결하는 과정을 안 찾는 사람들. 그게 결과적으로는 주니어급이죠. 이런 경우에 황당한 것들이 많죠. 문제가 나왔어요. 실제 데이터도 또 추가로 찍혔어요. 근데 아무 바뀐 거 없이 그냥 need more info, 끝입니다. 그러면 그냥 일을 쟁여두고 남한테 맡긴다는 건데, 이게 주니어인 이유가 또 뭐가 있냐면, 주니어들은 일반적으로 되게 뭐를 알고 뭐를 모르는지 어려워하는 경우들이 많아요. 특히 신입 주니어일수록. 당연하죠. 지금 업무를 들어온 지 얼마 안 되고 신입인데 뭘 알겠어요? 그런 상황에서 되게 애매합니다. 내가 모르는 게 있으면 괜히 물어봐서 해를 끼치는 게 아닌지, 그럼 내가 시간을 더 들여야 하는지, 아니면 이 정도 해서 물어봐야 하는지 애매할 때가 있고, 물어보면 사수들은 어떨 때는 '더 고민하고 오세요', '이것도 찾아보고 오세요'라고 말할 때도 있고 '왜 진작 말 안 했어요?'라고 할 때도 있어요. 그 하나하나 어느 정도에서 질문을 하고 어느 정도를 혼자 찾아봐야 하고, 뭐를 알아야 하는지가 이런 피드백을 통해서 얻는 겁니다. 그래서 주니어 때는 사수의 피드백, 부정적인 피드백을 굉장히 고마워하는 게 좋아요.

근데 요즘 '안 그러는 게 옳다'라는 식으로 엉뚱한 쪽으로 몰아가다가 폭삭 망하는 경우들이 많이 있죠? 그런 거를 중요시해야 하는데, 그게 어려운 건 알겠어요. 근데 연차가 쌓였는데 이러고 있다? 그러면 뭘까요? 내가 need more info를 다시 찍는다는 얘기는 그 문제를 분석하고 해결할 능력이 없을 가능성이 굉장히 높습니다. 그러면 내가 그게 없다는 걸 알고 누군가한테는 말해야 해요. '제가 이 로그를 볼 줄도 모르겠고, 제 손에서 해결이 안 되는데 한번 봐주세요'라는 얘기를 해야 하는 게 정상입니다. 그게 주니어들이 질문하면 보통 사수들은 '더 알아보세요' 아니면 '이겁니다'라고 알려주는 거고, 이게 연차가 2년 3년이 쌓였어요. 근데 이걸 물어봐요. 그러면 이제 윗사람은 황당해하죠. '이걸 몰라요?' 그 얘기를 듣는데 자기는 이미 나아지는 게 없고, 나아질 수도 없는 상황이에요. 이미 결론이 나버린 거거든요? 그럼 그런 말을 최대한 안 듣고 내가 모른다는 거를 숨기고 넘어가는 게 그 사람들한테는 고용 안정성을 보장하는 굉장히 중요한 일입니다. 그러면 나는 돈 받고 일하면 회사를 위해 일해야 하거든요? 근데 아니죠? 나는 나를 위해 일하는 거기 때문에 포기한다는 거죠. 창업해서 그냥 혼자 나가시면 되는데 그분들이 창업해서 혼자 할 수 있는 능력도 없을 수가 있죠. 이런 사람들이 있을 때, 문제들이 생기는 거예요. 그래서 버그가 발생하고 그 버그에 대한 대응이 어떻게 되는지를 꼼꼼히 보는 리드라든가 프로젝트 매니저가 반드시 있어야 해요. '자, 이 버그 need more info인데 또 need more info래 뭐가 막혔어?' 그럼 그 순간에 '아, 이게 내가 슬쩍 넘어갈 수 없구나' 해서 알아서 노력이라도 하기 시작을 하거든요. 그런 문제인 겁니다.

지금 말한 거 다 요약하면 뭐냐? 버그가 뭔가 나왔다면 그 순간에는 버그를 고칠 수 있는 아주 훌륭한 데이터가 존재하는 짧은 시간이 로그가 사라지기 전까지 최소한 있습니다. 그 시간 안에 고쳐야 해요. 그때 고칠 수 있는 정보가 충분치 않다면 정보를 모으기 위한 뭔가를 해야 해요. 근데 내가 정보를 모르거나 판단이 안 서요. 그럼 누군가한테 부탁해서 도움을 요청해야 해요. 그게 버그를 고치는 유일한 해법입니다. 이거를 안 고치고 쟁여 두면 버그 수는 계속 올라가고요, 버그 수가 계속 올라가는 것 자체가 회사가 개판이라는 얘기예요. 그 버그 수가 줄어들어야 하는 거예요. 나올 때마다 줄고 오르고, 줄고 오르다가 결국 0 한번 찍고 또 오르고, 0 한번 찍고 오르고 이게 정상인 거거든요? 그게 오르고 있거나 회사가 개판이라는 얘기는 회사 위에서의 문제가 아니라 회사 직원들이 개판이라는 얘기입니다. 일반적으로. 직원이 개판인 이유는 위에서 개판인 경우도 솔직히 많긴 하죠. 위에서 관리를 제대로 못 하니까. 관리라는 게 어떻게 보면 사람을 키우는 것도 있지만 잘못된 행위들을 못 하게 하기 위해서 충분히 세이프가드가 있는, 잘못된 거 하면 누구나 다 아니까 차라리 처음부터 '시간 낭비하지 말고 올바른 일을 하세요. 그게 우리 회사가 중요시하게 여기는 방침입니다'라는 걸 보여주는 것도 되게 중요한 거예요.

그래서 이미 재현된 버그가 있다? Repro Case가 분명히 있다? 근데 그걸 고칠 생각을 안 하고 need more info 받고 넘어가는 거는 주니어의 일일 거예요. 근데 정말 초짜 주니어, 신입 주니어는 차라리 그럴 때 '이거 어떻게 해결하는지 모르겠습니다'라고 물어볼 거고, 아직도 주니어인 사람들은 그거를 오히려 뭉개고 넘어갈 가능성이 있어요. 지금 발견 안 되면 문제가 없을 거라 생각 하거나, 아니면 나중에 누군가가 발견했을 때 자기가 이거를 예전에 발견했다는 걸 모르거나 이런 식의 생각을 할 수 있기 때문에 말이죠. 그래서 회피 성향이 좀 있거나 아니면 거짓말을 잘하시는 분들이 이런 경우가 많아요. 회사에는 다른 쪽으로는 긍정적인 분일 수도 있지만 개발 쪽으로는 그리고 회사의 코드 품질 보장, 코드 유지보수를 위해서는 굉장히 큰 해가 되시는 분 중에 하나라고 말씀을 드릴게요. 그래서 회사의 성향에 따라 잘 아시겠지만, 버그를 고칠 수 있는 정보가 나왔는데 안 고치고 need more info 받고 아무 대응도 안 하고 그냥 '다음에 좀 더 잘 되겠지'하거나 코드가 바뀌는 값이 need more info만 된다? 그건 일반적으로 잘못된 겁니다.

포프였습니다.