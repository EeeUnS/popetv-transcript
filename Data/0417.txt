안녕하세요 포프입니다
저번 편은 결방을 했어요
좀 감기가 들어와서
비디오로 만들려면 못만드는 건 아니었는데
귀찮더라고요 그래서
한번 걸렀고, 이번에는
두번 거를 수는 없으니까 열심히 만들어야지
만들려다가 원래는 그냥
짧은 광고를 할려고 그랬는데 그러면
성의가 없다고 욕을 먹을까봐 그것보다는 좀 더
기술적인 도움이 되는 얘기를 하자
라는 생각을 해서 목록을 쭉
앞으로 비디오 만들 목록을 적어놓은 노트가 있거든요
그걸 보다보니까 예전에 말해야지 라고 적어뒀던 것 중에
한 몇년을 말 안한 게 있더라고요
그런데 재미있는 건
그거 왠지 말한 것 같은데?
라고 생각이 들었지만
이제 포프티비 서치엔진에 찾아보니까 없는것 같아
아 말해야겠다 라고 해서 말해요
제목으로 이미 나가서 알고 있겠지만
프로파일  가이디드 옵티마이제이션 이라는 거예요
그게
비쥬얼 스튜디오 제가
몇년 전 시애틀 내려가서 MVP이기 때문에
걔네가 지금 만들고 있는
새로운 기능을 미리 볼 수 있는 기회가 가끔 있어요
거기서 봤던 거고 그거를 이제
공식으로 발표되면 얘기를 해야지 라고 생각을 했다가 안했던 것 같아요
그러면 이게
약간은 좀
혁신적이라고 할 수도 있고
당연한 거라고도 할 수가 있는  그런 최적화 방법 중 하난데
일단 보통 저희가 최적화를 생각을 하면 이런 식으로 작업을 해요
참고로 지금 말하는 부분은
지금 말하는 기능은  비쥬얼  C++에 있는 거예요
이게 이제
c#에는 없다고 알고 있어요
개념이 뭐였냐면은
보통 여태까지 저희가
최적화를 할 때 어떤 식으로 하냐면
게임을 만든 다음에 게임을 실행을 시켜요
그러면 게임이 원하는 그런
속도가 안나오는 경우가 있죠 아 이건 게임이 초당
60장 그리거나 30장 그려야 하는데
어딘가 느려
그러면 저희가 보통 어떻게 하냐면
워낙 코드가 방대하고
어디가 느리다는 걸 확실히 알아야 되잖아요
그러면 보통은 이제 프로파일이라는 걸 해요
예전에는 함수마다 이렇게
시작시간 끝나는 시간 이런걸 로깅해서
죽 적은 다음에
게임이 진행되면서 어느 함수가 어느정도 속도를  내고있는지를
테스트 화면에 보여주거나 툴로 보여주거나 하는 게 있었고
나중에 이제 그래픽 쪽은 마소가 엑스박스 내놓으면서 엄청난 디버깅 툴을 만들어서
실제 게임 도는 도중에 클릭 한번만 하면
캡쳐 다 해서 뭐가 얼마나 걸리고 이런걸 보여주고
심지어는 분석도 해줘서
아 픽셀 셰이더가 느려 아 여기서 텍스쳐 읽어오는 캐시가 너무 문제가 있어
아니면 단순하게 계산을 너무 많이 하니
아니면 화면에 최종적으로 뿌려주는게 느려
이런 걸 다 보여주는 그런 툴이 나왔어요
이런 툴을 보통 저희가 프로파일러 라고 해요
GPU 캡쳐 이렇게도 이야기 하지만
프로파일을 뽑는다 어떤게 어느정도 속력이 속도가 걸리는지
프로파일러 라고 해요
그게 gpu는 좀 많이 마소 덕분에 처음에 되게 앞서 나갔고
그 다음에 cpu 프로파일러는 제가 지금까지 말했던 건
함수 시작부분에 start  end 찍고 이름 정해서 나중에 보는 그런
라이브러리 였잖아요
요즘은 이제 인텔쪽에서 좀 많이 처음에 이끌어 나갔는데
자동으로 그걸 해주는 것들이 점점 등장하기 시작을 했어요
보통 함수가 실행하고 이런건 어셈블리단에서 함수를 호출하고 점프하고 돌아오고 이런 과정이니까 어떤 함수가 호출되는 지는 알 수가 있잖아요
그 함수의 이름을 모를 뿐이지
그러면 이제 그거하고 컴파일 할 때 나오는  pdb 파일 비쥬얼 스튜디오 용으로
프로그램 데이터베이스인거 같아요 제대로 보진 않았지만
거기보면 실제 이 주소는 이 함수고 저 주소는 저 함수고 이런 정보들이 많이 들어있어요
그럼 그걸 기반으로 쫙  콜 트리를 뽑아줘요
아 메인함수 도는데 33ms 였는데
그 안에서 함수 a는 16이 걸렸고 이건 5가 걸렸어
그걸 + 버튼 눌러서 트리를 쫙 열어보면 그 안에
a 란 함수 밑에서  니가 12345 이런 함수를 호출했으니까
이건 몇 ms걸렸고 이건 몇번 호출 되었고
이런걸 자동으로 많이 해줘요
지금 비쥬얼 스튜디오 2017을 쓰시는 분들은
c++ 프로그램 도는 도중에
아니다 c++ 프로그램을
돌릴 때 메모리정보 쫙 나오잖아요
cpu정보도 나와요
거기서 캡쳐 한번 누르는 것 만으로도
그런 프로파일 뽑을 수가 있고
역시 윈도우즈 상황에서 비쥬얼 c++을 쓰시는 분들은
게임같은 거 실행할 때
보통 f5눌러서 실행  하는데
알트 f5던가 시프트 f5던가  누르면 그게
그래픽 애널라이저가 도는 상황에서
프로그램이 실행되고, 캡쳐 한번 하면 아까 말했던  그런 정보들이 나와요
그래서
그렇게 프로파일로 본 다음에
아 요 부분이 느리구나 이 함수가 만번 호출되는데
이게 전체 시간의 5%를 차지하고 있어
그럼 이거를 두배만 빠르게 해도
2.5%가 되겠구나 그런식으로 보면서
함수 하나하나 고치고 다시 프로파일 뽑아보고 이런 과정이었어요
좋죠 뭐 단순한 잡무이기도 하고 다양한 걸 고칠 수 있는 거기도 한데
뭐 그런건 알고리즘적으로 문제가 있다거나
언제나 소프트웨어 공학에서 신경쓰셔야 하는 거는
메모리를 많이 먹으면 언제나 뭔가를 빠르게 만들 수 있는 기회가 있는 경우가 대부분이고
메모리를 조금 쓸려면 좀 속도를
포기해야 하는 그런 상황이 많아요
물론 코드를 워낙 개판으로 짜놔서
메모리도 줄이고 속도도 늘릴 수 있는 경우가 있지만
그럼 이제 그걸 다 저희가 판단해가면서 하는 거예요
그럼 그게 저희가  손으로 최적화 하는 그런 걸 여태까지 해왔던 거고
그거 외에도 컴파일러가 자동적으로 해주는 최적화들이 있어요
비쥬얼 스튜디오 같은 경우에는
디버그 릴리스 드랍박스가 위에 있잖아요
디버그로 하면 최적화 하나도 안 들어가고 인라인 하나도 안하고
있는 그대로 느리게 도는 코드인 반면에
릴리스 빌드로 구우면 자동으로 최적화 옵션이 켜지거든요
다 바꿀 수 있지만, 인라인도 들어가고
그리고 안 쓰는 함수 다 빼버려서
실행파일 작게 만들고 이런 기능까지 다 있어요
그럼 그걸 돌리면 일단 뭐
웬만한 코드는 10배까지 빨라질 수도 있다고 생각하거든요
10배는 좀 무린가 코드가 엉망이지 않는 한
어쨌든 디버그 빌드보다 빠르고 디버그 정보가 다 빠지기 때문에
최종 출시할 때는 당연히  릴리스 빌드로 구워야 하는게 정상이고 해킹같은거도 덜 당하려면
그럼 릴리스 빌드로 구우면 그거 하나만으로 컴파일러가 알아서 최적화를 굉장히 많이 해줘요
그리고 보통 아까 말했던 프로파일 뽑는 그런 기능들은 당연히 릴리스 빌드에서 돌려야만 하고요
왜냐면 디버그 빌드로 돌린거 최적화 컴파일러가 다 해줄 걸 내가 손으로 해야 할 이유는 그다지 없어요
뭐 이전에 디버그 빌드를 유지하라는 이야기에서는
그 이유를 얘기했지만 성능적인 문제에서
그러면 릴리스 컴파일러가 해주는 일이 많을수록
저희는 손으로 최적화를 할 일이 적어지는 거예요
예전에는 정말 말도 안되게
if문만 잘못 써도 손으로 쓰는
커널 if문 있잖아요 물음표 찍고
삼항연산자 그래
물음표 찍고 콜론 찍는 if-else가 한문장에 들어가는    ( e.g.  A ? B : C )
그거를 하는 것 보다 if문이 느린 경우도 옛날에는 있었고
그리고 if를 쓸 바에는 switch를 쓰는 경우가 가끔
function 포인터 쪽으로 어떻게 컴파일러 최적화가 되면서 더 빨라지는 경우도 있었고
다양한 여러가지가 있었어요
아니면 스위치 아까 말했던게 안되서 펑션포인터로 만들어서 배열에 넣고 점프를 하던가
근데 컴파일러가 많이 발전을 했고
그리고 이제는 컴파일러가
곱셈을 할 때 부동소수점 같은 float 타입
하나하나 곱셈을 하는 걸 네번을 하면
컴파일러가 그걸 자동적으로 하나로 뭉쳐서
벡터로 한번에 곱해주는 경우도 있어요
cpu자체가 벡터 프로세스를 많이 지원을 하니까
그래서 최소한 컴파일러가 해주는 거를
쳐 받아먹어
안되는 것만 최적화를 하는게 맞는 거예요
그럼 프로파일 가이디드 옵티마이제이션
맞을꺼 같은데...제가 정확히 이름...
Profile Guided Optimization
프로파일로 가이드 한
방향을 잡아준 최적화예요
이게 어떤 방식으로 돌아가냐면 되게 재밌는게
아무리 컴파일러가 처음 최적화를 해줘도
최적화는 그냥 코드를 보고 아 이런 코드는 이렇게 하는게 더 빠를 거라고 최적화 해주는게 전부예요
실제 프로그램이 실행 중에 어떤 함수가 더 빠를까
어떤 함수가 몇번이 호출될지를 가늠할 수 있는
방법은 있겠지만
그 가늠하는 함수의 호출 경로가
많은 데이터에 의해 결정이 될 때
실제 게임이 그렇잖아요
내가 무슨 이런 스킬을 가지고 있을 때 당연히 그 스킬에 관련된 function만 되게 많이 호출 하겠죠
그런 경우에는 판단할 방법이 없거든요
그럼 최적화를 해야 할 때 전반적으로 봤을 때 아 이게 지역적으로 봤을 때
이 함수 하나가 이런거 최적화 될 수 있어
이 함수가 이 함수를 호출하기도 하니까 이렇게 최적화를 하면 될거야
이런 걸 하는건데
프로파일 가이디드 옵티마이제이션은 비쥬얼 스튜디오 옵션으로 있어요
실행할 때  프로파일 가이드 옵티마이제이션을 켜고 실행하기 메뉴가 있을거예요
저도 본지 오래되서 기억이 안나는데
그걸 딱 실행을 하면
프로그램이 보통때랑 똑같이 실행이 되요
근데 재밌는건 뭐냐면
이거를 내가 실행하면서 게임도 해보고 레벨 들어갔다 나오고
막 이런거를 비쥬얼 스튜디오에서 내부적으로 프로파일을 다 찍고 있어요
그리고 딱 끄면은 이제 그걸 지가 분석을 해서 아 이 함수가 몇번이나 호출 되고
이 함수가 몇번이나 호출이 되고
이런걸 쫙 기록을 해둔 거예요
그럼 거기에 해당하는 파일이나 정보가 나와요
그럼 다음에 빌드를 할 때
야 이 정보를 이용해서 최적화를 하게 빌드를 해봐 라고 할 수 있는 기능이 프로파일 가이디드 옵티마이제이션 이예요
구글가서 쳐봐도 나올 거고 제가링크를 걸 수 있으면 아래에 걸게요
그럼 이게 지금 말하는게 뭐냐면
장점과 단점을 이야기할게요
장점은, 예전에 우리가 프로파일 꽂아보고 아 이 함수가 좀 느리다 손으로 고쳐보자
라고 하는 것의 어느정도를 컴파일러가 미리 해주는거예요
그러니까 함수가 만개가 있으면 그중에서 게임에서 주로 쓰는 함수가
백개다. 그럼 그 백개를 최적화 해야 하지
한 프레임에 한번 호출하면서 시간  0.1%차지하는걸 함수를 고쳐봤자 의미가 없잖아요
그럼 컴파일러는 기본적으로 어떤 함수가 어떤 함수를 호출하는지를 봐서
아 이거를 인라인 한다거나
아니면 함수를 뽑는다거나 이런식으로 했을 때
어떤 게 더 빠르다는 것을 대강 측정을 할 수가 있는거죠
그게 장점이예요 사람일이 줄어들 수  있다
두번째는 아직은 제 생각에는
이거를 예네가 지금 하고있는지 아닌지는 모르겠지만
프로파일 가이디드 옵티마이제이션 하면은
프로파일 정보가 나오고 그거에 기초해서 컴파일러를 다시 빌드를 할 거고
다시 프로파일을 돌릴거잖아요.
이건 약간 머신러닝 처럼
시도해보고 얼마나 빨라졌나
이거 다른거 시도해보고 얼마나 빨라졌나
이거를 굉장히 많은 사람들의 컴퓨터에서
확인이 가능해요 개발자 컴퓨터에서
개발자가 천명이 이 기능을 쓰면
이거 하는지 안 하는지 모르겠어요 마소에서 그 테스트와결과를 보고 어떤 옵티마이제이션이 더 낫다
라는 걸 점점  최적화를 시켜서 업데이트 할 수도 있겠죠
그게 제가 생각하는 장점이예요
단점은
단점이라기 보다는 이거를 확실히  쓰기 조금 어려운 부분 중 하나는 뭐냐면
결과적으로는 개발자 머신에서
프로파일 가이드 모드
키고, 옵티마이제이션 기능을 키고
게임을 충분히 플레이를 해야만
이 데이터가 나온다는 거죠
이거를 당연히 자동화를 시킬수도 있을 것 같아요
한 기계를 두고 오토메이션 테스트를
돌린다거나, qa를 돌린다거나해서
그 옵션을 키고 다 돌린 다음에 거기 나온 데이터를
소스코드 리포에 집어넣고 다시 개발자가 받고, 빌드해서 쓰고
빌드하는 방식 그것도 가능하겠죠
근데 이제 뭔가 한단계 더 들어가야 된다는 거
이건 정말 개발자가 게임을
엄청 많이 해서, 프로파일을 만들어야 한다
프로파일을 만드는 개발자가 몇명밖에 안 되어야겠죠
모든 개발자가 만들어서 그 프로파일 넣기 시작하면
이게 머지가 안되는 상황에서는 힘들어지겠죠
그럼 이게 한단계 더 발전하면 어떻게 될 수 있다고 생각을 하냐면
프로파일 서버를 설치를 가능하게 하는 거예요
그럼 이제 내 컴퓨터에서 프로파일 가이드 옵티마이제이션 키고
막 돌리는게 저쪽 서버에 다 저장이 되고
딴 컴퓨터에서 하는 것도 저쪽 서버에 다 저장이되고
그럼 그 정보를 모아다가 걔네가 다 취합을 해주고
자동으로 그걸 이용해서 빌드하게 해주는 그런
서비스를 만든다면 훨씬 더 사용하기 편하겠죠
일단은 그당시에 제가 비쥬얼 스튜디오 c++에
새로나온 기능으로 봤을 때, 두가지 가장 큰 기능이 뭐였냐면
하나가 자동 벡터화
아까 말했던 플로팅 포인트 열개가 있다면 10개를 차례대로 곱할 때
그거를 벡터곱셈으로 두번 세번에 끝내주게 해주는 것을 자동으로 해줘요
그거하고 이 기능이었어요
자동 벡터화는 딱히 내가 키거나 끄지 않아도 이미 해주니까 혜택을 보고 있을텐데
PGO(Profile-guided optimization)는 아직
아직도 약간 수동적인 느낌이 있어서 말했고
그걸 제가 요 기능을
처음에 테스트해보고 안 쓴지가 좀 됬어요 사실은
이게 자동으로 되는지는 아직 잘 모르겠어요
예전에 같은 경우에 비쥬얼 스튜디오가 보통
언제나 모든 것을 한번은 수동으로 버튼 몇번 눌러서 하게 하다가
나중에는 자동으로 계속 되게 툴을 바꾸고 있잖아요
cpu나 메모리캡쳐 하는 그런 기능처럼
이거를 자동으로 둬서 자동으로 빌드가 가능하게 했을지도 모르겠는데
그거는 별 의미가 없다고 생각하는게
내 컴퓨터에서 아무리 프로파일돌려서 그거 정보를 지가 알아서 해갔고 빌드 해 봤자
빌드머신 가는 건 거기에 프로파일 정보가 없잖아요
그럼 내 컴퓨터에서는 빠르게 돌던게 빌드머신에서 빌드하면 느려질 수 있다는 거는
그거는 올바른 방향은 아닌 것 같은데
정확히는 어떻게 되고있는지는 모르겠어요
한번 이제 시도해 보고 싶은 분은
아 이런 기능이 있었는데 몰랐네 하고 한번씩 써보고
괜찮으면 이걸 아까 말했던 제가
어떻게 빌드스탭을 만들어야 하는지
PGO파일 만들어서 넣어놓으면 한다거나
아니면 취합 빌드 서버를 지금 마소가 안 줬으니까 내가 직접 만들어 쓴다거나
그런 방향을 고민하시는 것도 나쁘지 않을 것 같아요
게임 빌드 파이프라인 쪽에서
그정도면 오늘 할 말은 한 것 같네요. 포프였습니다.
