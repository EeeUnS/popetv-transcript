예 아니어서 포프 입니다 음 오느라 할 얘기는 더 제목이 모르나 갈 지
모르겠는데
어제 그제 이제 폭 tv 슬랙 빵에서 얘기를 하다가 나온거 에서 제가
그냥 대충 대답을 하다가 거냐
아 이렇게 설명할 수도 있겠구나 라고 해서 어 비디오를 만들고 싶었어요
뜬 거기에 나왔던 질문은 뭐냐면은
그니까 기술 쪽을 주로 키
뭐 기술 제품을 만드는 회사가 아닌 약간 쪽 비즈니스 관련 뭐가 좀
전통적인 그런 비즈니스 그쪽 관련 의 제품을 만들거나 서비스를 만드는
회사에서 일하시는 개발자 분이 그런걸 물어 봤어요
아 역시 비즈니스 회사 보다는 뭐 테크 회사의 있는게 프로그래머의 발전이
빠른 야 음 근데 제가 이거에 대한 답변 옛날에 분명히 말해 했었거든요
다른 비디오에서 말했을 때 이제 o 보니 성장하고 그러려면 당연히 기술
쪽을 하는 회사 있는 게 좋다 는 식으로 얘길 되게 많이 했었어요
네 그렇게 생각을 하다 보니까 이제 뭐 그건 은 일반적인 얘기고 물론
예외는 당연히 되어 있다고 생각을 해요
제가 다닌 기술 회사 중에서도 아 정말 개판인 것도 있었고 뭐 비즈니스
회사를 제가 다녀본 적이 한 두 세 군데 밖에 없으니까
거기도 정말 뛰어나 다시 일하고 싶다 라고 생각하는 회사나 솔직히 아직은
없었는데
분명히 있을 거라고 생각을 해요 그래서 그냥 고민을 하다가
도대체 이게 왜 이런가 라고 생각을 하다가 보니까 그냥 어제 든 생각은
그리고 그동안 생각해왔던 게 조금 정리가 된건데
그냥 좀
뛰어난 인재 드라고 이라면 뛰어난 인재들은 그리고 자기 일을 잘한
사람이에요
자기의 맡은 일을 그 일이 모든 간의 그거를 잘하는 사람 그리고 그걸
열심히 하려고 하는 사람들이고 일을 하며 는
일이 재미있다 그리고 개인의 발전이 수밖에 없다
이런 생각을 했어요 그럼 대체 일을 잘하는 사람이 뭐냐 라는 막 결과
나올 수밖에 없잖아요
어떤 사람은 뭐 컴퓨터 쪽에 아니라 3일 스 쪽이라고 할 때 세일 스를
잘해서 사용자를 받아 오는 사람 물건을 팔아 오는 사람이 일을 잘하는
거냐 아니면 은 그 그 사람 보다는 약간 3일 스를 못하지만 3일 스를
해왔을 때 그 고객이 이제 오랫동안 남게 유지할 수 있는 사람이 중요한
건 야 이건 어찌보면 에세이 스를 할 때 얼마나 거짓말을 했고 아니면은
얼마나 거짓말 한 걸 나중에 뒤에서 제 메꿔 없고 아니면 거짓말을 전혀
아냐고 정직해서 롱텀 릴레이 주로 만든게 도 자랑 거냐 뭐 이런식의 건
나뉠 수 있는데 제 성향상 은 당연히 뭐 펌프 n 덤프 라고 하는거 별로
안 좋아하기 때문에
그런것을 좋다고 볼 수 없죠 근데 그건 3일 쓰란 사람이 얘기했고
개발하는 삶도 똑같은거 같아요 제가 한동안 어떤 개발자가 훌륭한 엔지니어
고 어떤 사람이 뭐 뛰어나고 이런 얘기를 않겠는데
그냥 이제 다 그 필요없고 그냥 생각해보면 은
되게 단순히 이걸 수도 있다는 생각을 해요
그 제가 뭐 테크 회사 쪽이 훨씬 더 재미있고 발전이 많다
그리고 비즈니스 만 하는 회사 쪽에서는 발전이 없다 입어 이런식으로
얘기했던 것도 지금 제 생각에는 그냥 통계적으로 통계적으로 어느 분야에
어느 직종에
그렇게 뛰어난 사람들이 많이 입니다 이 문제인거 같아요
그 뛰어나다는 게 아까 말했듯이 이렇게 자기 일을 잘하는 사람 자기 일을
잘한다는 것 자체가 주어진 일이 아니라 우리 주어진 일만 하면 자기를
잘하는 사람은 아니에요 왜냐하면 결과적으로 나혼자 뭔가를 할 수 있는
사람이 아니라 남이 계속 나한테 이를 줘야 되고 나을거 해야 되는
사람이고 그 다음이 잠깐 일을 못 주는 못해 바쁜 시기 나 그렇게 왔을
때 그 사람이 이제 모자 김옥수 못하는 걸어갈 수도 있지만 저 자체의
효율성 도 안나오는 거죠 저는 누군가가 기름칠을 해줘야 돌돌 수 있는 깊
기가 되는거고
오히려 내가 스스로 키 기름칠을 해 가며 돌릴 수 있는 자율 기계는
아니라는 거죠 그래서 그런거 에도 보면은 스스로 일을 자 찾고 아니면은
이제 남이 보지 못한 여러 가지 문제점들을 찾아갔고 그거를 고치려고 하고
아니면 남자를 하이 정도는 돼 라고 넘어가는 거
그러나 고객들이 봤을땐 그것때문에 안 빈 정상 하고 뭐 일약 못 할 수
있는 부분들을 미리 찾아서 또 잘 고치려고 하고 있는 약간 음 기준이
높은 사람 뭐 자기한테 약간은 가혹한 사람일 수도 있고 그루브 어찌보면
은 모든 제품을 만들 때 모든 기술을 만들 때 굉장히 혁신적인 순수과학
또 있지만 저희 개발자의 입장에서는 그런 기술이란 게 보통은 고객의
선택하거나 아니면
직접적으로 개선해 가거나 간접적으로 다른 비즈니스 통해서 고객의 손에
가거나 그리고 이 거라고 보거든요
그러면 그런 부분을 할 때는 이제 유저의 미드도 알아야 되는 그런 분도
있어요
물론 유저의 니즈를 우리가 알아야 되는게 개발자의 목수 아니라고 할 수도
있지만 그러면 은 이제 개발자가 아닌 우리 위에서 그런 고객의 니즈를
파악해 서 스펙을 뽑는 사람이 약간 으
훌륭하게 일을 못할 때 과연 내가 잡아줄 수 있냐 까지도 포함이 되는
거겠죠
그러면 좀 전에 고객의 니즈를 잡아서 어 이제 뭐 스펙을 뽑는 사람을
얘기했어요
그럼 그 사람이 똑똑하다 면 당연히 제 일을 쉴 수밖에 없는 거에요 그죠
근데 또 이렇게 생각해보면
그런 사람이 똑똑한 성능이 얼마나 있냐 라는 걸 또 지 궁금하게 얘기할
수밖에 없어요
그러면은 그 사람들이 뭐 당연히 전공이
뭐 컴퓨터 쪽일 수도 있지만 어찌보면 어떤 입문 쪽에 입문기 쪽으로 가서
거기서 특별한 기술이 없이 사원 쪽으로 갔다가 이제 그냥 오래 버텨서
올라가는 사람도 있거든요
음 그렇게 보면 은 결국 전체 인구 중에 자기를 잘하는 사람이 뭐 푸른
지 모르겠지만 우리 흔히 말하는 28 10 비율로 올해는 그 20% 의
사람들이 더 많이 있는 분야 더 많이 는 회사
그래도 좋다는 거죠 그리고 그런 회사들은 당연히
뭐 당연히 아
일단 뭐라 그러죠 사원 처우가 개판 은 아니겠죠
이게 부터 급이 될 이유는 없지만 개판 아니겟죠
그런 똑같은 의미에서 제가 오늘 뉴스를 읽었는데 약간 찌라시는 있을 수도
있는데
테슬라가 최근에 굉장히 많은 사람들을 구조조정을 했어요 먹었다 천명
수준이라고 하는데 거기 를 떠나면서 짤려 나가는 하면서 트위터에 그래도
테스 란 태어난 것이다 뭐 열로 모스크는 뭔가 바꿀 거다 라고 말하고
나가는 사람들이 몇명이나 있대요
이제 그런 사람들 얘기를 들어보면 은 이제 뭐 뭐 택 모즈 엘론 머스크의
비전이 맞고 나는 여기서 내일을 다했고 물론 내가 짤라 나은 거는 거 좀
아쉽지만 뭐 어쩌고 저쩌고 그래도 나는 테슬라 이 비전을 믿는다
4 텔러 나가는 사람들이 그런 얘기 해가 되게 어렵거든요
그래서 그런거 를 보면서는 아 그렇게 반드시 뭐 평생직장 을 보장하고
이런 곰 반면 내 직장이 보장되고 이런 부분이 아니라 그 외에 거에서
충분히
음 직원 처우를 잘 수도 있는 거구나 내가 정말 하고 싶은 일을 하게
된다 뭐 이런 것들
그래서 그런 생각에 뻗자 되 거다 잡소리 고
그러면 도대체 제가 여태까지 봤던 사람 중에
일을 잘하는 사람들은 어떤 특징을 갖고 있었나 이런 고민을 해요
그러면은 여태까지 저 일을 잘하는 사람이라는 거 뭐 책임감이 있고 뭐
하고 뭐 하고 뭐 하고 이런 얘기들은
어찌 보면 되게 주관적인 얘기일 수도 있었던 게 체험 감이 없다 고 말한
애들은 별로 없어요 다 책임감이 있다 고 말해요
실제 일을 맡겨 분 책임감이 없어요 자기들은 최선을 다했다고 얘기해요
최선을 다하게 책임은 아니고 제가 볼땐 게 최선이 아닌 경우도 있어요
일단 말은 쉬운 거니까 행동으로 못할 뿐이지 안하거나 쓰지 목
뭐 내가 능력 안에서 못한다 그러면 그 능력을 키우면 되는 거에요 근데
발전하는 것도 없는 사람들 보면 은 그냥 말로 하면 사람들 용서 해
주니까 말라고 대충 무기고 간다 이런 사람도 되게 많이 보였어요 그래서
그것에 따라서
이제 그냥 느꼈던 게 뭐냐면 내가 이랬던 것 중에 정말 얘기를 잘
하는구나 라고 했던 사람들은 공통점이 하나가 되게 있어요 이게
최근 들어서 느끼기 시작을 했던거 같고 1
1 2녀 일리언 느꼈 느끼기 시작했고 저희 아버님과 좀 최근 최근에
아니면 작년 재작년 쯤에 제가 한국 방문 했을 때 아버지 살아오신 것을
쭉 얘기를 하며 느꼈던 건데
정말 일을 잘하는 사람들은 머릿속에서 시뮬레이션 이 되는 사람들 이었어요
21 네이션 의 무슨 의미냐 하면 은 한국 사자성어로 말할 때 역지사지
가 되는 사람들이 였어요
무교 무슨 개소리냐 이런 얘기 하실분 있는데
제품을 하나 만다고 생각을 해봐요 그러면은
보통 즉 새로운 기능을 만들고 싶어하고 그런 기능들이 이제 유저가
요청하라 든 우리 위에서 비즈니스는 잠입 6000원 내용이 들어와요
그러면 그 사람들이 많 기능을 만들어 달라고 할 때
음 제가 요즘 하는 얘기 뭐냐면
고객들이 요구할 때도 있고 그 사람들은 그 기능을 만들어 놓음으로써
자기들의 문제가 해결될 거라고 믿 었 믿어서 기능을 만들어 달라 그러는
거에요 근데 그런 사람들한테 기능을 만들어 주지 않고 일단 그 돈의
문제가 뭐야
어떤 문제를 해결하는 거야 라고 물어보고 실제 그 기능이 이 문제를
해결할 수 있는지를
제품을 만들기 전에 머리속에서 시뮬레이션이 가능한 사람들이 있어요
그럼 이제 아이 제품이 기능 이렇게 들어오면은 시뮬레이 하나가 이 기능을
유저가 이렇게 썼을 때 그 문제가 해결 될 것이냐
생각보다 안 되는 경우가 꽤 있어요
그리고 그럼 두번째 내가 이 기능은 로 쓸 때 이렇게 해서 이 문제가
해결이 될 수 있는데 과연 이것보다 더 깔끔하게 쉽게 해결할 수 있는
방법을 하느냐 그 고민도 할 수 있죠
그러면 아 이 방법보다는 저항 보기 났구나 라는 걸 즉 생각을 할 수
있어야 되요
어찌보면 이거는 상상력 일수도 있어요 그냥 이 제품이 있고 이 기능이
있고 유저가 이걸 쓴다는 거 가정을 하는거죠 내가 그걸 쓴다거나 누군가
쓴다거나
그러면 내가 그 사람 입장에 대해서 이거 썼을 때 꼭 문제가 해결이 되냐
해결이 케 조처 보려면
근데 이 문제가 해결이 된다고 해서 모든 게 끝나는 건 아니에요
그 기능을 넣었을 때 이 기능을 넣음 으로 해서 따르게 뽀 개 지는
경우도 꽤 있어요
그리고 이 기능이 여태까지 우리가 하려고 했던 그 제품의 방향 이라는 게
있어 이 제품은 모를 한다는거 방향이 있고 그런 코어 밸류 라는 게
있잖아요 그거를
이제 망가뜨리지 않냐 핵심 기능을 망가뜨리지 않느냐 그런 문제도 있어요
그걸 고려 안하고 제품을 덕지덕지 붙이다 보면 은 뭘 하는지 알 수 없는
제품은 사람들이 이제 처음부터 기능 1 할 때부터 계속 쓰는 사람은
알지만 처음 누군가 왔을 때 도저히 쓸 수 없는 제품들이 나와 있는
경우도 있거든요
그래서 이 그런 것들이 시뮬레이션이 가능한 에 문제인데 이거는 ux 를
잘하는 사람과 도 똑같은 거 였어요 개발을 잘하는 사람도 이런 시뮬레이션
해 보고 아 이게 안 돼 라고 말해 고 그거에 대해 더 나은 방식을
만들어서 고쳐 나거나 아니면 은
뭐 전혀 만들 수 없는건 포기하거나 뭐 이런 고민들이 있어야 되는데 일단
누군가 기능을 요청해 제가 다 만들어 주면 내일은 끝이야 라고 만들어져
손을 털어 놓는데 그 제대로 작동을 안해
아니면 그게 뭔가 르뽀 배트 였어 문제를 해결하지 못해 그럼 또 기능이
들어와요 것도 만들어 그럼 또 들어요 또 만들어 저의 고쳐서 고 차려고
쳤어 꽃인데 또 다른게 또 그때 망가져서 고쳐 써
그럼 저희가 흔히 말하는 이제 si 쪽에서 이런 얘길 많이 하는것 같은데
땜빵 땜빵 땐 팔찌 치다가 마지막에 더 이상 고칠 수 없어서 갈아엎고
새로 만들고 또 2년 동안 땜빵 치다가 또 갈아엎고 이런 문제가 생기는
거거든요
그게 뭐 큰 이모 우리가 말하는 것들이 있잖아요 무슨 뭐 플레이트 관례
이렇게 하면 돈을 아낀다 뭐 한다
그런거 아고다 상관없이 이렇게 머리속에서 시뮬레이션 안되는 사람들이
기획을 하고 벌써 게 시뮬레이션은 안되는 사람들이 개발을 하고
그러면은 양쪽에서 어떻게든 고쳐질 수 있는 사람이 없으니까 그래서 터지는
문제로 낭비하는 시간이 더 많아요 사실 그래서
특정 이제 프로젝트 관리 기법의 보면은
이런거 하나 를 담당하는 아키텍트가 굉장히 중요한 프로젝트 관리 비법이
있고 그런 기법은 대부분이 이제 그런 사람이 있을 경우에
제품이 잘 나오는 경우가 있고 그런 사람의 자리가 전혀 없는 프로젝트
관리기법 에서는 d 프로젝트가 산으로 가고 뭔가 많이 나오는것 같은데
나중에는 뭔가 문제가 않은 그런 제품이 생길 수 밖에 없죠
그래서 시뮬레이션 할 능력이 중요하다 그리고 그 시뮬레이션 하는 건
어찌보면 우리가 말하는 상상력 에 가까울 수도 있다
이 상상력이 굉장히 세상에 존재하지도 않는 새로운 것을 찬이 적으로
생각하는 게 아니라 단지 내가 저 사람 입장에서 이렇게 했을때 유저의
입장에서 이렇게 쓸 때 이 제품이 과연 돈이야
그리고 내가 기계로서 시뮬레이션을 토하는 거죠
4 기계 로써 이 기능을 돌렸을 때 과연 내가 가지고 있는 따른 기운이
망가지지 않냐
그걸 잘 아내 말 하냐에 따라 아 뭐 아키텍트 라던가 cto 의 재질이
이제 그 재질이 보이는 거고 그리고 그 거기에 올라가기 위해서는
개발자들도 그런 생각이 점점 들어야만 가능하다는 거죠
그러면은 이제 지금까지 얘기한 게 있게 많은 애가 사실에 들어간 거에요
단순하게 기능적인 문제 사용자 ux 에 문제도 들어갔고 아까 잠깐
흐르듯이 말했던 것은 과연 내 제품의 코벨 위에 어떤 문제가 있냐
4 제품은 이거를 하기 위한 거 였는데 갑자기 기능을 이거 이걸
추가하면서 내가 원래 만들려고 했던 기능 자체가
헷갈리지 아냐 이게 또 왜 되게 중요하냐 하면 음 뭐 애가 제가 예전에
코딩 스탠다드를 얘기할 때도 그랬고 뭘 얘기할 때도 그랬지만
누구한테도 아 우리는 이 제품이 이렇게 만드는 거야 코드를 짜고 이렇게
짜는 거에요 우리 이름은 이렇게 짜는 거 라는 규격이 있으면 사람들이 아
이 규약 에서 모를 해야되는지 즉 가치 판단이 안되는 사람은 따라오게 돼
있어요 그냥 그 의미가 뭐냐면
제품을 만들 수 있는 방법은 되게 많아요
뭐 오만가지 갈 수도 있어요 그 오만가지 를 만들었을 때 이르 방식의 2
로 만든 뭘까 방 식비 로 만든 게 나중에 합치면 서로 뭔가 이상하게 2
건 아예 작동을 안할 수도 있어요
대표적인 개발자 입장에서 예를 들면 은 라이브러리 하나는 이제 에라
코드를 이제 주로 따오는 방식으로 애라 처리했고 다른 쪽 하나는 익셉션
핸들링 으로 이제 처리를 했어요
위 두개를 합쳐서 새로운 기능을 빌 3 하려고 하면 은
절반은 에러코드 쓰고 절반이 슬쩍 를 쓰는데
어느 순간 어떤 라이브스 지 잘 감이 안 올 때가 있어요 함수가 또 다른
함수를 호출하고 이럴 때 네 그럴 때는 걸 어떻게 처리 할 거에요
모든 코드를 까먹어 처리 해야 되죠 1 1 근데 그게 아니라 우리 코드는
무조건 뭐 익셉션 처리를 한다
아니면 에러 코드를 처리 한다 라는 원칙이 잡혀 있으면 그 방식대로 짤
수 있기 때문에 이 가능한 오만가지 길을 가지 않아도 되는 거죠
시뮬레이션이 가능한 야 마느냐는 제 생각에는 훈련으로 도 가능 이야
제가 뭐 요번에 이제 또 캐나다의 온다 그래서 이제 뭐 생활비가 얼마가
될지 모른다 라고 말하는 사람한테 생활비가 아니라 이제 무슨 모든 물
깔아 던가 여기에서 월세가 얼마고 밥은 얼마고
이런 그런 지표를 보여주는 사이트가 사실은 있어요 그래서 그 사이트를
보내주고 계산을 해 보라고 했어요
이제 그 사람이 이제 중간에 했던 얘기는 안하는
아 이게 직접 체험해 자 아니까 모르겠다 그냥 가서 부딪치고 체외
해보겠다 라고 얘기 했거든요
네 저는 거기서 이미 충분히 시뮬레이션이 가능하다 고 생각을 해요 내가
하려고 한다면 내가 뭐 일주일에 밥을 몇 개를 집에 먹지
아니면 몇 개를 사먹지 그거 따라 5
몇 곱하기 밥을 부터 얼마짜리 먹을거 며
뭐 이렇게 하면 그 가격을 곱해 갖고 대충 얼마 가지를 게다가 나오고
내가 인턴의 시이 써야하고 모방은 대충 이정도가 된다니까
그럼 팔방 3 4 2 마크 내니까 여기 그럼 대충 내가 쓰는 금액이
나오고 거기 곱하기 뭐 몇 점 배수를 해서
1점 엿을 하던 모 일을 해서 아 그러면 이만큼 에서 이만큼의 돈이
있으면 내가 기도 생활이 되는구나 라는 걸 충분히 계산이 가능하다고 봐요
그게 어떻게 보면은 내가 전혀 여태까지 익숙하지 않았던 체험하지 않았던
그런 환경에서 아 숫자를 돌리고 그리고 대충 판단이 되는 자료들이
있으니까 그걸 돌려서 아 그러면 이만큼 에서 이만큼의 돈이 들 겠구나
아니면은 내가 앞으로 원래 밥을 맨날 나가 사먹었는데
캐나다는 만들어 먹는게 따다 니 까 그러면 밥 먹는걸 1주에 2번 정도
나가 먹는걸로 쭈리 고 집에 3 먹으면 이정도 까지 절약 2 되겠구나
이런게 머리속에서 시뮬레이션 하는 거죠
그리고 이 똑같은 게 아까 말했던 기능을 만드는거 하고 똑같이 관련이
되잖아요
그게 관련이 된다면 똑같은게 가능한 거에요 내가 이 기능을 만들어야
되는데
만들었을 때 문제가 보이는 거에요 이 시뮬레이션은 또 중간에
5 내가 아까 그
생각이 꼽을 때 내가 야 이 또 이봉구 를 받으면 한달이 200 뿌리
모자 되겠는데 이런것 처럼 여 이 기능을 돌리면
여기서 사용자가 실수를 하겠는데 아님 여기서 e 두세 가지 방식으로 도망
하겠는데
이런 생각을 할 수가 있잖아요 이하나는 벅 안 한다거나 그러면 그런
경우에는 아이 지금 9 자체가 문제가 있다
이 구조를 좀 고쳐야 겠다는 게 빨리 나오면 나올수록 대체가 빠른
거잖아요
그 작동하지 다는거 만들어 놓고 버거 만든 다음에 또 고치고 또 고치고
하는건 문제가 있는 거죠 그래서 결국 개발자도 그런 시뮬레이션을 자란
사람들이 개발을 잘했어요 보면 그래서 예전에 제가 생활 습관을 고쳐야
좋은 엔지니어가 된다 라는 얘기를 한 적이 있잖아요
이런 생각하는 습성 제가 아까 말했던 그런 뭐 생활비로 뽑아 먹는것은
2g 꼼꼼히 앉아 계산해보면 나오는건데 이제 그거 자체를
이제 뭐 너무 일이 많아서 귀찮아 하거나 아니면 은
뭐 이 숫자 개나 게 짜증이 나거나 그런 걸로 인해서 아 모르겠다 라고
넘어가는 경우가 있어 앉아서 꼼꼼 해결해 낼 문제들
습도 비슷한 얘기로 이런 습성 니 면접 중에 어 언제 보이냐 라는 것도
제가 최근에 느꼈던 게 뭐냐면
제가 요즘 면접을 많이 보면서 저랑 같이 면접을 들어가는 친구가 있어요
되게 잘 아는지 군대
면접을 보면서 모신 2호 그 주니어 고인 텀이 듯이 상관이 없어요 사실은
경력이 먼저 참 상관이 없는데
면접을 이렇게 하다가 당연히 뭐 코딩 면접을 보다가 실수 누구나 해요
그럼 저희가 그런 문제점이 이제 얘기를 할 때 뭐가 문제 라고 말하지
않고 그러면 이 데이터를 넣었을 때 지금 코드가 제대로 더 나야 라고
예제 데이터를 줘요 그리고 저희는 이미 문제가 되는 데이터를 입었어도
생각을 해서 주는 거죠 그러면 그 데이터를
아예 코드의 넣어 갖고 5까지 와이트 봇 s 코드 잖아요
그러면 거기에다가 이제 하나씩 값을 대입해 보면서 아 이러면 요게 뭘로
변형이 되고 몰래 변형이 되고 아 요 세 번째 단계에서 문제가 생기는구나
이것을 전혀 못 차야 되는 사람도 있어요 한마디로 단계로 디버깅을 못하는
사람도 있어요
이 사람들은 일단 무조건 저는 기본적으로 만점에 탈락을 시켜요 왜냐하면
은 어차피 뒤 곧 디버깅을 못할 사람이니까
근데 그게 아니라 nd 보게 못타 사람이 아니라 디버깅을 안 할
사람이라고 생각을 해요 근데 그 다음에 이제 종이 하나씩 저어가면서 아이
숫자를 놓을 때 이 값이 이렇게 변하고 이런걸 변수 값에 저어가면서
하나하나 따라서 하는 사람들이 있어요
그 이런 사람들은 보통 그 값을 도출 또 해 내요
면 조건에서 보기는 되게 편해요 왜냐하면 지가 다 막 쓰면서 하니까 이런
사람들은 뭐 제가 생각할때
엔지니어 금인 아키텍트 글을 못 올라가 사람들이에요 그거를 제가 좀
흘러서 받아 나아지게 바꾸지 않는 r
그럼 이 사람들에게 대충 아 보여요 경력 이미 오래 돼 있으나 그
경력에서 햐 못 올라가게 꾸나 직급이 아니면 경력이 낮으면 in 은
어디까지 올라 겠구나
이 마지막 말을 세 번째 단계가 어떻게 보면 제가 보면서 저를 굉장히
익사이팅 하게 만드는 사람들 중에 하는데
그런데 이 터졌을 때 머릿속으로 디버깅을 해요
그러니까 머릿속에는 그 값을 들면서 이 코드 이렇게 많이 값이 몰락
안하고 몰로 변화가 몰래 바라고
물론 변수가 몇 개가 있느냐에 따라 복잡도가 들어 나겠지만
제가 여태까지 말한 것은 변수 1 바뀌는 가정 이었거든요
그 변수 바뀌는 과정을 머릿속에서 계산을 하면서 아 요거 단계 지나면 요
값이 들어오면 변수가 이걸로 변해 하나가 다시 루프 돌아서 이 값이
들어오면 이걸로 변하고
그리고 바르면 아 여기서 루프가 나가면서 문제가 생긴
그런 머리 쓰고 디버깅 하는 사람들이 있어요 그런 사람들은 확실히 이제
발전도 빠르고 이제 시뮬레이션 되는 사람들이에요
어떤 그런 뭐 약간의 뭐 인간성 문제라든가 대인 4대 인성 사회성 문제로
인해 ux 쪽을 처음에 못 볼 수도 있지만 자기가 그것을 발전시켜 가면서
나중에 사용자가 모를 사용할 때 어떻게 사용하는 지 도 시뮬레이션을
가능하게 시작을 해요
그리고 훈련 하면 할수록 더 많은 변수들을 처리할 수가 있고 그 정도가
되면 은 충분히 이제 가능성이 충분히 보이는 사람 그리고 아까 말했던
숫자를 적어 가며 사는 사람들은 이게 중 이어 급이나 이러면 당연히
훈련을 통해서 그 다음 단계의 머리 디버깅 도 가능 해 지지만 이게임이
격려 굉장히 오래된 사람이고 코드가 편한 상황에서도 그러고 있으면 이제
그 다음에 열심히 노력해서 그 정도까지 간 사람
그래도 충분히 쓸 정도가 되고 충분히 여기 여기저기 유용하게 쓸 수
있지만 뭐 제가 말하는 뭐 탑 1% 급 쓴 아닌 사람 뭐 근데 이 그렇게
하는 타고 프로 튈 수 있어요 종이에 적는 사람도
근데 여기서 정말 더 미친 사람들이 있어요 정말 더 미친 사람들이 이거는
제가 거의 본적이 없고 사실은
가족 중에 한분은 8 팬 적이 있는데
컴퓨터 아시는 분도 아니에요 멀티태스킹으로 시뮬레이션 을 2개 하시는
분들이 있어요
그 정말 정말 끔찍해요 어 그거 어떤 시 까지 가능 하냐면
전화를 하면서 굉장히 복잡한 비즈니스 관계로 얘기하고 있어요 저쪽에 임에
대한 피지에서 잃고 저러 거야 음 계약을 뭐 이렇게 해도 이렇게 해야
되고 그 옆에 직원이 지나가면 은 보일 돼서 그 직원이 법률을 담당하는
직원이 다
그러면 이 전화 계속되면 얘기를 하면서 그 직원은 때는 또 법률 얘길
하고 있어 입모양으로
법률 얘기를 막 하면서 아이 법률관계 이렇게 그러면 뭐 이렇게 모를 눕고
써놓고 써넣고 하다가 어 또 전화로 바꿔서 어 그래 그러면 은 이거는
그렇게 처리하고 이러면 되게 찍으로 또 법률 얘기하면서 까 머리속에서
이 전혀 다른 두 가지 토픽이 막 계산이 된다 고 이렇게 하면 이렇게
되고 11 내셔야 된다는거
즉 저도 그게 안 되거든요 그래서 그럼 분은 즉 또 엄청나게 뛰어난
역량을 보이시는 분이 고 저보다 뭐 한 판 백배 천배 훨씬 성공도 하신
분이고 이런데
그런 분들을 보면은 야 저게 정말 내가 뭐 따라잡는 천재영 여기구나
저렇게 뭐 계속 그렇게 훈련을 해 오신 것도 있지만 그 분도
저렇게 천재적인 머리에 저렇게 열심히 노력을 했으니 저기까지 가셨고 내가
과연 따라잡을 수 있을거라 생각이 드는 그런 즉 괴리감이 느껴지는 분이
되는 거예요 오 의료 여기서 그거는 제가 프로그래밍 면접 보다가는
아직 찾은 적이 없어 그런 사람은 오히려 비지니스 하시는 몰에서 보는건데
그래서 그런 사람들은 모레도 잘 하겠구나
그게 되게 어느 분야에 어떤 그게 되게 공통되는 것 같아도 올라왔어
이런 사람들이 또 사랑 관리도 자라는게
예를 들어서 보통 회사에서 이제 가장 큰 문제점이 하나가
이제 당연히 직원 봉급 안주만 답변해 사고
지그 직원으로서 가 아니라 회사 온 으로서의 문제가 하나가
저는 어쨌든 간에 직원들을 봉급을 얼마나 주는 거잖아요 그리고 되게
재미있게도 그게 뭐 업무 대로 성과를 올리는 곳도 있지만
아 그 대부분의 이제 시간 이라는 걸로 제 봉급을 주는 게 흔한 것
같아요 내가 이만큼 봉급을 좋구 이가 주 40시간 아니라면 너는 이 만큼
덜어 어머니가 그렇게 가라
그래서 이제 뭐 최저 시급이 나 이런 얘기도 시 치익 안으로 따지기
때문에 나오는 얘기고
4 그 선까지 로 따지는 거 면은 내가 봉급의 이만큼 쳤을 때 니가
시간을 마 대충 놀며 써서 일이 정말 유머 큰 나왔을 때 그게
시 최저 c 그보다 적어도 너는 성과급이 이기 때문에 그 것보다 적들도
배치 따라 는 논리가 나와야 되는데 일단 제대로 정규직을 채용하는 이상은
최 주식 이미 상을 줘야 되는 거기 때문에 시간당 을 따지는 게 있어요
그러면 오너 s 의 문제는 그래서 외근을 많이 나가는 그런 지원을 했을
때 애가 나가서 얼마나 농땡이를 치고 올까
이런게 솔직히 걱정이긴 해요 물론 나가서 15분 커피마시고 뭐 이런건
문제 안되죠 담배피고
한데 그걸 잘 아시는 오늘은 애가 나가서 이제 전철을 어디서 어떻게
갈아타고 어디까지 감은 대충 몇분이 걸리고 그 사람을 만나서 얘기를 하면
이런 비즈니스 는 얼마나 에 끝나고 또 요거 저 갔다가 얼마 시간 걸리고
돌아오면 은 그래 가장 최저 g 연주 시간
그런데 이제 조모 중간에 이런 저런 문제도 있고 졌고 약간 서프라이즈 도
있는거고 증가 내가 농땡이 지능과 가정하면 은 그러다 3시간에 들어오게
찌 보통 50% 보너스를 매기면 대충 버퍼가 맞아요 모든거 에서 개발
일정도 그렇고
그럼 그 상황에서 야근이 가 3시간 안에 와야 되는데 6시간 리옹 거야
그럼 어디 순간 엉뚱이 칭 거거든요
근데 1 자란 오너들은 걸 알아요 그래서 좋아요 이거 뭐냐
뭐냐 말이 안되지 않냐 그러면 그 축 사람들은 결과와 그렇구나
제가 s 크리스 이렇게 손등에 찼어요 라고 말하고 다음부터는
농 때를 좀 덜 치게 되는데 그게 안되는 오너들 보면은
직원들이 한영 시가 있다 던 그래 잘하고 왔죠 ok 넘어가는 거에요
그래서
그럼 관리 력에 문제가 생기고 그런 회사에서 결과적으로 이제 노는
사람들이 좀 더 편하게
이제 일을 하고 돈을 받아가는 문화가 생기면서 3 4 전체 문제가 좀
그렇게 가면서 우리 일을 열심히 아내들이 차출을 당하거나 다른 동료들한테
오히려
아니면은 그런 사람이 떠나고 남은거 쭉정이가 내가 회사가 이상하게 되는
경우도 있어요
그래서 뭐 직원의 입장에서는 당연히 a 똑같은 돈 받고 일하는 당연히
좋은 걸 수도 있는데 개인 발전의 안좋지만 당장은
그래서 그런 부분에서 그런 오너가 있은 피곤해 지는 것도 있죠
근데 제가 그냥 요즘 보며 느꼈던 것은 제가 주변 일 잘하는 친구들을
봐도 어떤 기능이 나왔을 때 그냥 무조건 하려고 한 애들은 대부분 뭔가
구멍이 생기고 펑크가 생기고
타 이르지만 딱 들어 왔을 때 곧바로 결정 하지만 고민하는 애들이 있어
여기 제대로 더 나 안 되나
그리고 이제 뭔가 좀 확실하게 이해가 안되는 부분을 확인하여 들어있어요
이렇게 기회가 되게 많냐 그러면 이런 문제가 생긴 어떠냐
그래서 이렇게 논리적으로 얘기라고 아니면 논리적으로 시뮬레이션에서 문제가
생기는 걸 이제 생각을 하는 애들은 확실히 일을 잘하고
그 게 아 니 라 이렇게 일을 주고 전 제가 이거 라고 말했는데 그 전제
안에 생길 수 없는 일들을 막 얘기 하기 시작하고 아니건 1 수가 없는
일이잖아 시뮬레이션 을 해봐 불가능한 얘기야 그 상황에서는
근데 본인은 그런 것들이 제대로 검증을 안하고 말하는 사람들이 라던가
아니면 아무 이렇게 생각 없이 하는 대로 할게요
그런데 했는데 결과 잘못 나왔어 그러면 뭐 당연히 및 사람도 못 봤던것
또 얘도 못 봤단 거니까 그런 문제들을 보면은
아이를 잘하고 못하는 사람이 이런 차이가 있지 않을까
그래서 어찌보면 은 프로그래밍 면접을 볼 때도 되게 단순 알고리즘 드리지
많은 걸 테스트 하는 이유도 이런 자세가 돼 있는 걸 보는게 아닐까
아무리 씨니어 아무리 뭐 인터 믿어 경력 많은 사람들도 이런 알고리즘
문제에서 세일하는 경우가 되게 많아요
복잡한게 아닌거 에서 머리속에서 단술 4개 5개 추적하는 것
점점 어려운 일이라고 보지만 한개도 제대로 주지 못한 사람도 있어요 사실
그런 걸 보면서 어찌 보면은 머리속에서 시뮬레이션 잘하는게
1잔 아는 사람들 프로그램 뿐만이 아니라 다른 쪽도 그렇지 않나 라는
생각을 해서
빨던 이런 비디오를 또 만들었어요 에 버프 였읍니다
빨리 끝내야지
