안녕하세요. 포프입니다. 방어적 프로그래밍 이런 이야기 많이 들었을 거예요. 정말 좋은 거라고... 하지만 접두사 하나만 붙으면 정말 빡치는 그런 상황들이 옵니다. 그게 자기 방어적 프로그래밍에요. 

방어적 프로그래밍의 일반적인 개념은 내가 만약에 어떤 문제가 생겼을 때 내가 예측지 못한 문제가 생길 리가 없잖아요? 즉 예측 가능한 문제가 생겼을 때 그런 문제에 대응하는 코드를 작성을 해라... 그리고 예측하지 못한 문제가 생길 때 그거에 대응하는 코드 작성할 수는 없죠? 그거를 빨리 고칠 수 있게 내 코드 구조를 좀 잘 잡아놔라... 한마디로 우리가 흔히 말하는 가독성 좋고 유지보수 쉬운 코드 짜라는 얘기예요. 그리고 언제나 Happy path가 아닌 예외(exception)가 발생했을 때 그리고 충분히 예측 가능한 예외일 때 그걸 잘 처리를 해줘라... 이게 예외를 캐치하라는 얘기도 아닙니다. 그냥 그거에 대한 대응 방식은 크래쉬를 내는 것부터 예외를 던지는 것(throw)부터 아니면 에러 코드를 리턴하고 그 연산을 먹거나 사용자한테 다시 시도하라고 만드는 여러 가지 대응 방법이 있는데 그런 대응방법 중에 괜찮은 걸 잘 골라서 써라... 그리고 결과적으로는 소프트웨어 품질 그리고 사용자 경험(UX)이 나쁘지 않게 하라는 그런 개념이에요 사실은.

제가 자기 방어적 프로그램이란 얘기를 한 적이 있어요. 이게 방어적 프로그래밍을 한다고 하면서 자기 방어를 하시는 분들도 있고 실제 자기 방어적 프로그래밍이 절대 아닌데도 그리고 그 얘기도 안 하면서 그냥 자기 방어를 하시는 분들도 있습니다. 후자는 약간 정치하는 거죠. 일반적으로 정치 얘기를 좋아하시니까 정치 얘기 후자부터 얘기를 할게요. 제가 케이스 언어 2개 예를 들고 넘어갈게요. 실제 제가 실무에서 들었던 썰들을 얘기할 텐데, 이런 거 보시면은 머리카락만 더 빠진다... 그렇게 말씀드릴게요. 첫 번째는 뭐였냐면 제가 게임 엔진을 열심히 만들고 있을 때입니다. 회사 이름은 굳이 말하지 않을게요. 저희가 이제 그래픽 팀이 있었는데 그래픽 팀 인원을 충원을 해야 되는데요. 왜 그런지 잘 모르겠지만 어쨌든 충원을 1명을 했어요. 그래서 충원을 했는데 제가 면접관으로 같이 참여도 했지만 저는 그 사람 No 했어요. 말하는 형식이나 뭔가 굉장히 좀 싸한 느낌이 강했어요. 제가 여태까지 봤던 프로그램 중에 그리고 실력이 뛰어나다는 걸 객관적으로 볼 방법도 솔직히 없어요. 말을 잘하는 스타일이었어요. 근데 그 당시 리드 프로그래머가 뭐에 홀렸는지 그 사람을 채용하겠다고 밀어붙였습니다. 그래서 채용이 됐어요. 그 사람이 들어와서 꽤 많은 사건 사고들을 일으켰고 나중에는 결과적으로 거의 잘렸는데 제가 알기로는 그 사람이 했던 일 중에 이런 일들이 있습니다. 어느 순간 저희가 이제 게임에서 반사광의 특별한 효과가 잘 나타났었는데 그게 어느 순간부터 사라진 거예요. 근데 그 코드를 저는 고친 적이 없거든요? 그리고 우리 팀의 다른 그래픽 프로그래머는 고친 적이 없어요. 유일하게 그 사람이 최근에 고쳤는데 그걸 1주일 뒤에 찾은 거예요.그게 특정 맵에서만 보이는 기술이라서 그래서 처음에는 물어봤죠. "이런 버그가 있다 우리 팀에. 이 부분을 네가 최근에 건드렸는데 혹시 문제가 생긴 건지 다시 한번 봐줄래?" 근데 정색을 하면서 자기가 한 거 아니래요. 자기 간 거 아니니까 저보고 그래요. 그리고 자기는 그 코드를 망가뜨리지 않았다는 거예요. 그래서 그렇게 확신이 들면 제가 봐야죠. 어떡하겠어요? 왜냐하면 아트 쪽에서 뭔가 깨졌을 수도 있거든요. 그건 아무도 모르는 거기 때문에 제가 봤는데 결론만 얘기하면 이 사람이 x맨이었어요. 누가 보통 자기가 건드린 코드가 망가졌다 그러면 보통 자기가 확인을 해보고 얘길 하거든요. 그냥 자기 방어적으로 "아니 이거 내 건 아니야"라고 얘기한 거예요. 근데 이게 버그가 실수로 인해 날 수 있는 버그들은 있어요. 그런 거는 제가 쿨하게 넘어가고 당연히 업무 하는 동안에 나는 일이잖아요? 근데 버그의 정체가 코드 커밋 메시지가 이 코드를 리팩터링 해서 코드를 빠르게 만들었대요. 결과적으로 조명이 빠진 건데 그 코드를 보면은 정말 더 기괴하고 괴랄했어요. 뭐냐면 어떤 클래스에 C++은 멤버 변수라면 앞에 접두사 m을 많이 붙입니다. 그래서 mA라고 하는 그런 변수가 있었고 그리고 함수 안에서 mA라는 변수를 사용해서 여러 가지 계산을 했던 함수입니다. 근데 코드 바뀐 내역을 보니까 mA라는 변수가 있었잖아요? 그거를 함수 안에서 지역 변수로 다시 선언하여 사용을 한 거예요. 그러니까 이미 클래스에 mA라는 변수가 있어요. 근데 지역 변수로 다시 mA를 사용해서 그거를 함수 안에서 사용을 했어요. 그러니까 당연히 원래 mA에 있던 값이 공식이 안 들어가니까 뭔가 깨지고 잘못되었겠죠... 너무 웃기지 않아요? 그러고 그 코드를 집어넣고 자기가 작동을 한다고 믿고 있는 거예요. 그래서 '도대체 이 놈은 뭐지?... 어떻게 지역 변수를 만드는데 m을 붙여서 만들 생각을 하지?' 그 생각을 안 할 수가 없잖아요? 그리고 만약에 중간에 mA의 값을 바꿔가면서 디버깅하려고 할 수도 있기는 한데 그거는 중단점을 걸고 그냥 mA값을 바꾸면 되거든요? 지역 변수를 만들 이유가 없다는 소리예요. 또 하나의 반전은 이 사람이 시니어급이었다는 거예요. 그래서 제가 봐도 이 실수는 시니어급에서 나오면 안 되는 실수예요. 이거는 한 번도 남의 코드를 보지 않았거나 남의 코드 엔진을 만져보지 않은 프로그래머나 할 수 있는 일이었던 거예요. 그래서 정말 말도 안 되는 코드? 그래 그건 좋아요 근데 그 버그를 자기가 만들었으면 들어가서 한번 보고 고쳐야 될 생각을 해야 되잖아요? 그것도 아니고 그냥 자기가 한 게 아니라고 얼굴에 철판을 깔아요. 그거 보고 나서 '면접 때의 내 느낌은 역시 틀리지 않았어' 그 생각이 들었죠. 물론 그 뒤에도 이 사람의 문제는 더 많았습니다. 예를 들면 점심 먹으러 가기 전에 자기 코드를 넣었는데 컴파일이 안 되는 코드예요. 그래서 우리 빌드가 깨졌습니다. 아티스트가 그 당시에 60~70명 정도 되었던 것 같아요. 그 아티스트들 전부가 일을 못하는 상황이 왔습니다. 점심 먹어가면서 일하는 사람들이었거든요? 그리고 그때 크런치 기간이라서 일을 많이 해야 했는데 x맨은 점심 먹으러 나갔다 와서 탁구 치고 있어요. 그래서 가서 "야 이거 깨졌어"라고 얘기하니까 "알았어"라고 얘기하고 30분 동안 탁구 게임을 마무리 짓고 그다음에 버그를 보기 시작해서... 결국은 빨리 못 고치더라고요. 그날 거의 저녁에 고쳤습니다. 그래서 반나절을 아티스트 전원이 일을 못하고 넘어간 적이 있었습니다. 어쨌든 첫 번째 사례 이거는 정말 코드를 방어적으로 작성하는 게 아니라 그냥 자기가 만들어 놓은 프로그램을 자기 방어만 하고 있는 거죠. 실력은 없고 놀기만 하는 스타일...

두 번째는 방어적 프로그래밍을 가장한 자기 방어적 프로그래밍입니다. 이거는 그 TDD를 실천하는 사람들의 부작용 하고도 관련이 있어요. 모든 사람이 아니라 TDD가 이렇게 악용될 수 있어요. 뭐였냐면 저희 이제 프런트 엔드 개발자였어요. 저희가 어떤 B2C 제품을 많이 만들고 있는데 거기서 원래 의도했던 스펙과 다르게 동작하는 그런 기능들이 나왔어요 프런트 엔드 코드에서. 그래서 그걸 프런트엔드 개발자한테 가서 얘기했어요. "이게 제대로 작동을 안 한다 이게 이렇게 작동을 해야 되는데 이런 식으로 작동을 하고 있다" 그러니까 자기 잘못이 아니래요. "왜 네 잘못이 아니냐? 네가 만드는 코드인데?" 그러더니 자기가 만든 유닛 테스트 코드를 보여줘요. TDD를 했대요. 그리고 유닛 테스트 코드를 돌리면서 "자! 나는 내가 만든 스펙대로 제대로 도니까 이건 내 문제가 아니라 이거를 원하면 다른 사람이 바꿔야 한다"라고 하는 거예요. 제가 했던 얘기가 "그거는 네가 스펙을 잘못 이해하고 테스트 코드를 만든 거다"라고 얘기했는데 말을 안 들어요 주니어인데 더럽게 말을 안 들어요. 그래서 그냥 다른 사람이 가서 고쳤어요. 그리고 그 사람은 결과적으로 회사를 떠났죠 그 이후로 그 사람과 어울리던 다른 한 명이 있는데 회사에서 굉장히 안 좋게 보기 시작을 했어요. 그런 일들 때문에... 흔히 하는 얘기잖아요? TDD를 할 때 유닛 테스트를 먼저 작성을 한다? 그리고 원래는 유닛 테스트가 당연히 통과를 못하고 구현이 안 돼있으니까 구현이 되고 나서 통과를 하면은 코드가 제대로 완성이 된 거다... 여기까지 얘기를 해요. 물론 TDD를 올바르게 하시는 분들은 그 뒤에 내가 스펙을 잘못 이해한 문제가 나왔을 때 내가 잘못된 코드를 고칠 겁니다. 하지만 이 사람은 이미 종교적인 광신에 빠진 거예요. "테스트 코드를 통과했으면 내가 스펙 따라 코드를 만든 게 맞고 그 외에 일은 내 책임이 아니다. 그거는 나한테 스펙을 잘못 말해준 사람의 책임이다." "네가 잘못 이해했으면?" "아 난 몰라" 그렇게 얘기했어요. 이런 사람도 있거든요 진짜. 있겠죠... 잘리겠죠... 옛날 같았으면 재떨이에 뚝배기가 깨졌겠죠. 이런 식으로 자기 방어를 하시는 분들이 굉장히 좋아하는 광신도적인 믿음을 할 수 있는 것들이 있습니다. 빠르게 사용하면 효용은 있지만 굉장히 효율적인 방법은 아니고 그것보다 해야 되는 다른 것들이 많은 거지만 어쨌든 필요한 곳들이 있을 거고 돈을 왕창 들여서 시간을 엄청 퍼부을 수 있다면 할 수 있는 것들이에요. 하지만 이거를 굉장히 감정적으로 광신하면서 비논리적인 이유로 이거를 추앙하시는 분들이 있어요.

제가 TDD에 관해서 비판하면 그런 식으로 댓글을 하시는 분들이 꽤 있어요. 비논리적이고 그냥 감정적으로, 아니면 어디서 잘못된 사례 하나 들어서 그것 때문에 이걸 한다는 식으로 일반화도 많이 해요. TDD는 생각보다 제가 봤을 때 이런 식으로 잘못 물고 잘못 자기 방어적으로 사용하시는 분들이 있어요. 이 사람도 봤고 이 사람 전에 10년 전에 게임 회사에서 TDD 해야 된다고 말하던 주니어가 있었어요. 이건 세 번째 사례로 할게요 툴 개발자였어요. 그리고 학교도 꽤 좋은 데 나왔어요. 그래서 저는 이 사람이 대단한 사람인 줄 알고 "왜 게임업계는 이렇게 TDD를 안 해? 우리 TDD 해야 돼"라고 얘기하는데 그 당시 이 사람이 하던 말이 '게임업계는'이라고 했는데 실제 모든 업계가 거의 안 하고 있었죠. 거기서 약을 팔기 시작을 했고 TDD를 해야 한다고 열심히 얘기를 했어요. 근데 저보다 이 사람이 그 회사에 1~2개월 먼저 들어갔을 거예요. 그다음에 제가 몇 개월 뒤에 들어갔던 걸로 기억을 하고요. 그래서 저는 이 사람이 그래도 나름 생각이 있는 사람이라고 생각했어요. 강하게 주장을 하니까... 그리고 나름 잘하는 사람을 생각했어요. 우리 팀이 아니라 다른 팀이었는데 3개월 수습기간을 연장을 못하고 나갔더라고요. 회사가 수습기간 연장을 안해준 거죠. 그래서 툴 개발팀에 가서 물어봤어요. "왜 이렇게 갑자기 나가 거야?" 그러니까 팀장이 한숨을 쉬더니 걔가 작성한 코드라고 보여줬었어요 저한테. 일단 버그가 많았고요 그리고 말도 안 되는 것들이 많았어요. 보면서 이게 과연 코딩인가?라고 할 정도의 그런 코드들이 있었어요. 괜찮은 코드보다 아닌 코드들이 너무 많았어요. 그래서 이런 거에 대해서 이제 팀장이 문제를 삼으면 그거에 대한 이유라고 대는 이유가 '자기가 TDD를 못해서 그랬다 라는 식으로 얘기를 했다' 그러더라고요. 들으면서 제가 TDD 하는 회사도 많이 들어오고 그랬지만 TDD를 열심히 주장하시는 분들 중에 정말 코딩을 잘하시는 분들은 많이 보지 못했습니다. 그래서 그 코딩 잘하시는 분들이 TDD로 작성했는지 실제로 코드를 작성하고 나서 테스트를 했는지는 모르겠어요. 그런 거 은근슬쩍 넣고 그냥 자기 맘대로 해요. 그걸 굳이 남한테 남한테 전파를 하는 것은 많이 못 봤어요. 남한테 전파하는 사람들 제 경험에서는 그렇게 좋은 경험들이 없습니다. 그래서 이게 자기 방어적 프로그램이 될 수 있는 그런 약간의 빌미를 주는 게 아닌가... 그래서 그런 걱정들이 많이 쌓여요. 

그래서 이제 그런 부분들 2개 사례를 들었어요. 첫 번째는 정치적으로 무조건 자기 방어적 프로그래머 두 번째는 TDD를 곡해에서 자기 방어적 이기기만 한 프로그래밍을 하시는 분 이렇게 예를 들었어요. 이런 사람들이 모두는 아니에요. 당연히 제대로 하시는 분들이 있을 겁니다. 하지만 이런 사람들을 보이면 그냥 도망치세요. 사실 같이 어울려서 좋은 거 별로 없습니다. 포프였습니다.