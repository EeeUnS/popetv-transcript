예언이 와서 포프 입니다 음 예전에 한번 어떤분이
함수형 프로그래밍의 대해 말을 해 달라고 말씀 하신 적이 있어요
그래서 목록에 적어두고 언젠간 말을 할 때가 되면 해야겠다고 생각을
했는데 생각해보니까 제가 함수형 프로그램에 대해 별로 아는 게 없어요
그래서 설명할 수 있는게 없어서 않고 그냥 오랫동안 얘기를 하는것 같은데
뭐 제가 그 함수형 프로그램을 써 본 건은 먹힐 것 해봐야 무슨
예전에 머신 러닝 학교다닐때 뭐 스칼라 좀 써 갖고 이런저런 한 것들
그런 부분이 사실은 전부 였죠 근데 이제 뭐
대충 어떤건지 알고 약간 써봤고 하지만 프로덕션 레벨에서 충분히 쓸
정도가 안돼서 그거 같고 제가 뭐가 뭐라고 말하기는 그렇고 그냥 되게
많은 사람들이 궁금했던 게 그거 였던거 같아요 과연 함수형 언어가 함수형
프로그래밍 자체가
이제 op 를 대체할 수 있겠냐
음
저는 개인적인 생각으로는 아닐 거라고 봐요 그 대표적인 예가 뭐냐면
대표적인 예가 아니라 대표적인 이유가 뭐냐면 이제 op 를 제가 예전에
비디오에서 만들었듯이 오피가 좋은건데 너무 극단으로 가지 말자는 얘기를
했어요 그 사람이 이해할 수 있는 수준의 5호 핑크 우리가 일반적으로
물체를 보고 아 이 물체는 이렇게 작동 하는구나
나는 수준에서 op 는 굉장히 좋은거지만 이제 그 개념을 좀더 굉장히
구체적인 개념이 된 거였거든요 사실 옛날에 비해
여기서 이제 더 추가해 가 꿈 과학 뭐 아 우린 이런 재활용도 가능하고
더 이상 추상화 도 할 수 있고 그러면서 나
뭐라 그럴까 이 새로운 개념의 너무 신나게
미친 짓 달려가며 는 결국에는 이제 이해가 안되고 유지보수가 오히려
힘들어지는 코드가 나온다고 얘기를 했었거든요
그 제가 생각하는 op 의 가치는 그냥 사람이 생각하는 물체에 대해
인지하는 그 사고방식을 그대로
프로그래밍 패러다임의 높다는 게 가장 큰 장점인 것 같고
그렇기 때문에 저는 op 가 사라질 거라고 생각하지는 않아요 오히려 op
가 주된 언어로 남을 것 같는데
이제 펑셔널 프로그래밍이 좀 더 유용해 지는 부분이 있죠
그래서 이제 그 유용해 지는 부분을 흔히 사람들이 이제 멀티 뜰에 등의
뻥 션을 프로그램이 좋다 라고만 이 말씀을 하셨어요
아 근데 이제 제가 최근에 트위터에서 제가 되게 존경 하시는 영천 님이
남겨 놓은 글을 봤었는데
2분이 사람들이 자꾸만 멀티 스레딩 할 때 펑셔널 프로그램이 좋다고
하는데 성능 상에서 이게 어떻게 c 보다 빠를 수가 있지
왜 이걸 좋다 그러지 라고 이렇게 질문 남겨요 남겨 주신 적이 있어 같고
제가 그거에 대한 답변을 다른 적이 있거든요 제가 했던 답변은
이제 되게 간단하게 말하면 뭐냐면은 당연히 성능 상으로는 c 를 이길
수가 없다 아무리 멀티쓰레드 먹통 션을 하고 모로 하던간에
다만 이제 펑셔널 프로그램의 장점은 아 웨이스 컨디션이 굉장히 적다는
거다 라고 말을 했어요 그래서 그 얘기를 조금 하려고 그래요 오늘 어제
말이 나온 김에
일단 레이스 컨디션의 적던 얘기가 뭐냐면
요즘 워시 트레이딩 하신분들 알겠지만 모 씨의 서먹 스레드를 여러개 띄워
갖고 한 데이터를 접근하게 되면 은 이 스레 대해서 적는데 바로 3 적을
수도 있고 있으 에서 읽은 다음에 목수로 1 지금 다시 켜도 눌려 그런데
수를 놓기 전에 얘가 다른 스레드에서 또 1 든 다음에 수로 1 증가시켜
왔고
덮어 쓰게 되니까 수가 2개 증가 이렇게 하나가 증가되어 증가 안에는
이런 부 문제들이 있잖아요 그래서 뭐 레이스 컨디션 을 막기 위해서 수
뮤텍스 거르고
그러다가 아 이게 너무 느리다고 사토미 글 거렸는데
어차피 아톰이 또 이제 어셈블리 레벨 내려가면 은 뭐 결국에는 뭐라
그러지 인데
스토어인 로드 인가 그래서 그렇게 되었거든 캐쉬 2 다 망가지고 뭐
이런저런 문제가 있어 그렇게 빠르지 않은 cpu 가 있었어요 그래서 모든
간의 이제 그런 젬 에이스 컨디션을 막기 위해
아 그럼 뭐야 하고 낙을 걸 다거나 락을 건다 거나 락을 걸지 않더라도
그러나 토미 글쓰는거 에 대해서 당연히 성능 저하가 있을 수 밖에
없거든요
이제 그런 부분이 있더라도
어쨌든 간에 그 서로 락을 거는 기간이 조금 적고 그렇게나 겁니다
무지막지하게 많이 걸지 않는다면 은 머리 쓰니 빨라질 수 있고 그런
상황에서 씨가 oc 낮다는 건 맞아요
이제 뻥 쳐서 프로그램이 재밌어 지는 게 뭐냐면
펑셔널 프로그래밍에서 는 이제 모든 오퍼레이션 자체가 새로운 데이터 셋을
주게 돼 있어요 까 한마디로 내가 만약에 아까 얘기했던 것처럼 뭐 이
같은 물체에 다가 모를 서로 접근하는 이런 개념이 있는게 아니라 이 뻥
션한 프로그래밍의 펑션 은 이제 제 물체를 받아 놓고 거기서 새로운
물체를 새로 값이 변화 상태죠
바꾼거 를 전 뽑아주는 방식이에요 어찌보면 이제 뭐 요즘 자바스크립트
쪽에서 위 엑트 이런 개념도 보통 그렇잖아요
이렇게 뭐 언제는 원웨이 르 데이터가 흐르게 돼 있는 경우가 있잖아요
미덕 셀러리 액체는 제일 기억 안나는데
그쪽 되니까 어쨌든 간에 나는 임프 쉽고 남의 인품이 바꾼다 며 앞으로
줄 거야
단 임프 같은 내가 바꾸지 않고 새로운 데이터 만들어 전달해 줄 거야
라는 개념이 거든요 그래서 이런 식으로 실제 바꿀 수 없는 데이터를 이제
뭐 프로그래밍 에서는 인 류 터 글이라 그래요
바꿀 수 있는 데이터는 뮤 터 그리고 바꿀 수 없는데 이미 유튜브 리라
그래요 그러니까 모든 오퍼레이션을 인 m 브라 했기 때문에 여러 스레드가
막 많은 데이터를 가져와서 건드려도 실제
이 나온 값 한 번 쇼 에서 나온 값은 그 뻥 천이 모든 책임을 증거이기
때문에 여기서는 레이스 컨디션 없어 없다는 거죠
문제는 여러 스레드에서 여러 동일한 데이터를 가져왔고 값을 이렇게
만들다보면 은 똑같은 데이터가 꼬아서 뭐 아까 말한 것도 플러스 1씩
하고 또 배 짜 나요
그러면 이것은 두 개의 다른 데이터 셋이 에요 그러면 이것을 결과적으로는
합쳐 같고 이제 합쳐져 플러스 집행 걸을 그래서 이게 뭐 흔히 요즘 하두
비나 이런데서 보는 맵 리듀스 란 개념이 이런 개념 이거든요
각 쓰레드 나갔 머신이 갑자 오퍼레이션 한 다음에 그 결국 값을 모으고
모으고 모으고 모아서 최종 값을 만들어 낸다는 그런 오퍼레이션 있게 되는
거죠 그래서 어쨌든 간에 이제
수 레드가 많아지고 아머 쓰레드가 뭐 4개 나서 깰 때는 상단 상관이
없네 쓰레드가 뭐 몇 백 개가 되고 뭐 아니면 네트워크 상에서 수백대의
머신으로 아까 말한 것처럼 하루처럼 맵 리듀스 같은걸 해야 된다면
아 어쩔 수 없이 펑셔널 프로그램 쓰게 될 수밖에 없어요
수많은 쓰레드 해서 한 데이터를 접근 안되요 자체가 좀 무모하기 때문에
그런 경우에는 결과적으로 이렇게 데이터 레인미터 으로만 들어가서 이 제가
아까 이제 서로 레이스 컨디션 없는 한테 데이터를 만들고 리듀스 시키는
거죠 그래서 펑셔널 프로그래밍이 멀티 뜰에 등에 좋다는 얘기는
그럼 a 스커드 c 없다는 게 정부의 성능 상으로는 가 cpu 하나만
갖고 의 성능 상으로는 당연히 c 같이 포인터를 접근해서 같은 쉐어 드
메모리는 데이터를 직접 바꾸는게 빠른거 고락을 걸 돌아 로
그게 아니라 정말 엄청나게 많은 뭐 컴퓨터를 던져 놓는 순간 부터는 이제
뭐 하나 하나 당의 효율성은 아니고 전체의 볼륨으로 볼 때 뭐 100대를
퍼부어서 30대 불량해 뭐 성능을 뽑아냈다
그래도 컴퓨터 한대로 뽑는 것보다 빠르니까 그런 개념으로 강해서 부터
2억여 유리해 지는 거죠 그래서
그 뭐라 그럴까 사람들이 그냥 아 멀티 스레딩 은 당연히 뻥 채널이 줘
이렇게 말하는 순간부터 그것도 좀 문제가 있는것 같고
멀티 스레딩 은 당연히 시다 라고 말하는 것도 문제가 있는것 같고
자기가 이제 쓸 수 있는 컴퓨터 환경과 아니면 자기가 할 년 오퍼레이션
같은거 예를 들어서 저희가 무슨 게임을 만든다 그러면 서버 쪽에서 엄청난
머신 러닝 을 돌리는 것도 있지만 뭐 그정도가 필요 없는 게임은 보통
일반 클라이언트 을까 이제 유저의 컴퓨터에 돌리는게 정상적이 줘 우리는
서버 b 도 문제가 있고 그러면 거기서 돌릴 수 있는 한 개가 어디냐
라고 생각을 한다면 이제 당연히
아직도 펑션 앞으로의 왼쪽보다 면 c 나 c 풀뿌리 장점이 있는 게
당연한 거고 그게 아니라 아까 말했던 것처럼 대용량 데이터를 맨 미주
쓰랴 된다면 당연히 동시에 는 프로그램 훨씬 나은 땄다고 할 수 있구요
그래서 그 차이가 있는 거고 음
인 m m v 얘기가 나왔으니까 이제
러스트 란 언어에 대해서 또 한번 얘기해야 될 것 같아요 이제
굉장히 많은 언어들이 기본적으로 변수를 선언하면 은 이게 언제 나뮤 터
무리에요 그러니까 내가 모인 테이를 씩 만들어 같다면 여러 술에 대해서
인텔을 접근할 수가 있잖아요 그럼 그 값을 바꿀 수가 있어요
그렇기 때문에 싱글 스레드 해서 상관이 없네 멀티 스레드로 가는 순간
이제 아 기본적으로 얘는 데이터가 바뀌는 타입 이니까 모든게 웨이스
컨디션의 노출이 되는 거죠
그러면은 이제 코드를 볼 때도 한 이게 변수 인데 과연 여기서 바뀔까 안
바뀔까 이런 고민을 하는 거고 그래서 그런 경우에는 악의 안 바뀔 거면
앞에 컨 스트랩 붙혀 갖고 2 m 을 만들어야 하는게 코딩 스탠드로
나오고 있어요
그런데 재미있는것은
이제 러스트 같은 언어 오는 기본으로 변수가 모두가 2m 무리에요 변수를
만드는 순간 얘는 바꿀수가 없는 변수 고 변수 라고 말한 것도 이상하죠
그러면 그 상황에서 니가 정말 이해를 값을 언제나 바꿔야 되는 에라곤
이가 확신한다면
그걸 m 불이란 타입으로 새로 만들게 돼 있어요 mut 라는 아마
키워드를 쓸텐데
그러니까 기본 동작은 모든 것이 2m 버리기 때문에 일단 뭐 아무
생각없이 쓰면 뭐 멀티 스레딩 을 가더라도 크게 문제가 없고 단 니가
정말 이게 갑 바꿔야 되는 값이 라고 생각을 한다면 m 으로 만든 다음에
그걸 나중에 다룰 때 니가 굉장히 뭐랄까 명시적으로 유튜브 지정을 해
줬으니까
그만큼 좀 더 신경을 쓰면서 고민을 하고 그만큼 방어를 할 수 있다는
장점이 있죠 그래서 음 저는 러스트 란 언어 가 처음 나왔을 때 굉장히
색 달랐던 게 그것의 아 기본으로 모든 게 컨테스트 구나
그러면 사람들이 실수로 진 덜 하겠구나 내가 갖다 서서 약이 보니
아니래요 뮤트 홀로 바꿀 거야 라고 말하는 순간 어 내가 뭔가 잘 못하는
게 있지 않을까 라는 고민을 하면서 코딩을 할 수 있다는 거죠 그래서 뭐
러스트 는 제가 이제 제대로 써 보지 못했죠 옛날에 맹기 소폭 나올
때부터 보고 아 정말 잘 만들었다 생각을 했고
개나 이제 뭐 포인터로 쓰는 포인트 쓸 수가 있어요 그리고 멀티 스레딩
할애해야 구제
데이터를 쉬어야 할 수도 있는 걸로 알고 있어요 근데
기본적으로 이제 컴파일 도중에 그런거를 많이 잡아 줄 수가 있게 돼서
언어 자체가 좀 이렇게 아까 말한 것처럼 좀 까탈스럽게 이 때문에 만약에
레이스 컨디션 이날 수 있는건 코드를 짜는 순간에 컴파일이 안되는 순간도
있더라고요 그래서 이제 그래서 이제 되게 잘 만들어 다 생각이 들었고 그
9
이제 그 언어의 장점 중에 또한 그거 였던것 같아요 그냥 그렇게 안전
한데 정말 이가 포인터 뽑아 쓰고 만 이상하지 살려 보려면
그것도 할 수 있어 다만 이렇게 뭔가 특별한 키워드를 넣거나 이렇게
특별한 구문을 썩어 쓰란 얘기죠
그럼 아까 제가 말했듯이 g2 제 씨 같은 경우는 그냥 막 포인터가 널려
있고 그 열려 있잖아요 쓰는거 나 터지면 터지게 있구나 그런 새 것도 안
하우스 것 은 근데 이제 러스트 는 기본적으로 그게 안 되게 되어 있는데
니가 이런 새로운 걸 하려면 하나를 이거라도 에 추가해서 해봐
단 이게 빠지면 니 책임이야 그럼 사람들은 누구나 더 신경을 쓰게 되겠죠
c 샵 에도 그런 똑같은 개념이 있었어요 지금도 있고 언 세이프 라는
구문이 있죠
포인터로 정말 쓰고 싶으면 픽스 해왔고
언 세이프 를 쓰는 순간 실제 c 에서 포인터를 쓰는 있을 수가 있어요
언 세이프 퍼레이즈 한다 이 무슨 멤 카피하다 너 이게 다 가능한데
단 그거를 쓰는 순간 우리는 뭐 익셉션 체크 잘 안해주고 깨지면 나는
몰라 라는 거죠
그렇기 때문에 프로그래머가 정말 그런 성능을 높이기 위해서 특별한 이상한
연산을 해야 될 경우가 있다면 언 세이프 로 써서 하라 는 거였죠 그래서
그런 부분이었고 그와 똑같은 개념으로 그렇고 씨도 어찌 보면 되게 비슷한
개념이 있었어요
다들 이제 생각을 잘 못하는데 씨가 되게 위험한 언어 고 잘못쓰면 퐁퐁
날라가는 언어 긴 한데
그것보다 더 엄청난 짓을 하셨던 게 뭐냐면 c 에서는 어셈블 열 수가
있잖아요
asm 을 쓰고 이제 어셈블리 코드를 막자고 그다음 이제
뭐랄까 컴파일하면 어셈블 로 컴파일 돼
근데 그 쌤 브래드 떡라면 또 이제 어떡할 건데 요 c 보다 좀더
디버깅하기 어려워지고 그런 부분이 있는 거죠
어셈블리어 를 하는 순간 뭐 이상한 짓 완벽히 할 수 있으니까
그래서 이제 그런 개념에서
어찌보면 언어가 변천 돼 가는 과정일 수도 있고 옛날에는 뭐 셈 블레어
정도까지 코딩을 더 짬 안됐을 정도의 시절이 라면
4시 정도만 짜도 상관이 없다 싶을 정도만 따로 상관이 없다는 시대가
왔고 이제 많은 사람들이 싶을 뿔도 필요가 없다
포인터 드 필요 없다 이제 그게 다 필요함 세대가 올 거다 라고
얘기했는데 그 날은 오지 않았고 오지 않을 거고
아 특정 분야에서 그렇게 쓸 수 있어요 모든 분야에서 그럴수 먹고
근데 그렇기 때문에 c 풀 포 를 대체하게 카 곳 하겠다고 용감하게
나오는 이제 언어들 라스트 같은 이제 컴파일 언어들이
이제 포인터 부분을 무시를 못하는 거죠 그래서 어찌보면 이제 예전의
모시풀 프로 처음 만들더니 즉 언어 뭐라 그럴까 제작자들이 포인터를 모두
없앤 거에 대한 평생 후회 했다는 얘기가 있거든요 저도 그 들은 얘긴데
4 그 분들이 아마 포인터를 없앴다 라면 지프 이 지금 있지도 않을
거에요 저는 그렇게 생각을 해요 그래서 포인터 그 정도의 개념이 저장이
존재야 되는 이유가 있고 그 개념을 계승을 하면서 컵 새로운 컴파일 언어
좀 더 괜찮은 언어를 만들고 있는게 러스 라고 생각을 하고
뭐 문제는 이제 로스트를 이게 오픈 소스 고 모질라 가 밀어주는 거라
봐요 복수 만드는 과연 언어가 발전은 하겠지만 툴이 얼마나 발전하지
걱정은 되지만 좀
모르겠어요 그 그날이 왔으면 좋겠는데
왠지 않을 것 같은 그런 느낌 아 그래서 어쨌든 오늘은 얘기가 이 3개의
걸쳐서 왔는데 함수형 프로그래밍 얘기를 하다가 한가지 했던 얘기가 op
사라지지 않을 거다 내가 볼 때 함수형 프로그래밍 쓰여야 될 것이 있지만
오비가 인간이 이야기 가장 좋은 언어 자 라고 얘기했고
두번째가 이제 함수형 언어가 멋이 틀에 등에 좋다는 얘기는 뭐 맞기도
하고 틀리기도 한 번
거야 예를 들어서 아까 말했던 것처럼 머신은 굉장히 여러 되돌리고
웨이츠 컨디션을 막아야 되는 그런 상황이 올때는 함수형 프로그래밍 굉장히
좋지만 순수하게 멀티 스레딩 으로 속도를 최고 높이려는 방식 특히 컴퓨터
1
아니면 뜰에 모코 수가 이렇게 많지 않은 경우
그런 경우에는 이제 c 계열에 언어와 이제 데이터를 공유하고 이제 동일한
데이터에 저장하는 그런 패턴이 훨씬 빠르다는 얘기 얻고 세번째는 이제
러스트 언어를 기반으로 한 그런
m 불과 이며 특 미 뷰 터울의 기본 방식의 전환 이랄까요 사고의전환
굉장히 좋고 어쩌면 이게
즉 점점 프로그램이 복잡해지면서 실수를 더 랄 수 있는 뭐 언어가
좋은건데
c 샵 보다도 훨씬 뛰어난 언어 라고 저는 생각을 해요 그런 면에서
그래서 그 정도 얘기를 하면 될 것 같고
포프 였읍니다
