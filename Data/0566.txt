안녕하세요 포프입니다. 

오늘은 취업 전에 반드시 알아야 할 자료구조, Data Structure죠? 그거를 말씀을 드릴게요. 이 비디오를 왜 만드느냐? 취업 전에 알아야 되는 자료구조는 당연히 ~다라고 누군가는 다 말을 하고 있었어요. 근데 요즘 들어 '그게 아니다', '이거 반드시 알아야 될 필요 없다', '그거 몰라도 프로그래밍 잘할 수 있다' 이런 자기 위안성 글을 올리시는 분들이 있고 그거를 믿으시는 분들이 있는 거 같아서 일단 제대로 말씀을 드립니다. 

일단 결론부터 말씀드리고 들어가면 웬만한 자료구조 책을 보거나 아니면 모르시면 POCU 아카데미의 COMP3500 알고리즘 및 자료 구조라는 과목을 보시면 자료구조를 소개하는 순서가 있어요. 보통 책에 소개하는 순서랑 같습니다. 거기서 처음부터 시작해서 다 알아야 되는데 마지막인 그래프 정도, 그래프 전에 보통 트리 배우거든요? 그래서 '트리까지는 알아야 되고 그래프 정도는 잘 모르셔도 상관은 없습니다'라고 말씀드릴게요. 자 그러면 잘 모른다는 의미가 뭐냐? 잘 모른다는 의미는 내가 직접 '당장 구현해 봐' 그러면 아무것도 없이 그냥 곧바로 구현할 수 있는 정도를 잘 아는 거라고 말하는 겁니다. 그래서 트리까지는 그 정도 실력이 되어야 돼요. '트리 만들어 봐' 그러면 트리를 내가 만들 수 있어야 돼요. '해시맵 만들어 봐' 그러면 해시맵 만들 수 있어야 돼요. '그래프 만들어 봐' 그러면 '못 만들어도 돼, 그건 나중에 책 보고 해도 돼'이 이야기입니다.

그래서 결론부터 말씀드리면 그냥 앞에서부터 다 따라가면서 마지막에 트리까지는 확실히 하셔야 되고 그래프는 취업 전에 반드시 구현이 가능할 정도로 알아야 되는 구조는 아닙니다. 결론은 말씀드렸고 설명을 드릴게요 설명을. 자료구조라는 게 굉장히 단순하게 생각을 하면은 데이터를 저장하는 공간이지만 우리가 굳이 데이터를 저장하는 공간을 얘기한다면 모든 거는 배열에 처박으면 됩니다. 고민할 이유도 없어요. 자료구조를 얘기한다는 이유는 뭐냐면 효과적으로 데이터에 접근이 가능하게 아니면 효과적으로 데이터를 추가할 수 있게 보통 시간 복잡도 얘기하죠? 공간복잡도 얘기하는 경우도 있는데 보통의 자료구조의 공간복잡도는 거의 다 비슷하기 때문에 보통은 시간 복잡도로 얘기합니다. 한마디로 빠르게 효율적으로 어디에 접근하고 읽고 추가하고 쓰고 지울 수 있냐 이야기를 하고 있는 거예요. 그래서 자료구조를 처음부터 보면 배열은 당연히 알아야 돼요.

근데 요즘 배열 공부 제대로 안 하시고 그냥 C#에서 얘기하면 List growable array, 배열이 증가할 수 있는 거. 자바에서 보면 ArrayList, 그리고 C++에서 보면은 vector 이런 거를 쓰시고 배열을 제대로 다루지 못하시는 분들이 있지만 이 배열을 제대로 다룰 줄 아는 거는 핵심입니다. 왜냐면은 배열을 만들어 두고 공간이 모자를 때 배열을 추가로 증가시키고, 복사하고, 중간 지우고 당기고 이 과정들이 단순히 배열의 의미라기보다 연속된 데이터를 어떻게 관리하냐의 문제기 때문에 굉장히 중요한 거고, 이거를 아시면 vector, 아까 말했던 vector나 List나 ArraryList 같은 경우들은 기본적으로 혼자 구현할 수 있는 정도의 실력이 되죠. 중요하고, 그다음에 보통 배우는 것들이 Queue 하고 Stack을 배울 거예요. 이것도 배열로 그냥 다 구현할 수 있습니다. 구현하시는 게 맞고 구현할 때 여기서 Queue 하고 *스택은 한 마디로 먼저 들어간 데이터를 먼저 뽑을 수 있느냐 아니면 마지막 들어간 데이터를 먼저 뽑을 수 있느냐 라는 약간의 비즈니스 로직이 들어갔을 때 할 수 있는 방법이죠. 결과적으로 알고리즘 하고 많이 연관이 되어 있습니다. 그래서 그것도 당연히 하셔야 되고, 요거 어렵다고 하시는 분들은 없어요. 그래서 배열, 큐, 스택 이거 어렵다고 사람 본 적도 없고 '이거 필요 없어'라고 말하는 사람도 없어요. 근데 어떻게 회사 일을 하다 보면은 스택을 진짜 거의 안 쓸 때도 있거든요? 거의 안 쓰니까 '필요 없어'라고 말하시는 분들 없어요. 이유는 뭐냐? 충분히 쉽거든요. 자기도 이해하거든요. '그거 아는데 넘어가' 이러는 겁니다. 오케이.

그다음에 약간 의견이 갈리는 게 연결리스트예요 연결리스트, LinkedList. 요거를 제대로 구현하려면 C 같은 언어에서 약간 복잡합니다. 더블 포인터 쓰긴 해야 돼요. 그래도 한 번쯤 학교에서 하는 게 좋은데 굳이 C를 안 배우시고 자바나 이쪽에 계신다면 그 정도까진 아니어도 연결리스트 한번 구현해 보는 거 좋다라고 말씀 드릴게요. 연결리스트 만의 장점들이 있어요. 데이터가 굉장히 클 때, 모던 CPU에서. 하지만 실무에서 연결 리스트를 그렇게 많이 쓰냐? 그러면 안 쓰는 경우들이 훨씬 많습니다. 트리 보다도 안 써요 사실은. 그래서 요게 좀 애매하긴 한데 그래도 개념을 배워두시면 그것보다 한 단계 더 자유도가 높아진 트리를 또 이해할 수 있기 때문에 어쨌든 짚고는 넘어가야 돼요. 근데 이거를 제가 'C 코드로 직접 작성해보세요'라는 질문을 면접에서 낼 거 같진 않아요. 하지만 'LinkedList에서 트리를 이해한다'라는 전제조건으로 최소한 배워두고 LinkedList가 정말 데이터가 많아질 때 배열의 비해 장점들이 있기 때문에 그런 경우는 기억을 해두시면 좋습니다.

그다음에 보통 얘기하는 게 트리에요 트리. 그래서 트리가 중요하네 안 중요하네 이런 얘기들 하는데 트리가 중요한 이유는 결과적으로 알고리즘 같은 거 배우실 때 보통 정렬을 배우잖아요? 그럼 정렬을 배우다 보면 어느 순간 퀵 정렬이라는 걸 배우게 됩니다, 빠른 정렬. 그리고 그거 보통 배열에서 관리를 하죠. 하지만 퀵 정렬은 엄밀하게 말하면 그냥 실행 도중에 퀵 정렬을 돌리는 방법은 사실 이진트리기도 합니다. 그래서 퀵 정렬에서 말하는 분할 정복이라는 방법, 그 분할정복이라는 방법을 그냥 데이터 구조적으로 처리할 수 있는 게 트리고요. 그리고 지금 사용하시는 많은 라이브러리 중에 어떤 데이터를 넣었을 때 알아서 정렬된다, 그럼 보통 바이너리 트리가 들어갑니다. BST라고 그러죠? Binary Search Tree 이진검색트리 어쨌든 BST라는 개념이 들어갑니다. 그래서 그런 이유 때문에 트리를 알게 모르게 쓰고 있는 부분도 있고, 두 번째는 트리라는 거, 특히 이진트리 같은 경우는 정말 용도가 많기는 해요. 이진트리가 아니라 사진 트리라도 상관없고요 나중에 가면. 왜냐면은 트리라는 구조자체가 이 부모 위에서 떼서 전체로 보든 아니면 자식트리만 떼어 가든 그 자체가 독립적인 트리가 됩니다. 그 이야기는 뭐냐면 결과적으로 재귀적으로 뭔가를 돌려야 될 때 이 트리라는 구조랑 개념이랑 굉장히 비슷하게 돌아요. 그리고 트리를 갖다가 재귀적으로 다 돌릴 수가 있어요. 그래서 어떤 코드를 작성할 때 재귀함수를 굉장히 쉽게 작성할 수 있는 거, 그리고 재귀함수가 왜 제대로 하는 프로그래머들한테 중요한지는 제가 중요하다고 몇 번이나 얘기를 드렸어요 비디오에서. 그러면 결과적으로 트리에서 배운 내용 그대로 하는 겁니다 사실은. 그래서 그런 식으로 하면 트리는 재귀적인 자료구조, 그리고 아까 말했듯이 정렬 이런 부분에서 실행 중에 뭔가를 할 수 있는 거, 그리고 또 다른 거는 우리가 어떤 실생활에 있는 데이터들을 모델링할 때 배열에 다 담을 수 있는 경우도 있지만 어떤 것들 간의 관계를 규정할 때 트리로 규정할 수 있는 것들이 꽤 있어요. 흔히 마인드 맵 같은 거 가끔 쓰시잖아요? 흔히는 아니고 가끔 쓰시는데 그것도 보면 다 트리 구조잖아요? 그런 식으로 어떤 사고가 뻗어나가는 가정 어떤 관계가 뻗어나가는 과정들을 트리로 구축을 할 수 있거든요? 그래서 트리는 어쨌든 간에 쓸모가 많아요. 그거를 '쓸모가 없다'라고 말씀하시는 프로그래머 분들은 자기는 그걸 쓰지 않는다는 거예요. 그러면 얼마나 단순한 일을 하는지는 우리는 알 수가 있죠. 그래도 자기가 하지 않기 때문에 '필요가 없다'라고 말씀하시는 분들은 '단순하게 하려면 필요 없다, 너도 그냥 단순한 일 하라'는 얘기예요. 하지만 저는 언제나 프로그래머한테 그 얘기를 하거든요? '단순한 일만 하면 어쨌든 간에 대체되고, 어쨌든 간에 빨리 밀려날 거다. 안 밀려나기 위해서는 모든 일을 다 할 수 있는 프로그래머가 돼야 된다. 어떤 기능을 다 만들지 못하면 너는 주니어다'라고 얘기했어요. Intermediate 때면 뭐가 나오던 만들어야 한다. 그렇게 되기 위해서는 솔직히 트리라는 구조는 꽤 많이 쓰게 됩니다 사실은. 그래서 내가 어느 한 회사에서 약간 말단 사무직 느낌으로 계속 그냥 프로그래머 일을 계속할 거다, 당연히 필요 없죠. 하지만 그게 올바른 조언은 아니잖아요? 당신이 어디 가는데 어떤 직종에 가는데 미래가 어떻게 될지를 보고 가는 거지, '너는 3년 뒤에 그냥 다른 애한테 대체당할 거야. 3년 동안 열심히 일해', '응. 그러려면 이렇게 해'라고 조언하진 않잖아요? 그래서 올바른 조언이라면 트리는 제대로 해야 한다는 거죠. 그리고 실제 트리는 만들어 보고 몇 번 코드를 작성을 하면 그렇게 어렵지 않아요. 트리까진 쉬워요. 여기까지 끝.

그다음 문제가 뭐냐면 그래프입니다. 그래프는 트리보다 좀 더 일반화된 폼이에요. 한 마디로 그래프에서 약간 제약이 걸린 게 트리입니다 사실은. 그래서 그래프는 그냥 간단하게 설명할게요. 어떤 많은 개체들이 있어요. 그럼 그 둘 간에 비정형적인 어떤 관계를 보여주려고 할 때 선으로 긋는 게 전부입니다. 그래프 자체는 어떤 개체들과 그리고 그 사이들 간의 관계를 원과 선으로 표현한 걸 보면 맞아요. 여기까진 하나도 어렵지 않아요 사실은. 그 이후에 문제가 뭐냐면 여기서 그래프 관련 알고리즘을 돌릴 때 이게 굉장히 복잡한 알고리즘들이 많고 알고리즘이 과목에서도 굉장히 느린 알고리즘도 많고 그리고 실제 실무에서 사용하는 분야들은 충분히 있어요. 꽤 있지만 일반적인 프로그래머는 많이 건들지 않아요. 그래서 그래프 같은 경우는 학교 다닐 때는 반드시 한 번은 해 보고 온갖 삽질하면서 구현도 해보고 뭐도 해보고 알고리즘도 이것저것 돌려 봐야 돼요. 하지만 실무에 나가서 이 알고리즘을 돌리려고 할 때, 그래프 알고리즘 돌리려고 할 때 머릿속에서 그냥 그래프를 돌리는 사람은 극히 드뭅니다. 그때 다시 검색해보고 찾아보고 '이게 맞는구나' 해서 해요. 그에 비해 트리 이전은 실무에서 흔히 당연히 알고 있는 거, '만들어' 그러면 곧바로 만들 수 있는 걸로 예측을 하고 생각을 합니다. 그만큼 정형화되어 있는 방법이고, 복잡하지 않고 속도도 충분히 빠르고 생각해야 될게 적어요. 그렇게 생각하시면 됩니다. 그래서 학교 졸업하기 전에 그리고 취업하기 전에 반드시 내가 직접 구현하는 알고리즘은 트리까지 제가 중간에 해시 맵을 빼먹었는데 제가 예전에 만든 비디오가 있어요. 포프 TV 해시 맵 검색하면 나올 거예요. 그것도 기본기예요. 그것도 아시긴 아셔야 돼요. 해시 테이블 개념도 아셔야 되기 때문에.

그래서 그렇게 하시면 되고요, '내가 지금 이거를 공부 안 했는데 실무에 가면 공부할 시간이 있지 않을까? 알아서 공부가 될까요?'라고 생각하시는 분들도 있어요. '필요할 때 배우면 된다' 하지만 제가 앞에서 말씀드렸듯이 실무에서는 흔히 트리까지는 당연히 할 수 있다고 가정을 합니다. 면접에서 그래도 흔히 물어보는 질문이고 그래프는 물어보는 회사도 있고, 아닐 수도 있는데 일반적으로 안 물어보죠. 실무에서 당연히 '이미 알고 있는 거를 네가 지금 공부해야 돼?' 그래서 그 시간을 따로 주진 않아요. 그럼 그 시간을 빼 갖고 자기가 따로 공부를 하겠다? 좋은 생각이긴 한데 생각보다 여의치 않습니다. 갑자기 그걸 사용할 때가 오면 다른 생활이 바쁠 수도 있고, 체계적으로 못 배울 수도 있고 생각보다 트리나 이런 것들 한번 제대로 자리 잡고 구현을 해 보면 처음에 시간이 좀 걸리거든요? 그래서 학생 시절에 많이 구현해보는 게 좋다는 게 그거예요. 다시는 구현을 해 볼 기회를 얻을 수가 없으니까. 그리고 그래프도 한 번은 구연해 보라고 말씀드리는 이유가 그래프는 어쨌든 간에 트리에 비해서 훨씬 복잡해요. 그 복잡한 거를 또 공부를 하려면 생각보다 많은 시간이 걸리고 또 돌릴 때마다 속도도 드럽게 느리거든요? 잘못 짜면은. 그것 때문에 고생하고 뭐 하고 이 고민을 합니다. 그런 거는 다 학교에서 하고 충분히 누가 옆에서 가르칠 수 있을 때 하는 게 좋습니다. 그걸 가지고 회사에서 누구한테 알려 달라는 게 대개 쪽팔리거든요 사실. 내가 되게 못 한다고 보이기도 하고. 그래서 어쨌든 간에 취업 전에 반드시 알아야 될 자료구조는 알고리즘, 처음 보통 자료구조 말하는 그런 책에서 처음부터 시작해서 트리까지는 완벽히 끝내세요 트리까지는. 그리고 그래프는 한 번은 해 보시고 가시는 게 좋고 못해도 그래프를 사용하지 않을 확률이 굉장히 높기 때문에 그거는 봐줄 수 있다 그렇게 말씀드릴게요. 포프였습니다.