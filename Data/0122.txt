그동안 사실 그래픽에 대한 이런저런 얘길 내가 많이 했는데 이 4tb
에서는 상당히 비기너 쪽 얘기는 별로 않았던것 같아요 사실 좋으면 제가
뭐 항상 하던 일이 비기너 쪽 일은 아니었기 때문에 그랬던 걸 수도 있고
근데 최근에 그냥 어쩌다 질문을 받았기 때문에
말할 이거 이정도는 비기너 좀 알고 시작하면 좋을 거 같아서 말을
해야겠다 싶어서 얘기를 하는 거에요
그 텍스처 압축 에 대해서 얘기해 볼게요
이제 보통 이미지 압축 이라고 얘기를 하며 는 보통 언제 2팩 이라던가
png 파일 0 하지만 이 생각하잖아요
제 2 패 에게 가장 큰 단점은 아 퀄리티를 잃는다는 것 그래서 좀
러시아 이 알고리즘이 라고 하거든요 그 퀄리티를 루즈한 다 하는 의미에서
너 c 알고리즘 이라 하고
png 같은 경우엔 엇을 에이스 라고 해서 압축을 해도 아 품질은 전화가
되지 않아요 언제든
압축을 다시 뽑아 낼 수 있는 거지 밥 압축을 풀면 은 뭐지 파일이죠
제타 2 p
그것도 똑같은 개념의 요시이 파일 넣었다가 다시 압축을 풀었을 때 원래
컨텐츠가 나오잖아요
그러면 이걸 로스 있으라고 하는 거죠 그럼 왜 로 c 알고리즘을 저희가
이렇게 쓰냐 그러면 크기 때문이에요
이미지 같은경우는 사람이 눈으로 보는것 되고 사람의 눈이 솔직히 그렇게
뭐 뛰어나지 않기 때문에 픽셀 들을 막 섞어 넣으면 약간 퀄리티가
떨어지고 그 인접한 픽셀 두세개 그냥 그 같이 같은 색으로 바꿔 버려도
사실은 사람 눈은 개체가 안된다고요 그리고 특히 이미지라는 게 뭐 벡터
그래픽 처럼 아주 깔끔한 외곽선 의 이런거 라는 문제가 되지만 그런 게
아니라 일반 생활에서 보는건 테트 첫 을 뭐 나무무늬 라던가 무슨 못 올
같은걸 대리석 같은거 이런 문 이라던가 그런 모 아스팔트 문 이라던가
이런거 약간 좀 굉장히 노이즈가 많이 껴 있는 패턴 이기 때문에 거기서
약간의 노이즈가 들어가고 실제 퀄리티가 줄어 들더라도 사람 등으로 인식
못하는 거죠
그런 개념으로 시작한게 일단 이미지 압축 이란 개념인데
모집 8% 보신분들도 알겠지만 지파일 풀 때 시간이 되게 빨리 되게 오래
걸리잖아요 그래서 사실 컴퓨터 그래픽에서 아 이미지 압축을 했을 때 그
압축을 얼마나 실시간으로 빨리 풀어 갖고 화면에 보여줄 수 있냐 가
중요한 거에요
이미지 압축을 컴퓨터에서 하면 이유는 메모리
보통 컴퓨터 메모리가 한 개가 되어 있잖아요 컴퓨터 m 으로 gpu
메모리 가 거기에 텍스트로 올려놓고 그 걸고 뽑아야 되는데 그 용량이
크면 클수록 밴드 있어도 커지고 그만큼 속도가 느려지기 때문에 그걸
빠르게 하기 위해서 메모리즈 는 가장 가는 새끼는 어느 정도 작게
메모리를 먹고 있지만 그 실제 화면에 그려 줄 때 실시간으로 이거를
압축을 풀어 줘 하고 원래 화면을 원래 이미지를 복원해 내는 그런 기술을
더 중요시 하게 되죠 그래서 머시 파이가 등 폼에서 절대 좋은 포맷이
아니고 뭐 예전에 모 구글에서 새로 개발한 이미지 앞쪽 그런걸 봤습 오신
분 있을지 모르겠어요 비디오로 한번도 왔었는데
그건 진짜 용량이 작아 질 거든요 근데 그게 곧바로 집히는 것 올리기에는
그런 속보 상에 문제가 있어요
그럼 gpu 쪽에서 어떻게 하냐고 문제 2 팩 쓴 야채 태어났어요
왜냐하면 제 2 팩 은 이제 압축을 해 보셔야 겠지만
압축을 할 때마다 빨 크기를 달라지고 그리고 어떤 픽셀 있느냐에 따라 그
모든게 다 틀려 지거든요
그래서 이제 일정하게 전해진
완벽하게 수학 공식 만으로 풀 수가 없는 그런 압축 알고리즘이 되어
모이 품은 쓰게 되고 뭐 efl 쓰게 되면 게 브랜치는 쓸때마다 아무래도
그런 성능이 떨어지고 되고 그리고 또 하나의 단점은 그렇게 브랜치를 쓰면
쓸수록 2 압축을 푸는 알고리즘 자체를 하드웨어적으로 못 만나는 거죠
소프트웨어 만들 수 있어요 근데 소프트웨어가 아니라 이 좌측 칩 에다가
하드웨어 수준에서 지원할 수 있으면
이게 훨씬 빨라 지겠죠 그래서 gpu 쪽 그러니까 컴퓨터 그래픽도 됬으니
미인은 언제나 그렇게 쉽게 풀 수 있는 죽었어요
그래서 처음에 게 나왔던 게 뭐 처음에 나온 건 아니 겠죠 한동안 뭐
요즘 아이폰이나 이런거 하시는 분들은
etc 보내시라고 보셨을 거고요
그게 이제 말 그대로
그 화면에 할까 이미지에서 4 곱하기 상가 8 곱하기 8 픽셀 있구요
그렇게 정상을 굉장히 픽셀 이어 득 4개 될 4개의 곱하기 내기는 10년
어께에 8개 곱하기 섞게 만료 64개 이걸 뽑아서 그 안에 패턴을 분석을
해서 거기서 뭐 최종 가장 가까운 값 책을 뽑아 내는 건가 아니라 etc
보면서 제가 알기로는 그냥
칼날을 몇 단계로 하는 걸 거에요 뭐 칼라도 부드럽게 원걸 되면 그것을
그냥 포인트 단위로 잘나가고
그렇게 딱딱 준강간 맞았다 보여주고 그 중에 하나만 쓰게
그래서 2d 폼에서 압축을 하면 퀄리티가 떨어지는 경우가 많죠
etc 봄에서 하나 더 발전한 게 저희 가지 컴퓨터 쪽에서 트랙터 x9
에서 지난 10년간 써왔던 dx t4 매진하게 바라 볼 거에요
디렉트 원 포멧이 라는게 있고 dft 뭐 원 투 쓰리 포 파이브 가
있는데 솔직히 가장 프로그래머가 많이 썼던 것 ex 증원하고 gt5 였죠
이 개념은 뭐냐면 둘다 개념은 비슷해요
2 이거는 4 곱하기 4 블락을 찾아내 요새 모든 사고 파계사 불라 마다
색상의 16개가 들어가잖아요 그러면 거기서 가장 최대의 색상 과정 최소
색상을 하나씩 뽑은 다음에 그 중간 단계를 2개로 있는거요 총 4가지
색을 표현하는 건데
최 최대값과 최소값을 뽑아놓고 그 중간 단계는 이 중간과 이 중간에
3분의 1 3분의 2 이렇게 해서 계산을 하는 거죠 그럼 실제 메모리의
지금 할 때는 이 두 색을 놓구요 실제 색으로 뭐 rgb 뭐 타워 팔은
아니에요
오 바 있 6발 to it 언어 요것도 좀 더 압축을 하기 위해서인데
그리고 사람들은 빨강이나
그러니까 빨강이나 파랑 보다는 녹색이 화면에 그 밝기 루미너스 를 좌우와
좌지우지하는 그게 많고 사람들은 역시 루미너스의 그 밝기에 훨씬 더 명도
라고 하자 한 번 말해 그거에 대해 더 민감하게 반응하기 때문에 그린
채널의 좀 더 강도를 준 것 뿐이고요
그래서 그 두 색을 오르고 오르고 를 집어넣으면 1 16 바이트 니까
32bit 가 돼요 그럼 그렇게 4byte 로 들어가고
그럼 나머지 단계는 아까 말했듯이 색이 4개 중에 하잖아요
뭐 최대 최소 값이 0 이라면 회색 값은 432 고 그 중간에 2
212 가 되겠죠 그럼 이거는 2 비트로 낼 수 있다고요 그러면은 각
픽셀 마다 2 비트로 인덱스를 넣어 주는 거에 염에 섬 사이에 그럴까
16 피스 되었죠
그럼 그게 32 픽셀이 다시 돼요 그러면 아까 말한 4바이트 색상표
나는거 인덱스 사바이 태극의 8바이트 가 되요 그러면 4 곱하기 4플라
쉘 6개의 색상을 표현하는데
4바이트 408 바이트 면 되는 거에요
4 일반 rgba 채널로 이걸 그리기 시작하면 사실은 16 곱하기 사발
64회 4byte 가 돼야죠
그럼 64 바이트 면은 16 바이트 의 4배 8 4 8 바이트 했지
8 바이트의 비해 8배가 높은 먹기 때문에 압축률이 1대 8로 되는
거에요
그리고 지금이라도 말씀들이 압축 공식을 말씀드렸잖아요 뭐 중간에 인덱스가
이렇게 들어가고 최대 거쳐도 값이 있다
그러면 이것을 압축을 풀 때도 굉장히 빠르게 합쳐도 풀 수가 있어요
각 픽셀의 다 인덱스 값을 보고 최대값 최소값 중간에서
인덱스에 따라 더 퍼센트 블렌딩 만 하면 되는지 나오니까 그 블렌딩 이
그냥 퍼센트를 곱하여 되는 거죠 그래서 이거는 다 하드웨어적으로 지원했고
지어 테스나 위해서는 반드시 지원해야 됐고 에디 xt 원을 말씀드린
거에요 rgb 채널만 했었기 때문에 알파 채널은 기본적으로 지원이 안되요
물론 알파가 100% 0% 요거 지원하는 방법도 있긴한데 제가 실무에서
쓰는 사람을 솔직히 거의 못 받고 그 집 스팅어 는 알파 채널이 없는
경우 에서 그렇게 들어가구요
그 다음에 디렉 t5 라는것이 알파 채널을 지원하기 위해서 또 비슷한걸
하는 것뿐인데
아까 rgb 채널의 대해서 이렇게 블렌딩 했잖아요 그 알파 채널에 대해
또 그렇게 따로 블렌딩 해 왔고 그 크기가 두 개가 되는 게 전부 라고
생각하신 맞아요
그럼 이제 못 ext 월 써 보신 분들은 알겠지만 그런 퀄리티가 줄어드는
단점이 또 있거든요
그러면 이제 퀄리티를 높이기 위해
그디어 d5 벌써 갖고 rgb 채널을 복원하는 그런 기법을 쓴 사람도
있어요 특히 이제 노멀 맵 이라던가 이런거 만들 때 저희가 많이 했었고
뭐 그건 알파 책을 어떻게 쓰느냐에 따라 다른건데
뭐 그건 굳이 설명드리지 않을 거고 그냥 궁금하신 분들은
찾아 보시면 될 것 같아요 이게 노멀 되고 노멀 맵을 txt 파이브 로
표현하는 법 그러면은
분명히 무슨 예전에 게임에서 들어있었던 방법이 나올 거에요 저희도 g
없어 썼고 그 결과적으론
디렉트 1g x5 퀄리티는 뭐
적당히 나쁘지 않게 왜냐면 실제 현재 보고 있는 게임의 모든 팩션 컴
압축은 다 기억해 두면 dx 바로 생각하셔서 맞아요
그럼 이걸 rgb 에 채널을 바꾸는 어떠냐 당연히 품질은 좋아지죠 제가
예전에 비디오에서 말했듯이 오히려 텍스처 사이즈를 절반 절반으로 줄이고
그거 대신에
아 그 대신에 grg 배울 수는 없이 나아지는 경우가 많다 라고 말씀
드렸잖아요
그걸 어떻게 쓰느냐에 따라 중요한 거에요 일반적으로 나무 패턴 이런
오이지 많이 있기는 택시 저라면 별 상관없이 압축하면 될 거고요
정말 벡터 아트 라던가 좀 깔끔하게 보여 되는건 rgb 션으로 써서 까지
라도 무리하는 써야 되는게 말일 수도 있구요
큰애 게임 20년전 기술이 거든요 그다지 디렉트 x11 에 넘어오면서
새로운 압축 포맷 일이 생겼어요 왜냐하면 그동안의 문제점을 봤으니까
그리고 그만큼 알고리즘도 많이 발전했고 그래서 지젝 디렉터 x11 에
들어가는 카드 지원하는 카드들은
이 새로 나온 압축해 법까지 푸는 그런 알고리즘을 자체적으로 하드웨어
지원을 해줘야 되요
그래서 이제 뭐 이름이 약간 좀 바뀌었어요 에서의 dft 이렇게 보던
게이지 pdg 이렇게 났거든요 블라 컴프레셔 이라고 해서 번호가 지금 5
헷갈리는데
dx t1 2 비씨 원 으로 됐고 dx5 가면 비시 뜨릴 거에요 빛이 3
그리고 이제 아까 말씀드린 그렇게 노멀 맵 압축하는 거 있잖아요 그런거
제조 잘 하기 위해 뭐 bc 모란은 꿈은 c 나왔어요
그러고도 이제 그레이 스케일 그니까 채널 하나만 있을 때 그걸 하면 또
어떤 것 나왔고
근데 특히 뭐 이거는 뭐 어찌보면 은 굉장히 특수용도 를 위한 거기 있기
때문에 필요할 때마다 찾았고 보시면 되구요
bc 7r 고이지 많이 나왔어요 솔직히 제가 가장 감동을 먹었던게 p7
인데
빛이 세븐 은 말 그대로 그 아까 말씀 드렸잖아요 무슨 뭐 디렉팅을 에서
품질을 높이기 위해 칼라 채널의 품질을 뭐 베티의 d5 로써 갖고 못해
최 도에서 내부적으로 곱해 하고 다시 쓰기도 한다고 그러면 메모리가
사용량이 조 배가 되는 거에요 원래 4 곱하기 상 하는데 8 바이트의
들었던게 상어 파괴하는 16 바이트 가 되는 거죠
빛이 세븐 도 용량은 사고 파계사 하는데
16 바이트가 들어요 한마디로 용량을 두 배로 키워 주고 그런데 이것의
장점은 rgb rgb 둘 다 치워야 하는데 특히 rgb 해서 애가 끼워
나더라구요 rgb 에서 실제 디렉팅 원으로 어떤거를 b7 으로 구으면
이게 훨씬 아픔 질 높아져요 저도 자세한 알고리즘을 얼마 전에 읽어 반대
지금까 먹었고요
뭐 뭐 여러가지 경계 있을게 했고 색 사람이 색을 어떻게 인지하지
판단하고 뭐 이런 알고리즘 돌려 하고 이렇게 만든다는 데 중요한 건 이런
압축 알고리즘 에서 축하는 시간은 얼마 걸려 상관이 없어요 솔직히
op.7 좀 오래 걸리긴 해요
중요한 것은 그 압축을 풀때 정해진 수학 공식에 따라 하드웨어의 와이어
된걸로 벌만 풀 수 있다면 문제가 없는게 약초 당시 이거든요 그래서 b7
그런 식으로 해서 뭐 최대 색상 최후 색상 꼽기 식
그니까 뽑기 시작할 때도 굉장히 복잡한 계산 9초 뽑는 것도 있고 그만큼
또 2개 루 메모리를 많이 먹기 때문에 품질을 좀 더 강할 수 있는 것도
있죠 근데 제 저두
작년인가 재작년에 함으로써 제 대비 셈을 써봤고 최근에 이제 어떤 ps4
게임 만들어주는 라오콘 트랙터 일로 그때도 g b7 써봤는데 칼라 쪽에
p7 에 들어가면
멈 본 하고 거의 필요가 안될 정도로 좋게 나오더라구요 물론 뭐 비교해
하고 노이즈 차이 뽑아내고 d4 업을 보이는데
오옷 이정도로 칼라 채널이 좋게 압축이 될 수 있구나 내가 그냥 육안으로
봤을때 아 퀄리티가 줄어들었다 이 개념을 느낄 수 없을 정도로 컬렉션이
압축이 너무 잘 되었어요 그리고 보면서 참 감동을 먹고
아참 괜찮아 주방 씨가 생각했어요 그래서 앞으로 dx t 아냐 지역 지역
텍스 일레븐 쓰실분 있으며 는 메모리에 조금 더 여유가 있다면 b7 5
그냥 디폴트 슬아 광역 뭐 강력한 유지 권고에 드리고 싶고
만약에 메모리가 전에 딸려고 주고 싶은데 특정 택시만 좀 좋게 퀄리티를
만들 필요가 있다 그런 택시도 있잖아요 아마 벡터 아트 라던가 그런건
빛이 세금을 써보세요
굉장히 좋아요 b7 이 좋다고 말씀드렸으니까 한가지 제가 드리고 싶은
말은
저도 e 실수를 했는데 빛이 3 브가 알파 채널이 들어 한 7s 패럴
스의 투명도가 들어간 택시의 빛이 댐을 쓰면 은 그 투명 값이 블렌딩
되는 그 뭐라고 하죠
퀄리티 품질이 gx d5 그러니까 빛이 뜨죠 지금은 그것보다 훨씬
못하더라구요 그래서 알파 채널이 들어간거 에서는 그냥 당연히 야비 3번이
퀄리티가 좋겠구나 라고 쓰시는 것은 별로 안좋은것 같아요
오히려 그것보다 그냥 bc 뿌리를 쓰시고 빛의 쓰리 가 마음에 안
드신다면 칼라 채널은 b7 으로 압축하고 알파 채널은 그 아까 말씀드린
그레이 스케일 오온이 아주 파는 방식도 있다 그랬잖아요 그걸로 해도
상당히 없을 것 같긴 해요 근데 그러면 메모리가
예전에 d5 쓰던거 에 비해 1 정도야 커지긴 하겠죠 뭐 요즘 뭐 컴퓨터
메모리 더 커지고 택시 크기는 점점 문제가 없어지지 않나 지표면으로 점점
커지기 때문에 그 생각이 들고
굴 9 컴퓨터 성능 이제서 발전 을 드라 잖아요
그 상황에서 메모리만 커지는 게 맞는 것 같은데
아 그리구 보 아트를 더이상 이렇게 엄청나게 집어 할 수 있는 그런 인권
인건비를 우리가 될 수 있는 환경도 아니고 게임 회사들이
그래서 결과적으로는 오히려 그런 남는 이념이 소스 컴퓨터 소스에 오히려
그런 식으로 에서 품질을 그냥 용량 많이 잠언서 높일 수 있는 그런
시대가 점점 오지 않나 싶어요 그래서 뭐 제가 그동안 빛이 세븐 몹이
씨바 이런 얘기를 거의 안 했기 때문에 일단 모르시는 분들은 기초
지식으로 알아두시기 바래요 2시 라고 말씀을 드린 거고 그리고 b7
하면서 제가 느꼈던 것들
알터 채널 들어간게 안 쓰는게 좋겠다 이런 말씀 드리고 싶었고 아우 이거
한가지 하면 빼 먹었구나
그 dx t 라던가 b7 의 압축 알고리즘은 언제나 용량이 정해져 있어요
그러니까 뭐 택시 크기가 몇 번 것이다 그러면 각 블랑 마다 아
압축 이어 몇 프로가 되는 지가 언제나 정해주는 알고리즘 이기 때문에
이건 뭐 j 팩이나 편지처럼 뭐 요 모 똑같은 크게 이미 지어도 이런
이미지는 뭐 20k 저런 이미 전 40개 이런건 없어요 그래서 어떤
의미에서는
계산이 편해지는 것도 있죠 그 이미지 부분만 딱 일거 고 싶은 그리고
가서 고기만 읽어 오면 되요
굳이 뭐 처음 분들에게 압축 풀 필요도 없고 그래서 뭐 그정도면 제가
말씀드리고 싶은건 다 말씀 드린 것 같고 말하고 싶은거 다 말한 거 아
몰라 예
포프 였읍니다
