예~ 안녕하세요~ 포프입니다.
요번에도 또.. 포프TV 올리기 하루 전에.. 이틀전인가? 하루전이다. 하루전에.. 밀려가지고 또 만드는 거예요
요즘.. 자꾸만 이러는데.. 바빠서 그런 것도 있고..
야~ 이거.. 1주일에 두번 계속 만들 수 있을까?
걱정까지 되더라구요. 이제는..
어쨋든간에~ 오늘 할 이야기는..
뭐라 그럴까..
그.... 문서화에 대해서 조금 얘기를 해 보려고 해요. 이게..
어찌보면 그냥.. 현재 게임 코드를 작성하시는 분들에게는 별로..
상관이 없는 이야기 일 수도 있어요.
왜냐하면.. 자체적으로 게임 만드는 회사는 보통 자기 소스코드 딱 볼 수 있고 그렇기 때문에..
저는 코드 자체가 훌륭한 문서라고 보거든요? 그래서..
코드를 읽는 것 만으로?.. 아니면 함수의 헤더를 읽는 것 만으로..
그 함수가 무슨 일하는지 문서화가 그렇게 저절로 되는 것 이라고 생각을 해요.
정말.. 아닌 부분에 대해서는 주석달고.. 뭐 이렇게 해서 문서화를 하겠죠.
그러니까~ 보통.. 문서를 따로 만든다기보다는?
코드안에.. 코드 자체가 문서화고.. 그리고 주석이 문서를 만드는 그런.. 경우라고 저는 생각을 하거든요?
물론 뭐.. 그 외에..
뭐.. 나중에 교육용 자료라던가.. 이런 것 때문에 좀 이렇게.. 그.. 전체적인 픽처.. 그러니까 좀 큰..
뭐라그래.... 한국말로...
전체적인 시스템 디자인을 보여주거나 이러기 위해서 문서화를 따로 만드는 것은 나쁘지 않다고 생각은 하는데..
문제는 보통.. 그렇게 문서를 따로 만들다 보면은~
나중에.. 코드가 바뀌어도 그 문서는 안바뀌는 경우가 많잖아요.. 그래서..
이 둘 사이에.. 그......
연관성이 깨진다고 그러나? 더 이상 관련이 없는 문서가 되버리기 때문에..
저 개인적으로는 어차피 소스코드 다 볼 수가 있는 곳이면, 소스코드 자체가 문서가 되어야 된다고 생각하는 편이에요.
최근에~ 제가.. 그....
어느 회사 게임 랜더링 엔진을 콘솔용으로 포팅을 해주고 있어요..
한.. 4개? 콘솔 4개 용으로 포팅을 해주고 있는데..
이게 되게 재미있더라구요.. 그..
그래픽 라이브러리 같은 경우에는..
뭐.. DirectX 처럼 꽤나.. High Level에.. 그러니까 고수준에 API도 있지만..
콘솔쪽 API는 정말 Low Level로 가는 경우가 많거든요.. 그래서..
막 C 스타일에 그런 함수를 막 호출하고..
그리고 거기 들어가는 매개변수도 되게 좀 많은게 많아요. 그리고 매개변수의 의미도 굉장히 뚜렷하지 못한 경우가 있고..
심지어는.. 그 화면 리플래쉬 레이트 있잖아요..  back buffer.. 플립해야 되는 레이트.
그거를.. 할 때~ 인자로 0을 넣으면은 60Hz이고~ 
뭐.. 1을 넣으면 30Hz고~ 2를 넣으면 무슨 Hz고~
이렇게까지 API 디자인이 되어있는 경우가 있어요.
어찌보면은..
뭐라그럴까. 하드웨어 엔지니어링 쪽 하시는 분들이~
좀 그런식으로 많이 하시는데..
그래서 이제.. 소프트웨어공학 쪽이 아니라 하드웨어공학 쪽에서 그런 분들이 보통 콘솔 디자인을 많이 하니까..
그런게 곧바로 반영이 되는 거죠.
그래서 뭐..
그런 경우가 있는데.. 문제는!
그런 API를 제가 써야되니까..
이게 사실은~ 문서화가 없이는 굉장히 알아먹기 힘든 API가 되어있어요. 일반 뭐.. API 디자인이 잘 못 된걸 수도 있죠. 어떤 의미에서는..
아니면은.. 이제 뭐....
말 그대로~ 하드웨어 쪽에 직접 제어를 하니까.. 
굳이 뭐 귀찮게 enum 만들고 이런 거 없이 그냥 Integer로 다 때려 박자! 이런 개념일 수 도 있고~
그래서.. 아니면은 또 말 그대로 콘솔 쪽은 하드웨어 쪽이니까 자기네들이 ..
어떤.. 효율성을 높이기 위해 특별한 하드웨어를 장착하기도 해요. 일반적으로 볼 수 없는 하드웨어를.. 왜냐하면은..
다른 경쟁사보다~ 어느 부분이 우리가 훨씬 효율적이다! 라는 것을 보여줘야되기 때문에~
그런 경우에는 정말.. 보통..
그래픽 프로그래머가 생각할 때 존재하지 않는 그런 개념이 들어오니까~ 그런 개념을 못 잡는 것 일수도 있고.
그럴때 문서를 보게되는데..
여기서.. 되게 최근에~
이게 두 플랫폼인데.. 같은 회사의 플랫폼이에요. 근데..
API 구조만 봐도 그렇고.. 샘플코드만 봐도 그렇고.. 이 두팀은 확연하게 다른 팀인게 딱 보이는거에요.
한 팀은 진짜 순수하게 하드웨어 엔지니어링 쪽으로 완벽하게 가는 사람.
샘플코드마저 그냥 C스타일에 처음부터 끝까지 한번에 쫙~ 만드는거.
그리고 다른 쪽 한 쪽은 '아! 이게 좀 젊은 애들이 아닌가?' 생각이 좀 들었어요. 소프트웨어공학 쪽 컨셉이 많이 들어왔고. 뭐 enum 같은 것도 많이 썼고.. Integer 보다는..
그리고 샘플코드 만들때도 프레임워크를 짜서 이렇게 따다닥~ 해가지고 샘플코드 짜 놓는거..
일단.. 샘플코드만 가지고 얘기를 하면은..
그런 하드웨어 콘솔 샘플 API에 들어가는 거는 순수하게 C스타일에 코딩스타일. 함수 하나에 다 쳐밖고 그냥 보여주는거..
프레임워크 안짜는 거. 이게~
이해하긴 훨씬 쉬워요. 왜냐하면 어차피 제가.. 각 프레임워크를 만들더라도 그 프레임워크 내부에서 함수호출 하는 걸 제가 결과적으로는 다 해야되는 것이기 때문에..
파일 하나에 있어가지고 쫙~ 다 볼 수 있는게.. 오히려 프레임워크 제대로 짜놓고 무슨 뭐..
OOP 제대로 해놓고 하는 것 보다는 이게 더 보기가 쉽더라구요. 그래서 일단 그거는 잠깐 얘기를 드리고 싶었고..
그 다음에.. 문서화라는게 재밌는게 있어요. 제가 아까 이 두 플랫폼이 다르다고 그랬잖아요.
되게 재미있었던게~ 이.. 올드스쿨한 C스타일에 플랫폼은..
문서화가 헤더파일에 다 되어있어요.
그래서 일단~ 어떤 함수를 볼 때 이게 뭔지 모르겠다 싶어서 F12를 딱 눌러보면.. VisualStudio에서요.
F12를 딱 눌러보면은 Decoloration으로 가잖아요. Decoloration에~
그.. 모든 매개변수의 의미와.. 그게 정말 왠만한 API Document 보는 것 처럼 완벽하게 써있어요.
이 매개변수는 뭘 의미하고 여기에 받을 수 있는 값은 이런 이런게 있는데 이런값 쓸땐 저렇게 되고 저렇게 되고~
그게 말 그대로 함수 헤더 한줄에 설명.. 보통 문서화 API 설명되어 있는 것 보면 한 20줄 30줄 되잖아요. 
그게 쫙~~ 써있는거에요.
그래서.. 그런 API를 솔직히 제가 별로 본 적이 없었어요. 콘솔쪽에서.. 근데..
보면서~ '어! 되게 편하다!'라는 생각을 했어요. 
왜냐하면은...
다른걸 열 필요가 없는 거에요. 그냥 VisualStudio 안에서 다 보고 이해하고 할 수가 있는거에요.
그 샘플 코드하고 이것만 있으면, 그 하드웨어.. 
그래픽스 하드웨어에 직접 접근하고 뭐 하는데 필요한게 다 되더라구요.
그런데 이제.. 두번째로 아까 말했던 그.. 프레임워크 제대로 짜고 하는 이런.. 좀 새로운 경향에.. 콘솔.. API 쪽..
이쪽이!
전반적으로는 솔직히 이쪽이 좀 더 낫어요. 이 새로운 API 그쪽이.. 왜냐하면은..
그 문서화에 문제가 아니라 딸려오는 툴이나 이런 것들도 소프트웨어 프로그래머.. 소프트웨어 공학자들 프로그래머들이 다룰 수 있는 편리한 툴들을 많이 제공했고~
VisualStudio 같이 integration도 좀 잘 됐고~ 이 올드스쿨한 사람들은 좀..
아.... 디버깅이나 이런거에서 자체 디버거 띄워야되고 뭐 이런 부분이 있었어요. 뭐.. Visual Studio도 지원하지만~
거의 뭐.. 속도도 엄청 느리고 안된다고 보면 맞는거고~
그렇게 했는데 문서화 쪽에서는~
아까 말씀드린 올드스쿨 쪽이 좀 낫던게.. 여기 문서화는..
헤더파일에는 정말 별 내용이 없었어요.
그냥 헤더파일에는 '이런거 하는 함수다!' 
별 의미없는 설명.
그리고 거기다가 자세한걸 알고 싶으면 메뉴얼을 봐라.
그래서 메뉴얼을 딱! 열어보면.. 아까 헤더파일에서 했던 내용이 이제 메뉴얼에서 볼 수 있는거에요.
근데 이 메뉴얼이 보통~ .chm 파일로 많이 제공을 하죠 요즘은.. 그.. 뭐라고하지..
헬프파일인데 HTML 기반된거? 
그래서 그걸 하나하나 봐가면서..
결과적으로 내용은 똑같은데~
그.. .chm 파일에서 뭐하나 찾으려고 그러면 여기서 또 함수이름 치고.. 뭐.. API 보고~ 또 여기서 이거 보려면.. 또 클릭하고 이런게 있잖아요.
그런.. 과정을 겪는 것 보다는~
그냥 Visual Studio 상에서 F12번 누른다음에 필요한걸 찾아서 Copy&Paste 해서 쓰는게 훨씬 더 빠르더라구요. 
그래서..
물론 요즘은 이제...
뭐 Doxygen 이라던가.. 이런걸 쓰면 함수.. 헤더파일이나 이런거 에서는 커맨드 블럭 자체를 Doxygen 파일.. 
그러니까 HTML 파일로 뽑아낼 수 있잖아요.
그래서 결과적으로 헤더파일에 넣으면 똑같이 뽑아낼 수 있는 것 같긴 한데~
결국 그렇다면은.. 저는 헤더파일에 상당히 많은 문서화가 되어있고~
정말.. .chm 파일을 보고 싶어 하는 사람들을 위해서는 Doxygen으로 메뉴얼 파일을 'generation 해가지고 보여주면 되는게 아닌가~' 하는 생각이 들더라구요.
그래서.. 어떤 의미에서 굉장히 신선한 충격이었어요.
어찌보면은.. 다른데서 많이 쓰고 있던 방법 일지도 모르겠는데..
제가 콘솔 쪽에서는 그렇게 되어 있는 걸 처음 봤어요. 
그래서..
그.. 올드스쿨한 헤더파일? 거기에 들어가있는 문서화 꽤 괜찮지 않나~? 보면서...
많은걸 느꼈고! 혹시나 이건 뭐.. 아까 말씀드렸듯이 
게임을 제작하는 회사에서는 별 의미가 없을 거에요.
오히려 라이브러리 만들어서 API 내다 파는 
회사가 더 의미가 있을거지..
그래서.. 그런 회사라면은 이런식으로 문서화해서 헤더파일에 쳐밖는 방법도 한번 생각해 볼 방법인 것 같아요.
그리고 뭐.. Doxygen 따로 제공해가지고.. 
메뉴얼 제공하면 될 것 같고.. 그래서..
최근에 그냥 보면서 '아~ 이거 좀 새로운데? 좋았는데?' 라고 느꼈던 거 그냥 나누기... 위해서? 포프TV를 만들었구요~
절대 그냥 시간에 급해서 대충 만들어서 만든건 아니에요~ 절대 아니에요~ ^^;;;
예! 그랬구요~ 예~ 포프였습니다!
