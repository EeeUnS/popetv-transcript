오늘 얘기에 물건은 시샵 에 대해서 한번 더 얘기해 보려고 해요
사실 얼마전에 그냥 뭐 하다는 생각이 지 모르겠는데 아 그거 없었나봐
그
얼마나 이 대학 모아다 같은 생각이지 말할 수 없을 것 같구요
기업 비밀을 좀 있기 때문에 제기가 먹었다는 기업 아
[음악]
얼마전에 그런 생각에 한번 들었어요 아시 #2 2
c 플러스 플러스 보다 더 빨라질 수 있겠구나 라는 생각을
일단 뭐 몇가지 잘못 생각하시는 것들에 대한 얘기를 좀 할게요 일단 흔히
생각하신 것이 #2
c 플러스 플러스 에 비해 너무 느리다
그렇지 않아요 뭐 느리긴 들의 현재로썬 그 왕은 c 플러스 플러스 에서
처럼 이렇게 직접적으로 뭐 하드웨어는 메모리 주소로 접근하거나 뭐 메모리
관리를 직접 하거나 그런 게 아니기 때문에 당연히 10 플러스 플러스 가
c # 보다 빨라요 현재로는
근데 그것도 뭐 당연히 어떻게 짜야 나름이겠지만
아 뭐 이 근데 뭐 c 플러스 플러스 는 당연히 여러 가지 위험이
존재하며 메모리를 잘못 건들면 몸에 몰입도 생길 수 있고 뭐 이것저것 할
수도 있고 뭐 근데 모씨 샵도 버추얼 머신 때 메모 메모리 맥이 여전히
생길 수 있다 이런 얘길 했는데 뭐 c 플러스 플러스 로 난리 칠 수
있는 것보다 시작으로 난리 쓰는게 훨씬 적기 때문에 여전히 10 플러스
플러스 가 위험성이 더 많죠
그리고 시샵 을 한번 개발 속도도 빠르고
어 투르 일도 개발 줄도 아머드 c 플러스 플러스 보다 좀 더 낫구요
그 이유는 사실 그
iti 런타임 타입 뭐지 그 r 제가
런타임 타이 포메이션 3번 타이 tie 포메이션에 에 그거 때문인데
그것때문에 여러가지 그
쿨 파일러 컴파일러 툴 아이디 id 에서 지원할 수 있는 그런 여러가지
도구가 많은 거죠
뭐든 간에
늘이기 느려요 근데 제가 얼마전에 작년인가
1 금이 터치 작업중에
복 셀 에디팅 있었거든요 복 셀로 에디팅 하는
어 그걸 했었는데 저희 샵으로 발라 거 든 요 시작하고 이제 뭐 dad
라텍스 내부적으로 이해하고 샤프 dx 인과 슬림 dx 과 샤프트 x
했던거 같아요
샤프 dx 써봤고 걸로 프로토타입 1 만든게 있는데 뭐 막 마친 큐브 나
이런거 엄청 나게 해 썼는데도 불구하고 속도가 그렇게 내리지 않았어요
물론 시험에서는 패러럴 뽑아 자동적으로 지원이 되기 때문에 그런걸 훨씬
뭐 cpu 2
파커 2 99 10% 100% 이용할 수 있었던 장점도 있고 굉장히
프로토타입 한것도 빨랐고 개인적인 거 에서는 물론 c 플러스 플러스 로
가 쓰는 1
뭐 최소 10% 빡 많으면 20% 정도 까지도 이렇게
속도 향상 1 수 있었을 텐데 그래도 시설이 그렇게 내리지 않았고 충분히
쓸만 할 정도였어요
심지어 툴을 다 이걸로 만들어 되겠구나 복 세렉 전투를 그 생각까지
했으니까
근데 현재 50 플러스 플러스 가 빠른 이유가 역시 기계어 로 컴파일
된다는 거잖아요
그거 뭐 언어 자체도 기계어로 곧바로 컴파일하기 가 좋은 안하고
그래서 타겟 플랫폼 이용으로 최종 인스트럭션 쓰시라고 있잖아요 그 cpu
에서 지원하는 모두 뭐
5 + adel toi 뭐 라이트 슈트 rf 슈트 이런것도 시작해서 그
안에 백토 유니 있으면 뭐 원래 플롯 타입 하나의 계산해야 될 거를
제품은 4개를 한 번 있어서 한번에 계산하는 걸 머신 d 라고 하죠 그런
것도 있고
그런걸로 컴파일이 돼서 해요 근데 여기에 이 문제점이 새로 나온 게
뭐냐면 제가 최근에 생각하게 된 건데 사실 pc 용으로 게임 만드시는
분들은 보면은
그 비쥬얼 스튜디오 안에 보면은 인스트럭션 셋을 어떤거를 지원 할 건지를
고를 수 있는 옵션이 있어요 거기 보면 뭐 ss2 원을 지원하겠다 sc2
를 지원하겠다
뭐 그 다음 보다 나은 것도 있죠 뭐 에센스 똘이 하고 뽀뽀도 나왔던거
같고 또는 모르겠다 뜨린 있었던거 같은데 그걸 또 뭐야
bpf x raf 빙과 뭐 뭐 새로운 거 있어요
뭐 예전에는 뭐 2개 동시 하는 것은 먹었네 얘기하는거 이제 16개를
한꺼번에 할 수 있는 뭐 그런것들
그런 인스트럭션 셋을 사실 인텔 쪽에서 굉장히
위 설치를 하면서 계속 발전을 시키는 거 거든요 그리고 amd 는 자기네
자칫 유역이 있었다가 도
인텔 cpu 가 워낙 보미는 트 하니까 워낙 그 시장 규모가 크니까 인텔
쪽으로 많이 지원을 하면 자기들이 진태 야인 인스트럭터 인스트럭션 셋을
지원을 해야 돼요
그래서 그거를 지원 않는데 amd 는 언제나 기출 있거든요
약간씩 그래서 인터넷 계속 이거를 새로운 걸 만들어 나가고 있고
근데 어 그래 그럼 인텔의 새로운 이스트 업체 쎄 쎄 쎄 쎄 쎄 쎄 쎄
쎄 쎄 쎄 뇽 으로
컴파일을 해보자 라고 생각을 했을 때는 그 컴파일 옵션은 바쳐야 되잖아요
그럼 이제 기계어로 배턴 해줘요
근데 문제는 이것을 amd 아니면 또 옛날 cpu 이걸 새로운 걸
지원하는 gps 돌리면 당연히 안 돌아요
그 시우 문제는 그러면 어떻게 할 거냐
그럼 exe 파일을 가 플라톤 마다 만들어줄 거야 그런 사람은 거의 없죠
왜냐하면 새로운 ex 이빨만 때보다 취해 새로 해줘야 되고 뭐 테스트
새로 해줘야 되고 이것저것 다른 게 있을 수가 있으니까
그만큼 취해 비용이 높아질 때 안 그런다고 요 그래서 보통 저희가
하는거는
그 내부적으로 돌리게 아니면 그렇게 외부 잡았다 팔 거면 은 가장 낮은
인스트럭션 셋을 모르죠 지금 현재 뭐 왠만한 cpu 는 다 ss1 당연히
지원할 거고 ss2 드 지원 할 거에요 아마
그래서 sc2 정도로 맞춰놓고 컴파일해서 보내요 그러면
정작 그 아무리 고성능 cpu 가 있더라도
이거에 가능성은 훨씬 높은데 그것을 충분히 못 살리는 거죠
실제 그것보다 뭐 어떤 프로그램에 따라 틀리겠지만 벡터 라이즈 에이션 만
잘해도 니까
계산을 뭐 플로팅 하나하나 4개 할 것을 16개 안고 해야만 할 만 해도
뭐
인 띠어리 논리적 아냐 이론적으로는 모네 배모 6배 8개의 향는 현상이
있지만 사실적으로 뭐한 20% 30% 의 성능 향상은 충분히 있을 거에요
특히 계산이 많은 프로그램에 수록
뭐 물리 같은 것도 좋은 예일 수 있고 뭐 뭐 애니메이션도 좋은 일 수
있고 여러가지가 있겠죠
그럼 이걸 대체 c 플러스 플러스 쪽에서 어떻게 해결 할 거냐 쉽지가
않아요 정말 exe 파일 가 써주는 것도 그렇고 그렇다고 그 exif
아이를 그 예를 들어 sse2 지원하는 것을 ss 뽀 징을 하는 것을 두
개를 만들어 놓고 바이널 을 합친 다음에 실행할 때 어떤 건지를 확인해서
이쪽 파이널을 점프 해서 치료하기도 또 애매하고
그럼 exe 파일이 거의 두 개가 뜨니까 그런 c 플러스 플러스 쪽에서는
쉬운 해결 방법이 아직은 없어요 물론 제가 들은바로는
이제 그런걸 해결하려고 하는 움직임은 있어요
근데 뭐 그 거야 당연 이제 컴파일 제조하는 회사 쪽에서 좀 많이 도움을
해줘야 되는 거고 그리고 cpu 칩 메이커 쪽에서도 아무래도 많은 도움을
줘야 겠죠
공동작업을 이루어지지 않을 거야 생각을 해요
그런데 c 샵 으로 가면 그게 훨씬 간단해 줘요 c 샵 은
컴파일된 기지가 아니거든 히 # 뭐냐면 그 시샤모 짧은 언어가 있으면
거기서 인터 믿어 냉기 지라고
그 msi l 이라고 할 거에요 인터넷 냉기 주라고
약간 뭐라 그러지
그냥 다른 언어로 코딩을 만들어 놓는 거에요 그리고 실제 최종 타게
플랫폼에서 실행을 할 때 그걸 보면서 5
여기서는 뭐 ss 뽀 를 지원하는 플랫폼 이니까 리플로 계산 4개 5개
6개 를 하는 걸 한꺼번에 뭉쳐 받고 한 번에 돌려야 지 그렇고
중간중간에 이제 그런 식으로 바이어 로 인젝션 이 가능하다 구요
한마디로 실행시키는 동안의 컴파일을 하는 느낌이나 같은건데
그럼 결과적으로 이거는
그 고성능 하드웨어의 효과를 규칙 c
이용할 수 있다는 거에요 물론 이게 그렇게 쉽진 않죠 왜냐하면 은 벡터와
이제 션 같은거 할 때는 당연히 다른 코드도 가치 분석을 해서 id 6개
7개 같이 계산이 하는거니까 하나로 묶어 되겠구나
그리고 이걸 하나로 묶어도 그 예를 들어서 배열이 라면 배열 두 번째
요소가 첫 번째 유서에 계획 계산 값을 다시 쓰지 않는구나
이런것도 생각을 해야 되거든요 8개를 한꺼번에 더하기를 시키는거 하고
일에 그 첫번째 배열 요소의 뭘 더하고 그 값을 가져다가 다시 더하는 것
하고는
각 그 결과가 티셔츠 이니까 그런 알고리즘도 돌려야 되고 그 여러가지
따져보면 쉽진 않아요
그리고 당연히 c 플러스 플러스 컴파일러가 시간이 오래 걸리는 것도 그런
짓을 하기 때문이에요 그래서 10 플러스 플러스 현재 컴파일 타일 보면은
굉장히 되잖아요 근데 그 긴걸 따졌을 때 당연히 그런 분석을 확실하게
실시하면서 돌리기 까지는 아직은 무리가 있겠다 생각은 들어요 근데 모르죠
뭐 시대가 지나가면 지나가고 cpu 벡터 yj 션이 정말 미스트 시
올라가고 한꺼번에 1 100 200개 정도 개발할 수 있다거나
그렇게 되면은 아주 간단한
그런 그 알고리즘을 돌리는 것만으로도 시샵 의 성능이 10 플러스 플러스
에 가까워질 수 있겠다라는 생각을 해요
어쩌면 더 빨라질 수도 있고 근데 그거는 좀 먼 미래 같긴 한데 뭐
컴퓨터에서 먼 미래라고 해봐야 5년 10년 일 수도 있고
시샵 에 으
뭐 시사 뿐만이 아 이젠 잡아도 마찬가지인데
마이크로소프트 만큼 컴파일러를 제대로 만들 수 있는 회사가 뭐 안주 3
밖에 없기 때문에
어 일반적인 시샵 이라고 하는 거예요
그 시샵 쪽에서 그런 발전이 엄청나게 되면은 시작도 굉장히 좋은 엄마가
되겠다는 생각을 해요
성능 쪽에서 뭐 그래도 여전히 문제가 일행 r2 바지 있죠
가비지 컬렉터 두가지가 아니거나 가비지 컬렉터 가장 큰 문제죠
g 샵에서 그 문제는 아직도 남아 있겠지만 뭐 그거 가비지 컬렉터 마모
레퍼런스 카운팅 에 대해서는 다음 기회에 결합이 로 하고요
좀 할말이 있기 때문에 그래서 오늘 하고 싶었던 말은
시장이 빨라질 수 있구나 그럴 수도 있겠다는 생각 그리고
샵은 왜 왔어 보세요
굉장히 좋아요 뭐
[음악]
저는 5년 안에 게임 모든 게임 의 시선으로 만들 수 있다는 생각을 해요
가능하지 않을까 싶어요 그런 역시 가비지 컬렉터 맛 좀 제대로 어떻게
해주면 그 뭐 오늘은 그 정도구요
음 다음에 또 다른 주제로 찾아 뵙지요 할말은 많아요 아직 예 포프
였읍니다
으
으
al 으
으
w
으
won
으
으 르
으
