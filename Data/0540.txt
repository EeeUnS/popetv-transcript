[음악]
w
이 안녕하세요 4p 입니다 최근에
제가 또 좀 어떤 게임들을 을
최적화를 해 준적이 있어요 특히 콘솔
쪽 쇼크를 많이 해줬는데 요 콘솔
최적화를 하다 보면은 저희가 흔히
아무 생각도 안 하던 pc 에서 그냥
보통 빠르니까 요즘은 pc 가
빠르잖아요 생각 안 하던 것들을
생각해야 될 경우들이 있어요 그런게
바로 아무 생각 없이 사용하는 함수
1
이게 가끔은 엄청 느릴 때가 있거든
워낙 많이 호출이 되서 최근에 봤던
그런 함수 중 하나는 매우 카피
였어요 멤 카피 시프 풀 사용 하시는
분들이면 아무 생각없이 사용하죠 야
변수 1 대입하는 것보다 맨 카피가
빠르니까 엠카 표출 하자 어디든 사용
할 수 있잖아 이런 생각을 하세요
그러나 mm 카피 2
사실은 pc 에서도 그렇고 특히
특정한 콘솔에서 1 그렇군 술에 수
그렇고 어떤 주 치게 따라 어떤
제약이 들어가면 훨씬 빠르게 도울 수
있는 경우들이 있어요 그거를 좀 잘
생각을 하면은 좀 엉뚱한 짓을 덜 할
수가 있죠 그런게 뭐냐면은
첫 번째는 뭐 특정 콘솔에 가면은
mm 카피를 호출한 순간 대부분 맨
무 부 함수로 바꿔 왔고 알아서 뭐
컴파일 되는 경우들이 있어요 그건 그
콘솔에서 는 맴 부부가 일반적으로
메인 카피 보다 빠르다 뭐 이런
경우일 수도 있고 뭐 큰 여러가지가
있는데 그런 부분은 프로그래머가 심리
역사 할 이유는 보통은 없어요 그래
두 번째는 또 뭐냐면은 mm 카피를
할 때 요 맹 카피를 시작하는 주소
그 주소가 어떤 바이트 단위 뭐
4바이트 다이드 16 바이트 다니는
심지어는 씩 63 5 킬로바이트
다니는 어떤 바이트 단위로 정렬이
되어 있을 때 속도가 엄청 빠른
컴파일 하는 경우들도 있습니다 무조건
컴파일 중에 알 수 있으며 그렇고
알지 못하면 그 안에 efl 스가
들어가서 그게 4바이트 다니며 는
빠른거 호출하고 아닌 고치고 이렇게
갈 수도 있지만 결과적으로는 그런거
따라 더 빨라지는 경우도 있어요 그
두번째 경우에는 역시 코 쏠 기계
따라 하드웨어 다 다를 수 있지만 그
내 몫을 다 다르거든요
하지만 내가 메모리를 할당할 때
혹시나 싶은 뿔 코딩할 탈당 할 때
이거는 메모리 카피가 많이 일어나는
거면 은 기본적으로 메모리가 뭐
4바이트 아니든 뭐 16 바이트 다
있는 정열을 되게 해 주는게 알아서
속도가 빨라지는 경우도 있어요 물론
메모리가 원아 없는 플랫폼은 그게
문제가 되겠지만 요즘 플랫폼 들은
보통 메모리가 충분하죠 그래서 그런거
생각하시면 은 두 번째 거는
프로그래머 갈 수 있는건 메모리
할당할 때 특정 바이 쌍이 얼라인
하는거 좀 더 고민하는 방법들이 있죠
세번째는 이건 약간은 블랙매직 일수도
있고 아닐수도 있는데 요거는 제가
요번에 최적화 면서 굉장히 많이 봤던
문제였어요 뭐냐면은
멤 카피는 범용적인 함수 해요
4byte 를 카피할 수 도 있고
16 파이트를 카피할 수 도 있고
5천 킬로 바이트 를 카피할 수 도
있죠 자 그러면 과연 멤 카피가 빠른
야
아니면은 파이트를 하나씩 하나씩 대의
파는게 빠른 야 이런 문제가 알 수가
있어요 물론 파이트 한식 개입하는 건
대응을 누려요 그러나 32비트 머신
아니면 64비트 머신에서 4byte
씩 구입하는게 4byte 를 메인
카피 하는거 더 빠를까
그러면 보통 바랍니다 그리고 특정한
바이트 크기 까지는 실제 그런 뽀
문을 돌려서 하든 아니면 은 목공은
돌리는 것 중에 컴파일 최적화 되면서
알아서 또 명언 얼룩을 해주거든요 그
결과 적은 바이트 단위로 모여 어깨를
복사 이던 4바이트 나이는 십육
바이슨 아니든 아님 앵카 피란을 그
둘 중에 하난데 특정 바이트 크기
까지는 요즘 컴퓨터를 대속 다
컴퓨터들 컴퓨터들이 나 코스 같은
경우는 직접 바이 8 차이가 줘 어떤
워드 다니라고 할게요 워드 단위로
데이브 해주는 게 훨씬 빠릅니다 근데
이런거 는 게 벡터 라이즈의 순이라고
보통 해요 왜냐하면 cpu 에 요즘은
벡터 프로세서가 들어가 있고 그래서
한번에 4byte 가 아니라 한 번
m56 파이트 정도로 그냥 데이브 할
수 있는 방법이 있어요 cpu
레지스터 에서 곧바로 써 그런식으로
하면 메인 카피 보다 빠릅니다 왜
메인 카피는 결과적으로는 어떤 함수
호출 하는 거기 때문에 함수 호주의
따라 느린게 있고 그리고 측정 조건
에만 최적화가 안들어 갈 수 밖에
없으니까
그거를 한 손 안에서 코드로 하시는
분들도 있었는데 안동 않은 요즘
왠만한 컴파일러에서 는 그가 적당히
봐서 5 애가 1 64 빛 4바이트
정도 맹 카필 안 의 그럼 알아서
대인 문으로 바꿔줘요 그것도 아까
말했던 벡터 포스 써 사용해서 그거
대입해 주는 걸 바꿔 줍니다 하지만
여기서 문제가 되는거 제가 요번에
봤던 건 뭐냐면 그거를 프로그래머 감
엄청나게 꺼버릴 수도 있어요 그게
문제였어요 어떤 부분의 문제 왜냐면
요게 크로스 플랫폼 게임 엔진
이었어요 그 게임 엔진에서 gpu 에
대입해 야 되는 그런 변수들 쉐이더
변수로 과 좀 쉐이더 매개 변수들 그
매개 변수를 할당을 해줄 때 못 4
바이트 짜리 벡터 아 사각형 입니다
16가지 짜리도 있고 벡터 골을
집어넣으면 16 바이트 니까 아니면
64 바이트 짜리 있어요 어 건
매트릭스 같은 경우 행렬 같은 경우
그리고 당연히 4 곱하기 생일 아니고
4 곱하기 4 맹렬 뭐 벡터 2 3
벡터 도모 게 뭐 배열 4개 짜릿한
따지면 은 대충 정해진 크기 들의
변수 매개 변수를 대입해 주는 인자를
대입해 주는걸 함수들이 있었고 극
mm 카피를 내부적으로 이용했어요
어떤 개념이 냐 면 함수가 여러개
있는 거예요 야 벡터 꼬 매개변수
설정 해 주기 매트릭스 4 곱하기 4
그거 설정해 주기 이런 함수가 따로
있었고 그 함수는 내부적으로 멤
카피로 호출해서 4byte 를 복사
16 바이트 를 복사 육사 라이트를
복사된 하고 있었죠 그런데 요거를
포팅 해주겠다고 들어온 어떤 따른
회사가 아 요 위의 함수들은 그냥 다
그냥 뭐 유틸리티 함수 일 뿐이고
내부적으로는 결과적으로 이 메모리
주소 가져다가 몇 바이트를 복사해
라고 하나의 공통된 함수를 만들 수
있겠구나 약어 공포의 함수를 만들어
버린 거야
그런데 컴파일을 하다보니까 결과 주로
게임 쪽에서는 야 벡터
16 바이트 복사의 매트릭스 64
바이트 복사의 라고 해 알려주는데
그 함수에서 곧바로 맨 카피로 호출
했으면 16 바이트 64 바이트 딱
상수로 들어가 있잖아요 그런
컴파일러가 않아서 그거를 아까 말했던
레지스터 에서 그렇게 벡터 라이즈 해
갖고 곧바로 대입해 주는 방식 매카
표출 안하고 그 방식을 최적화
해줬는데 거기서 함수를 한번 노출해
주는 순간 공통된 함수를 호출해 주는
순간 그 함수에서는 그냥 변수로 들어
오잖아요 그 파이트 사이즈가 그래서
아예 는 아 그렇게 대체 회를 못 해
주었구나 낳으시고 생각을 해서 그냥
맨 카피로 모든 순간에 고추를 거리
되요 그래서 cpu 가 알아서 최적화
해 줄 수 있었던 그 부분을 다 함수
호출로 바뀌면서 그게
워낙 많이 호출 했어요 그래픽 쪽
관련 내용 함수로 처럼 청주 되니까
실제 cpu 속도 까요 한 프레임에서
도는 밀리 세컨드 이런게 있잖아요
게임 1 프레임 그릴 때 거기서
10% 넘게 차지하는 결과 나서
게임이 엄청 조였던 이유가 그 거
였어요 그래서 그거를 다시 그냥 그
함수 들어올 때 곧바로 16 바이트
라고 상순 와서 복사하기 육사 바이트
서서 복사기로 바꾸는 것만으로 한 모
7 8 프로 다시 향상이 되버렸죠
10% 에서 그런걸 보면서 요게 그
단순하게 컴파일러가 다 최적화 해
주겠지 라고 믿어서 그런걸 수도
있어요 왜 그걸 몰랐던 회사는 아닌것
같아요 보면은 최적화에 대한 감은
있는데 제 생각에는 본인들이 주로
사용했던 컴파일러 그게 비주얼스튜디오
쪽 컴파일러 거에요 그쪽으로 최적화
굉장히 잘 되기 때문에 그게 그런
일을 했었는데 지금 이 콘솔은
사용하는 클랜 컴파일러가 그 일을 안
해줬던 것 같아요 그래서 거기서
문제가 생겼던 거에요 그런 식으로 좀
느려지는 것들을 제가 봤죠 그래서
이런거를 생각하며 는 4쪽 음
안타까운 부분도 있어요 그런거 아무
생각없이 그냥 원래부터 있던 코드를
왜 굳이 그렇게 바꾸면 검증도 안
했는지 라는 그런 안타까움 드릴 수도
있더라구요 돈으로 그렇게 mm 카피가
최적화가 될 수 있는 경우와 3가지
정도를 제외한 말씀을 드린 거예요
하는 멤 카피할 때 크게 내부적으로
훨씬 더 유리한 함수로 바꿔 수출할
수도 있다 주거는 프로그래머가 왠만
해서 할 일은 없다 컴파일러가 알아서
해주는거 고 제품마다 플랫은 마다
알아서 될 거다 두번째는 메모리
파이터 온라인 크게 어떻게 되냐 따라
정말 빨라지는 부분들이 있다 그래서
고거 는 잘 생각해서 cpu 에
적당한 메모리 얼라이먼트를 충분히
넣어 주는게 좋다 왜냐하면 그것
때문에 낭비하는 메모리가 큰 문제가
아닌 경우 드리고 지금 많으니까
메모리는 보통 충분히 달려 나오는
경우들이 많아 니까 세번째가 지금
말했던 특정한 바이트 사이즈 몇
바이트 까지 요런거 를 맨 카피할 때
는 내부적으로 컴파일러가 추적할 했
가능성이 굉장히 높다 그래서 그런
경우에 굳이 하나의 함수로 합쳐서 뭐
호출 하려고 하지 말아라 그런 순간이
컴파일러가 깨질 수도 있다 정도를
말씀 드린 거예요 뭐 이정도면 그래도
모르셨던 분도 있을것 같고 아시는
분들은 그랬지 하고 넘어갈 수도 있는
것 같아요 그래서 혹시 뭐 제가 잘못
말한 것도 있다거나 그러면 추가로
알려주시면 고맙구요 용도로 그냥
오늘도 멤 카피 얘기는 마치겠습니다
포프 였습니다
