안녕하세요, 포프입니다.

오늘도 AI 관련 비디오를 좀 만들어 볼게요. ChatGPT, 한동안 핫했죠? 지금도 핫해요. 사실은 개발자들이 'ChatGPT를 쓰니까 너무 개발에 도움이 되더라' 이렇게 말씀하시는 분들이 많아요. 이런 얘기를 들을 때마다 제 머릿속에서 드는 생각은 '이 개발자는 채용하면 안 되겠구나'라는 생각이 솔직히 많이 듭니다. 그리고 업계에 있는 시니어나 아키텍트급 개발자들하고 제가 얘기해 봐도 그분들도 그렇게 말하는 사람을 두려워하더라고요. '저 사람을 좀 조심해서 봐야겠다.' 경력자일 경우에.

제가 얘기하는 거는 공부하는 분들 얘기가 아니에요. 그 이유가 뭐냐면 이게 약간 옛날에 어떤 무언가 오버래핑이 많이 됩니다. 뭐냐면 '스택 오버플로가 없으면 개발을 못 한다'고 말하시는 분들과 그래서 예전에 회사에서 일하면 갑자기 인터넷이 다운되면 '스택 오버플로를 못 봐서 개발이 안 돼요.' 이런 사람들이 있었거든요? 그런 사람들은 일반적으로 스택 오버플로에 있는 것들을 복붙 해놓고 문제를 만들고 자기는 이해 못 하고 이런 경우들이 꽤 있었기 때문에 그래요. 그거랑 비슷한 느낌이 드는 이유는 뭐냐면 스택 오버플로 굉장히 좋은 플랫폼이고 솔직히 ChatGPT 보다 정보의 정확성은 훨씬 뛰어나요. 그리고 거기서 나오는 정보들을 굉장히 중요하게 여기고 써야 하는 경우들이 충분히 많습니다. 이걸 잘못 이해하시면 안 돼요. 하지만 인터넷이 다운해서 스택오버플로를 볼 수 없어 개발이 안 될 정도 까지라면 내가 개발을 하는 동안 코딩을 작성할 때 작성하는 거의 80% 이상은 순수하게 머릿속에서 나와야 하는 게 정상이에요. 내가 코드를 작성하기 전, 아니면 어떤 얘기를 듣는 순간 '어떻게 구현해야겠다' 해서 막 작성하다가 막히는 건 20% 정도를 열심히 구글에서 찾던 스택 오버플로에서 찾는 게 정상이에요. 인터미디엇 정도 되면 그래야 해요. 주니어는 다른 얘기고. 그리고 시니어가 되면 점점 볼 일도 없어져요. 아니면 보더라도 '이거 틀린데?'라고 안 받아들이는 경우들이 또 많아지기도 시작해요. 반드시 모든 것들이 그 분야의 전문가가 답을 다는 건 아니기 때문에. 그리고 사람마다 약간의 성향도 있고 당연히.

그래서 이런 게 불안한 건데 스택 오버플로보다 ChatGPT는 문제가 더 심해요. 어떤 문제가 심하냐? 첫째, 느려요. 스택 오버플로 같은 경우는 구글 검색하면 웬만해서 스택 오버플로 결과가 제일 위에 나와요. 보고 문장 두세 개 정도 읽는 순간에 이미 답이 나오거나 안 되거나 그런 경우 굉장히 많아요. 그럼 다음 거 보고, 다음 거 보고, 다음 거 보고, 만약에 한 1분의 시간이 있다면 스택 오버플로에 있는 그런 질문 답변을 한 두세 개는 봐야 해요. ChatGPT로 가면 1분의 시간이 있다면 질문 한 절반 정도의 답변을 보고 있어요. 그리고 그 답변도 굉장히 그럴듯하거든요? 근데 그게 사실인지도 모르겠고 어디 출처가 제대로 나오지도 않고 그거 파악하고 뭐하고 이러면 잘못된 게 너무 많아요. 스택 오버플로보다 퀄리티가 구려요. 그리고 그 찾은 거에 대해서 검증이 너무 어려워요.

제가 최근에 그런 일이 실제 있었어요. 이거 예까지 들면 너무 복잡해지는데 어떤 어셈블리 언어 환경에서 함수 점프를 하기 전에 세그먼트 주소와 오프셋 주소를 스택에 푸시를 하거든요? 어떤 게 먼저 들어가냐? 세그먼트가 먼저냐? 오프셋이 먼저냐? 그게 궁금해서 구글 검색을 해봤어요. 구글 검색에서 위키페이지가 나왔는데 써 있는 순서는 정확히 지금 기억 안 나고 모순이 되게 써 있는 것만 기억나요. 푸시 할 때는 AB 순서로 푸시를 한다 그리고 팝 할 때는 AB 순서로 팝 한다고 써 있어요. 아니, AB 순서로 푸시했으면 BA 순서로 팝 해야 하는 게 맞는 거거든요? 그게 말이 안 되는 거예요. 그래서 하도 말이 안 되고 이게 좀 오래된 어셈블리 언어여서 제가 PDF가 어딘가 있기는 있어요. 그걸 보는 대신 웹에서 찾아보려고 웹 검색을 했는데 잘 안 나와요. 그래서 ChatGPT한테 물어봤어요. '야 어떻게 되는 거냐?' 그랬더니 얘가 말하기는 'AB로 푸시가 되고 BA로 팝이 된다'라고 말을 해줬어요. 아니 그 반대로 얘기했나? 어쨌든 말을 해줬어요. 그러면서 출처를 알려줬어요. 출처를 딱 봤는데 내가 아까 봤던 잘못 써 있던 위키페이지 원본을 준 거예요. 내가 물어봤어요. '야, 네가 지금 준 이 원본에 의하면 위키페이지에서 AB 푸쉬하고 그다음에 팝도 AB 순으로 한다는데 이거 모순 아니냐?' 아니래요. '니가 잘못 이해했나 본데 그런 거 같아' 이러는 거에요. '아니지. 스택인데?', '아 맞아 ABBA를 해서 약간 헷갈리게 쓰여 있어.' '그래서 뭐가 맞아? ABBA야? ABAB야?' 또 ABAB래요. '그럼 소스를 딴 걸 줘봐' 소스를 못 줘요. 그래서 제가 옛날 플랫폼이니까 그냥 디버거 꽂고 가상 머신 같은 거 돌려야 했어요. 그러고 확인하고 넘어왔어요.

근데 이게 만약에 ChatGPT가 준 것만 믿거나 이런 사람들은 그냥 그게 맞는 건 줄 알고 쓸 거라는 문제가 있는 거예요. 그 답을 주는 것도 너무 느리다는 게 일단 문제예요. 그래서 ChatGPT로 만약에 실제 내가 개발을 한다면, 뭐를 작성해야 해요. 그러면 가서 질문을 ChatGPT에 쓰고 답 나오는 것도 더럽게 느려요. 답 나오는 거 보고 이걸 복사해서 쓸 수도 있을 거고 아닐 수도 있을 텐데 복사가 되는 경우가 생각보다 별로 많지 않아요. 그럼 하고 또 틀리면 또 고치고 뭐하고 또 찾아보고 이 과정들, 이게 오히려 옆에 있는 답변 잘 못 해주는 동료 있잖아요? 걔 때문에 헷갈리는 거랑 거의 똑같은 분위기예요. 실제 제가 프로그래밍 관련한 것들 구글 검색으로 쉽게 내가 못 찾아서 물어보는 것 중에 ChatGPT가 제대로 답변해 주는 확률이 20% 미만이에요. 워낙 당연한 것들, 누구나 알고 있는 것들 구글 검색하면 쉽게 나오는 것들은 50% 이상은 좀 되는 것 같아요. 그런데 이 왔다 갔다 하는 시간이 너무 느려요. ChatGPT가 말하는 거에 10배 빠르면 난 딱 좋을 것 같아요. 그것보다 더 빨라야 할 수도 있어요. 너무 느려요. 이런 문제 때문에 내가 동일한 일을 하는데 ChatGPT를 썼으면 속도가 느려지는 거예요. 그러면 생산성이 느려지는 일을 ChatGPT를 쓸 수 있나? '아니, 저는 그걸 할 때 오히려 빨라지더라고요.' 이렇게 말하시는 분들이 제가 말했던 시니어들이 걱정한다는 것이에요. '아, 그 속도보다 네가 느리구나? 그러면 ChatGPT 때문에 빨라질 수는 있겠지? 그럼 너는 빨라지겠지? 근데 문제는 ChatGPT보다 느릴 정도면 웬만한 인터미디엇의 실력이 아니거든요? 경력이 쌓였는데 인터미디엇 실력이 안 돼요. 그럼 불안한 거죠. '이 사람은 발전이 진짜 느리겠구나. 그럼 이 사람이 만약 우리 회사 사람이라면 남들보다 정보 습득력이 느리기 때문에 실제 남들보다 대충 일을 하고 끝낼 수도 있겠구나'라는 결론까지도 가요. 옛날에 스택 오버플로 관련해서도 그런 비슷한 일들이 솔직히 회사에서 많았고, 그래서 그런 문제가 일단은 걱정하는 게 그런 거예요. '아, ChatGPT라는 게 굉장히 훌륭하고 대화하기도 좋아. 근데 이게 프로그래밍에 큰 도움이 된다'라고 말하는 분들이 나오면 이제 '도대체 그전까지는 뭘 한 거지?'라는 의심을 사람들이 한다는 거죠.

하지만 ChatGPT가 정말 프로그램한테 도움이 되는 것들이 몇 가지가 있어요. 뭐냐면 ChatGPT는 제일 잘하는 게 하나예요. 언어, 특히 영어. 뭐 한국어도 나쁘지 않게 하지만 그렇기 때문에 한국에 있는 개발자 중에는 영어가 어려우신 분들이 있어요. 특히 영어가 어려운 것들이 변수명 짓기, 함수명 짓기 기타 등등 그렇죠? 그럼 그럴 경우에 '내가 이런이런이런 걸 해야 하는데 내가 변수명 이렇게 지었어. 좀 더 좋은 변수명 있어?' 그러면 잘 지어줘요. 그 확률은 굉장히 좋아요. 그래도 한 80~90% 되는데 당연히 내가 알고 있는 모든 지식이 없으니까 그 지식을 계속 알려줘야지만 좀 더 좋은 거를 주죠. 내가 '사실은 그게 아니라 여기서 쓴 거고 이미 이런 변수가 있어. 그럼 이렇게 해줘.' 그럼 뭐 이렇게 해주고 이런 것들이 있어요. 그런 것들은 도움이 돼요. 영어를 잘하시는 분들은 도움이 안 돼요. 이미 열심히 머릿속에서 고민해 보고 이런 단어를 했는데 이 단어가 뭔가 깔끔하지 못해요. 그러면 ChatGPT인데 물어봐 '야 이거 어떻게 생각해?' 무조건 좋대요. '더 나은 거 없어?' '아니 그게 좋아.' '더 나은 거 한 번쯤 5개 줘봐.' 줘요. 근데 별로 안 좋아요. 그러면 이거는 뭐냐면 그런 경우 있어요. 나는 개발자로서 최선을 다해서 이름을 지었어요. 근데 약간 애매해요. 그래서 어쨌든 그 이름을 쓸 건데, 그럼 위에 주석을 달겠죠? 뭐 이런이런 일 때문에 이렇게 달았다고 좀 달겠죠? 약간 깔끔하지 못한 이름이니까. 그래도 누군가한테 확인받고 싶어요. 보통 때 같으면 옆 동료한테 물어보든가 아니면 앞에 있는 노란색 고무 오리한테 물어보죠 '이거 맞아?' 그럼 '꽥꽥! 맞는 거야.' 이런 거를 ChatGPT한테 물어보는 거예요. 요 정도의 확인 정도는 낮지 않아요. 그리고 이거는 어쨌든 간에 불안함을 해소하는 마지막 단계이기 때문에 나쁘지는 않죠. 불안함을 안고 계속 가는 것보다는 한번 확인받고 가는 게 나은 거니까. 그래서 이런 식은 확실히 도움이 돼요. 그래서 ChatGPT가 솔직히 개발자한테 도움이 되는 거는 이런 거였다.

그러면 '아니 ChatGPT를 왜 그렇게 까세요? 충분히 좋아요. 공부하기도 좋아요.' 아니 공부하긴 좋아요. 내가 전혀 모르는 분야에 대해서 '요약해 줘.' 그럼 요약을 해줘요. 문제는 그게 일반적인 컴공 지식이면 한 70% 맞고 30% 틀리는 게 문제일 뿐인데, 뭐 그런 것도 쉽게 쉽게 찾는 거는 나쁘지 않아요. 그러니까 공부용으로 써요. 근데 회사는 기본적으로 내가 할 줄 아는 거가 80%고 모르는 게 20%라는 가정에서 도는 게 회사거든요? 주니어는 예외. 주니어는 어차피 배우는 과정이니까. 경력 채우고 인터미디엇 대우를 받을 때는 그때부터는 ChatGPT의 효용이 굉장히 많이 떨어져요. 그냥 뭐 대화하기 좋은 친구 정도는 오케이, 그 이상은 아닌 거예요.

'아니, 그러면 뭐 예전 비디오에서 AI가 개발자를 좋게 만들고 뭐하고 이런 얘기했잖아요?' 네. 실제 개발자의 효율, 특히 잘하는 개발자일수록 그 사람의 효율을 거의 10배 이상 올리는 툴이 있어요. 그리고 이거는 '개발자가 잘한다'는 가정을 하는 이유는 실제 AI가 도와야 하는 게 그런 개발자이기 때문이기도 해요. 그게 뭐냐면, GitHub Copilot. 실제 코딩 전용으로 나온 거기도 하고 근데 문서 쓰는 데도 굉장히 훌륭하긴 해요. 심지어 번역에도 굉장히 큰 도움이 돼요. 근데 제일 중요한 건 Copilot은 지금 말했던 ChatGPT같이 왔다 갔다 하면서 쓰는 시간 낭비가 굉장히 적다, 오히려 이거를 내 손가락으로 치는 것보다 더 빠르게 하는 경우들이 있어요

그렇게 되면 시간 절약이 굉장히 큰 도움이 되고 이거는 잘하는 프로그래머가 쓸데없는 거에 시간 낭비하는 거, 특히 사람과 관련해서 굉장히 크게 막아줘요. 그래서 '개발자들이 정말 AI가 도움이 된다'라고 하면서 Copilot 얘기를 안 하고 ChatGPT 얘기만 하면 제 시니어나 아키텍트 친구들은 의문점을 가지기 시작을 하고 실제 어떤 분이 와서 ChatGPT는 쓰나 마나 얘기는 안 하지만 'Copilot 잘 쓰고 있습니다.'라고 말하면 일단은 '괜찮겠구나' 하지만 이게 주니어라면 또 약간의 걱정을 하는 부분들이 있죠. 그 이유는 오늘 비디오가 길어졌으니까 다음 편에서 왜 Github Copilot이 잘하는 개발자한테 훨씬 좋은 툴인지를 말하고 그거로 인한 단점 같은 경우도 같이 말할게요. 이거는 오히려 개발자가 AI를 섣불리 사용하면 큰 일이 생기는 수 있는 경우를 얘기하는 건데, 이미 물 오르신 분들은 상관없고, 물이 아직 덜 오르신 분들에게 독이 될 만한 요소는 있어요. 이게 좀 더 자기 주관을 확실히 잡아야만 하는 그런 단점들이 있죠.

포프였습니다.