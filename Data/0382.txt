예언 6 뽑습니다 아시는 분들은 아시겠지만 제가 c 풀 강의를 하고
있어요
물론 캐나다에서 하고 있기 때문에 와서 들으실 수 없겠지만
4강 일하는 동안
그
가끔 도가 나라로 오신 분들이 있어요 뭐 bcit 를 졸업하신 분들이니까
이제 어디로 와야 될 지라도 방 오시는 것 같은데 뭐 그러면서 이제 와서
인자 하신 분들도 있고
뭐 카페테리아 이따가 운좋게
제가 운 좋은 거죠 그분이 저를 알아 보셨고
갑자기 통짜로 차를 사 준다거나 이래서 또 얻어 먹기도 하고
이런 경우도 있었어요 근데 하려고 얘긴 그건 아니었고
최근에 이제 시프 을 하다가 다뤘던 주제가 알고리즘 이에요 알고리즘 그
제가 알고리즘을 찼다는 게 아니라
스텔라 드라이버의 보면은 이제 알고리즘 들이 있잖아요
쫄티 라던가 가피 라던가 이런 것들 많이 있잖아요 그래서 그거를 보다가
이제 드라이 가리키면서 뭐 이런게 굳이 왜 있는지 모르겠지만 다 d 내가
손으로 짤 수 있는건데
그래도 이런게 있어 라고 목록을 쭉 보여줬어요 되게 많죠
10불 집이라고 17 막 이런데 추가되면 더 많아졌고
그러다가 이제 쏠트 라는 것은 다시 고고 정렬 하는거 거기에 스텝을 솔트
라는 걸 또 봤어요
그래서
본 김에 아예 전에
예
몇 년 전인지 모르는데 꽤 오래 전인데 제가 그 스 테 이 블 소 틀을
짤 2대 있었거든요 그래서
그냥 그 생각이 나서 아 이걸 언젠가는 비디오를 만들어야지 라고 생각을
하다가 까먹고 안 만들어 썼기 때문에 그래서 만드는 거예요
정렬이 라고 하는건데 간단 하잖아요
뭐 정렬이 종료가 되게 많죠 뭐 뭐 그 거야 이제 속도가 어느 정도 빠른
야 이런 개념인데
가장 간단한 버블 정렬 부터 뭐
흔히들 많이 쓰는 퀵 정렬 도 있고
뭐 뭐지 소프트 것도 있지만 언제나 볼 때마다 헷갈려 주는 것이 소스를
보고 아 그렇구나 이해하고 3d 별로 없으니까 나중에 보면 또 새로 와
뭐지 소프트가 있고 특히 제가 많이 썼던 레 딕스 속도 있고 뭐
여러가지가 있어요
그런데 결과적으로 개념은 거잖아요 어떤 같이 두개가 있어요 이렇게 점수가
릴 수도 있고 뭐 스팅 일수도 있고 어떤 물체 일수도 있어요
그러면 이 주물 죄를 정렬을 할 때 애가 예보다 배워야 되냐
얘가 해보다 배워야 되냐 그 그 때 전 보거든요
그럼 그거를 이제 판단하려면 보통 이게 앞에 온다 라는 게 크다 작다 는
개념이 잖아요 그럼 크다 작다는 계산을 하기 위해서
보통 여기 쏠 특히 라는 게 있어요 그거를 해쉬 키 로 도 만들기도 하고
결과적으로는
뭐 숫자를 예를 들면 숫자 이라고 이가 있으면 아 그 정렬할 때 기술이
되는 값을 읽어와 이루 그냥 쓰자 똑같이 그럼 일이 이보다 배워야 되니까
그게 정도에요
뭐 리버스 정렬을 하면 2가 1보다 앞에 오지 마 어쨌든 간에 거고 뭐
물체 a 와 무츠 삐 가 있어
그러면 물체 이는 어떤 그냥 계산을 했을 때 이게 뭐 뭐 3이라는 값이
나오고 물질 p 는 어떤 계산해도 타라는 값이 나와 그러면은 아 무 채
이가 빼고 다 앞에 와야 되겠구나 이런 개념이 에요
와 님을 db 를 많이 하셨던 분들은 오더 바이 이런거 있잖아요
아 일단 뭐 이름 순으로 5 더하고 날짜순 옷 한다 그것도 똑같은
개념이죠
그래서 그런 개념인데
재밌는거 는 일반적인 소스를 썼을 때 이 쏠트 값이 쏠 특히 값이 동일한
경우 있잖아요
예를 들어서
숫자가 5개가 있어 숫자 보다는 물체라고 하죠 물체가 5개가 있어요
1부터 5까지
근데 그 물체가 클래스 니까 오브젝트 줘 그 오브젝트에 있는 모든 값이
똑같아요
아니면 이렇게 여자 오브젝트에 있는 필드가 3개가 있어요
3개중에 2개만 솔티 에 쓰고 하면 안 써요
근데 이 두개가 똑같아요 근데 이 세 번째 값은 다른 거야 근데 일반적인
쏠트 알고리즘 돌리면
이미 물체가 두 개가 이렇게 있어요 아까 말했던 것처럼 2개 뜻 값이
똑같고 세번째 거가 다른데 이 쏠트 키가 같다는 이유만으로
이게 뒤바뀌는 경우가 있어 왜냐하면 어차피 에는 정리 어떻게 상관이
없으니까 이렇게 되든 이렇게 되는 상관이 없잖아 라고 할 수 있잖아요
그래서 일반적인 쏠트 알고리즘은 솔드 키가 동일할 때
술수를 보장하지 원래 있던 수정을 흐트러질 수도 있어요
그래서
예전에 당연히 저도 이제
일반적으로 그래도 문제가 없는 게 일반적 이었고 사실은 대부분의
알고리즘인 이나 데이터 구조 해서 저도 한참 쓰다가 나중에 무슨 이유인지
모르겠지만 그 게 그 오더를
유지 해야 될 경우가 한 번 있었어요
제 경우에 딱 한번 있었던 거니까 굉장히 없었던 법이에요
그래서 그때 이제 열심히 스텍 5+ 자보고
그러다가 봤던게 이제 스티브 쫄티 였어요
스티브 솔트 라고 하면은 안정적인 쏠트 란 얘기잖아요 그럼 그냥 이
문제를 해결하는 거에요
앞에 소프트키 가 똑같은 애들이 있을 때 쏠트 키가
그럼 나머지 애들 그 이 세 번째 갑시다 달라 지더라도
이 쏠트 알고리즘을 돌려도 이 순서가 바뀌지 않는다
이런 거죠 그래서 그게 스티브 솔트 의 개념이고
혹시 그런 게 필요하셨던 분들이 있었다면 요즘 알고리즘 다 있어요
지프 뿌리로 들어가 있는데 그냐 sd 알고리즘에서 배 쓰는데요
그래서 그 땐 저는 왜 만들어지 기억이 안나지만 만들어야만 했었고
지금 생각하면 은 지금 다시 만들라고 해도 못 만날 것 같아요
그런 것들이 되게 많지 알고리즘 이라는게
그 순간에 닥치면 뭐 차서 가 만들어 그 다음에 또 만들면 가 먹죠
그러나 기본적인 알고리즘은 까먹지 않게 되죠
학교에서 배우는 것들 이래서 법을 소프트 같은거
퀵 솔트 처음부터 만들라 그러고 다시 또 해내서 하지만 약간은 개념을
알고 있죠
dvd 에 컨커 대충 개념 보고 피복 값을 어떻게 뽑고 이런건 헷갈릴
수도 있는데 그런 정도의 기본적인 개념은 평생 머리에 남는 것 같아요
근데 그 외에 것들 아주 각각 1 2 벗을 들 법한 것들
이런 것들은
짜고 나도 나중에 까먹고 그때 그게 구들 다시 봐야 돼 아이 되었습니다
그런게 알고리즘이 아닌가 생각을 해요 얘길 왜 하냐면 은
얼마전에 폭 티비 비디오에서 뭐 알고 라야 슬랩 빵 이었던것 같다
알고리즘 책이 모이게 줍니다 저 중에 물어보시는 분들이 있었어요 이걸
공부해 되냐 말아야 되냐
제가 질 수 있는 말은 뭐냐면은
학교수 전에서 가르키는 알고리즘 정도는 한번쯤 보는 걸 좋다고 생각해요
이런게 있어야 된다고 알고 4 있어야 되니까
아니면은 쪽 기초가 되는 것들 있잖아요 예를 들어서 그 bfs vs 폴
설치 라는 것
먼저 넓게 설치하고 하나씩 내려 가는거 특이하고 노드 구조 있을 때
아니면 텝스 벌수 설치 같은 경우 깊이를 다 데려가고 하나씩 올라가는
경우 그런 정도의 기본 개념에 알고리즘 되게 중요하다고 생각해요 왜냐면
거기서 시작을 해서 굉장히 많은 알고리즘을 더 생각할 수 있으니까
어찌보면 구구단을 외우는 것은 마찬가지라고 생각을 하는데
근데 이제 전에도 제가 이 했듯이 그래서 여기서 좀 더 나아가 같고 이제
뭐
트리 알고리즘 같은 경우 있잖아요 트리가 아니라 그래프 알고리즘 같은
경우
책보고 공부하고 다시 한번 문제다 풀어요 사실은 이제
실무에서 쓸 일이 예전에도 말했지만 그렇게 생각보다 많지가 않아요
당연히 특정 직종에서 많이 들 수 밖에 없죠 뭐
네트워크 이제 분산하는 거라던가 뭐 그런 것들은 당연히 지겠지만
일반적으로 저희가 생각하는
이제
애플리케이션 웹 서비스 게임 쪽으로 보면 생각보다 많지가 않거든요
그런 부분을 가면 이제 과연 이 알고리즘을
이제 그 몸속에 바 퀴 즈 정도를 알아야 되냐 라는 생각이 드는 거죠
뭐 그래서 프로그래밍한 사람들 보면 은 저도 당연히 그 과정을 겪었지만
굉장히 많은 이제 배울 것들이 많아요
그 수는 점점 늘어나고 있는 것 같지만 제가 이것저것 다 배워보고 이렇게
오래 개 발생했을때
생각보다
아예 언제 물어봐 다 알수 있을 정도로 기억해야 하는 것들을
그렇게 많진 않았어요 그냥 아 이런게 있구나 정도로 알고 나중에 돌아가서
제도 볼 수 있는 것들은 되게 좋은거고
그런 같이 해서 굉장히 많은 것을 배웠다는 게 좋지만 학교에서도 그렇고
책으로도 그렇고
그 배우는 내용 대체 중요한 게 있고 덜 중요한 게 있는 것 같아요
확실히 지금 제가 말 때 알고리즘 부분은
기초적인 거 정도만 이해하면 상관이 없다고 생각을 하고 나머지는 그런게
있었구나
그렇게 되면 되는거고 그리고 그렇게 많이 배운 알고리즘을 다 쓸 일도
별로 없고
디자인 패턴을 되게 마찬가지고
그래서 계속 쑤는 것들 아니면 계속 생각해야 되는 것들을 확실히 아는게
더 중요한 생각을 해요
그게
뭐 이렇게 말 마이 구닥다리 얘기 듣겠지만 하드웨어를 하는 것들 카디오
에 가까운 것 컴퓨터가 어떻게 되는지 이해할 수 있는 것
이런 기능들은 쓰면 쓸수록 컴퓨터가 도는 방식을 좀 잘 이해하게 되고
나중에 가면 그야 당연한 것처럼 느껴지는 컴퓨터가 어떻게 돈을 뭔지에
대한 게 어찌 보면은
저희가 처음 언어를 배울 때 저희 모국어
그게 뭐 구조가 어떻게 탐 이렇다 모르잖아요 사실 오래 쓰다보면 은 멋도
틀리긴 하지만 결과적으로는 언어 자체가 의사소통이 충분히 되잖아요
그런 정도의 통해 자연스럽게 느껴지는 단계까지 가면 은
거기서 부터 시작할 수 있게 되 게 많다고 보거든요
컴퓨터가 도는게 이질적 이지 않고 알고 큰 콤 토토로 이렇게 도는거 자고
그냥 뭐 제품만 봐도 대충 속으로 샘플 1 어떻게 둘째 감이 오는 그런
경우가 되면 은 그의 다른 걸리는 거 되게 쉬운 것 같아요
그 위에 다른 걸리는 것은 말 그대로
그밖에 리서치 같은 느낌 남들이 이런걸 하고 있구나 아 이런거 를
앗 앗 이거 하면 되겠구나 이런 느낌이거든요 그러니까
자기를 배워서 있을 수 있는 그런 느낌들
그러나 이런 기본이 되는 것들은 몸에 익지 않으면 그게 잡기로 올리고
되게 힘들어 지는 것 같아요
그래서
제가 이제 학교에서 또 가리키다 보니까 그런 생각이 드는 거에요 근데
요즘 학교 등 너무 잡기를 가릴 필요 가지 않아 너무 잡게 눈 을 팔고
있지 않나
그거에 대해 이제 업체들이 우려를 표출하며 서야 학교는 좀더 기초를
튼실히 가르쳐야 된다고 얘기를 함에도 불구하고 지금 학교에서 가르치는
사람들이 그거에 대한 중요성을 알 정도로 이제 뭐 그 정도 위치에 못 간
사람도 꽤 있으니까
결국에는 그냥 뭐 마케팅 인 올린 지 아니면 그냥 뭐 새로운 기술을
만들어야 더 열심히 더 자기는 광고와 력 마케팅을 하니까 거기에 그
홀려서 그런건지 모르겠지만 꼭 기초를 이렇게 좀 등한시 하는 것들이
보이는게 좀 안타까운 거에요 그래서
그러면서 이제 또 학교 들의 이제 등급이 나뉘기 시작하더라구요
특히 이쪽에서도
꽤 좋다고 하는 학교들 그리고 실제 뭐 박스에 가리키는 없게도 있겠지만
그런 학교들 보면은
순수 이룬 또 이제 가르치기도 하고
하드웨어 쪽도 굉장히 많이 가르치지만
그에 비해 이제
음용하는 보고 있잖아요 그냥 갖다 엉겨 마쳤고 조립하는 이런 부분이 조금
비율적으로 적 쪽 그의 배에
좀 이렇게
스타 굿닥 그 취업률 올리기에 급급한 학교도 있어요
그
그것도 딱 싸구려 임금 프로그래머 취업률 높이기에 급급한 학교들
그런 학교들을 보는 그런걸 하루정도 빼 더라고요
근데 제 기억에는 이 똑같은 일이
닷컴 버블 때 있었다고 선 알고 있거든요
닷컴 버블 때 워낙 직장을 잡기 쉬워지면서
학교에서 기본기를 빼고 자 방한 열심히 가르쳤다 가
닷컴 버블 붕괴 된 이후에
그
취업자 리가 없어 지면서 졸업생들도
이제 그런디 반기 확실한 기 반기 가 없이는
취업을 못하고 왜냐하면 은 회사에서 업그레 프로그램 해 그냥 와 이런
분위기가 아니었다 고 알고 있어요 그대로
그래서 그 뒤에 다시 학교들이 열심히
그 로 랩의 하드웨어 라던가 그런 약간 중요한 이론적인 것들 추가 다시
를 추가하기 시작했다 고 전 얘길 들었어요 그래서 재미있는 것은 어찌
보면 그때 이후에
뭐 훌륭한 상을 가진 학교들은
계속 좀더 발전 시크 나왔던것 같아요
그렇지 못하다 그들은 옛날 방식으로 가리키는 거야 머물러 있는 걸 수도
있고
옛날 방식 이란 게 그게 아까 먹다 하드웨어가 아니라
옛날에는 컴퓨터가 내에 귀한 자원 이었어요 그래서 막 개인용 pc 가
있지도 않았고 실제 코딩 씨스 같은거 하려면 은 그 아이디에 메인프레임
같은 중앙의 서버 있고 단말기 달 부어서 시간 돌려가면서 지 본
그러니까 내내 시간이 할당 내 있는 그런 식으로 할 수 밖에 없었고 그
보다 더 옛날에는
직접 코딩 하면서 뭐 결과를 볼 수 있는 상황이 아니었기 때문에
펀치 카드 테너 끄집어 한다거나 이런 일도 있었어요 그래서 오히려
컴퓨터를 가르치는게 그래서
이론적인 거와 이런 적인걸 원래 시작을 했었고
그렇게 이론적인 것만 가리켜 한다는 식으로 머물렀던 과목들이 꽤 있었던거
같아요
제가 지금 있는 학교를 봐도 그 운영체제를 가리킬 때 그런 식으로 밖에
안 돼 있어요 사실은 그러면서 하는 얘기가 아 이거 너무 이론 종인 것만
있어서 학생들이 재미를 없어 한다
4 재밌었던 거 제가 조 제테크 에서 조 재테크 에서 최근에 이제 석사를
받았잖아요
뭘 os 과목은 되게 지루한 과목 인데 거기서 그래도 숙제 할까
종이 하는 숙제가 아니라 실제 씨로 해갖고 유닉스 시스템에서
os 에 있는 기능들을 하나씩 만들어 보는 것들이 있었어요
그 트레이딩 쪽을 하면서 이제 타임 쉐어링 쪽을 직접 코드로 만들어
봤었고
컨텍스트 캡쳐 스위치 않은 것까지 그리고 이제 os 를 보통 하다 그러는
아 그 절대 자료를 잃지 않는 이런 데이터 작성한 이런거 있잖아요
뭐 클래시 나도 데이터가 사라지지 않게 언제나 보존하는 이런 뜻
그런 것도 진짜 코딩을 했어요 그거 외에 네트워크 분산 이렇게 뭐
파일시스템 이런것도 코딩을 했었거든요
물론 이제 이 정도의 단계가 당연히 학사 급의 단계는 아니라고 생각을
하지만 충분히 os 에 개념들을 코딩 실습을 통해서 좀더 프 카라의
가르칠 수 있다고 생각을 해요
뭐 그와 비슷한 감옥으로 얼마전까지 뜬 뭐 디자인 패턴 oad 이런
과목도 있는데 뭐 이 두 감옥과 솔직한 얘기로
더 이상
구제 학교 과목으로 갖춰야 되나 생각이 들 정도의 과목들이 긴 한데
뭐 그런 것도 구제 하려면 실습으로 가르칠 수가 있죠
실제 그거를 적용해야 대한 문제를 주고 적용을 시켜라
그게 아니라 보통 이제
그런 과목들은 이론적으로만 가르킨 이까 또 재미를 잃게 되고
또 얘기가 그냥 많이 했는데
그러니까
이제
여러 학교를 제가 다녔고 그리고 어깨 경력이 많고
10 년 전에 다했던 학교에 다시 돌아와서 이제 가르치면서
발전하지 않은 모습을 되게 많이 받고 발전 을 한 부분도 받고
발전 하려고 했지만 오히려 삽질하고 있는 부분도 보고 네 그러니까 이제
아 뭔가 교육 제도가 좀 많이 이상해 지고 있구나
어느 나라 듯
정말 우리가 어깨에서 필요로 하는 애들을
생각보다 덜 만들어 주고 있구나 라는 생각이 점점 드는 거예요 그게 뭐
단지 학교에 문제일 수도 있고 아니면 은 프로그래밍 쪽이 인기가
높아지면서 학 생 수술이 그냥 많아지면서 평균적인 학생 퀄리티는 떨어지는
그런 이유 있기 때문 드 때문일 수도 있지만 어쨌든 그런 다양한 생각들이
섞이고 있는 거죠
그래도 어쨌든 오늘 하려고 했던 얘기는
굉장히 좀 떨어지지만 스티브 소프트 하는게 있어요
갑자기 이렇게 갈등 결론을 내려 되게 이상할 것 같은데 그냥 예전에 했던
쏠트 고와 그냥 이런게 있구나
그리고
뭐 요즘 다들 잘 하잖아요 거는 뭔가 하고 싶은게 있어서 태그 5%
살아가면서 이런게 있다고 쓰는 것들
예 그런 개념으로 만들었어요 이런 것도 있다
4 갑자기 교육에 대한 성찰이 되고 말해
끊어야 겟다 예 포 피었습니다
