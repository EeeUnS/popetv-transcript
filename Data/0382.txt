예 안녕하세요 포프 입니다 음 오늘 할 얘기는 개발 좀 얘기를 좀 하려고
그러는데
예전에 이제 제가 웹 쪽으로 옮기고 시스템을 막 리더 하면서 이제
퍼블릭 api 를 만들기 시작하면서 이제 과연 퍼블릭 api 를 만들
때는 어떤 url 규약을 따라야 할까
어디 to 그러니까 뭐 리퀘스트 발이나 기습 온수 바디에 전달해주는
그러고 오브젝트 보통 제이슨을 많이 쓰죠 이제는 그런 제이슨을 전달했을
때 과연 어떤 이렇게 귀하 글좀 따라야 이제 네 서비스를 쓰는 사람들이
좀 더 편할까 라는 고민을 한 적이 있어요
지금도 매일 매일 하는 고민이고 그래서 요즘은 트렌드가 이제
기본적으로 웨스트 같아요 rest 그 웨스트 불안 ura 라던가 이런걸
많이 만드는데
뭐
이거 가모 닭보다 좋다 라는 얘기는 굳이 하고 싶진 않고
제가 볼때는 원복 글에 귀 옆쪽에 괜찮아 보이는 규약 그리고 얘 내가
하려는 게 뭔지는 되게 뚜렷한 그런 방식 물러 이제 웨스트 라는게 어
단계가 있죠
모국을 드래프트에 2패 를 제공하고 뭐 트위터도 제공한 그렇지만 뭐 5
1단계 2단계 하고 마지막 단계까지 가면 은 레스트 억울한 url 쌓았을
때 돌아온 제일 선팔 1 보고 딸을 위 소스를 찾아 내면 어디까지 갈 수
있는지 나와야 된다
그래서 뭐 이게 무슨 영어로 막 하고 줄이면 은 헤이트 os 에 요
hate os
저는 그냥 아 os 를 싫어 한다는 의미에서 히트와 흐렸고
말도 안되게 기억하고 있는데 아
그것까지는 안가더라도 그냥 r 웨스트 뿌리 하려는 거 모든 이제 및 모든
유아 레를 미소스 단위로 보고 그리고 그 리소스의 행하는
이제 오퍼레이션 이라고 하죠 그런 연산 연산이 아니구나 함수를 호출
한다고 하죠 그냥
그때는 이제 htt
p 규약에 있는 그런 오퍼레이션 도 있잖아요
뭐 저희는 게동 사라고 하는데 뭐 켓 그럼 읽어 오는거 포스트 새로
만들고 프 전체를 바꾸는 거 업데이트 하는거 5 패치 1 분만 업데이트
하는거 딜리트 리소스를 지워 버리는 거 이런 규약을 정해 주고 다른
애들은
뭐라 그럴까 음
많은 사람들이 비슷한 기억을 따르면 대충 아유 아래를 보는 것만으로도 아
이게 모를 하는거구나 하고 추측해 가능해서 가독성도 높여 지고
인 태그 대신 할 때 좀 더 편하다 뭐 이런 개념으로 되게 좋게 봤어요
그리고 이제 여기서 또하나 열심히 쓰는게
그게 오늘의 주적인 해요 사실은 그 바다엔 코드 http 를 호출할때
보통의 반한 코드가 들어 오잖아요 위통 코드 라고 하죠 뭐
오케이 면은 200원이 돌아오고 뭐 새로운 걸 만들었다
뭐지 소스를 대로 크리에이트 했다 그러면 202 를 가장해서 크리에이티브
를 반환해 주는 거고
아 일단 니가 보내줄 요청을 받았는데 아직 철이 중이야 라고 말할 때는
202
억셉티드 거든요 수락했다 이런 거야 하고 그래서 200대 나오는 모든
에러 코드는 ok 고 그 다음에 500대 로 나온 에러코드 리 있어요
그 500대 로 나오네 라코 들은 보통 인터널 서버에 라 서버 내부 에라
500번
뭐 서비스 거너 베일러 골 서비스가 지금
뭐 서버 가죽 어떤가 그게 막 오브 3인과 뭐 그랬던 것 같고
아닐 수도 있어요 이건 좀 헷갈려요 500번 대라고 많이 정확히 뭔지
몰라요
그중에서 이제 게이트 어 타임 아웃 이런 것도 있고 그것은 이제 내
서버가 따른 서버 로 추출하거나 뭐 이러는데 그 저쪽 서버에 문제를 지금
뭔가 안 되고 있다
어쨌든 서버 쪽 문제라는 거죠 여기까진 좋아
문제는 400번 때 거든요 사실은
400번 때에 라 들이 뭐냐면 서버 에 문제는 아니고 제가 그 apl
호출 하잖아요 그럼 제가 뭔가 잘못 호출했다 는 결과를 보내주는 거에요
그래서 다낭 코드 보면은 400번 이 굉장히 흔하고 베드 리퀘스트 마디가
보내준 요청이 뭔가 잘못됐어
왜 제가 고쳤고 다시 보내야 되는 거죠
그리고 뭐 401 그거는 이제 아더는
2일이 소스를 접근할 권한이 없다
이제 뭐 없어 라이즈 드 로그인 안 했거나 이럴때
금 이지아 로그인한 이따가 맞는 얘기 겠네요 오히려 그리고
비슷한걸로 뽑 이든 있어요 모비즌 이게 4 0 3 2 어떤 걸로
기억하는데
이거는 제 1전 로그인을 했지만 그리 소스 간이 소유가 아니야 니가 남의
은행 정보를 읽을 수 없었잖아
그거 안 돼 이렇게 하는 거고 409 컴플리트
이미 니가 전에 보낸 그 미소 술을 만들어 왔는데 지금 새로 만들어 자는
위쪽 소스가 이해하고 충돌이나
아 그러면 이건 뭔가 충돌 되는 거기 때문에 지금 증거는 언제 이렇게
버리는거
얘기까지 좋거든요
져 제가 요즘 협연 해 봤던 문제를 404 였어요 사실 이게 왜 예전에
웨스트 풀을 고민할 때 부터 알게 문제가 되겠구나 라고 생각을 했는데
최근에 이제 실제 문제가 된 일이 있었죠 서버에서
그래서 그게 뭐냐면 은
차 공사가 이제 그 웨스트 풀에서 볼 때는 어떤 리 소스를 가져 오려고
해요
htp 개설 쏘는 거죠 그래서 예를 들어서
무슨 내가 은행 어카운트 읽어보고 싶다 그러면 서비스 ap 했고 / 뱅커
가까운 츠 / 이제 어카운트 번으로 상도 요
그러면 그 어카운트 뱅크 개개 적 계좌 개 정보 한테
그 뱅크 배자 그 번호로 들어가는 그 계좌에 대한 정보를 전에 보내 줘야
되는 거죠
근데 만약에 이게 죄를 찾지 못했소
그게 자가 없는 게 자요 그러면은
이제 웨스트 프레스 못한 그래 404 를 받아 해라
4 공사가 나빠 운 되거든요 차츰 5 찾지 못했음을 반환하며 를 안오는
2개 개들 하려고 했는데 그게 작업이 된 거니까 뭐 그게 자라 새로 만들
드는 뭐가 되는 거니 마음이고
v 게 굉장히 델리 드 1
그런 리턴 값 중에 하나에요 4
이게 문제 가 뭐냐면은
근데 어느 웹서버를 호출 하던간에 유아 레리 아예 없는 url 있잖아요
그거 뭐 예를 들어서 뭐 어쩌구 닷컴 슬래시 이익 모모 abcdefg
붙이면 아이 페이지가 업소는 에러코드 로사 공사가 들어 오거든요
이제 웨스트 폴 서비스를 만들고 레스트 뿔 api 클라이언트 를 만들때
어 이거 우리가 잘못해서 설정 1 잘못해 같고 뭐 오타나 놓거나 이렇게
url
이제 우리 서버가 있는 url 이 거야 내 부석 내부 서비스가
금 / 를 빼 먹거나 아니면 실수 로 모 베커 가운 펼치는데 씨가 두 개
들어 가야 되잖아요
그 씨를 하나만도 또 하거나 이래서 호출하면 은 그 후 서버를 갈 때
무조건 나빠 운데 에러가 돌아오게 돼 있는거예요 그래서 아 정말 올바른
레스트 포레 api 를 호출 한 다음에 나빠 라운드를 받는거 와
잘못된 후추를 했는데 그냥 웹서버에서 그 페이지가 없어 그 유언에 리
없어 하고 나 파운드를 발언 해주는게
둘다 404 가 들어 온다는 거죠 그래서 초미 그 디자인할 때는 솔직히
404 를 빼고 싶었어요 저희쪽에서 왜냐하면 은
아 이렇게 실수 할 일이 많겠구나 우리 내부 쪽에서 언젠가 실수 하겠구나
이게 테스트를 완벽하게 거치지 못하고 예를 들어서
테스트 한다고 했는데 아부 우리가 지금 쓰고 있는 url 만 제대로 돌고
그 6월에 에서는 404 를 바라 해줬어 그러면 어 그래 뭐 2
위 소스를 없는 거겠지 서버 환경이 테스트 환경 이니까
그리고 넘어갈 것 여지도 있다고 생각을 했어요 그래서 아예 4 공사를
빼버리고
400원을 반한 다음에 그 밑에 이제 저희 저희의 잎에는 자체 내부 자체
에러 코드를 주거든요
왜냐면 400 이라고 말하자 뭐가 틀린지 모르잖아
그러면 그 밑에 무슨 이 삘 드가 미싱이 라던가 뭐 이런 정해 지 이넘을
반 해요 그래서
에라 코드를 확인하고 그 이넘을 확인한 다음에 결정을 하라고 보통 그런데
뭐 이것도 비디오 나중에 뭐 언제 만들면 될 것 같아요
4 공사를 어 그게 이제 되게 임했던 것에서 아 이거 를 400 을
만든다 며 차라리
나빠 운 데려 를 반환하며 똑같지 않냐 그 스트링으로 이 넘으로 그러면
어차피 클라이언트 쪽에서 볼 때는 업 애들이 퀘스트
아 그래 이 6월에 일요일이 쓸 수가 없다고 이런 시고 생각하면 좋겠다고
생각을 했는데 결국 못 그랬어요 뭐 그런 이유가
이제 웨스트 규약 자체가 4 공사를 굉장히 널리 이제 쓰고 있고 많은
사람들이 개를 하고 있어서 이걸 우리만의 방식으로 이유 더 낫다는
방식으로 2주 약을 안 지키는 것 자체가 오히려 득보다는 실이 많겠구나
그럼 이제 최소한 퍼블릭 에 나가는
공개된 ap 에 말에서는 레스트 를 아 뭐 아까 말했던 5단계에 뭐
이렇게 atos 까진 아니어도
정말 위 소스를 대표하는 갯 급여는 동사와 즉 올바른 미 소스 이름들
이런건 말려 제대로 해보자 라는 생각을 해서 실제 나갔고 물의 흡수가
있었는데 최근에 이제 내부 서버를 윌리 싸다가 이제 그런 문제가 생겼던
거에요
그냥 2월에 를 고쳐야 되는 부분이 있었는데 모세로 업데이트하면서
그제 그거를 업데이트 1 고 1 서버 가 나갔어 있어 번은 굉장히
간헐적으로 추세는 써보고 실제로는 hdtv 개만 해야하고 정보를 불러오는
거에요 그래서 이걸로 쭉 불러와서 의 정보가 있어 자 그러면 이게 유효한
거니까 계속 진행해
이 정보가 없어 아 그럼 이건 우리는 잘못 들어온 url 이 야 그냥
이건 아직 존재 안 하는 거니까 뭐 d 가 새로 리소스를 만들던 해 이런
식의 로직 이었는데
그 url 안 바꿔서 실제 웹서버에 그 ur 일이 없음에도 불구하고 4
공사가 돌아왔던 거에요 그래서 저희는 그냥
그러면 큰 원래 4 봉사가 예측되는 값 중에 하나니까 그 4 공사가
돌아왔다고 해서
서버 에 장애가 있다고 로고로 찍지도 않았고 서버에 장애가 있으면 no
지키고 임해서 날라오고
그게 심하면 억 사이렌 돌리고 * 제 다 되게 돼 있거든요
그게 안 된 거에요 그래서 저희는 굉장히 간헐적으로 호출해서 ap 에서
장애가 있었음에도 불구하고 그 장애가 있다고 그것을 곧바로 보고 하는
사람들이 100% 또 아니잖아요
그걸 모르고 조금 넘어 가는 거예요 써 일단은 문제를 찾아서 고치는 건
어렵지 않았는데
다시 예전 생각이 났던 거 좋아 내가 처음에 이거 보면서 아 이거 문제
언제 생길 수 있겠다라는 게 이제 생긴 거예요 그래서 고민을 했어요
어떻게 이걸 고쳐야 될까
그래도 지금 하지 그러니까 실수를 막자는 의 보조
그래서 전에 생각했던 것처럼 404 를 쓰지 말고 400 으로 쓰자 라는
생각을 했지만 역시 그 건은 워낙 많은 사람들이 쓰고 있는 웨스트 불의
스펙의 어긋나는 것을 안 될 것 같고
내부적으로 되겠죠 외부적으로 안 될 것 같고 더 좀 더 생각을 해 보다
보니까
이렇게 고치기로 했어요 제가 조금 전에 말했던 내용이 있잖아요
저희 자체가 이제 저희의 a pin api 는 뭐든지 에러 코드를
받았을까
hp 코드를 반항하고 숫자로 그 외에 별도로 우리만의
그 인원 밸류를 반하게 되어 있다 그리고 그것도 언제나 똑같은 스트랩
차가 나와요 그러니까 만약에 200 때가 아니라 에러가 났다면 차 공동
때라면 특히 그럼 언제나 똑같이 에러 코드가 있을 거고 그 에러 코드를
보면 5개 스트링이 들어가 했어요 이 넘으로
아 그러면 우리는 앞으로 내부적으로 쓸 때는
404 를 반환 을 할 때 에러 코드도 같이 반드시 반환하게 되어 있거든
실제로
그럼 그 에러코드 읽어야 겠구나
그리고 뭐 404 를 받아야 할 때는 뭐
그리고 이제 클라이언트 쪽에서 호출 할 때 호출 할 때 404 를 받아
했으면 반드시 에러 코드가 있는지 보고 우리 자체라 코드 그게 없으면
서버 장애로 노구를 찍으면 되겠구나 라는 생각을 했어요 왜냐면 세팅이
잘못된 서버 장애 니까
그래서 아 그런 식으로 고쳐야 겠다 고 생각을 했고
저희가 이게 또 되는 이유가 뭐냐면
이게 저희가 흔히 말하는 마이크로 서비스는 아니고 뭐 마이크로 서비스로
간 적도 있었지만 약간 조금 돌아 왔고 그래서 마이크로 서비스 하고 멀리
틱 서비스 서버 하고 약간의 중간 단계로 저희가 쓰고 있어요
마이크로 하고 마이크로 보다 약간 더 란게 mm 과 마이크로 밑에 mm
밀 밀 있어 보라고 해 될 것 같은데
내맘대로 만들어 너 밀리 서버 음식으로 하는데
내부적으로 호출하는 경우가 그래도 있거든요 아직 그러면 저희는 무조건
내부 규약에 뭐냐면 서버 간에 호출이 들어갈 때는
hd 필요한 따가 꼬추 라는 게 아니라 그거를 담당하는 api 클라이언트
라는 클래스를 만들게 되어 있어요
원래 시작했던 것은 이제
api 클라이언트 라는게 여러가지 다른 서버를 쓸 뿐이지 오퍼레이션
굉장히 비슷하고
모프 포스트 갯 못 12t 롱 한 다음에 결과 받아온 다음의 에러 만들고
이제 전부니까
그리고 탈은 서버 보내기 전에 클라이언트 사이드에서 밸리데이션 들어갈
것들 리 콰이어 듯 일드 이런 것들 그리고 위 스폰 스 받았을 때도
밸리데이션 해야 될 것들이 굉장히 간단하게 이제 배틀이 비참한 받는걸로
자동화를 시킬 수 있겠다고 생각을 해서 시작을 한 거에요
그 모든 게 아직 들어가진 않았지만 다음 단계로 가고 있는 거죠 그
거기다가 이제 무조건 an api 클라이언트의 공통되는
이제 뭐 캐싱 로직 이라던가 쉽게 컴퓨터에 레이 션 할 수 있는 그런걸로
천안 생각도 있었고 그래서 별과 적으로는 api 클라크 클라이언트의
공통된 로직을 담고 있는 부모 클래스가 있고 각 api 클라이언트 가
어디 상속을 받아서 세팅만 해야 웃을 수 있게
이런식으로 가려고 했던 거죠
써 그게 있으니까 되게 간단해 지는 거에요 그러면 어 이제 어차피 우리가
그 다음 단계로 가서 2통 아파 작업을 좀더 할건데 현재 모든건 a
베이클라이트 로써 있고 이제 그 위에 부모 클래스를 만들면 되요 사실은
그럼 그걸 하는 동안에 이제 리스폰 스를 들어올 때 무조건 404 체크를
한 다음에 404 가 왔을 때 에러 코드가 바디 없으면
이것은 무조건 우리는 장애로 로깅 할 수 있구나 라고 해서
음
그 방향으로 나가는 게 맞다고 결정을 내렸어요
그래서 이게
시스템을 디자인 하다 보면은 그리고 어떤 규약을 보다 보면 언제나 그런
생각을 할 수 밖에 없거든요
아 이게 어디서 터지게 있구나 이걸 어떻게 막을까
이제 가끔 이제 터지게 꾸나 알고 있고 대책을 수
이제 확실하게 어떻게 세워야 할지 모르거나 그냥 바빠서 제대로 안
세웠다가
뒤늦게 찌 약간 개가 깨달은 거죠 아 이런 문제가 있었으니까
여태까지 써 봤을 때 가장 쉽게 쑤 세모 이거구나
그리고 어떤 의미에서는 우리가 자칫 밀리 썹 밀리 서비스를 하겠다고
꼬장꼬장하게 그 ap 에 클라이언트 무조건 만들라고 강요해 왔던 게 이제
굉장히 간단하게 실수를 막을 수 있는 추가 기능을 더할 수 있구나 하는걸
느꼈어요
물론 이 모든 게
모든 것의 테스트가 완벽하게 돼 있으면 이 모든게 당연히 필요가 없어요
이제 모든것에 테스트가 완벽히 되어 있는 회사를 제가 본 적도 없고 일한
적도 없고
결과적으로는 코딩 프랙티스 에서 실수를 덜 할 수 있는 프랙티스를 많이
만들어 놓으면 올수록 어 이거는 확실히 아까 일어 이런 경우가 생기는 게
좀 줄어드는 것 같아요
어쨌든 뭐 여태까지 서버를 하는 서버 장애 굉장히 없었는데 이제 오랜만에
또 한번 보고 나서 아 뭐
예측했던 실수 뭐 막을 수 있었던 실수
그러나 어쨌든 일어났고 그러면 좀더 들이 일어나게 하기 위해서 어떤
대책을 세운 이야 이런 고민을 하다가 그냥 비슷한 고민을 해 보시거나 해
보셨거나 아니면 비슷한 문제를 가끔 보시는 분이 있을것 같아요 사실을
hp 6월에 잘못 쌓고 404 받는 경우 되게 많거든요 40
사람은 다 손가락 이삐 꼬여서 실수를 하게 데이터라고
그런거 보면서 이제 고민 하셨던 분이 있다면
모든 api 에 달해서 공통된 에라 바디 스틱 털 하나 만들어 주시고
그리고 그의 라 스트럭처 가 나왔 그걸 만들어 놓으면 은 이제 다음
단계로 이렇게 쉽게 모든 것을 아
h 케이스 라고 하죠 되게 애매한 케이스 이럴 수도 있고 저럴 수도 있는
그런 케이스 드
그런 케이스를 잡기가 좀 더 편한 것 같아요 그래서
뭐 그냥 주저리 주저리 말을 했지만 결과적으로는 레스트 프레이 피에서
404 가 조금 애매하다
그리고 그 첫번째 하고 싶었던 이고 두번째가
어떤 리스트 프레이 폐를 만들더라도 이제 에러가 있으면 에러 바디를
가능할 수 있는 그런 a 폐를 만들면 좋을것 같은 생각이 고 그의 라
바디는 언제나
공통 돼야 되고 그래야 어떤 애랑 오든 간에 해석이 가능 하니까 쉽게
그리고 세 번째는 그 에러 바지까지 들어왔으면 아까 말했던 404 에서
약간 애매한 부분을
아 대응을 해서 뭐 뭐 방지는 아니죠
발견되자 마자 곧바로 대응할 수 있는 체위가 된다는 거죠
그정도
에 뽑혔습니다
