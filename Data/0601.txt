안녕하세요, 포프입니다.

오늘도 제가 사용하는 코딩 표준에 대해서 설명해 드릴게요. 제가 전 비디오에서 설명해 드렸지만 못 들으신 분들을 위해 말씀을 드리면, 제가 관리하거나 제가 코딩 표준에 대해 결정을 내릴 수 있는 회사에서는 제가 말하고 있는 이런 코딩표준을 사용하고 있고, 일부는 웹에도 공개를 해놨고, 회사마다 별도의 문서로 추가적인 규칙이 있는 곳도 있습니다. 그리고 코딩 표준에 어긋나는 코드를 작성했을 때, 컴파일이 안 되거나 테스트에서 실패하게 해서 배포가 안 되게 하는 게 저의 일반적인 방법입니다. 그리고 당연히 제가 코딩 표준을 결정할 수 없는 다른 회사에 일해주러 가면 저는 그 회사의 코딩 표준에 맞게 코드를 작성해 줍니다. 제 개인 코딩 표준에 맞지 않더라도 이게 전문 프로그래머의 길이고 당연히 그래야 하는 겁니다.

오늘 말할 거는 C#에 들어온 새로운 문법 중에 이건 알죠? 삼항 연산자. 모르시면 보고 오세요. '? A : B' 하는 거. 삼항 연산자는 저 일단 씁니다. 근데 그 이후에 나온 비슷하게 생긴 것 중에 '??'가 있고 '?.'가 있어요. 찾아보면 null 포인터 관련된 거긴 해요. 저희는 다 금지입니다. 그리고 계속 금지일지 아닐지는 모르겠지만, 금지가 아니게 될 수도 있고 계속 금지일 수도 있습니다. 지금부터 왜 그런지 설명해 드릴게요.

이 '??'나 '?.' 이거는 우리가 볼 때 딱 못 알아보는 이유는 많은 언어에서 흔하게 사용하는 게 아니기 때문에 그래요. 최근에 있는 언어에서 추가로 들어오고 있는 거예요. 그리고 이게 null일 때, null이면 다른 값을 대입하고 뭐 이런 비슷한 걸 할 때 나름 짧게 코드를 써줄 수 있기는 한데, 물이 오르지 않은 사람들한테 '이 의미가 뭐야?'라고 물어봤을 때 바로 대답을 못 하는 사람도 꽤 많았어요. 그만큼 많은 프로그래밍 언어에 적용된 일반적인 문법은 아니고 실제 그 문법을 눈으로 딱 보는 것만으로 '이게 그거구나!'라는 판단이 서는 것도 조금 어려운 부분들이 있어요. 되게 열심히 꼬아서 설명하면 그 심볼이 이해되긴 하거든요? 근데 볼 때마다 이 짓을 하거나 아니면 암기해야 한다는 거 자체가 좀 문제가 있는 거예요. 왜냐하면 제가 운영하는 회사나 책임지고 있는 회사의 코드 베이스를 유지하는 원칙 중의 하나는 '비슷한 언어들에서 온 사람들이 여기에 와도 큰 어려움 없이 곧바로 코딩할 수 있게 해 주자' 에요. 왜냐하면 내가 C#을 돌린다고 해서 JAVA 프로그래머를 안 뽑을 건 아니잖아요? 어차피 하는 일 비슷한데, 할 수 있으면 뽑는 게 맞거든요? 그럼 왔을 때 C#에만 있는 괴랄한 문법을 강요하면서 '이거 몰라요?' 하고 그 사람에게 '이걸 새로 배우세요.' 이러기 싫다는 거예요. 그러면 '그냥 C에도 존재하고 C++에도 존재하고 그런 걸로 최대한 하자. 그럼 새로 나온 문법은 다른 언어들에서 워낙 흔하게 되고 누구나 사용할 때까지는 일단은 쓰지 말자'라는 게 제 지론이에요. 그래서 일단 안 쓰고 있는 거예요. 그러면 '하~ 이거 null일 때 확인하고 뭐하고 대입하고 if 만들고 하면 손가락 아프지 않나요?'. 코드 한 번 조금 짤 때 손가락이 아프고 가독성이 좋아지면 해야 하는 게 맞아요. 그리고 저희 코드 베이스에선 null이 별로 없어요. null을 아무 데나 소개하지 않는 그런 코드 베이스를 유지하는 게 제 코드 베이스, 그리고 제가 유지하고 있는 회사, 관리하는 회사의 목적이기 때문에 생각보다 null을 이렇게 할 이유들이 없어요. 이거는 제가 예전에 null 관련 비디오를 만들면서 얘기를 했던 거예요. 코딩 표준에서 'orNULL을 붙인다'거나 '실제 null이나 이런 상황이 있는 거는 경계에서 null 처리 다 해버리고, 검증 다 해버리고 내부에서는 유효한 값이 있는 것만 돌리자'라는 거던가. 근데 null이라는 거는 기본적으로 어떤 값이 있다, 없다의 불리언과 실제 그 값의 참조를 둘 다 가지고 있는 개념이거든요? 가끔 이걸 쓸 일이 있어요. 근데 C#에서 이미 이런 경우에 훌륭하게 쓸 수 있는 함수 이름 패턴을 만들어 놨다는 거예요. 그게 바로 Try 함수. Try 함수는 언제나 불리언을 반환해요. 성공했냐, 안 했냐. 그리고 실제 여기서 나와야 하는 반환 값은 out 매개변수로 전달하죠. 그렇기 때문에 이것만 사용하는 것만으로 이미 어떤 함수 뭐에서 성공했냐, 아니냐를 판단하기가 되게 쉬워요. 그래서 이거를 굳이 null로 해서 많이 할 필요는 없다. 여전히 내부적으로 null은 쓰지만 굳이 이거를 많은 곳에 소개하지는 않는다는 거예요. 그래서 저희가 실제 코드 베이스 보면 null이 없는 코드가 굉장히 많고요, 가끔 나올 때는 '?.'이라던가 '??'이런 거 안 해요. '이게 null이면, 이거 해라' 이런 식으로 깨끗하게 풀어서 써줍니다.

그래서 요게 지금 저희가 금지인 이유는 이런 이유 때문이고, 실제 이거를 금지해서 손가락에 관절염이 올 일이 그렇게 많지 않아요. 그렇게 많이 쓸 일이 없는 코드라서. 두 번째가 아직 많은 언어에서 다 흔히 쓰는 방식이 아니에요. C 계열 언어에서도 많이 사용하고 있는 문법은 아직은 아니기 때문에 그래서 안 쓰고 있는 것뿐이에요. 이런 문법을 제가 쓰려면 보는 순간 '아하!' 하고 한 번에 알 수 있을 정도로 굉장히 깔끔해야 하거든요? 불행히도 심볼을 두 개 겹쳐놓는 순간 갑자기 세상에 좀비가 출현하면서 이상한 일이 일어나는 그런 일이 생깁니다. 그래서 심볼은 하나만 있는 게 굉장히 깔끔하고 일이 편하고요. 이게 두 개가 되는 순간 갑자기 사람들의 뇌에 혼돈이 옵니다. '?.'이 있으면 나중에 '.?'도 나올 거 아니에요? 그럼 그건 또 의미가 뭐예요? 어쨌든 복잡해집니다. 그래서 심볼은 하나만 있는 게 좋은 거고, 저희가 금지하고 있는 것 중에 하나, '??' 연산자, '?.' 연산자 저희는 쓰지 않습니다.

포프였습니다.