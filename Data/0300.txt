

예 안녕하세요 입니다

오랜만에 기술 얘기를 좀 하려고 해요

생각해보니까

뭐 매주 목요일 날

나가는 비디오는 제가 미리 찍어놓은 거라서

무슨 내용이 있는지 시작기억이 안 나지만

매주 월요일 날 나가는 것은 참 알 수 없게

그냥 헛소리를 너무 많이 한 것 같아요

그냥 간단하게

랩탑을 열고 얘기해서 그런 것 같기도 하고

오늘 알리기 는 그 클라우드 저하고 하고

다 커에 대해서 좀 얘기하려고 해요

그러니까 결과적으로 제가 하고 싶은 말은

그리고 에서 남다라는 거를 좀 말하고 싶은건데

그거를 말하려면

다 커도 얘기해야 될 것 같아서 얘기를 하는 거예요

제가 뭐 다 커를 제대로 쓴 적도 없고

이제 뭐 다 거로 모를 대규모로 돌린 적이 없어요

근데 얼마 전에

이제 이제 제가 서비스를 만드는 게

그 클라우드 쪽으로 돌리려고 했기 때문에

이제 클라우드에서 과연 애플리케이션 어떻게 할 거냐

그러니까 이제 이잖아요

이든 뭐 마이크로 서비스 든 돈은 서비스 니까

그걸 만들어서 이제 인스턴스를 만들고 디프를 해야 되고

그리고 부하가 몰리면 자동으로

이제 인스턴스 수가 많아지게 한다거나 적어지게 한다거나

이런 생각을 해야 되거든요

그럼 이제 뭐 예전에는 다들 그냥 뭐 거기다가

가상 머신 을 만들던 웹 서버를 만들거든 해서

이제 매뉴얼하게 직접 이제 디플로일을 했잖아요

인스턴스가 더 필요해 그러면 추가하고 이런 식인데

요즘은 이제 그 클라우드 쪽 나 뭐

구글도 약간 비슷하고 아마 아마존이죠

그리고 얘네들 마이크로소프트야죠

얘네들이 다 이제 그거를 자동화를 시켜줬잖아요

예를 들어서

네가 이런 애플리케이션 패키지를 만들어서 뭐 단넷이라면

그게 패키지 겠고

자바기반 이라면 잡아 그러니까 이 됐고

아니 뭐 할 수도 있고

그런 거를 해갖고

이거를 엄마를 해주면

자동으로 부하가 몰릴 때 스케일을 해주게

그러니까 부하가 몰리면 이제 원래 하나인데

두 개 세 개 네 개 올렸다가 부하가 떨어진다

줄일 수 있는 식으로

이런식으로 자동으로 관리해주는 그런 방식들이 나왔어요

그래서 에서 보면

그게 이제 빈스토크 라고 하는 거고 에서 보면은

그게 이제 라고 하는 거죠

옛날에 클라우올렸던 것 같고 를 많이 돌아갔고

새로 이름이 바뀐 그래서 그거를 했는데

이제 그거에 뭐라 그럴까

작동 방식은 애플리케이션 기반

이에요 이 니가 애플리케이션을 만들어

그러니까 을 안 맞안

만드시는 분들이 뭐냐면 할 정도로 생각하시면 되겠죠

이거를 여러 개를 늘려 준다 해요

그래서 이 애플리케이션이 하는 일이 이제 되게

마이크로 서비스 같은 경우에는 솔직히 하나가 앱하나다

라는 식으로 개념으로 가긴 가는데

뭐 그런 경우를 쓴다면 애플리케이션을 돌리는데

여러가지 뭐라 그럴까 과부화가 있을 수밖에 없잖아요

덩치가 크고 뭐 을 만들고 이런 저런 넣어야 되고

그래서 그 방식대로 디플로이라고 스케일을 하는데

대부분 이제 처음 시작할 때는 에서

그걸 어떻게 했냐클라우드 회사에서 이걸 어떻게 했냐그럼

가상 머신 이라는 걸 돌려하고

가상 머신 에 이걸 놓고 여러 대를 복사해서 띄우고

복사해서 띄우고 복사해서 띄우고 이랬던 것 같아요

그러다가 이제 가상 머신 은 굉장히 많이 썼죠

사실 클라우드 기반으로 해서

왜냐하면 실제 어보는 되게 비싼 거

막 천만원짜리일억짜리 한데 있고

거기다가 가상 머신 백대를 띄워도 상관이 없으니까

가상 머신 백대를 띄운다고 해도 이 백대가 뭐 전부

다 백프로 CP 를 쓰고 있지는 않을 가능성이 높으니까

그거를 잘 조합을 하면은 더 그 뭐라 그럴까

컴퓨터 하드 를 좀 더 효율적으로 이용할 수 있다

파워컴퓨터 하나의 뭐 가상 것은 백 개

백 개의 컴퓨터를 띄우는 효과랑 비슷하니까

뭐 성능면에서 보면 다른 얘기지만

사용성 면에서 보면 그렇다

그렇게 했어요 시작이 그렇게 했어요

그러다가 결국 가상머신 이라는 것은 가 있고

그 다른 를 또 돌리는 거거든요

그래서 과부하가 있고

막 이런 문제가 있어서

다 커라는 애들이 이제 정확히 대체 이름을 까먹었는데

그런 개념을 만들었지만 을 띄우는 게 아니라 이 에서

도는 프로그램 닷컴 프로그램이 있고

그 닷컴 프로그램 안에서 다른 프로그램이 돌게끔

그리고 그런데 이 다 커여러

개가 있으면 다 크로인스턴스라고 하거든요

그 여러 개가 있으면

서로 인스턴스간에는 메모리간섭도 없고

아무것도 없는 거예요

원칙상 그러면은 그 가상 머신 을 옛날에 했는데

이제는 다 커를 띄우으로 해서

중간에 게스트가 사라지니까 훨씬 과부하고

적고 속도도 빨라질 수 있다 라고 시작해 닭을 시작했고

리눅스 기반 적으로도 굉장히 많은 인기를 끌었어요

근데 다 커성능을 솔직히 측정한 측정한 걸 보면

대부분의 경우에

가상머신 을 띄우는 것보다 빠르지는 않아요

그러니까 조금 빨라요

정말 거의 그 어떠한 시나리오에서는 좀 빨랐는데

그런 뭔지 알아 기억났어요

메모리 사용량이런거에서 별로 큰 메리트가 사실은 없어요

숫자가 나온 걸 보면 근데 그 아이들 상태일 때

실제 인스턴스가 돌지 않을 때 사용하는 메모리는 적어요

그게 유일하게 다코각

확실히 숫자상으로 보였던 차이인 것 같고

그 외에는 사실은

그런 게스트를 올려서는 부담이 되는 부분에

그래서 성능 차이가 있냐라는 게 별로 없었어요

그 이유는 제 생각에는 아마 가상

머신 을 계속 발전시키면서

마속을 자기만의 가상 머신 을 만들었고

하이라고 이제 뭐

그 외에 같은 경우는 굉장히 오랫동안 있어갖고

최적화를 잘해서

가상 머신 도 작동하는 방법이 두 가지가 있거든요

실제 를 시작해서

밑에 에서 함수를 호출한 방법이 있는 반면에

밑에 그니까 호스트가 어떻게 뭐라고 해야 될까

디렉터를 뚫어준다

그럴까요 그래서 게스트가 직접 한번도 함수 호출하자

곧바로 이 커너를 호출할 수 있게 해주는

그런 방식까지도 나왔어요

제가 이 년 전에 그 이름을 안 했으면 까먹었어요

그래서 이렇게 하이퍼바이전과 뭐 이런거 있어요

그래서 그런 방식이 있기 때문에 여러가지 추적하라 했고

여러가지 빨라진 것도 사실이에요

그리고 이제 에서도

이제 가상 그런 을 지원하기도 시작했고

그런 명령과 같은 것들을 조금 더 잘

그래서 제가 성능 차이는 크게 없는데

이제 다 커를 제가 한참 사용할까

고민했던 이유가 뭐냐면

애조나에도 자기만의 그런 빈스토크 라던가

뭐 아까 말서비스 이런게 있음에도 불구하고

다 커를 지원하기 시작했어요

정확히 하면 다 커수업을 지원

지원하기 시작했다는 게 맞는거 것 같은데

다 커수업이라는 게 뭐냐면 아까 다 커라

그러면 그 안에 하나씩 이제 이미지를 집어넣는 거거든요

어플리케이션의 이미지를 가 없이

그럼 이제 어느 이거를 디플로해도

그대로 실행이 된다라는 게 목표고

뭐 반드시 백프로 이렇게 돌지는 않아요

아직 이 특수 쪽에서는 좀 잘 돌고 있는 것 같고

인도수 쪽은 이제 마소가 엄청나게 돈을 줘서

결국엔 또 지원을 하게 되고 돌긴 도는데

아직 그게 백프로라고 보기는 어려워요

그 상황에서 다 커수확은 뭐냐면

아까 말했던 서비스나 빈스토크

처럼 이 다 커이미지가 있을 때

뭐 어떤 규칙에 따라 로드가 많이 몰리거나

CPU 를 많이 쓰거나

그런데 여러 개 인스턴스를 뿌릴 수 있게 해주는

그래서 결과적으로

서비스나 빈스토크 랑 하는게 비슷하거든요

근데 이제 워낙

이제 아마존에서

이제 다 커수염을 점점 지원하게 하는 이유는

뭐 서비스는 아니었어요

무슨 이름을 까먹었어요

컨테이너서비스가 에선 그런 이름일 거예요

하기 그걸 한 이유는

이미 다른 회사에 다커이미지가 있으면 그거를 가져다가

우리 쪽에 곧바로 실행을 시킬 수 있지만

사람들이 많이 쓸 수 있지 않을까라는

개념에서 시작을 한 것 같아요

그리고 장점은 양쪽 다

똑같은 걸 지원을 하면은 이 똑같은 이미지만 가지고

이제 여기 올리던 주의 올리던 둘 다 도 으니까

편하다라는 개념인 것 같은데

결국 다 콧수염이 하는 일은 서비스

나 빈스토크 한거랑 똑같고

그래서 만약에 내가 한 클라우드 서비스

만 일단은 쓸 생각이라면

솔직히 다 커를

굳이 쓸 이유가 없다는 생각이 들은 계속 또 뭐냐면

그러니까 저는 일단 쓰기로 했어요

그래서 왜냐하면

저는 일단 애플리케이션이 거기는 단 내 기반 이고

반내기반 이라면 이미 이건 패키지를 줘요

그리고 패키지를 곧바로 이제 서비스에 그대로 돌고

같은 마소스텍이니까

에서도 그냥 인스턴스를 빈스토크 띄우고

그리고 거기다 그냥 디플로아까 했다

그랬잖아요 그 그게 이거든요

그걸 올리는 것만으로 그냥 그대로 돌아요

그래서 사실은 다 코가 하려고 했던 그 정도의 패키지

화는 이미 단

내 기반 에서는 이미 끝나있는 거기 때문에

어차피 별들은 다 카다 것의 이득이 없었어요

저한테는 다른 이제 언어나

다른 이제 프레임워크는 어떻게

팩트제가 나온 지는 잘 모르겠어요

제가 뭐 스프링쪽이나 뭐

이런 건 좌파이 나오는 거 알고 있고 이 나오거나

그래서 이것도 그냥 뭐

저는 똑같이 올라갈 수 있는 것 같고

어떤 워크도

그런 패키지닝이 이미 돼 있는 거면은

굳이 다 것의 의미는 크게 없다고 지금 보이거든요

단 예외는 다 커가 필요한 경우는

내가 나 자체 데이터센터를 돌릴 때 것 같아요

그러니까 내가 클라우드 서버를 안 돌리고

내가 어버리실제 가지고 있고

거기에 가상 머신 여러 개 대해서 뭘 돌리려고 했다면

가상 머신 이렇게 하나씩 디플레이하는게

막 막 스크린도 짜고 뭐 하고 좀 되게 귀찮은 일이에요

사실은 그런데 다 커를 으면 알아서 이게 올라갔습니다

는 거죠

그래서 가 자동으로 해주는 거를

이제 내 데이터 센터에서 직접 하고 싶다라고 하면

다 커가 굉장히 유용할 것 같긴 해요

근데 저희가 아직 그 스테이지는 아니에요

그래서 제가 볼 때는 정말

그러고도 제 생각에는 자기만의 데이터 센터를

요즘 운영을 하려고 하는 초기

스타트업이 얼마나 있을 거 며

굉장히 큰 기회얘기가 아닐까

그리고 큰 뒤에 얘길 하면 다 커같은 걸 해주는게

일단 개발자의 몫도

아니지 않을까라는 생각이 좀 점점 들고 있는 거죠

사실은 그래서 어쨌든 다 커든 뭐든 간에 패키징

이슈기 때문에

제가 나중에 만약에 다 커를 쓰려고 한다 하더라도

제 빌드스텝을 받고 이미지만 구하면 되는 것 같아요

그래서 집 있느냐 없느냐는 별 큰 차이가 아니기 때문에

일단은 그렇게 가자 라고 생각을 했어요

여기서 얘기가 끝나면

결국에는 뭐 중간요약을 하면 어차피 을 거라면

그리고 지금 쓰는 그런 뭐 프레임워크가 패키지는

그나마 해주는 제 정신차린 프레임워크라면

굳이 다 커를 쓸 이유는 없다

그게 이제 제 생각이고

그러면 여기서 재밌는 게 나와요

그래서 아까 제가 처음 얘기를 시작했을 때

결국에는 스나 빈소크나 패키지를 올린다고 했잖아요

애플리케이션을 근데 그 서비스

나 이런 걸 만들고 난 뒤에

아마 먼저 시작을 했겠죠 에서

이제 람다라는 걸 만들어요

굉장히 이름을 잘못 죽었다고 생각했는데 가

굉장히 의해 안되게 이름을 짓는 것은 유명한 거고

뭐 202라든가 뭐 이상한 걸 많이 쓰잖아요

결과적으로는 뭐냐면

여태까지는 애플리케이션 하나를 가지고

여러 개로 늘렸잖아요

남다른 함수 하나를 이 함수 하나를 이제 INF타고 9

만 있어도 함수를 만들 수 있잖아요 이 함수

하나를 만들어두고 이거를 실행시키는 거예요

그러다가 이 함수가 여러번 노출돼

그러면 이 함수를 여러 개 인턴을 뽑겠다는 거에요

그래서 인스턴스가 많으니까

그만큼 처리를 많이 한번 할 수 있게

그래서 뭐 인풋이라면 다른 함수가 호출하는 뭐

뭐 그런게 올 수도 있고

호출커그러니까 로 호출한 게 들어올 수도 있고

다른 트리고 시간 따라 호출되는 함수일 수도 있고

뭐 트리거인풋풋은 뭐 다양할 수 있어요

그아웃풋은 다른 것도 호출하는 걸 수도 있고

데이터를 쓰는 걸 수도 있고

또 쓰는 걸 수도 있고

그래서 그런 함수 단위로 이제 그 뭐랄까

인스턴스를 늘리는거 스케라는 단위를 바꾸고자 하는

그리고 똑같은 개념으로 이제 에서도 이란 게 나왔어요

똑같은 개념이에요

근데 이제 는 그 전에 무슨 웹 잡이런거 만들고

이런 거 만들고 해가지고

이제 그 관계를 가다가 결국 마지막에는 까지 내려왔고

아직은 이게 그니까 돌긴 도는데

그리고 일단 함수 호출 마다 돈을 받아요

그러니까 예전같으면

애플리케이션 돌고 있으면 인스턴스수사를 돈을 받았고

애플리케이션에 많은 기능을 높지만 그 인스턴스

나 띄우는 그런 의미가 좀 더 있으니까

조금 이렇게 프로그래머가 이런 애플리케이션

어떤 단위로 끊어야 할지 고민을 했다면 이라던가

남자는 함수 안위를 돌기 때문에

함수를 하나씩 만들어서 그냥 다 올려놓고

이제 서로 함수가 어떻게 호출되면 되는 건지

거는 알아서 이제 그 에서 해준다는 얘기죠

클라우드 쪽에서

그래서 그러면은

이제 이 함수의 부하가

많이 걸리면 이 함수만 여러 개가 늘어나니까

이제 어디 도 부하걸리는 부분은 좀 더 뭐라

그럴까 자유롭자유롭게

더 유연하게 해결할 수 있다라는 개념이고

아이디어는 정말 좋아요

그리고 요즘 마이크로소프트

사람들을 만나면 클라우드 쪽에 있는 사람들

이거를 쓰라고 굉장히 열심히 추천을 해요

그 이유가 아마 이거는 함수 호출

당 돈을 받기 때문에 뭐라 그러지 가랑비어쩐다

그러나 그것 때문에

돈을 많이 번다고 버는 걸 수도 있고

아니면은 그니까

제가 엔지니어입장으로 볼 때

뭐 헛함수 호출 사이에 걸리는 딜레이가 어떻게 되는지

그거는 논외로 하더라도

스케일러블리트

라는 개념으로 볼 때는

이게 정말 올바로 가야 될 방법이긴 해요

그래서 저도 굉장히 좋은 먹을 생각을 하지만

저는 아직 안 써요 쓸 생각도 없고

그 이유가 뭐냐면

남자나 이나 자체 자체에 있어서 돌려요

그리고 디플로에는 과정도

여태까지 처럼 를

만들어 쉽게 올릴 수 있는 것도 아니고

내 로컬 에서 테스트를 방법도 좀 적어요

함수를 일단 클라우드를 올리고

테스트 하는 게 거의 현재

유일한 방법인 것처럼 되어 있어요

그렇기 때문에 뭐라 그럴까

내가 테스트 환경을 구축하기 되게 애매하고

그리고 일단 만약에 제가 에서

이제 을 돌렸다면은 어느 순간 가

마음에 안 들어서

옮기려고 할 때 이 펑션을 그대로 가져다가

업로드를 할 방법이 없어요

일단 지원되는 언어도 좀 약간 다른 것도 있고

는 뭐라고 할까

아예 담내 쪽을 지원을 안 하고 있고

는 제가 볼 때는 일단 단 내 지원하고

잡아를 지원했던 걸로 기억을 해요

몇몇 언어를 지원하는데

두 개가 지원한다고 하는 것 같지도 않고

그리고 개념 자체가 이미 뭐랄까

이미 존재하는 개념이 아니었거든요 에서

이렇게 돌린다 이 앱을 돌린다는 굉장히 명백한 거고

그걸 어떻게 클라우드의 돌리냐 문제였는데

이거는 그런 공통으로 나서 시작돼 가지고

아이디어를 이렇게 서로 공유한 게 아니라

자기 나름대로 아

이렇게 함수에서 스케일을 할 수가 있어

그리고 얘네도 함수에서 할 수가 있더란 개념으로

함수를 만들었는데 이 함수가 호출되기 위해서는

그 뒤에 다른 인프라스트럭처가 필요하거든요

그러니까 만약에 이제 단넷이나 아니 뭐

정확히 를 쓰시는 분들은

컨트롤러 의 개념으로 생각하면 돼요

어느 프레임워크던 컨트롤러의 개념은 있어요

그죠 잡았스프링도 있고 뭐 단할 수 있어요

근데 결국에는 함수 고

그 함수를 어떻게 호출하느냐는

그 워크가 결정할 일이거든요

그 워크가 공통되지 않으면 이 잡아스프노는 함수를

이제 단내 쪽 이제 논다 하더라도

심지어 언어가 갔을지라도 꼽안

온다 할지라도 그거를 공통적으로 호출할 수 있는 그런

그런 약속이 없는거에요

그래서 자기 나름대로 를 만들어버린 거지

그래서 제가 애주해서 모든 을 그냥 뻥으로 만들어놨다면

오늘 방법이 없어요 다시 짜지 않는 이상

도람다 에서도 똑같은 문제가 있어요

그래서 현재 저는 쓰지 말라고 하고 싶어요

정말 간단한 거

아니면 그래서 제가 예전에 트위터로 그 쪽 사람들하고

얘기를 막 했어요 보면 정말 좋은데

나 이거 절대 못 쓴다

못 쓰는 못 쓰는 이유가 너네

서로 그게 안 되기 때문이다

그러니까 그쪽에서는 뭐 엔지니어를 아니었고

뭐 코스모스든지 뭐

아니면 그냥 퍼슨 인지 그런 애가 저한테 했어요

어떤 조건의 쓰겠냐

내가 쓸 수 있는 조건은 에서 돌던 뻥션을 가져가서

쓸 수 있으면 된다

이거를 다 커라고 생각을 해라

다 커가 현재 애플리케이션을 합쳐갖고

패키지로 만든 거라면 뻥셔날을 해갖고

패키지로 만들어서 양쪽의 쏠수 있는 그런 기술이 나오면

그거는 그때부터 누구나 쓸 수 있는 기술이 된다

그렇게 얘기했더니

그리고 한 얘기가 어차피

이건 과를 누군가

이제 들이 분하려면 다 커같은 일이 나오거나

아니면 클라우드

서비스하고 있는 우리 둘 중에 한 명이 해야되지 않겠냐

그럼 나는 아마존보다는

마소가 그거를 훨씬 더

스탠더드를 잘 이끌어 갈 수 있다고

본다 라고 얘기를 했어요

실제 마소가 굉장히 많이 을 이끌어냈기 때문에 근데

이제 그쪽에서는 아

그런 일은 오지 않는가 시고 얘기했는데

저도 이제 마지막 뭐라 그랬냐면

그런 날이 오지 않으면

어차피 너네는 고객을 모르는 거기 때문에

어차피 이거는 누군가는 해야 될 일이다

그게 너네가 되는 선제삼자가 되는 그게 까지 했어요

뭐 제가 생각하는 건 똑같아요 쓰지 말자

쓰지 말자

굉장히 뛰어난 읽고

옛날에 마이크로소프트에서 을

처음 얘기들을 들으면서 저거 말된다

근데 저걸 어떻게 쓰지

지금 좀 뭔가 이상한데 라고 하다가 이 되고

남자가 되는 순간 아

그래 이거는 정말 유용한 거다 라는 확신을 들었는데

이건 뭐라 할까

나중에 위험을

이제 책임져야 되는

위치에 있어서는 절대로 못하겠다는 거죠 에서

뭔가 크게 난리가 났서버가 다

따면 됐어 그럼 곧바로 옮겨야 되는데

그럴 래미리 함수를 다짜나와야 돼요

근데 그런 일은 십 년에 한번 올까 말까 한 일이거든요

그래서 그거에 대한 대비라고 했고

코드를 두겠다는 거 귀찮고

테스트를 또 어떻게 하지 이런 생각도 들고

그래서 그 상황에서 추상화가 되어야 된다

팩트저가 되어야 된다고 생각을 했는데

그 생각까지 하니까 지금 다 커가 되게 유명하잖아요

사실은 그럼 다 코보다 더 유명해질 수 있는 거는

그런 함수 레벨에서 할 수 있는 거

함수 내부에서 패키지를 만들어서

실제 다 커스함 처럼 돌릴 수 있게

어디에서든 어느 프레임에 들어가든

왜냐하면은 지금

단넷에서도 저희가 업로드하면 컨트롤 업로드하거든요

보통 컨트롤 업로드하면 그거를

이제 을 어보신 분들은 알겠지만 이 컨트롤로 만든

다음에 진짜 돌고 있는 거의 합하면

그때 컨트롤 인식해서 그게 컨트롤 살아와요

그때부터 쓸 수가 있어요

그러니까 결국은 그런 개념으로 만들었을 것 같아요

그럼 올린 걸 COM 판한 다음에 그냥 거기다

빈보도에 의하면 돌기 시작하게 왜냐면

결과적으로 우리가 무슨 뭐

함수 별로 이걸 한다고 하지만

걔네는 결국 가 되어 있어야 되잖아요

그러면 이제 우리가 안 보이는 데서

클라우드에서 돌리면서 그렇게 함수 하나를 던져왔고

돌리겠죠 이제는 그렇게 생각을 하면 다

코라는 개념도 그렇게 나올 수가 있다고 보거든요

결과적으로 아니면은 실제 이 서버에서 도는 게 뭐

단 내시든 아니면 뭐

잡아스프링이든 간에 그건 이제 호스트했어요

돌고 그 위에 닭을 하시뽑아서 닭과 비슷한 거

그런 거를 꼽아서 이 세 삼 둘 간에

난 이런 함수가 있어

라는 것만 연동해주고 이 함수는 를

호출할 수 있어 하는 것만 얘기할 수 있는

프로토콜을 만들면은 충분히 가능하다고 보거든요

그래서 그 기술이 나오면 그때부터는 누구나 떴 것 같고

그리고 제가 클라우드 을 때 굳이 다 커가 필요 없다

서비스를 쓰는 빈스토크 로스 든 상관이 없다

클라우드 있을 거라고 얘기를 했는데

함수로 들어가면은 그게 아닌 것 같아요

그때는 난다

나 이 솔직히 쓸 일이 없고

그 대신에 다 커같은 그런 거를 그냥 쓸 것 같아요

왜냐면 양쪽에서 돌게 되니까 그게 유일한 방법이니까

이제 그리고 제가 지금 생각하는 거는

이건 여기까지 얘기 끝이고 얘기하다가 생각이 난건데

빈스토크 나 서비스가 있잖아요

그 뒤에서 걔네가

이걸 어떻게 돌리는지는 저희가 솔직히 모르죠

근데 제 생각에는 다 커기술이 있기 때문에

걔네들내부적으론 다 컬점점 쓸 것 같아요

어차피 존재하는 기술이고

그리고 이제 뭐 지 내가 팩트지만

잘하면 어느 올려도 돌릴 수가 있는 거니까

원칙상 은 여태까지 의 시작은 분명히 자기네가 거기다

웹 서버를 돌리고

거기다가 애플 하나하나 디플로일을 했겠지만

아니면은 를 돌리고

거기다 가상머신 을 하나도 올려서 있겠죠

그래도 맞는 얘기했다

그렇게 했겠지만

이제 다 커라는 존재가 나오니까

그냥 두고 다크돌리면서 다 커이미지만

놓고 돌리는 방법으로

분명히 뒤에서 다 붙이고 있을 것 같아요

그래서 다 커는 뭐 클라우드 같은 거

이제 스스로 유지할 사람들이 가장 필요한 거고

현재로서는 하지만 이제 펑션이나 남자의 이나

그게 표준화가 되면 될수록

다코 같은 새로운 기술의 하나가 나올거고 뭐 이 되는

그리고 그게 아마

그때는 아마

이걸 어디서 서 써야만 되는 그런 게 될 것 같아요

그래서 제가 지금 보고 있는 클라우드의 약간의 미래죠

뭐 이미 누구나 예측하는 거 겠지만

남자에서 그리고 거기서 다

커의 미래는 이렇게 되지 않을까라고 생각을 했어요

그러니까 다 코가 되는 뭐

다른 컨테이너 시스템이 됐든 구르고

이제 비교해서 줄여줄 말이 많았지만

그냥 클라우드를 쓰실 분들이라면

그리고 두 번째 조건이 언어그 프레임

워크나 언어에서 팩트진시스템 이미 제대로 되어있고

그걸 그대로 할 수 있는 걸

이제 에서 지원을 해준다면 다 커는 쓸 이유가 없어요

클라우드 맛을 쓸 때는

성능상의 그런 혜택도 크게 없다고 보고한

적으로는 앞으로도 없을 것 같고

제 생각에는

그리고 만약에 이제 회사가 돈을 충분히 벌어서

이제 마이크로소프트 스펙을 쓸 수 있는

그런 훌륭한 회사라면 다 컸는데

너무 필요 없어요 자 필요가 없어요

근데 그런 회사 M을 하면은

또 이제 보다는 를 쓰는 게 좀 좋을 거예요

왜냐면 어차피 모든 게 마이크로소프트거면

토록 생성 관계가 되게 좋아요

공생관계 생산관계 상생상생인가 선생모르겠다

어쨌든 그 관계가 되게 좋아요

그렇기 때문에 다른 거를 고민할 필요가 없어요

그래서 뭐 오른쪽부터 한번 클릭플로이드 할 수도 있고

웹 서버에서 곧바로 디버깅 할 수도 있고

뭐 뭐 시스템

온라인을 쓴다는 그냥 거기서

디플로빌드디플레이까지 다 자동화할 수 있고

그런 장점들이 있어요

근데 이제 회사에서 어쩔 수 없이 이제 그런 게 아니라

다른 거를 써야 되는 경우

어쩔 수 없이 돈을 굉장히 아껴야만 할 수 있는 그런

그러니까 돈을 굉장히 아끼는 대신

개발자를 괴롭게 하는

그런 프로세스가 있는 회사들이라면 어쩔 수 없이 뭐

리눅스 기반 도 좀 가야되고

더 싼 것 차에서 써야 되겠고

문서화가 잘 안 돼 있으면

또 그것도 열심히 고민해도 파고 파고 뒤지고

이런 테스트도 찾아봐야 되고

그럴 수밖에 없는 상황이라면

이제 그 그보다는 제가 지금

말한 마이크로소프트스펙보다는

여러가지 다른 선택을 섞어 어야죠

공짜인 것들 뭐 젠킨스서버를 어가지고 빌드를 한다던가

그분 제가 조금 더 낮다고 보고해야 하지만

소통을 내야 되니까 어느 정도 이상은 뭐

그래서 그런 문제가 있어요

근데 정말 뭐라 그럴까

개발비용이 솔직그렇게 들지 않거든요

비용이라든가

이런 생각을 해보면 마소나 리눅스나 인건비따지면

그렇게 차이는 크지 않거든요

사실은 왜냐면 마소 올리로 가는 순간

인건비를 조금 적어져요

사실은 인건비쓸 일이

그만큼 굉장히 많은 툴이 만들어져 있어서

그래서 이제 그렇게 이제 뭐

당연히 비즈니스 사람들 입장에서 보면

얘네그냥 야근시키면 되는데

뭐 우리가 왜 이런 걸

돈을 써야 되라는 생각을 할 수도 있죠

어떻게 보면 그래서 그거는 뭐 잘 모르겠지만

지금 처한 상황이 그냥

그래도 뭐랄까 이 등 나는 회사에서 개발비로

어느 정도 돈을 쓸 수 있는 회사면

그게 편하고 왔을테니 아닌 경우에는 뭐 고생해야죠

그래도 자체 데이터센터를 돌리지 않는 이상

다 커는 아직은 필요 없는 것 같아요

그럼 그 정도 예 목표였습니다