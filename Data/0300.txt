안녕하세요, 포프입니다. 오랜만에 기술 얘기를 좀 하려고 해요. 생각해보니까 매주 목요일에 나가는 비디오는 제가 미리 찍어놓은 거라서, 무슨 내용이 있는지 사실 기억이 안 나지만요. 매주 월요일에 나가는 것은 참 알 수 없게 그냥 헛소리를 너무 많이 한 것 같아요. 그냥 간단하게 랩탑을 열고 얘기해서 그런 것 같기도 하고요.

오늘 할 얘기는 그 클라우드 Azure, AWS, Docker에 대해서 좀 얘기하려고 해요. 그러니까 결과적으로 제가 하고 싶은 말은, Azure Function 그리고 AWS의 lambda라는 것을 좀 말하고 싶은데요. 그거를 말하려면 Docker도 얘기해야 할 것 같아서 같이 얘기를 하는 거예요. 제가 Docker를 제대로 쓴 적도 없고, 대규모 프로젝트로 돌린 적도 없어요. 근데 얼마 전에 제가 웹 서비스를 만들어서 클라우드 쪽으로 돌리려고 했는데요. 이제 클라우드에서 과연 애플리케이션을 어떻게 Deploy 할 것인가? 그러니까 이제 Web-App 있잖아요? 마이크로 서비스든 웹에서 동작하는 서비스잖아요. 그걸 만들어서 이제 인스턴스를 만들고, Deploy를 해야 하고, 그리고 부하가 몰리면 자동으로 인스턴스 수를 조절(많아지게 한다거나 적어지게 한다거나)하는 등의 생각을 해야 하거든요? 예전에는 다들 거기다가 가상 머신을 만들던, 웹 서버를 만들든지 해서 수동으로 Deploy를 했잖아요? "인스턴스가 더 필요해" 그러면 인스턴스 추가하고 이런 식이었는데요. 요즘은 클라우드 쪽이라면 Google도 약간 비슷하고, 아마존 AWS, 그리고 Microsoft Azure 얘네들이 다 이제 자동화를 시켜주잖아요? 예를 들어서, 당신이 애플리케이션 패키지를 만들 텐데, .NET이라면 그게 Web Deploy 패키지겠고, Java 기반이라면 Java-archive (*.jar) 파일 이겠고, 아니면 zip파일일 수도 있어요. 그런 것들을 이용해서 서버에 업로드하면, 자동으로 부하가 몰릴 때 스케일링해요. 그러니까 부하가 몰리면 하나였던 instance를 두 개, 세 개, 네 개씩 올려요. 부하가 떨어지면 instance를 줄이도록 자동으로 관리해주는 방식들이 나왔어요. 그래서 AWS에서는 Elastic Beanstalk라고 하고요. Azure에서는 App Service라고 하는 거죠. 옛날에는 Azure 클라우드로 불렸던 것 같고 새로 이름이 App Service로 바뀌었어요. 그거(스케일링)를 했는데 그것의 작동 방식은 애플리케이션 기반이에요. 애플리케이션을 만들 때, 웹을 안 만드시는 분들이 보면 *.exe 파일 정도로 생각하시면 되겠죠. 이거를 "여러 개 늘려 준다." 에요. 그래서 이 애플리케이션이 하는 일이, 마이크로서비스 같은 경우에는 솔직히 "Function 하나가 App 하나다"라는 개념인데, 뭐 그런 경우라면 애플리케이션을 돌리는 데 여러 가지 과부하가 있을 수밖에 없잖아요? 덩치가 크고, exe 파일 만들고 이런저런 패키지에 넣어야 하니까요. 그래서 그 방식대로 Deploy하고 Scale을 하는데요, 대부분 이제 처음 시작할 때는 Web에서 이걸 어떻게 했냐? 클라우드 회사에서 이걸 어떻게 했냐는 거죠.

가상 머신이라는 것을 돌려요. 가상 머신에 이걸(이미지 파일) 놓고 여러 대를 복사해서 실행하기를 반복했던 것 같아요. 그러다가 클라우드 기반으로서의 가상 머신은 이제 굉장히 많이 썼죠. 왜냐하면 실제 서버는 되게 비싼 것, 천만 원부터 일억짜리 한 대 놓아요. 거기다가 가상 머신 100대를 띄워도 상관이 없죠. 가상 머신 100대를 띄운다고 해도, 이 100대가 뭐 전부 다 백 퍼센트 CPU를 쓰고 있지 않을 가능성이 높으니까요. 그거를 잘 조합을 하면 더 컴퓨터 하드웨어를 좀 더 효율적으로 이용할 수 있다는 거죠. 파워풀한 컴퓨터 하나에 가상 머신 100개 띄우면 실제 100개의 컴퓨터를 띄우는 효과랑 비슷하니까요. 성능 면에서 보면 다른 얘기지만, 사용성 면에서 보면 그렇다는 얘기입니다. 그렇게 시작이 그렇게 됐어요. 그러다가 결국 가상머신은 OS가 있고, 그 OS 위에 또 다른 OS를 돌리는 거거든요. 그럼으로써 과부하가 생기는 문제가 있어요. Docker가 (이제 정확히 대체 이름을 까먹었는데) Container라는 개념을 만들었어요. 이건 OS을 띄우는 게 아니라, 이 OS에서 동작하는 Docker 프로그램이 있어요. 그 닷컴 프로그램 안에서 다른 프로그램이 돌게 해요. Docker instance 여러 개가 있으면, 서로 인스턴스 간에는 원칙상 메모리 간섭도 없고, 아무것도 없는 거예요.

옛날엔 가상 머신을 띄웠지만, 이제는 Docker를 띄움으로써, 중간에 guest OS가 사라지니까 "훨씬 과부하가 적고, 속도도 빨라질 수 있다"며 Docker가 등장하면서 리눅스 기반에서도 매우 많은 인기를 끌었어요. 근데 Docker 성능을 솔직히 측정한 걸 보면, 대부분의 경우에 가상 머신을 띄우는 것보다 빠르지는 않아요. 그러니까 쪼끔 빨라요. 어떤 한 시나리오 중 하나가, 메모리 사용량 보면 별로 큰 메리트가 사실 없어요. 근데 그 Idle 상태일 때 (실제 인스턴스가 돌지 않을 때) 사용하는 메모리는 적어요. 그게 유일하게 Docker가 확실히 숫자상으로 보였던 차이인 것 같아요. 그 외에는 사실 그런 guest OS를 올려서 부담되는 것과 비교했을 때 성능 차이가 별로 없었어요. 그 이유는 제 생각에 아마 가상 머신을 계속 발전시키면서 Microsoft도 자신만의 가상 머신인 Hyper-V을 만들었어요. 그 외에 VMWare 같은 경우는 굉장히 오랫동안 있었고 최적화를 잘했죠.

가상 머신도 작동하는 방법이 두 가지가 있거든요? 실제 OS부터 시작해서 밑에 OS 함수를 호출하는 방법이 있는 반면에, 밑의 OS(Host-OS)가 Direct Access를 뚫어준다고 해야 할까요? 그래서 Guest-OS가 직접 곧바로 커널 함수를 호출할 수 있게 해주는 방식까지도 나왔어요. 제가 2년 전에 그 이름을 알았었는데 잊어버렸어요. Hypervisor라는 그런 게 있어요. 그래서 그런 방식이 있기 때문에, 여러 가지 최척화를 했고 여러 가지 빨라진 것도 사실이에요. 그리고 이제 CPU에서도 Virtualization 명령어들을 잘 지원하기 시작했죠.

제가 볼 때 가상 머신과 Docker 둘의 성능 차이는 크게 없는데, 이제 Docker를 제가 한참 사용할까 고민했던 이유가 뭐냐면요. Azure나 AWS에서도 자기만의 Beanstalk 라던지, 아까 말했던 App Service 이런 게 있음에도 불구하고, Docker를 지원하기 시작했어요. 정확히 말하자면 Docker Swarm을 지원하기 시작했다는 게 맞는 것 같아요. Docker Swarm이 뭐냐면, 아까 Docker가 OS 없이 안에 하나씩 애플리케이션 이미지를 집어넣는 거거든요? 그럼 이제 어느 OS에 이것을 Deploy해도 그대로 실행이 된다라는 게 목표죠. 뭐 아직은 반드시 100% 완벽히 돌지는 않아요. 리눅스에서는 잘 돌고 있는 것 같아요. Windows는 이제 Microsoft가 엄청나게 돈을 줘서 결국엔 또 Docker 지원을 함으로써 돌긴 도는, 아직 그게 100%라고 보기 어려워요. 그 상황에서 Docker Swarm은 뭐냐면, Docker 이미지가 있을 때 어떤 규칙에 따라 로드가 많이 몰리거나, CPU를 많이 쓸 때 여러 개 인스턴스를 뿌릴 수 있게 해주는 거죠. 그래서 결과적으로 아까 말했던 App Service나 Beanstalk처럼 동작이 비슷해요. 그런데 Azure나 AWS에서 이제 Docker Swarm을 점점 지원하는 이유는 Container Service? 그런 이름일 거예요. 그걸 한 이유는 이미 다른 회사에 Docker image가 있으면 그걸 가져다가 우리 쪽에 곧바로 실행을 시킬 수 있으면, 사람들이 많이 쓸 수 있지 않을까라는 개념에서 시작한 것 같아요. 그리고 장점은 양쪽 다 똑같은 걸 지원을 하면, 이 똑같은 이미지만 가지고 AWS나 Azure에 올리기만 하면 둘 다 도니까 편하다는 개념인 것 같은데요.

결국 Docker Swarm이 하는 일은 App Service나 Beanstalk와 똑같아요. 그래서 만약에 내가 한 개의 클라우드 서비스만 당장에 쓸 생각이라면 솔직히 Docker를 굳이 쓸 이유가 없다는 생각이 들어요. 저는 일단 안 쓰기로 했어요. 왜냐하면 제 애플리케이션이 .NET 기반이에요. .NET 기반이라면 이미 이건 웹 패키지를 줘요. 그리고 그 웹 패키지를 곧바로 Azure에 Deploy 하면, 같은 Microsoft Stack이기 때문에 그대로 돌아요. AWS에서도 그냥 Windows instance를 Beanstalk에 띄우고 거기다 Web Deploy 했던 zip 파일을 올리는 것만으로 그대로 돌아요. 사실은 Docker가 하려고 했던 그 정도의 패키지화는 이미 .NET 기반에서 끝난 것이기 때문에, 어차피 저한테 Docker의 이득이 없었어요. 다른 언어나 프레임워크는 어떻게 패키지가 나오는지는 잘 모르겠어요. 제가 Spring 같은 건 jar, war 파일이 나오는 건 알고 있어요. 그래서 이것도 그냥 AWS나 Azure도 똑같이 올라갈 수 있는 것 같고요. 어떤 Web Framework도 그런 패키징이 이미 돼 있는 거면은 굳이 Docker 의미는 크게 없다고 지금 보이거든요? 단, 예외는 Docker가 필요한 경우는 나 자체의 데이터센터를 돌릴 때인 것 같아요. 그러니까 내가 클라우드 서버를 안 돌리고, 내가 서버를 실제로 가지고 있고 거기에 가상 머신 여러 개를 띄워서 뭘 돌리려고 할 때인 거죠. 사실 가상 머신 이렇게 하나씩 Deploy 하는 게 스크립트 짜야 하는 등 좀 되게 귀찮은 일이에요. 그런데 Docker를 쓰면 알아서 이게 올라가진다는 거죠. 그래서 AWS/Azure가 자동으로 해주는 것을 내 데이터 센터에서 직접 하고 싶다면, Docker가 굉장히 유용할 것 같긴 해요. 근데 저희가 아직 그 단계는 아니에요. 그리고 제 생각에는 요즘에 자기만의 데이터 센터를 운영하려고 하는 초기 스타트업이 얼마나 있을 것이며, 굉장히 큰 기회가 아닐까 싶어요. 그리고 큰 기회에 대한 얘길 하면 Docker 같은 걸 해주는 게 일단 개발자의 몫도 아니지 않을까라는 생각이 점점 들고 있는 거죠. 사실은 그래서 Docker든 뭐든 간에 패키징 이슈이기 때문에 제가 나중에 만약에 Docker를 쓰려고 한다고 하더라도, 제 빌드 스텝을 Docker 이미지만 구우면 되는 것 같아요. 그래서 zip 파일로 웹 패키지 굽느냐, Docker 이미지로 굽느냐는 별 큰 차이가 아니기 때문에 일단은 그렇게 하자고 생각했어요. 중간 요약을 하면 어차피 Azure/AWS 쓸 거라면, 그리고 지금 쓰고 있는 프레임워크가 패키징을 그나마 해주는 정신 차린 것이라면, 굳이 Docker를 쓸 이유는 없다는 게 제 생각이에요.

여기서 재밌는 게 나와요. 아까 제가 처음 얘기를 시작했을 때 결국에는 App Service나, Beanstalk나 Application 패키지를 올린다고 했잖아요? 그런데 App Service를 만들고 난 뒤에 (아마 AWS가 먼저 시작했겠죠?) AWS에서 Lambda라는 걸 만들어요. 굉장히 이름을 잘못 지었다고 생각했는데, AWS가 굉장히 이해 안 되게 이름을 짓는 것은 유명하죠. E2C(Elastic Compute Cloud) 서버라든가 뭐 이상한 걸 많이 쓰잖아요? 결과적으로는 뭐냐면, 여태까지 애플리케이션 하나를 가지고 여러 개의 인스턴스로 늘렸잖아요? AWS Lambda는 함수 하나를 (Input/Output만 있어도 함수를 만들 수 있죠) 만들어두고 그걸 실행시키는 거예요. 그러다가 이 함수가 여러 번 호출된다면 이 함수를 여러 개의 인스턴스로 뽑겠다는 거예요. 그래서 인스턴스가 많으니까 그만큼 처리를 한 번에 많이 할 수 있게 하죠. 그래서 뭐 Input이라면 다른 함수가 호출하는 그런 게 올 수도 있고, HTTP 콜 URL Call 호출하는 게 들어올 수도 있고, 시간 따라 호출되는 Trigger 함수일 수도 있죠. Trigger Input/Output은 다양할 수 있어요. Output은 다른 함수를 호출하는 걸 수도 있고, 데이터를 쓰는 걸 수도 있고, DB도 쓰는 걸 수도 있죠. 그래서 그런 함수 단위로 인스턴스를 늘리는 것, 스케일하는 단위를 바꾸고자 하는 게 AWS Lambda에요. 똑같은 개념으로 Azure에서도 Azure Function이란 게 나왔어요. 똑같은 개념이에요. 근데 이제 Azure는 그 전에 WebJobs, Logic Apps 이런 것들 만들다가 결국 마지막에는 Function 까지 내려왔죠. Azure Function은 돌긴 하고 함수 호출 횟수마다 돈을 받아요. 그러니까 예전 같으면 애플리케이션 돌고 있으면 인스턴스 수만큼 돈을 받았고, 애플리케이션에 많은 기능을 넣어야지만 그 인스턴스 하나 띄우는 그런 의미가 좀 더 있었죠. 그때 프로그래머가 이런 애플리케이션을 어떤 단위로 끊어야 할지 고민했다면, 요즘은 Azure Function나 AWS Lambda는 함수 단위로 돌기 때문에, 함수를 하나씩 만들어서 그냥 다 올려놓고 서로 함수가 어떻게 호출되면 되는지는 알아서 클라우드 Backend 쪽에서 해 준다는 얘기죠. 그러면은 이 함수의 부하가 많이 걸리면 이 함수에 대해서만 인스턴스가 여러 개가 늘어나니까, 이제 어디에도 부하가 걸리는 부분은 자유롭게, 더 유연하게 해결할 수 있다는 개념이고 아이디어는 정말 좋아요. 그리고 요즘 Microsoft 클라우드 쪽에 있는 사람들을 만나면 Azure Function 쓰라고 굉장히 열심히 추천해요. 그 이유가 아마 함수 호출 당 돈을 받기 때문에 "가랑비에 옷 젖는 줄 모른다."라고 하나요? 그것 때문에 돈을 많이 번다고 버는 걸 수도 있죠. 아니면 제가 엔지니어 입장으로 볼 때, 함수 호출 사이에 걸리는 딜레이가 어떻게 되는지는 논외로 하더라도, Scalability 개념으로 볼 때는 이게 정말 올바르게 가야 할 방법이긴 해요.

저는 굉장히 좋은 거라 생각하지만, 저는 아직 안 써요. 쓸 생각도 없고요. 그 이유가 뭐냐면, AWS Lambda나 Azure Function이나 자체 SDK/API를 써서 돌려요. 그리고 Deploy에 있는 과정도 여태까지 패키지를 만들어 쉽게 올릴 수 있는 것도 아니고, 내 로컬에서 테스트할 방법도 좀 적어요. 함수를 클라우드에 올리고 테스트하는 게 거의 현재 유일한 방법인 것처럼 돼 있어요. 그렇기 때문에 내가 테스트 환경을 구축하기 되게 애매하고, 그리고 일단 만약에 제가 Azure에서 Function을 돌렸다면, 어느 순간 Azure가 마음에 안 들어서 AWS로 옮기려고 할 때 이 Function을 그대로 가져다가 업로드를 할 방법이 없어요. 일단 지원되는 언어도 좀 약간 다른 것도 있죠. AWS는 아예 .NET 쪽 지원을 안 하고 있고, Azure는 제가 볼 때는 일단 .NET 지원하고, Java를 지원했던 걸로 기억해요. 몇몇 언어는 지원하는데, Azure/AWS 두 개가 지원하는 언어가 같지도 않죠. 그리고 개념 자체가 이미 존재하는 개념이 아니었거든요? OS에서 이렇게 돌린다, 이 앱을 돌린다는 굉장히 명백한 것이고, 어떻게 클라우드에 돌리냐 문제였는데, 함수 호출 단위는 공통으로 아이디어를 서로 공유한 게 아니라, Azure/AWS 서로 자기 나름대로 함수 레벨에서 Scalability를 할 수 있다는 식이죠. 함수를 만들었는데 이 함수가 호출되기 위해서는 그 뒤에 또 다른 Infrastructure가 필요하거든요? 그러니까 만약에 MVC Framework를 쓰시는 분들은 Controller의 개념으로 생각하면 돼요. 어느 프레임워크든 컨트롤러의 개념은 있어요. 그렇죠? Java Spring에도 있고, .NET에도 있어요. 근데 결국에는 함수고, 그 함수를 어떻게 호출하느냐는 그 프레임워크가 결정할 일이거든요. 그 프레임워크가 공통되지 않으면, 이 Java Spring에서 도는 함수를 이제 ASP.NET쪽 에 바인딩 한다 하더라도, 그리고 심지어 언어가 같을지라도, 그거를 공통으로 호출할 수 있는 그런 약속이 없는 거예요.

그래서 자기 나름대로 API를 만들어버린 거죠. 제가 Azure에서 모든 앱을 Function으로 만들어놨다면, 다시 짜지 않는 이상 AWS로 옮길 방법이 없어요. AWS Lambda에서도, Azure Function에서도 똑같은 문제가 있어요. 그래서 현재 저는 정말 간단한 거 아니면 쓰지 말라고 하고 싶어요. 예전에 제가 트위터로 그쪽 사람들과 얘기를 했어요. "Azure Function 정말 좋은데, 나 이거 절대 못 쓴다. 못 쓰는 이유가 서로 호환이 안 되기 때문이다." 그러니까 어떤 사람이 (엔지니어는 아니었고 Customer Support 혹은 Sales Person인 듯한 사람) 저한테 물었어요. "어떤 조건을 쓰겠냐?" 포프: "내가 쓸 수 있는 조건은 Azure에서 돌던 Function을 가져가서 AWS에서 쓸 수 있으면 된다. 이거를 Docker라고 생각해라. Docker가 현재 애플리케이션을 합쳐서 패키지로 만든 거라면, Function 하나를 Wrap 해서 패키지로 만들어서 Azure/AWS 양쪽이 쓸 수 있는 그런 기술이 나오면, 그때부터 그것은 누구나 쓸 수 있는 기술이 된다.", "어차피 이걸 누군가가 driven 하려면 Docker 같은 것이 나오거나, 아니면 클라우드 서비스하고 있는 우리 둘 중의 한 명이 해야되지 않겠냐? 그럼 나는 Amazon보다는 Microsoft가 훨씬 더 스탠더드를 잘 이끌어 갈 수 있다고 본다"라고 얘기했어요. 실제 Microsoft가 굉장히 많이 Standard를 이끌어냈기 때문이죠. 근데 그쪽에서는 그런 일은 오지 않는다는 식으로 얘기했는데, 저도 이제 마지막에 "그런 날이 오지 않으면, 어차피 너네는 고객을 모르는 것이기 때문에 이건 누군가는 해야 할 일이다. 그게 너네가 되던, AWS가 되던, 제삼자가 되든지 간에." 그 얘기까지 했어요. 제가 생각하는 건 아직도 똑같아요. AWS/Azure 쓰지 마세요. 굉장히 뛰어난 컨셉이고 옛날에 마이크로소프트에서 LogicApps를 처음 들으면서 "그거 말 된다. 근데 저걸 어떻게 쓰지? 아직은 좀 뭔가 이상한데" 했죠. 그런데 Function이 되고 Lambda가 되는 순간, "그래, 이거는 정말 유용한 거다"라는 확신은 들었는데 나중에 위험을 책임져야 하는 위치에 있어서는 절대로 못 하겠다는 거죠. Azure에서 크게 난리가 나서 Azure 서버가 다 다운됐어. 그러면 곧바로 AWS로 옮겨야 하는데 미리 함수를 다 짜놔야 해요. 근데 그런 일은 십 년에 한 번 올까 말까 한 일이거든요? 그래서 그거에 대해 대비를 하기 위해서 코드를 2번 짜는 것도 귀찮고, 테스트를 또 어떻게 하나 이런 생각도 들어요. 그래서 그 상황에서 추상화가 돼야 한다. 패키지화가 돼야 한다고 생각했는데, 그 생각까지 하니까 지금 Docker가 되게 유명하잖아요? 사실은 그럼 Docker보다 더 유명해질 수 있는 것은 함수 레벨에서 Abstraction 할 수 있는 것, 함수 레벨에서 패키지를 만들어서 실제 Docker Swarm처럼 어디에서든, 어느 프레임워크에서든 돌릴 수 있는 것인 거죠. 왜냐하면 지금 Azure Function에서도 저희가 Function을 업로드하면 보통 컨트롤을 업로드하거든요? ASP.NET을 써보신 분들은 알겠지만, 보통 컨트롤을 업로드할 때 이 컨트롤 하나를 DLL로 만든 다음에 진짜 돌고 ASP.NET 웹 서버에 DLL 파일을 드롭하면 그때 컨트롤로 인식해서 그게 컨트롤로 살아나요. 그때부터 쓸 수가 있어요. 결국은 그런 개념으로 만들었을 것 같아요. 그 올린 걸 DLL로 컴파일한 다음에, 빈 Folder에 드롭하면 돌기 시작하도록요. 왜냐하면 결과적으로 우리가 함수 레벨로 동작한다고 하지만, 걔네는 결국 웹 서버가 뒤에 있어야 하잖아요. 우리가 안 보이는 데서 클라우드에서 함수 하나를 DLL로 던져서 돌리겠죠. 그렇게 생각하면 결과적으로 Docker라는 개념도 그렇게 나올 수가 있다고 보거든요? 아니면은 실제 네 서버에서 도는 게 ASP.NET 이던, Java Spring이던 Host-OS로 돌고 그 위에 Docker와 비슷한 것을 꼽는거죠. 그런 것들을 꼽아서, 이 둘 간에 이런 함수를 연동하고, 이 함수는 HTTP URL로 호출할 수 있다고 얘기할 수 있는 프로토콜을 만들면 충분히 가능하다고 보거든요? 그래서 그 기술이 나오면 그 때부터는 누구나 다 쓸 것 같아요. 그리고 제가 클라우드 쓸 때 굳이 Docker가 필요 없다, App Service든 Beanstalk든 상관이 없다고 얘기했는데 함수 레벨로 들어가면은 그게 아닌 것 같아요. 그때는 AWS Lambda나 Azure Function이 솔직히 쓸 일이 없고 대신 Docker 같은 것을 그냥 쓸 것 같아요. 왜냐하면 양쪽에서 도는 유일한 방법이니까요.

이건 여기까지 얘기 끝입니다. 얘기하다가 갑자기 생각이 난 건데, Beanstalk나, App Service 있잖아요? 그 뒤에서 걔네가 이걸 어떻게 돌리는지는 저희가 솔직히 모르죠. 근데 제 생각에는 Docker 기술이 있기 때문에 걔네들 내부적으로는 다 Docker를 점점 쓸 것 같아요. 어차피 존재하는 기술이고, 그리고 이제 자기들이 패키지만 잘하면 원칙상 어느 OS에 올려도 돌릴 수가 있는 거니까요. 여태까지 Azure/AWS의 시작은 분명히 자기네가 거기다 웹 서버를 돌리고, 거기다가 Application 하나하나 Deploy 했거나, 아니면은 App Server를 돌리고 거기다 가상 머신을 하나 올려서 앱을 Deploy 했겠죠. 후자가 더 맞는 얘기겠네요. 그렇게 했겠지만, 이제 Docker라는 존재가 나오니까 그냥 OS 하나 두고 Docker 돌리면서 Docker 이미지만 놓고 돌리는 방법으로 분명히 뒤에서 다 고치고 있을 것 같아요. 그래서 Docker는 말 그대로 클라우드 같은 것, 현재로서는 스스로 유지할 사람들이 가장 필요한 것이고요. 하지만 이제 Azure Function이나 AWS Lambda 그게 표준화가 되면 될수록, Docker 같은 새로운 기술의 하나가 나올 거 같아요. 그리고 그때는 아마 이걸 어디서는 반드시 써야만 하는 그런 존재가 될 것 같아요. 제가 지금 보고 있는 클라우드의 미래죠. 뭐 이미 누구나 Azure Function/AWS Lambda에서 예측하는 것이겠지만요. 거기서 Docker의 미래는 이렇게 되지 않을까라고 생각했어요. 그러니까 그게 Docker가 되던, 다른 컨테이너 시스템이 되던지요.

비디오에서 주절주절 말이 많았지만, 그냥 클라우드를 쓰실 분들이라면 2번째 조건이 이겁니다. 클라우드만 쓴다고 했을 때, 언어나 프레임워크에서 패키징 시스템이 제대로 돼있고, 그걸 그대로 Deploy 할 수 있는 걸 Azure/AWS에서 지원해준다면 Docker는 쓸 이유가 없어요. 현재로는 성능상의 혜택도 크게 없다고 보고요. 제 생각에는 앞으로도 없을 것 같아요. 만약에 회사가 돈을 충분히 벌어서 이제 Microsoft Stack을 쓸 수 있는 그런 훌륭한 회사라면, Docker는 더더욱 필요 없어요. 근데 그런 회사라면 또 이제 AWS보다는 Azure를 쓰는 게 좀 좋을 거예요. 왜냐면 어차피 모든 게 Microsoft라면 공생관계가 좋아요. 그렇기 때문에 다른 걸 고민할 필요가 없어요. 오른쪽 클릭부터 한번 클릭해서 Deploy 할 수도 있고, 웹 서버에서 곧바로 디버깅할 수도 있고, Source Control System을 Visual Studio Online을 쓴다면 거기서 바로 Build - Deploy까지 다 자동화할 수 있고 등의 장점들이 있어요.

근데 회사에서 어쩔 수 없이 다른 거를 써야 되는 경우, 어쩔 수 없이 돈을 굉장히 아끼는 대신 개발자를 괴롭게 하는 그런 프로세스가 있는 회사들이라면 어쩔 수 없이 리눅스 기반도 좀 가야 하고, 더 싼 것 찾아서 AWS 써야 하겠고, 문서화가 잘 안 돼 있으면 그것도 열심히 고민해서 파고 뒤지고... 이런 테스트도 찾아봐야 하죠. 그럴 수밖에 없는 상황이라면 이제 그 그보다는 제가 지금 말한 Microsoft Stack 보다는 여러 가지 다른 Stack을 섞어 써야죠. 공짜인 것들 중 Jenkins 서버를 가지고 빌드하는 등 (물론 TeamCity가 조금 더 낫다고 보지만, 어느 정도 이상은 TeamCity도 돈을 내야 되니까요) 그런 문제가 있어요.

근데 정말 개발비용이 솔직히 그렇게 크게 들지 않거든요? 서버 비용 생각해보면 Microsoft나 Linux나 인건비 따지면 그렇게 차이는 크지 않거든요? 실은 왜냐하면 Microsoft ONLY로 가는 순간, 사실 인건비는 조금 적어져요. 그만큼 굉장히 많은 툴 셋이 만들어져 있거든요. 물론 당연히 비즈니스 사람들 입장에서 보면 "얘네 그냥 야근시키면 되는데.. 우리가 왜 이런 많은 돈을 써야 해"라는 생각을 할 수도 있죠. 그거는 뭐 잘 모르겠지만, 지금 처한 상황이 그냥 이득 나는 회사에서 개발비로 어느 정도 돈을 쓸 수 있는 회사라면 Microsoft Stack이 편하고, 아닌 경우에는 고생해야죠. 그래도 자체 Data Center를 돌리지 않는 이상 Docker는 아직은 필요 없는 것 같아요. 포프였습니다.
