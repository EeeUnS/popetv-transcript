얜 에서 뽑습니다 음 제가 예전에 1 30 10불 10일이 나올때
10불 11 비디오를 게 많이 만들었어요 1 3 4 5 6 개
왜냐하면 c 플 뿔은 음 굉장히 오랫동안 정책의 있다가 드디어 좀
쓸만한게 씹어도 1회부터 나오기 시작을 했거든요
네 이제 10불 커뮤니티가 그 다음에 무슨 약을 바라는지 모르겠지만 3년
마다 새로운 표준을 내겠다고 이제 막 뭐 뭘까
열심히 하고 있죠 이제 제가 시프 블 표준에 대한 불만 이라는 비디오에서
말했듯이
그게 좀 뭐랄까 음
[음악]
효율적이라 그래도 어렵고 이제 방에 방향이 1 맞는 거 있잖아요
뭐라 그러지 그 모순되지 않고 뒤쪽 이렇게 판 방향으로 이제 누가 누구
하나가 비전 딱 잡고 끌고 가는 그 당연히 아니기 때문에 이제 요즘
나오는 새로운 언어 들에 비해 너무 중구난방 적으로 이상한 스탠다드 가
나오고 그 스탠다드 가 정말 10불 불의 6
2 여전히 10불 불을 쓰는 인가 했어요
그것이 북부는 절대 잡아 한테 밀리지 않는 이유도 있고 그 이유는 이제
저력 둘이 사용할 곳이 다르기 때문이죠 그래서 시 #2 시프 볼밀 지도
못할 거고
싶을 뿌리 아직도 쓰이는 이유가 있고 그것을 많이 쓰는 어깨가 있는데
그거를 무시한 채 너무 학문적으로 이제 계속 이상하게 끌고 가다 보니까
c 풀풀 의 장점 우리가 아직도 쓰고 있는 이유가 되는 장점을 무시하는
표정이 너무 많이 나오거든요
그 실제 10불 표정이 나올 때마다 제 어깨 에서는 아 여기서 쓰지
말아야 될 게 뭐냐 그 쓰지 말아야할 80 90% 에 것을 정리하는 데
굉장히 많은 시간을 이제 소비를 해요 그래서 코딩 트레드 해서 이거
쓰지마라 적어 쓰지마라 적어 쓰지 마라 가 매번 드러나고 있어
그럼에도 불구하고 몇가지 좋은게 있죠 그래서 그 이후에 솔직히 c 플 플
관련 비디오를 만들 일이 그렇게 많지가 않았던게
10분 11 에서 14 는 굉장히 작은 업데이트 였어요
그냥 좀 잘못되고 고치는 정도였고 17일 큰 업데이트 긴 한데 10불
실보다 10불 17 업데이트 그렇게 크지도 않아요 사실 그리고 그 막
들어온 것 중에 제가 가끔 트위터로 막 어 이거 절대 쓰지 말라고 무슨
짓이냐고 이런 정도까지 나오는게 10뿌리 있네요 이제
그럼에도 불구하고 제가 10불 집 뜰에서 나왔던거 10일부터 나왔던 거긴
하지만 쉽지 에서 좀더 쉼
뭐랄까 살 용의 하고 온거 정말 괜찮은 게 나왔던 게 이제 액트 리미트
쪽이에요
애트리뷰트 가 뭐냐 뭐 시사 프로그래머 해 심하신 분들은 그런거 많이
했을 거에요
뭐
자바 스프링 쪽 하신 분들도 그렇고 클래스 명이나 함수명 의해
이렇게 네모난 가까 로 있잖아요 그거 놓고 말겠어 오는거 있잖아요 이게
무슨 컨트롤러 니 뭐 라우트 가 어떻게 되니 그런 것들이 제트 리 bit
라고 해요
뭐 제이썬 단내 써보신 분 들에 게 뭐 제이썬 프로퍼티 라던가 프로퍼티
네임이 뭐 라던가 실제 코드는 아니지만 이렇게 7 비트를 다름으로 인해서
다음으로 인해서 음 다른 코드가 이거를 이제 뭐 처리하게 도움이 되는 것
뭐 xml deli 저라면 이거 이름을 몰래 해야되는 정해주고
그런 코드 로직이 아닌 이렇게 디스크립터 같은게 에 주의 부트 거든요
흐르 내 츄 비트가 사실은 10부 레드 있긴 있었어요 근데 표준이 아니라
각 컴파일러 마다 있었죠 모이스트 팩트 이런 것도 있었고
아 근데 이제 크게 드디어 이제 표준으로 넘어오기 시작하는 거에요
그러면서 표준으로 넘어올 때 쯤이 테가 괜찮은 게 있고
아까도 말했지만 이고 쓰는 뭐라는 거지 그 오히려 더 큰 문제가 생길
수도 있는 게 아닌가 라는 것도 있고요 그리고 이제 마이크로소프트 쪽
코드를 옛날부터 좀 많이 보셨던 분들
음 그냥 예제가 아니라 실제 거기 마이크로소프트 회사 안에서 돌리는
코드를
보신 분들은 이제 뭐 즉 이름이 정확히 기억이 안나는데 아마 c 퀴어
her mdg 라는게 있었을 거에요 same 하고
것도 되게 비슷한 개념 이었어요 그래서 매개 변수 하나가 들어올 때 이
매개변수가 컨 스트링 야 이 매개변수가 아웃풋 로 바뀌는 값인 야 이
매개변수가 뭐냐
뭐 이 매개변수의 이제 음악가 디스트릭트 처럼 메모리 가서 겹친 양 겹친
아 이런 것들을 되게 트리뷰트 10시 박아두고
컴파일러 할 때 그거를 이제 판단해 주는 거죠 e 코드 함수에서 짱 걸
봤는데 이해 7 밑에도 말한 거에
아퍼 뭐야 부합하지 아니까 워닝 을 준다거나 이런 식으로만 있었고
아 뭐 즉 배치 비트 하나의 이제 제가 외출 비트의 목적을 2개를 보는데
그 하나가 컴파일러 워닝 이에요
실제 시프 폰을 코드를 잘못 짜면 은 온갖 이상한 일이 일어날 수 있는게
데드 위험한 언어 기도 하거든요
그만큼 되게 주의해야 되는 언어 고 그래서 그런 잡다한 애트리뷰트를 달
므로 인해서 컴파일러가 체크를 해 줘서 야 이건 문제가 있어 봐라 라고
해 줄 수 있는 거 그게 1까지의 목적이고
두 번째 목적은 실제 컴파일러가 최적화를 할 때 애트리뷰트를 봐서 아
이거는 이렇게 추적하고 된다고 프로그래머가 말을 했어
이 함수는 절대 메모리 가서 오버랩 되는 경우가 없다고 했으니까
이걸 이렇게 최적화를 해도 상관이 없다 라고 가정을 하고 생각할 해도
코드를 만드는 데 문제는 이 함수를 호출할 때 라이브러리 왜 문화 이럴
때 그 메모리아 겹치고 출항 은 학 하거나 그러면 실제 코드가 어떻게
될지는 몰라요 뻑 이 날 수도 있고 굉장히 이상하게 뻑 이 날 수도
있어요
네 그런 문제가 있죠 그래서 애초에 밑에 목적이 2개가 있지만 저는
기본적으로 최적화를 위한 외출 비트는 최대한 피하자 주요 잘 못 잤을
경우에 그 아무 생각없이 탔다가
그게 막 터져 코드에서 아우 문제 가운데 터져 그래도 이제 점점
고민하다가 디버깅 가 되게 어려워지는 경우 것 은 요거 어셈블리 수준의
코드를 보고 집어 행하지 않는다 되기 어려워 지는 코드 중에 안하게 되요
그래서 그런 부분에 있어서는 좀
그 뭐랄까 프리머 치어 이제 opi 션 얘기 하잖아요 너무 섣부른 최적화
그런 개념에서 하는 건 되게 문제가 있고 정말 이걸 어떻게 만들어서
마지막 1% 의 성능을 뽑아 내야 될 때 라면은 가능한 얘기지만
그런 경우는 생각보다 아주 많지 않기 때문에
에티 비트는 그냥 프로그래머가 쓰는 그런 실수를 막는 용도로 쓰는게 좋다
라는 개념으로
잡고 얘기를 시작해야 될 것 같아요 와
굉장히 되게 길고 서문이 엄청 길었어요 근데 결과적으로 제가 이제
말하고 싶은 이제 opm ii 내킬 비싼 5개 정도가 있어요 사실은 그
중에 하나는 절대 쓰지 마세요 라고 하고 싶은데 집에 중에 하나고
하나는 이제 제일 간단하게 보수는 ed 프리 kt 에요
그 뒤 프리 k 타면 은 이 함수는 더 이상 사용하지 마세요
그 대신 다른 함수를 사용하세요 이런 버전이 있습니다 라는 메세지가
컴파일 도중에 나오는 거죠
자바 일도 있고 시샵 에도 있는 거죠 그게 생겼어요 그래서 이제
어 t 에서 음 애트리뷰트를 할 때는 이 각과 료가 두 쌍이 들어가요
가까 로 두 쌍을 놓고 거 tv kt 도 놓고 뭐 뭐죠 이거 둥그런 괄호
열고 거기가 그 이유를 적어 두면 은 컴파일 도중에 원인을 보여줘요 뭐
이래서
뭐 겟 뭐 매트릭스 함수가 있다 그러면 그것은 애플이 케이스를 닫으면 은
아 매트릭스 함수는 이제 더이상 이제 뭐 은퇴할 함 쓰니까 이거 대신에
개 매트리스 초를 쓰세요 라던가 이런식으로 문 모 에러메세지 워닝 메스를
눌 수 있다는 거죠 그래서 그게 있고 두번째는 제가 이게 솔직히 제일
좋아하는 거에요
뽈 들어 라는게 나왔어요 니꼴 쓰려면 far 왜 들어 라면은 이제 뭐
통과해서 흘러내리 다음 이거든요
이게 왜 중요하냐 하면 싶을 프 2 그렇고 시샵 도 그렇고 이제 굉장히
예전 언어들이 스위치 케이스 문어 쓸 때 케이스 5 0 1 2 3의
있으면 케이스 영이 끝나고 브레이크를 하지 않으면 그 다음에 있는 케이스
원 코드까지 실행이 됐거든요
근데 이게 어떤 사람이 실수 로 브레이크 안 넣어 버리면 은
코드가 확실히 되는데 잡지를 못해서 생각보다 생각보다 이렇게 쉽게 찾을
수 있는 버그가 아니에요
그래서 이제 러스트 유에 같은 이렇게 새로운 어들은
그런 경우 아예 컴파일러 에러 를 주고 미 가 정말 케이스 운영에서
케이스 원으로
같이 실행이 되게 하고 싶으면 볼수 라는 명령으로 넣게 돼 있어요
그래서 이제 그런 이제 비슷한 게 여러 가지 언어에 나오고 있고 그래서
제가 싶을 풀에서 제가 썼던 코딩 스탠다드 해도 언제나 그랬어요
니가 케이스 0에서 케이스 은 넘어갈 때는 그 당시에 츄 비트가 지원이
안 됐으니까 커멘트 를 달고 볼수 라고 써라
왜냐면 그러면 코드 있다가 아내가 일부러 케이스 영어 페이스 원을
실행되게 하는 걸 보여주는 거니까 가독성을 위해 그랬죠
근데 이제는 그게 배치 빛으로 나온 거에요 그래서 그렇게 볼수록 할 때
집이 줄 직접적으로 넣어 줘야 되고 안 넣어줘도 크게 문제는 현재 없을것
같아요 왜 코드 컴퓨터 엘리트가 있으니까
근데 분명히 그걸 나중에 원인으로 키거나 에라 로 만드는 법이 있을 것
같다고 생각을 해요
볼수 를 반드시 안 넣어주면 은 이제 뭐니 나게 라간 하게
그래서 이제 그게 이제 전 택에 좋다고 보는 거고 그 두번째 거였고
세번째가
매입이 연예 에서 때요
지금 ab 어니스트 가 뭐냐면 그 어떤 변수를 선언할 때
선언해 놓고 함수에서 안 쓸 때가 있어요 그러면 이제 컴파일 원 이렇게
않으면 사용하지 않은 변수에 라고 원인을 주거든요
근데 당연히 이런 것은 지워야 되는데
디버그 날 밀 있으나 비버 그냥 밀리 쓰냐
이 둘중에 어떤걸 가는거 에 따라 써 틀을 쓰고 안 쓰는 경우가 있잖아요
그래서 없어 탭의 박아놓은 변수는 디버그 에서는 사용되지만 릴리스에서
사라지기 때문에 겜 원인이 되어 윌리스 에서 그래서 그런 경우에 그
변수를 아 메이비 언니 우스 드루 이제 선언을 해주면 은 컴파일러 원인이
사라진 다는 거죠 그래서 제가 옛날부터 했던 얘기 있잖아요 컴파일러 원인
1 만들 때마다 세 대씩 맞는다고
아직도 그 마음은 변하지 않았어요 그래서 이제 이런 분위기의 언제나
헷갈리는 거 없어 트 같은것을 떼지 않 쓰는 변수를 어떻게 할까 이 고민
이었죠
그래서 치 이제는 옛날에 매 컬로 만들어서 해결하는 법 이 있었지만
이제는 이것을 할 수 있다는 거죠 왜냐하면 이제 맵이 얹었습니다 선언해
주면 문제가 없으니까 그래서 이거는
유용하게 쓸 수 있을 것 같은데 단지 이거를 디버그 버전에서도 만원이
나는데 그걸 없애기 위한 쓴다 그러면 그거는
맞아야 줘 왜냐하면 은
원인이 나서 안 보고 넘어가는 건 세대의 맞지만 원인이 나는걸 어원이
나는거 알고 문제도 알어
근데 아이 대충 고쳐야 죽으려고 그거를 꼽아서 거지 나가 자체가 내가
알고 저도 나쁜 짓을 한 거잖아요
그건 5대 지금 맞아야 될 것 같아요 그래서 크게 있고
제 걸 내 5개를 말하려고 했는데 하나는 얘기 안하는게 좋을것 같아요
굳이 말할 이유가 없을 거 같고
음 마지막 꼬 이제 제가 절대 쓰면 안될것 같다고 얘기한 거 이게 재미
있는게 뭐냐면
놀이터 니라는 애 취 m 가 있어요
이게 뭐냐면 뭐 함수를 예로 드릴께요 이 함수에서 어떤 바닥 값도
반환하지 않는다
이런 의미의 노 리턴 이에요 그럼 뭐 보이드 형 함수 이런 비슷한
개념이죠
그런데 지금 하는 얘기 또 뭐냐면
놀이 편인데 이걸 놀이터 다 나갔어요 아 그래 좋아
뭐 이럴때 비처럼 원인이 나올 수도 있겠지 뭐 이런 생각을 하잖아요 근데
스펙에 보면 은 노 리턴 으로 달려 있는 함수가
리턴 값을 반환하며 는 어떤 일이 일어나야 되는지 스펙에서 정해 놓고
있지가 않아요
그래서 아까 제가 앞에서 말했던 메모리가 겹치지 않는다고 선언했는데
메모리가 겹치는 순간 어떤 일이 발생한 야
이상한 뭐 이렇게 뭐라고 개개 이상하네 라가 버그가 발생할 수 있다고
했잖아요
그런 개념인 것 같아요 리턴이 없다고 명시를 했는데 불구하고
및 채널에 그렇고 리턴값을 받았고 쓰고 있어 어디선가
크게 컴파일이 되긴 되잖아요 컴파일이 됐는데 실행 도중에 어떤 일이
일어날지는 스프레드 정해 놓지 않기 때문에 이 컴파일러에서 뻑 이 날
수도 있고 져 컴파일러에서 안 날 수도 있고 아니면 어떤 이상한 조건이
날 수도 있다는 얘기에요
그러면 이거는 놀이터 늘 박음 로 해서 얻는 이득보다
어쩌다 한번 실수를 하면 은
잃는 그니까 손해가 더 큰 것 같아요 그래서 이거는 왜 이렇게 났을까
들의 의심이 되고
차라리 컴파일러의 라 로 만들게 하던가
뭐 이상한 짓을 하지 않는 이상 을 실수를 오히려 만들 수 있는 그
여지를 열어둔 거기 때문에
음 안좋은것 같아요 그래서 제가 처음에 말했듯이 작가의 튜브를 얘기할
때도 그랬잖아요
프로그래머의 실에 실수를 막을 수 있는 애트리뷰트 면은 찬성이다
제가 지금 말했던 건 4개 중에서 paul's 받은게 특히 그 부분에
굉장히 잘 걸맞는 거였고
음 d 프리 케이트 도 그런거죠 이제 오래된 함수 점점 없애고 싶은데
쓰지 말라고 이 알려주는 것도 그렇고
메이비 언니 우수 뜨고 그냥 뭐 없어 트 해석에서 워닝 나오고 이런 것들
효과적으로 없앨 없앨 수 있는 방법이죠 왜냐하면 그걸 또 어떻게
바꾸겠다고 막 #2 스태프 하고 막 이러면 더 귀찮아 지니까
그래서 그런것 같아요 그래서 제가 오늘 말했던 내 칩 4개 거든요
지금 말했죠 그 4개 중에 3개는 이제 쓰시면 될 것 같아요
이제 컴파일러가 지원 한다는 가정하에 아직 지원을 안다면 더 기다려야
겠죠
아 그리구 뭐 비쥬얼 스튜디오 같은 경우에는 지원한 함에도 불구하고 그를
이제 지원하라고 키는 법도 있는것 같더라구요 그래서 그렇게 해야 되고
그리고 제일 마지막에 말씀드린 놀이터는
뭐 이걸 매 써야 되지 라는 생각이 정말 많이 들어요 그래서
언 디파인 db 에 배가 정말 참
으 정말 마음에 걸려요 그건 리파인드 하는 말을 들어 침 어떻게
받아들여야 할지 현재 컴파일러가 어떻게 만들고 있을지 그런것들
그래서 오늘 오랜만에 10불 얘기를 했고 10표 17에서 그리고 11에서
나온 그런 배출이 btd 를 쓰면 좀 더 음 실수를 막을 수 있다
이제 저도 제가 전에 공개 놓은 슈퍼 풀 코딩 스터드가 있거든요 거기
가서 이제
비쥬얼 스튜디오가 제대로 지원한다면 이제 고쳐야 줘 아 이제 볼수 를
커멘트 가 아니라 이걸로 달아라
이런식으로 음
그렇네요 그 정도면 될 것 같아요 예 뽑혔습니다
