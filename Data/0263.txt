예 안녕하세요 포프입니다
오늘은 영어로는 제목이 생각이 나는데 아직 한글로는 생각이 안나요
생각났다. 플로우를 두개 만들지 말자라는 이야기를 할려고 그래요
세개도 아니고 다섯개도 아니고, 플로우는 하나만 만들자. 이 이야기를 하고싶어 하는건데,
플로우 라고 하면 너무 추상적이잖아요
힙합이나 랩에서도 플로우라고 하기도 하고
플로우가 흐름이잖아요 그래서 제가 말하는 흐름은
게임 개발에 있어서
보통 게임을 실행을 하면은 스플래시 스크린 뜨고 타이틀 스크린 뜨고
메인 메뉴 뜨고 그 다음에 게임 골라서 게임 속까지 들어가고
이런 식으로 보통
메뉴의 흐름이 있죠
그걸 UI플로우 라고도 하고 게임 스테이트 플로우 라고도 하는데
그런 플로우를 여러 개 만드는 경우가 있어요
게임 최종 개발용이 아니라, 아니 최종 출시용이 아니라 내부개발용으로
어떤 얘기냐면
제가 언제나 보통  게임 개발할 때 코드 짜고 다시 컴파일 해서 실행하고 이게 하루에 10번 20번 30번 하잖아요.
그러면 실행은 30번 이상 할 수도 있겠죠. 디버거 걸고 보고 기능 만들고 확인하고 이런거니까
그런데 중요한 거는 매 번 할 때 마다 타이틀 스크린 보고 메인메뉴 보고 게임 골라서 들어가고 이걸 해야된다는 거에요
그 시간을 아끼기 위해
뭐
처음 게임 시작할 때 텍스트 파일 읽게해서 곧바로 어느 레벨로 점프하게 만드는 그런 식의
플로우를 만드는 회사를 여태까지 두군데를 봤어요
그러나
그 두 군데 전부 다 약간의
프로세스의 문제라고 해야 될지 아니면
좀 버그를 빨리빨리 못잡는 문제가 있었고 그걸 나중에 좀
게임 출시하기전에 바로 문제가 되는, 왜냐면 버그가 있는줄도 모르고 있다가
나중에 버그가 나오니까 아 이 버그가 언제 나온지도 모르고 있는데
그런거 있잖아요 그동안 사람들이 고쳐놓은 코드는 커밋이 300개쯤 되고 그러면
이게 어디서 빠개진 거지?
그러고 좀 더 디버깅이 어려워지는 현상이 있었는데
그런 버그들이 발생한 이유가
대부분은,  대부분이라고 말고, 대부분은 말이 안되고
어느 정도는 플로우가 여러개 있었기 때문이에요
제가 최근에 겪은 거는
이렇게 게임에 들어가서 메인 메뉴를
보고 메인 메뉴 버튼을 클릭해 게임에 들어가서 뭘 시작하자라고 하면은
언제나 나오는 버근데
이 플로우를 통하지 않고 곧바로 부팅하는 플로우
그러니까 메뉴 다 스킵하고
게임 속 플레이를 곧바로 보여주는 걸로 처음부터 로딩이 되는 플로우 에서는
그게 버그가 절대 안나는 그런 버그가 있었어요
그래서  개발자들은 메인메뉴 누르고 들어가기 귀찮으니까 이렇게 하자 라고 해서 언제나 그렇게 했는데
그래서 개발자들은 계속 하면서 그래 난 버그 없구나 하고 넘어가다가
나중에 마지막에 걸리는 그런 문제가 몇 번 있었죠
요번에 제가 게임 출시한 것도 그렇고
출시한 게임이 뭔지는 다음편에서 얘기를 할게요
왜냐면 비디오 나갈 스케쥴과 다음편 나갈 스케쥴이
보니까
다음 편 나갈때즘 그 게임이 풀려 있을 것 같아요.
그래서 그걸 말씀을 드릴거고
요번 게임도 그랬고
예전에 한번 어떤 회사
거기도 파탄이 난 회사 였는데
제가 직원은 아니었고, 전 다른 회사 다니다가
저희 회사가 그회사 최종 마무리를 해주러 들어갔던 회사 중 하나죠
거기도 좀 그랬어요
그런데의 공통적인 것은
대부분이
이렇게
버그가 있는데 잘 발견도 못하고
좀 뭐라 그럴까 깔끔하지 못한
그런 코드가 많았다고 해야할까 그런게 많았어요
이런 플로우를 여러개 나누면서 아 이거 편하니까 나 이렇게 할래라고 하는 그런 마음가짐을 가진
그런 프로그래머들이 결정을 내리는 회사라면
다른 곳도 아 그래 나중에 문제가 생기던 말던 몰라 이러고 넘어가는  마인드 일 것 같아서 나중에 못고치는 경우가 좀 많았고
물론 플로우가 2개로 나뉠 때, 이 둘다 잘 작동하게 어떻게 구조를 잡고 그러면 말이 되는데
회사라는 곳이 워낙 많은 프로그래머가 일하고
그 모든 프로그래머가  뛰어난 프로그래머일 수는 절대 없구요
그 프로그램을 전부 매일같이 코드를 보면서 리뷰를 할 수 있는 그런
뭐 시간적 금전적 여유가 있는 회사도 많지 않고
그래서 어느 순간
보지 않는 순간 코드가 망가지는 경우가 있어요
제가 예전에 몇번 비디오에서도 말했던 비슷한게 있거든요
이런 원칙을 세워두고 코딩을 하면
이게 벗어나는 순간 눈에 딱 보이기 때문에
그런 위험요소를 미리 많이 줄일 수 있다라는 거
제가 보는 플로우 문제도 그거예요.
플로우는 언제나 하나여야만 해요 이게 디버그용이든 릴리스용이든
릴리스, 출시용이요
언제나 하나여야지만 그 똑같은 플로우를 사람들이 거치면서
어떤 상태,
그 중간에 거치는 플로우에서 어떤 상태가 잘못 저장이 되거나
잘못 세팅이 되서 나중에 뒤에 드러나는 버그가 있더라도
이거는 버그가 생기는 순간 잡기가 쉬워요. 왜냐하면
매일 매일 개발하는 사람들이 매일매일 보는 결과니까
예전에 제가 말했던 비디오에서
개밥먹는프로그래머 이런 비디오가 있거든요
거기서 말한 것과 똑같은 거예요.  제가 개발한 것은 언제나 제가 테스트가 되야 되는 환경이예요.
그래서 그러면 맨날 할 때 마다 버튼 누르고 너무 귀찮지 않냐.
귀찮죠
그래서 정말 그걸 없애고 싶으면
그 통에 들어가는 과정 있잖아요 최종 게임 플레이 까지
그 과정을 컨트롤러 패킷
스크립트같은 걸로 짜서 자동화 시키면 되는 거예요
제가 예전에 아마
유닛 테스트 조금 안 좋다는 식으로 예기하면서
그것보다 나은 방법이
BAT 테스트였나
그걸 할 때 오토메이션 테스트 얘기를 했었거든요
그런 식으로 게임이 딱 런칭되는 순간 스크립트가 있는 건 상관이 없죠
텍스트 파일 같은게,  그래서 거기서  얘기하는 게 뭐
스플래시 스크린 뜨고 2초 뒤에 버튼 눌러서 스킵하고 타이틀 메뉴에서 밑으로 두번 내려서 누른 다음에 오른쪽 다섯번 위로 세번 해서 이거이거 고른 다음에
들어가라, 라는 이런 스크립트를 쉽게 레코딩을 할 수 있는  시스템이 있다면
지금 말한 플로우를 스킵하는 건 훨씬 쉬워져요
그리고 이거는 똑같이 처음 플로우부터 모든 화면을 거쳐서 들어가는 거기 때문에
거기서 버그가 이미 발생을 했다면
웬만한 경우엔 보이죠. 물론 100%는 못 잡아요 타이밍 이슈도 있고 뭐도 있기 때문에
그러나 한 처음에 있는 화면 서너개를 스킵함으로 인해서
음
아예 중간에 설정되는 세팅 자체가
상태라는 것 자체가 사라져서 볼 수 없는 버그 이런 경우는 없죠
그래서
이제 뭐
언제나 그런 얘기를 해요. 게으른 사람들이 세상을 더 낫게 만들었다
리모트 컨트롤도 그렇고 좋은 얘기 많이 하는데
암
그것은 말 그대로
일반 사용자 입장인 것 같아요
일반 사용자는 게으르면 게으를수록 좋지만
프로그래머는
지금 당장 한 순간의
편안함?
그것 때문에 나중에 일어날 수 있는 이런 좀
뭐라 그럴까
저는 디재스터라고 보는데 거의 재난 상황이라고 보는데
이건 제 성향상 그런 걸수도 있어요. 저는 이제
뭐든간에 예측 가능한 걸 좀 좋아해요. 특히 게임을 출시하는 때에는
어느정도 버그가 예측을 가능해야
이게 마음 편하게 일정을 짤 수 있고 진행이 가능한데
이렇게 말도 안되는 여러가지 꼼수를 해놓고
어디서 터질지 모르는거를 아니 뭐 터지면 그때 봐라는 마인드로 냅두다가
마지막에 가서 파박파박 터지기 시작하면
그때부터 굉장히 골아파진다는거죠. 그리고 뭐
프로젝트 관리에서도  좀 문제가 많아지는 부분이기도 하고
그리고 만약에 정말 재수가 없어서
그 마지막을 날짜를 못 맞췄어요, 그럼 이제
그 이미 유통사, 퍼블리셔. 걔네들이
넣어놓은 마케팅 금액과
이런 걸 다 따질 때
최대의 효율을 못 뽑아낼 수도 있거든요
저는 그런 데드라인을 되게 중요시 여기는 편이고
그렇게 다른 사람들의 노력이 같이 들어가 있는 거면
그거를 위해서는 위험도
관리가능한 위험을 가지고 있어야 한다고 보는데
플로우를 여러개 만드는거  자체가 저는
그런 관리가능한 위험성을 굉장히 저해한다고 봐요.
그래서 버그는 나올 떄 잡으면 하루 이틀안에 대충 다 잡히거든요
빨리 나와요 이게,  어제 들어간 코드가 대여섯개 되고
이중에서 이거랑 관련있는 건 이거니까 이걸꺼다
그러면 가서 그 코드를 한번 revert 하고 보는데 문제가 없어, 그러면
그 코드에 문제가 있는 건 아닐까
코드만 찾고 이유만 찾으면 되는데
아까 말했듯이 1개월 뒤에 터지면 그 순간 코드 체크인한게 몇백개인데
찾기 되게 어렵죠
그래서  플로우는 하나만 만들자 라는 이야기를 정말 하고 싶었어요
게임에 플로우를, 처음에 프로토 타입 만들 때는 상관없고
게임을 프로덕션 해서 만드는 동안은
언제나 플로우가 하나가 되게 해서
플로우를 빨리 없애고 싶으면
어차피 오토메이션 테스트 하거나 스모킹 테스트 하기 위해서
어느정도 컨트롤러 패킷 오토메이션은 하는게
일반적이었거든요 제 경험상
근데 뭐 모든 회사가 그렇진 않을 테지만
차라리 플로우 2개 만들어서 그거 고쳐나가는 시간에
그거 하나 잡아두면 굉장히 모든게 편해질 것 같아요
아니면 AI전이 있다거나 그러면 거기에 대충
AI도 컨트롤러 패킷 조작으로 많이 할 수 있으니까
그래서 그렇게 생각을 하고
오늘은
그래서 또 최근, 예전에도 봤던 문제지만 최근에 또
조금 약간
코드 베이스가 그렇게 훌륭하지 못한
회사에서 하는 일을 보고
다시 생각을 했죠. 플로우를 두개 만들지 말자. 플로우는 가능하면 하나로 가자
그랬고요. 포프였습니다.
