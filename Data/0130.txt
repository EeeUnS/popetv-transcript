제가 만나본 프로그래머 중에 정말 뛰어난 프로그래머들은 언제나 자기가
실수를 할 수 있다는 걸 알았어요
그들의 중요한 것 같아요 그리고 그런 사람들은 자기가 실수를 했을 때
그러니까 만약에 누군가가 이렇게 질문할 때 까
뭐 이런 문제가 있다고 할 때
자기가 뭔가를 만졌던 분야 1 그러면 자격의 확실하다 는 확신을 잘 안
가지는 보통 그르
어 그래 그럼 내가 뭐 실수 할 수도 있으니까 뭐 자기가 시간내서 잠깐
볼게 라던가 아니면 다른 사람들의 잠깐 봐줄래 라던가
그럼 이 문제를 겪고 있는 그 프로그래머들이 디버깅 하는 걸 어찌
않으니까
그래서 예전에 한번 그러니 겠어요 겸손한 개발자 라는 걸로 얘길 했는데
뭐 그게 과연 겸손의 얘길 지는 모르겠지만
중요한 거는
그 정말 잘한 프로그램을 그걸 알고 있는것 같아요
그 자기가 잘하긴 하지만 자기도 인간이고 실수를 만들수 있다는거 않아요
그리고 때문에 자에게 실수 하면 언제든 굉장히 빨리 걸 인정하고 미아가
얘기도 할 줄 알고
왜 마크 마크 다른 사람의 피해가 되는 경우가 있으니까 그리고 그걸
어떻게 더 빨리 고치고 해결을 하려고 하죠
한마디로 자기의 실수를 인정하는 걸 두려워하지 않아요
제 생각엔 왜 그러냐면 자기의 실수를 인정 한다고 해도 그 사람들 때
그게 당연한 것 같은가
인간은 어느 실수 하는 거니까 그런 일이 있을 수 있고 그런 이스터 빨리
대처하는 게 중요한 거고 그러면 만약에 내가 실수를 한다고 해서 그
자체로 내 실력이 나빠지는 거 아니라는 거 알고 있는것 같아요 물론
실수의 수가 워낙 많아 지고 또 얘기가 달라지겠지만
그에 비해 별로 실력이 없는데 실력이 있는 척 하려는 프로그래머들은
실수를 할 때마다 그것을 숨기는데 급해요 그러니까 예를 들어서 뭐 예전에
졌다는 모 회사에서 한번 겪은 일이지만 뭔가 문제가 돼서
요 자기네가 만든 모체 꿀 때문에 회사 전체 갔다오니 됐다 그러면 솔직히
다른 사람들은 왜 그런지 모르고 있으니까 어떻게 해서 빨리 매어져 서
이런 문제 땜에 따온 이 되고 우리가 고치고 있으니까 좀 기다려 달라고
말하면 되는데 그렇게 전체 메일을 보내기 시작하며 는 원래는 그 문제를
직접 뭐라고 할까요 겪지 않을 수 있는 사람들이 있잖아요 그 다른 자극
조금만 다른 일을 하고 있다거나 그래서 그런 사람들과 대 사람들의 때까지
자기의 실수를 보여주는게 오히려 자기를 나쁘게 보인다고 생각해서 숨기는
사람도 있어요
그런 사람들은 솔직히 나중에 가면 갈수록 굉장히 힘들어 이야기가 왜냐하면
신랑도 너무 많아요 그럼 그렇게 자기 혼자 뭐 순간에 급급해서
어떤 사람들이 문제 봤을 때 계속되지 디버깅 하려고 할 거 아니에요 그럼
거기서 시간이 낭비가 얼마가 됐든 간에 5 회사 직원이 50명 이 라면
50년 곱하기 5분이면 은 이렇게 벌써 이루고 싶은 이잖아요
그럼 이미 4시간에 회사 효리 날라간 거에요 그래서 저는 그런 사람들이
있을 때마다 굉장히 힘들었거든요 그래서 그런 사람 그러니까
* 과정 이어서 오는 얘기 뭐냐면
어찌 보면은 그런거 있잖아요 무슨 문제 있을 때 맨날 숨기고 숨기고
미루고 미루고 미루고 있다가 4 0
삭 사건이 커지는 경우 뭐 가장 흔한 예로는 뭐 빚을 졌는데 그 비치는
걸 어떻게 되면 갚자
금호 빨리 갚으려고 하는 게 아니라 게 어떻게 대처 또 비수를 메꾸고
메꾸고 맵과 밑에 줘 안보려고
자기 신용카드의 돈이 얼마인지 보존하고 이젠 쌓은 두었다가 나중에
신용불량자 되는 사람들
물론 정말 힘들어서 씨는 벌써 되는 점도 있지만 쉬운 플랫 아는 사람 주
등의 사람들 중에 상당히 많은 사람들이 자기 도움 관리를 못하는 경우도
많더라구요
그럼 지금 걸 생각하면 귀찮아지고 피곤해 지니까 미루는 거죠
똑같은 얘기 로 모 학교 가지 할 때 그런 사람도 있고 모 회사에서 그럼
이런 더 커지는 보고
근데 지금 한 영화는 그 거에요 결과는 사람은 누구나 실수를 해요
프로그램은 누구나 실수하고 저희가 만드는 코드가 100% 아니에요
물론 그것을 막기 위해 그걸 막기 위해 는 아니고 줄이기 위해 여러가지
프로세스가 있죠 네 이제 그 프로세스의 정의 몇가지는 굉장히
시간을 너무 낭비 해서 과연 그 정도 시간을 낭비하면서 까지 그럴 필요가
있냐 라는 그런 볼 수도 있고요
그리고 정말 본인이 만드는 제품의 뭐라 그럴까요
중요도 그 어느 중요 돌아 g 그렇고 뭐 내가 만드는 제품이 정말 실수를
했을 때 사람을 죽일 수 있는 그런 정도 제품이라면 당연히 그런
프로세스로 좀 좀 더 엄중하게 해야 되지만 그게 아니라 뭐 페이스북 처럼
뭐냐 하하 호호 하고 보호 이런거 있으면 버그 몇개 있음 어때요
그런 경우에는 오히려 아 그런 쓸데없는 시간 낭비하는 뭐 퀄리티
프로세스를 조금 줄이고 어느정도 적당히 만나고 릴리스를 한 다음에 그
다음에 버그가 보이면 고치는 것이 훨씬 나을 수도 있죠 그래서 저희 것도
분야에 따라 틀린 건데 뭐 그거는
격인 프로그래머가 그래서 어느정도 비즈니스 센스도 있어야 생각을 해요
과연 내가 만든 제품이 어떤 제품이고 이 정도에서 언어 퀄리티 컨트롤
가능하고
과연 여기서 이정도 퀄리티를 하기 위해 이정도 엄청난 프로세스를 도입할
2t 프로세스를 도입하는 게 맞는 거냐 아니면 이걸 적당히 내놓고 고치는
게 오히려 전체 저게 시간도 아끼고 회사 효성 높이 야
뭐 그건 개입한 다니고 그게 뭐가 어쨌든 간에
뭐 예전에 한번 어쩌다가 어떻게 세입자들은 얘기했는데 그 여기서 그런
표현이 있어요 프로그램의 타는 표현 중에
너의 개 밥을 먹으라고 이 추 어 뭐야 제 2의 오온 of 외쳤다 없어
그러니까 니 개 밥을 먹으라고 내가 있어요 무슨 얘기냐 하면 한 마디로
이가 짠 코드를
니가 책임지고 디버깅 하고 아모 테스트까지 해보고 1 얘기에요 감 마디로
며 코드를 짜고 양태 쓰고 녹차 캐나 끝나는게 아니라 그게 과연 내가
만든 코드가 제대로 작동하는지 최소한 뭐 브레이크 포인트가 디버깅 해
본다거나 뭐 유이 테스트가 메이크 센스 하다면 이 테스트를 만들어가고
하는 것도 모
방법 1 거고 근데 저는 유이 테스트를
거의 대부분은 안쓰게 안 쓰는 게 맞다 는 안쓰게 많다는 게 아니라
효율적으로 봤을때 제가 여태까지 몸담아 왔던 분야에서는 위 테스트에
효용성이
뭐 아주 높진 않았어요 정말 중요한거 코 컴포넌트 맛 좀 해야지 그
했거든요 이 테스가 없어도 상관이 없고 올 안하는게 시간을 아끼는 것
같고
그가 다른 종목들이 있죠 그리고 그렇게 뭐 테스트하고 디버깅 해보고
그래서 코드까지 체크인 했으면 사람이 또 하나 문제가 거에요
뭐 다들 겪어보신 되겠지만 가끔 내 체인지를 세이브 안하고 체크인 하는
경우도 있고 실수를 리버 틀을 한다면 체크하는 경우도 있고 심지어는 남은
제대로 했는데
그저 가전은 예를 들어서 및 유전 넘버쓰리 해서 작업을 하고 지금
체크해야 하는 건데 그 다음에 어떤 삶이 주는 먹보 파이브 정도로 했어요
그리고 체크하는 경우도 있어요
그럼 저는 결과적으로 파이브 다다르자 체크인 들어가는 거기 때문에 이
앞에 꼬 앞에 당선이 체크인 항거와 제가 체크인은 거가 안맞아 갖고
문제가 생기는 경우도 있거든요
그럼 그런 경우도 이제 막아야 되니까 그런 경우에는 이제 또
테스트를 하는 얘기가 있죠 뭐 체크해 나머지는 뭐 싱커 싱크를 한 다음에
다시 한번 100에서 체크 테스트 라 이런 얘기도 있고
저는 끝까지를 조모 오버 라고도 가끔 생각을 했는데 그게 아니면 그 뭐야
체크한 다음에 뭐 포토노트 at 필드가 있잖아요 그럼 자동으로 빌드 되는
것에 라는 컴파일러 에러 거기서 나오는 거고 컨 빌드 시스템 없는거고
아니면 그 빌드를 직접 빌드에서 t 플레이까지 한 다음에 제품이 있다면
그냥 보통 왠만한 괜찮은 새는 5분에서 10분 사이로 걸려야 전 보거든요
체크인하고 빌드 한 다음에 실제로 제품을 가서 자기가 고 친구가 제대로
작동하지 확인을 하는
그정도의 자신이 있었나봐요
그냥 아마 너 이거 체크 해냈고 코드 집어넣고 언제 제품에 올라 갈지
모르겠지만 그래도 되 겠지 라고 양 손 놓고 있는 것보다는
말 그대로 내가 체크인 한계 작동 하나 정도는 확인해 줄 수 있는게
좋다고 생각하거든요
물론 이것도 매번 그래야 되냐 그것도 아닌것 같긴 해요
그것도 이제 뭐 역시 아까 말했듯이 얼마나 이게 내가 아는거 때문에
제품이 망가져서 다른 사람의 일에 방해를 주는 게 많이 아실텐데
가장 좋은건 은 그냥 종이 아니라 그래도 한 가지 반드시 해야 되는 것은
제품이 바로 윌리스 단계에 있을 때 바로 출시 전에 있을 때는 자기가
체크인 항거하고 이게 제일 작동하는지
한번은 빌드를 해서 거기서 확인해보는 굉장히 좋은 습관이라고 봐요
만약에 그 빌드할 수 있는 세력이 안 돼 있다면 그 빌드를 당연히 만드는
것도 좋은거 길 거고 뭐 것 역시 어떤게 더 효율적인 시간 낭비야 2문제
거죠
그리고 어떤 경우든 간에
자기가 실수를 한거 를 인정을 하고 거기서 배워 갖고 아덴 개나리
못했지만 나는 거 잘 해줄게 라는 것을 보여주고 낳아도 생각을 해야지
그래 나는 지금 못한 걸 숨기고 아무도 몰랐으면 하는 마음에서 그냥
숨기고 숨기고 숨기고 그러면서 자기가 더 나아지게 발전하는 것은 좀
문제가 있다고 봐요
그래서
뭐 사실은 그냥 비디오 제목을 이채원 또 호프 더라구요 시작을 하려고
했는데 그때도 뭐 다른 얘기를 많이 해서 뭐라고 제목을 줘야지 모르겠고
그냥 실수를 하는 걸 두려워하지 말라 말하고 싶어요
실수를 하는 걸 들어 하지 말되 그 실수를 했으면 과연 이 시술을 다음에
어떻게 줄일 수 있지 건지에 대해서 좀 더 좋은 방법을 찾아내 가는거
어쩌면 저번 비디오에서 말했던 그 관찰 능력과 그럼 현재 상태 파악을
하고 이제 어떤걸 더 해 가고 또 나아질 거니 나 아직 건지 그런
판단능력 얘기도 하겠죠
저는 그게 되게
좋은 프로 되기 위해서는 굉장히 좋은 거라고 생각을 하는데
그리고 어떤 의미에서 보면 은
될 썽 싶은 프로그램 어드 싹수가 보이는 애들 그런 애들은
중요 때부터 그런 자세가 있긴 있어요 자기가 실수한 거 되게
싫어하죠 그저 누구나 싫어요 좋아하는 사람 없소 싫어하면서도
실수했다는 걸 알고 그거를 고치게 노력하지 그걸 숨기기 위해 노력하지
않는 사람들
그런 사람들은 확실히 제가 딱 봤을때 아 얘들은 1 3 4 5 년 사이
굉장히 성장을 하였고 내려 게 보여요
그에 비해 모든 걸 숨기고 어떻게 어떻게 는 피해가 려고 한 사람들 다
보면은
아 얘는 성장하기 어렵겠구나 부르죠 밑쪽으로 커리어가 좀 힘들겠구나 라는
생각이 많이 들리고
뭐 그정도 오늘도 주저리주저리 정자 프로그래밍 얘기를 한건 없지만 좀
테리가 잡담이 너무 많은거 같아요 그죠
에 뽑혔습니다
