안녕하세요. 

'너는 주니어다'라는 시리즈가 은근히 흥하고 있어요. 그것 중에 하나인데요, 앞에 나왔던 '너는 주니어다' 시리즈 중에서는 "그게 왜 주니어냐?"라고 이제 따지는 사람들이 좀 있긴 있었어요. 그래서 그 이유는 모르겠지만 회사마다 다 당연히 기준도 다르지만 업계에서 일반적으로 일 잘하시는 분들, 아니면 괜찮은 회사에서 보는 주니어의 기준은 제가 볼 때는 그거라고 말씀을 드리고 있는 거고요, 본인이 만약에 그걸 못 했는데 '주니어가 아닌 타이틀을 달고 있는 나보고 주니어라고? 이 18' 막 이러는 것도 있어요 사실은. 근데 그거는 회사마다 직급 차이가 다르기 때문에 내가 이 회사의 시니어여도 어떤 회사에선 주니어일 수가 있습니다. 그래서 어쨌든 간에 HR이나 이런 사람도 그런 직급을 믿진 않고요, 그것보다 뭘 할 수 있냐?를 보기 때문에 전 그런 얘기를 드리고 있는 거고, 하지만 오늘 하는 얘기는 제가 볼 때는 아무도 반론을 하지 않을 가불 기라고 생각을 해요. 이거를 반론을 한다는 거는 그냥 분탕질 치겠다는 느낌일 것 같아요.

뭐냐? 'if else 같은 경우 제대로 작성 못 하면은 주니어다'라는 얘기예요. 어떤 얘기냐면 이거는 POCU 아카데미에서도 입문 강의, 실무 프로그래밍 입문 강의에서 몇 번이나 강조하는 얘기예요. 자 예를 들어서 설명을 할게요. 저희가 어떤 컴파일을 한 결과가 쭉 나오잖아요 화면에? 그걸 로그 파일로 저장해 놓고 로그 파일을 parsing 하는 경우라고 생각해 봐요. 그러면 한 줄 한 줄 보면서 이 한 줄이 무슨 의미인지 parsing을 하는 거예요. 한 줄을 parsing 했어요. 여기에 에러라는 이제 토큰이 들어가 있어요. 이거는 컴파일 에러라면 if 오류 이게 들어가 있으면 이런 이런 정보 넣고, 그리고 그다음 줄로 딱 가요. 그다음 줄로 보니까 if, 이 줄이 경고이라는 토큰을 가지고 있다면, 그러면 이런 이런 이런 처리해라 그리고 그다음 줄. 잠깐만? 컴파일 오류를 보여 주는 로그에서 오류하고 경고가 한 줄에 있는 경우가 있어요. 상식적으로 없거든요? 그리고 사용하는 컴파일 따라 다르겠지만 우리가 사용했던 건 없어요. 실제 있던 일입니다. 참고로 저희 코드에서 있었던 일이에요. 그러면 올바른 방식은 만약에 이거라면 이렇게, 그렇지 않고 else if 이게 원인이면 이렇게 이런 식으로 논리를 작성을 해야 돼요. 코드는 똑같이 돌지 않나요? 당연히 똑같이 돌아요. 좀 더 비효율적일 순 있는데 그건 중요한 얘기가 아니에요. 그런 식으로 어떤 조건이 일어나면 다른 건 일어날 수 없다는 것을 if else, 아니면 중첩된 if 이런 걸 제대로 적지 않으면 나중에 그 코드를 개선시키거나 코드에 뭔 가를 추가해야 되는 사람들이 볼 때 굉장히 혼란스러워집니다. 그럼 이걸 보는 순간 제가 나중에 들어가서 코드 고칠 수 있었는데, 생각을 했어요. 아니 에러를 처리하고 그다음에 경고를 다시 또 if로 처리하는데 그럼 이 2가지가 같이 나올 수 있어서 어떤 특정한 상황에서는 같이 나오는 걸 봐서 이전 프로그래머가 이렇게 작성을 한 건가?라는 의심을 안 할 수가 없었어요. 그리고 그 거에 내가 새로운 로직을 추가하는 순간 이게 그 둘 중에 하나에만 같다 붙는 로직이었던 것 같은데 이걸 다시 재구성을 하자니 이거에 대한 약간 찝찝함이 남아 있는 거예요. 정확히 얘가 왜 이렇게 작성되는지 의심스러운 거예요. 내가 뭔가 새로운 버그를 만드는 거 아닌가? 고민을 하게 되는 거예요. 제가 지금 오류하고 경고만 말씀드렸지만 그 파일 안에는 else if 라던가 else가 거의 없었어요. 그냥 모든 게 if여서 모든 조건을 다 처리해, 다 조사하는 그런 느낌이었어요. 이거 조건이 되면 이 조건이 나올 수 없는 경우들이 분명히 있음에도 불구하고 그냥 모든 조건은 10번, 20번, 30번 다 검사하는 거였어요. 그래서 뭔가 하나 추가할 때 이 조건에만 해당하는 뭔가를 추가하자니 아래에서도 '저런 게 나올 수 있는데, 저거에는 또 어떻게 적용해야지?' 이런 고민들이 계속 생겨나기 시작한 거예요. 그래서 이거를 고치기 전에 이제 얘는 우리가 실제 데이터를 확실히 검증을 해야겠다... 왜냐하면 분명히 내가 생각하고 있는 상식 하에서는 if else, else if 이런 걸 다 구조가 돼서 이런 배타적인 관계가 나와야 되는데, 그거를 확 고치기에는 내가 모르고 있는 뭔가 굉장한 특별한 Edge case가 있을 거 같아서 그걸 내가 놓치는 거라 생각이 들었거든요? 그래서 첫 번째 했던 거는 제가 생각할 때 이게 정말 배타적인 관계인지 아닌지 라이브 서버에 꼽아서 실제 배타적인 관계가 아닐 경우에 경고가 날아오게 일단 저희 서버 쪽에 알림이 오게 코드를 넣은 게 첫 번째.

그리고 과거에 있었던 처리했던 모든 데이터를 긁어서 크게 데이터화를 시킨 다음에... 쌓아만 놓고 아무것도 안 했었거든요. 그 모든 데이터를 여기다 feed를 시켜서 정말 그런 Edge case가 나는 경우가 있는지를 확인을 했어요. 데이터만 해도 제 기억으론 파일 수만 해도 한 50만 개는 넘던 거 같아요 거의... 50만 개 넘게 넣었던 걸로 기억해요. 그래서 다 한 다음에 이 문제가 없다는 걸 확인을 하고 그다음에 제가 추가하려고 했던 로직을 추가할 수 있었죠. 그 로직을 그냥 추가했으면 사실은 한 30분 안에 끝나는 일이었어요. 이 모든 거를 검증하고 하는 데 걸리는 시간이 며칠은 걸렸죠, 몇 주도 걸렸고. 라이브 서버도 한동안 돌렸으니까 작업한 시간은 한 며칠 그리고 실제 라이브 서버 돌리면서 검증한 시간은 또 몇 주 이렇게 됐었어요. 그래서 이게 정말 당연히 그렇게 작성해야 될 부분들을 작성하지 않음으로 인해서 불필요한 생산성의 저하를 가져올 수밖에 없는 부분들 이거든요? 그래서 그런 걸 생각해 보면 아 내가 논리적으로 a || b, b || c 이거를 제대로 생각을 못 해서 그냥 무조건 떡칠을 하는 느낌인 거예요 사실은. 그게 논리적으로 쳐내는 걸 못 하는 거죠. 이 상황이면 이 일은 일어나지 않고 저 일이라면 저 일은 일어나지 않아요.

그러면 결과적으로 유지 보수 하기 힘든 코드를 만든다는 거고, 그리고 그런 분들이 작성하신 다른 로직 코드들을 보다 보면 그렇게 논리적으로 쳐내고 신경 안 써도 되는 걸 괜히 신경을 쓴다고 이상한 코드를 추가한다거나 코드가 원래는 어떤 마법을 부리지 않아도 20줄에 끝날 코드를 이상하게 막 경계 체크하고 뭐 하고 하느라 이제 100줄이 넘어가는 경우도 있죠. 그런 동안 실제 중요한 거는 놓치는 경우가 있고요. 왜냐하면 사람은 집중할 수 있는 것들이 그렇게 많지 않아요. 아주 천재급으로 가지 않는 이상 보통 내가 한 번에 신경 쓸 수 있는 변수 그런 거는 한 4개 정도면 충분히 많이 잘 보고 있는 거예요. 이미 경우의 수가 16가지거든요. 근데 그런 거를 논리적으로 재빨리 처리하지 않으면 그리고 한 단계 더 나아가면 이건 주니어의 문제는 아니지만 early exit, early return을 제대로 빨리빨리 하지 않으면 점점 혼돈과 파괴가 되는 거죠. 그래서 어쨌든 간에 논리적인 구조에 따라 배타적인 관계에 있는 것들 아니면 어떤 조건, 배타적인 관계에 있는 것들을 if else 아니면 if else if로 제대로 구성을 못하거나, 아니면 어떤 조건이 일어나야만 일어날 수 있는 것들 그런 거를 중첩된 if문으로 제대로 작성을 못하는 사람들은 주니어입니다. 이거는 당연히 당연히 당연히 당연히 학교 수준에서 끝나고 와야 되는 거예요. 그게 아니라 그냥 여기서 a == 0 비교하고 저 아래 가서도 a == 0 && b == 0 비교하고 저 아래 가서 a == 0 && b == 0 && c == 0 이걸 비교하는 사람들은 뭔가 문제가 있다는 겁니다. 절대 코드가 유지보수가 안 돼요 그런 것들. 그래서 그런 거를 말씀을 드렸고 요거는 열심히 벤 다이어그램을 그리든 뭘 그리든 충분히 고칠 수 있는 것들이니까, 고치기도 쉬우니까 열심히 이런 부분은 고치도록 해요. 어차피 동작은 똑같지 않나요? 동작은 똑같아요. 근데 왜 그렇게 짜세요? 그냥 잘 짜면 되는 거지 그죠? 포프였습니다.