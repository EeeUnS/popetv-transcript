안녕하세요 뽑습니다
얼마전에 페이스북에서 그래도 굳이
그도 굳이 회장 까먹어서 안되는데
배 현직 사장님 계신데 프라우드 4 에 프라우드 4급 앤 딕 사장님께서
st 에 관련 이렇게 글을 올린적이 있어요
그분이 이제 댓글을 단 건지도 까먹었는데 현재
게임에서 과연 star 얼마나 쓰냐 sta 라고 하면 은지씨 풀 뿔의
스탠드 라이브러리에서 이제 컨테이너 있잖아요
벡터 라든가 맵 이라던가 이제
이제 뭐 얼마나 쓰냐 이런 얘기 나오면 서막 뭐 이렇게 나는지 만큼 쓰다
남은 이만큼 않습니다 이런 데 이게 재미 있는게 뭐냐면 이런 똑같은
논의가 사실은 한참 10불 막 처음 싶어 03 인가 나오고 막 이럴 때
그 해외에 있는 게임 대본 안내시 라는 웹 사이트 있잖아요 그런데 서도
되게 많이 돌았던 얘기에요 되게 재밌는 게 뭐냐면
그 당시에 이제 굉장히 많은 게임이 콘솔을 쪽이었고 아니면 pc 게임이
어떤 것도 콘솔로 넘어가는게 많았고 그래서 실제 어깨에서 는 stl 은
거의 금기사항 이었어요
일단 stl 이 왜 금기사항 있냐고 물으면 음 그렇게 물으시는 시프
프로그래머가 있다면 일단은
솔직히 그 이유를 모른다면 그냥 시프 포를 잘 이해를 못하시는 것 같아요
그 하드웨어를 잘 이해 못하는 거고
메모리가 실제 어떻게 되는지를 일을 못하는 거고 그리고 stl 에서 그
뒤에서 해준 온갖 금아 법적으로 해주는 그 모든 일들이
마법 으로 만 생각하고 있는 가능성이 높거든요
일단 뭐 한가지 이유만 되면 stl 에서 의 메모리 관리 이 부분이
굉장히 좀 특히한 부분이에요
음 뭐 아 그래 메모리를 그 예를 들어서 stl 에서 팩터를 넣었어요
그럼 팩터를 저장하기 위해서는 무슨 뭐 어느 정도의 어레이 가 있어야
겠죠 배열 사이즈가
그럼 이 배열이 커질 때 어떻게 되냐 그럼 당연히 메모리 jr 땅이
있어야 됐고 며 모리오카 피가 있어야 했고 이런 문제들이 여러가지가
있어요
그럼 메모리가 재 할당 된 게 뭐가 큰 문젠 야마 속도가 느리고 그럴 수
있지 정도까지만 가면은
뭐 그래도 속도가 느릴 수 있다는 걸 알면 은 나쁘지 않은 거 거든요
근데 그 이상을 넘어가면
어떤 플랫폼의 이제 게임을 올려야 에 따라
그 가상 메모리가 없는 블랙 점도 있어요 os 에서 가상 메모리가 없고
메모리가 제한적 이라며 는 메모리 하나하나에 구멍이 나는 순간
나중에 메모리는 충분히 많지만 파편화 때문에 메모리 할당을 못해서 뻗는
경우도 있어요
근데 그 뽑는 상황이 게임을 뭐 한 5시간 한 뒤 뻗는다 거나 3시간
한데 뻗는다 거나 파편화 가 나와야 되니까
그럼 일단 게임을 개발 하는 도중에는 모르다가 나중에 게임 출시하고 나서
파편 일하는 경우도 있고 별 이상한 일이다 했거든요 그래서 그런 것들에
문제가 많기 때문에 이제 stl 을 되게 좀 자제해 떤 부분이 있고 또
하나 이제 stl 자체가
인터페이스 자체로만 보면 은 이렇게
실수를 쫑 유발하는 인터페이스가 좀 있고요 그 또 하나는
음
돌아 그러지 이거를
그 각 플랫폼 마다 각 라이브러리 마다 실제 내부가 어떻게 구현되어 있는
지를
정확하지 않은 경우도 있거든요 대표적인 예가 이제 스트링 클래스 같은
경우인데
기본적으로 스트링을 만들 때 처음에 배열 사이드를 여수로 잡아줄까 이
컴파일러가
왜냐하면 만약에 배열 4 26으로 잡아주며 는 캐릭터를 16가지 밀릴
때는 메모리 재할당 이었지만 그 뒤에 가운데 머리 제 할당이 되지
되거든요
그러면 뭐 pc 에서 했는데 이제 제 할당이 없던게 즉 다른 플랫폼
맥으로 가면 언제 할 땅이 될 수도 있고 그런 여러 가지 이상한 것들도
있을 수밖에 없어요
그 뭐 자체 저건 최적화 한다고 내 부족에서 한건데
이제 되게 마법 같은 최적화 줘 그래서 실제 모든 코드가 투명하게 안
보인다는 점에서 그리고 이제 메모리 관리 라던가 이런게 나중에 터지는게
되게 힘들 그 미스터 했을 때 이걸 잡게 되는데 고치게 되는 들고
그만큼 굉장히 많은 프로그래머들이 대충 대충 이렇게 어설프게 코드를 짝의
이렇게 허용한다는 부분에서 되게 용납이 안 했던건데
재미있는 것은 2000년도에 만약에 누군가가 배열을 써왔고 코드를 만든
그런 코드를 게임 대부 단 4세 올리면
거기서 키보드 워리어 들이 있어요 게임 되고 난 내 집 담 내실이 되게
뭐 훌륭한 개발자들이 모여 있는 코드로 착한 신부들이 맞는데
대부분의 그 당시 거기 되더라 며 대학생들이 되게 많았고 그런 걔네들은
이제 번째 댓글을 달아 안혁 짬 안되는 거다 어레이 같은걸 쓰면 안된다
이건 c 급 벌써 이러면 안 되는 거다
이거는 이러면 뭐 뭐 저거 저쩌고 하면서
여기서는 당연히 이제 뭐 벡터를 써야 되고 스트링을 써야 된다고 되게 막
거품으로 싸웠어요 그러면
문제는 이제
그런 이제 그럼 그를 처음 에서 딴 애들 중에 제 동료 다나가 있었거든요
데 큰 게임 만들고 이제 데 큰 엔진을 만들던 친구들인데
보고 나서 이제 저한테 는 얘기가
그냥 여기서는 상정을 안하는게 좋을것 같아요 아 그니까 글을 지우고 또
앓았던 적이 있어요
그래서 그런 식으로 그냥 온라인상에 어느 특정 커 뮤 니 스 주도하는
의견 자체가
아 뭐 양쪽다 저렇게 틀린 틀리고 옳다 라고 말할 수 없는데
반대쪽이 반드시 틀리게 옳다 라고 믿는 근거가 없는데 그냥 누가 그런다고
믿게 되는 상황이 있거든요
예전에 말했던 목 불편한 진실이 나 이런 것도 비슷한 얘기 같은데 누가
그렇다고 함 있는 것들
이제 그게 지금까지도 어쩌면 계속 내려 왔어요
나 료 내려왔고 이제 뭐 제가 아까 페이스북 처음 봤다 그랬잖아요 그
페이스북에서도 대부분은
이제 어느정도 쓴다 라는 개념이 좀 많더라구요
네 뭐 왠만 간단한 건 만들었습니다 라고 하는 해서 되게 많고 사실에
2pc 쪽만 하는 사람들은 이제 하이스트 에 쓴다 라는 식으로 이제 많이
얘기를 하시는데
문제는 제가 그렇게 pc 게임을 만들었다고 나중에 콘솔로 바뀌면
그것때문에 엄청 힘들었던 플렉스를 늦게 알아요 그리고 그것 때문에 이제
32비트 지금 64 l 많이 쓰지만 32비트 게임이 점점 커지기 시작할
때 메모리에 커지고 그 순간에 메모리 파편 1 때문에 더 이상 메모리를
못잡는 경우가 나는 것을 봤거든요
그래서
그래서 어찌보면 그
좀 까탈스럽게 게임을 만들었던 해서 그리고 엔진이 끝까지 잘 유지되고
나중에 가면서 이제 이렇게 게임을
제가 볼때는 그렇게 보면 게임을 이렇게 스케줄 따라 잘 냈던 회사 큰
이렇게 나중에 뭐 이상한거 터졌고 막 고치는데 이상한 노력 안하고
그런 회사들은 굉장히 노을 앱에서 짰어요 그러면 어레이 기반으로 짜거나
앉아 채 컨테이너 만들때 컨테이너가 이제 스틸에서 쓰는것보다 좀
제한적이라는 거 특히 이제 메모리 관리 쪽이 라던가 메모리 이제 재할당
이라던가 이런 부분에서 되게 제 안쪽으로 만든 들을 많이 받고 그 다음에
ea 가 아까 제한적으로 맞는데 단점은 인터페이스가 에 tl 컴퓨팅이
너의 인터페이스가 다루어져 당연히
그러면은 뭐
stl 컨테이너 인터페이스 별로 좋다고는 생각하지 않아요 뭐 굉장히 서로
다른 컨테이너 끼리 똑같은 인터페이스를 유지하기 위해서 이상한 짓을 많이
하고 뭐 거기다 알고리즘을 느끼해서 또 이상한 짓을 많이 하고 원하는
바는 문제라는 데
아 일단 그 방향성을 자체가 좀 너무 익스트림 으로 간 op 케이스
고전은 보고 있고 그리고 요즘 최신 나오는 모던한 그런 아 언어 들에서는
그 방향을 더 이상 가지 않아요
컨테이너 별로 이제 특화된 좀 인터페이스가 있고 공통된 것은 공통되게
가는데
그런 식으로 많이 가게 되죠 게임 회사에서 만들면
근데 그 중에서도 유일하게 이제 정말 stn 시프 lst 에 레그 규격의
아띠 똑같이 하면서도 자기 내가 좀 더 뭐 메모리 할당을 좋게 한다거나
내부적으로 좀더
성능을 높여 올린다는 그런 측면에서 만들었던 stl 하나 있구요 그게
이해에서 만들어 east 라고 있고 그건 오픈 소스 에서 많이 쓰기는
해요
그리고 일단은 stl ez 왜 간단한 것만 쓰면 만들어 쓸 수 있는데 그
이상이 되는 좀더 복잡한거 를 쓰기 시작을 하면 은 이제 그런 esta
정도로 가져다 두는 것도 좋죠
cms 라이브러리를 척 직접 만드는 사람이 있듯이 stl 아이돌 듯싶지만
만드는 사람이 찍 나오고 있는 거예요
네 뭐 어찌보면 대부분의 게임에서 다행이라고 할 점은
들수 뭐 써야 되는게 어레이 벡터 매
몫의 이정도가 솔직히 대부분이 쓰는것이 거기서 좀 더 깊이 들어가는 거
좀 들 쓰잖아요 사실은
그래서 그런 의미에서 만들어 쓰는 것도 아직도 유아 고 2 st 를
씁니다 라고 한 사람도 저는 박수 쳐 줄 것 같고
시프 프레스 t 를 직접 씁니다 라고 하는 사람들은 조금 음 조금 걱정
할 것 같아요
솔직히 제 개념은 그래요 그래서 일단 그게 있고
근데 또 재미있는 것은 이제 언리얼 엔진 2 e 투어를 보면은
그게 오픈 소스로 돼 있어요 굉장히 오랫동안 업소소개 있었고 그럼 모든
엔진에 코드를 볼 수가 있어요
그리고 제가 언리얼 엔진 포를 좋아하는 것 중에 하나가
4 문서화가 잘 되어 있어요 걔네 웹 페이지에 가면 은 코딩 슬라드
문서가 있어요 우리가 코딩을 어떻게 짧고 이렇게 코딩 스타일을 따라
굉장히 좋은 어드바이스 리 많고 또 하나 여기서 주목해야 될 것은
계 4 5 자체의 스틸이 있어요 그 자체 이제 뭐 벡터 같은 타입이 있고
자체 맵 같은 타입이 있어요 st 에라곤 다른데 걔는 기본적으로 그걸
써요
이유는 제가 아까 말한 거랑 똑같아요 와 뭐 그렇게 복잡하게 할 필요
있냐 어차피 간단하게 하면 되는거 아니냐 라고 말해도 되는데
개 내가 지금 추구하는 플랫폼을 보면은
예전에 뭐 당연히 pc 할 때는 좋았죠 엑스박스 할 때도 그때도 이제
가상 메모리가 제대로 안 들었기 때문에 그런 문제 있으니 그 때부터 갖고
온 걸 수도 있는데 그래서 요즘은 이런 세상이 돼서
걱정이 없지 않냐 이제는 뭐 뭐 뭐
최신 코스도 이제 지원 제대로 지원하지 않냐 라고 말하는 순간 모바일 번
지원해야 되고 라고 말하는 순간 이제 안드로이드 tv 이런 이상한 플랫폼
지원 해야 되고 그 메모리가 훨씬 작은 이상한 플랫폼을 지원할 수밖에
없고 거기서 메모리 할당이 너트 일지 os 가 제대로 지원할 지 모르는
상황이거든요
그 상황에서 이제 그런걸로 포스팅을 하기 시작한다 고 하며 는
난리가 나는 거죠 게임의 있는 코드를 뒤집어야 되는 상황이 없는거죠 사실
근데 그걸 처음 또 잘 관리되어야 때문에 게임의 있던 코딩은 두고 나머지
것들을 이제
까 엔진 쪽에서만 좀 고치면 되는 거고 그래서 그런것도 있는것 같아요
대표적인 예가 이제 또 하나가 이제 마이크로소프트가 마인크래프트를 1 4
같잖아요 예전에 모 장으로부터 그리고 그 뒤에 마이크로소프트 하니까
마인크래프트 게임의 여러 플랫폼으로 나왔어요 지금 pc uw 필요도
나왔고 이제 뭐 안드로이드 부모 나온 것도 알고 있으시죠 오고 엑스박스
로 나온 것도 알고 있을거고
처음 뭐 장이 만든것 잡아 했거든요 근데 이젠 애들은 당이 따른 플랫은
가야 되니까 당연히 자 바른 아니니까 다른 언어로 코팅을 했겠죠
그럼 그거 를 지원하면서 메모리 관리는 어떻게 했어요 그냥 자바에서 했던
레퍼런스 기반으로 무조건 다 던질 수 있겠어요
그럼 임베디드 시스템에서 불가능하다고 요 그럼 걔네 들어 엄청난 진영을
집어넣어서 고친 거에요 근데 이걸로 처음부터 짧든 사람이 야 이게
언젠가는 클 수 있구나 생각을 하고
컨테이너를 만드는데 이런 컨트롤을 만드는 패턴을 확실히 정립하는데 초기에
정말 1
길어봐야 일쯤 임 아니거든요 그 일주일 만에 시간을 퍼부어서 곡을 만들어
놓았다면 그 나중에 해야되는 포팅 작업이 나 그렇게 훨씬 쉬워 수밖에
없어요 왜냐하면 은 뭐 코드 리팩토링 하시는 분들 알겠지만 코드 1 바꿀
때마다 어차피 테스트 다 해봐야 되는 거니까 그런 걱정이 없는 거죠 이미
존재하는 이 라이브러리 인터페이스 정해져있고 인터페이스 바꿀수 집에
그대로 갈 수 있으니까 그러면서도
메모리 그렇게 걱정 안 해도 되니까
그래서 저는 특히나 이제
뭐 딱 플랫폼 1 0으로 만드는 게 아니면 뭐 게임 있는 임베디드 시스템
이들은 가끔 플랫폼 않아 용으로 만든 프로그램이 있어요 그건 그냥
어떻게든 솔직히 상관없어요
근데 그게 아니라 여러 플랫폼으로 가야될 게임이나 애플리케이션 이런
것들은 그
뭐라 그럴까 애플리케이션 레이어와 엔진 레이어 의 분리가 굉장히 중요한
것 같아요
인터페이스를 전까지 뭐 제가 말한 뭐 인터페이스 op 에서 인터뷰에서
얘기하는게 아니라
api 인터페이스 한마디로 함수 호출 어떤 시그네쳐 쓸 거냐
그러면 애플리케이션 레이어 에서는 이 함수로 추천 언제나 작동한다는
가정을 하고 엔진 레이어 에서는
그걸 따르게 구연 만 해주면 되는 거거든요 근데
이게 어찌보면 은 그 예전의 op 그룹에서 2 op 에서 처음 나서 인
벌써 러브 컨트롤이 라고 있잖아요 컨트롤의 전환 이라고 하는거
그래서 그게 요즘 막 디아 2로 이상하게 변질이 되고 막 그랬는데 그 쪽
벤더스 인젝션 으로
거기에서 주장했던 수치 저는 그런 부분이라고 봐요 내가 이것을 바꿨을
때도 밑에는 무리없이 돌아야 된다는 밑에 바꿔도 위에는 앉게 해 줘야
한다 이런 개념으로 보는데
그거를 이렇게 레이어 별로 분리가 아니라 거의 오브 제트 별로 분리를 한
느끼 이제는
그래서 수백만 만 가지 조합이 나와서 이상해질 수 있는 되게 관리하기
힘들어 지는 그런 개념인데
사람 2 내에서는 2개는 쉽게 분리 가능하고 생각을 하거든요 저는 그런
식으로 확실히 분리를 해 주고 사용하는 습관이 들어야 되는데
모르겠어요 는 거의
앙크 방 그런 사람이 더 많지 않나 싶은 생각이 들어 니까 좀 그 딱
원칙이나 바운더리 정해 놓고 코딩을 못하는 사람들
제가 이거를 또 다른 것을 느꼈던 게 최근에 또 다른 이상한 짓을 하고
있는 하나 있는데 최근에 그런 걸 느꼈어요 굉장히 요즘 유행하고 있는
그런데
페라라 이미 있는데
거기서 이제 하는 좋은 가지 두가지가 있어요 그냥 이제 아 여기서 이득이
되는 왜 그래야 되는지는 알겠는데
이거를 3 빛 관리를 못하는 거예요 어떻게 해야지만 이 겐 나중에 관리가
되고 나중에 뭔가 변하더라도 쉽게 쉽게 바꿀 수 있고 이런 생각을 해야
되는데 그냥 너무 이상적으로 간건지
그냥 너무 자세히 알아보지 않고 그냥 아 이렇게 하면 되는구나 에서 그냥
수백 만 가지를 던지는 건지 모르겠지만 그게 잘못된 나중에 관리가 안 될
수 있는 그런 이상한 패턴을 따라 가고 있는게 보이는 게 하나 있어요
그게 단순히 몇 명 의 문제가 아니라 전체 인더스트리 에서 그렇게 가고
있는게 보이고 있고 저도 그곳에서 열심히 고생을 한 끝에 그 중간에서
이걸 어떻게 원칙을 세워서 이런 패턴으로 가면 훨씬 얇게 꾸나 라는
생각이 드는 게 있거든요
또 그런
뭐 그건 정리되면 나중에도 자세히 가 얘기 할 거고
그런 식의 사고방식을 발전시키는 게 되 게 좋을 것 같아요 그러면 그걸
하려면 역시 제가 좀전에 예를 들었던 머얼리 얼이 라던가
무슨 제대로 만든 엔진 들이 라던가 이런걸 봐가면서 얘네들이 이렇게
했구나
아 그리고 왜 이렇게 했을까 를 고민해 가는 과정이 되게 중요하다고
보거든요
그래서
뭐 제가 나서 각 언리얼 엔진을 고치고 마이 걸 뭐
몇주동안 고쳐 먹고 한해가 이거라고 쳤어 라고 좋아하는 스타일의 아니기
때문에 전환 그런데 가끔 어떤 분들은 그런거를 직접 고 치시는 분도
있더라구요 그냥 열심히 고치는 거 좋아하고
나중에 열심히 하시면 고치고 또 이제 오픈 소스 니까
거기다 공원도 해보고 그럼 거기서 또 이제 받아들여지면 언제라는 거의
공원 잘하고 좋아하시고 그리고 크게 좀 계속 하시는 것도 있는데 그런
분들 들이 이라며 는 그리고 그런 분들 게임의 있다면 저는 언리얼 엔진을
한번쯤 그런 식으로 들여다 보고 거기에서 넣어 넣어 넣어 수많은 제
약점을
이해해 보는 거 되게 좋을 거라고 생각해요 게임 개발자로 소 고 또
하나의 장점은
2기 오픈 소스 가 돼 가면서 이상해 지는 건데 뭐 언리얼 도 그렇고
이제 파이어폭스 쪽 같은 경우에 이제 브라우저도 그렇고 그 오푸스 에
참여해 갖고 열심히 컨트롤하고 이제 그래서 이제 본사에서 아 이게 참
잘한 애구나
아까 콘트리트 대충 아는 게 아니라 잘하는 애 구나 라는 게 이제
인식이 되면 은 그렇게 채워 라는 경우도 있더라구요 그래서
뭐 제가 이렇게 3 나아가는 채용 방식은 아니지만 저는 그 정도로 공기가
좋지 않기 때문에 그렇게 채용 되시는 분들은 보긴 봤어요
그래서 정말 이제 뭐 말도 안되게 북미 취업을 하겠다고 하시는 분들중에
아 그래 난 오픈 소스 컨트롤에서 북미지역 할 거라고 생각하신 분들이
계시면
그것도 불가능한 방법은 아니에요 사실이라 그리고 심지어는 제가 또 마소
쪽에서 1
그 말씀을 드리면 마소에서 옛날에 엑셀의 이라는 플랫폼의 있었어요
4 여부도 굉장히 잘 만든 게임 엔진 이었는데
제거 더 많은 사람들은 이걸로 배우로 추천 했었는데 지금은 죽었죠 그 예
이제 더 이상 만들지 않는데 그 xml 가 나왔던 시점에 커뮤니티에서 그
x 의 에 이제 굉장히 뽀 럼블의 댓글을 자라라고 이제 x2 내가 이런게
있으면 이런 식으로 패턴을 만들어서 이렇게 만들어라 고
되게 답글을 달아주는 사람이 있었어요 이름은 얘기할 수 없겠지만 그
사람이 나중에 제가 마속 세미나가 오니까 이제 mvp 재미 나갔어
가보니까 거기서 디렉 텍스 팀에서
실제 이라고 있더라구요 그러니까 그 당시 이제 윈도 수 번 지원하고
이런거 때문에 이제 디렉 텍스 라이브러리를 전부다 하나로 뭉쳐 갖고
모든걸 지원하게 만드는 과정 이었거든요
그때 그 사람 을 채용해 가서 그 사람 어서 일하고 있었어요 그래서 그런
것처럼 오픈 소스에서 열심히 작업하고 활동하는 게
직업을 잠 데 도움이 되긴 돼요 그게 반드시 이걸로 잡을 수 있다는
모르겠지만
그냥 자기 성향이 그런 사람이고 그런걸 좋아하는 사람이라면
그거 를 통해서 이제 뭐 돈을 번다고 얘길 하죠
예 돈을 버는 방법을 참여 것도 나쁘진 않은거 같아요
오늘 얘기도 뭐 보통 떼가 주저리주저리 말이 많았는데
처음 시작은 stl 2기로 시작을 했고
어 제가 생각하는 sdl 은 저는 쓰지 말자는 주 이게 좀 가까워요 근데
요즘 또 막 그럼 어 무브 컨스트럭터 나오고 마이런 r 데 래퍼를
나오면서부터 아 이걸 내가 직접 만들어야 되나
이 생각도 솔직히 많이 드는데
제가 엔진을 만들었을 때는 마지막에 제가 제손으로 직접 잘 만들었을 때는
그게 나오기 전이어서 다시 한번 검토를 해 보게 해야 되요 근데 제가
만약에 st 를 쓰겠다 결정을 한다면 저는 est 를 갈 가능성이 되게
많아요
그 정도로 이 제 생각을 말씀 드리고
어
그리고 이제 스트레스 들어도 언제나 메모리 관리 쪽을 제 신경써 줘야
되고 특히 주에 벡터 같은 경우에 위 전북 암 수가 있잖아요
리즈와 가능하다면 미적으로 반드시 해야 돼요 근데 그걸 안 하는 삶이
되게 많아요
그걸 강요하는 이제 패턴 자체가 st 리 없었고 너무 자유롭기 때문에
그런거 였고
이제 그런
까다롭게 박성혜 코딩한 되는 것은
이게 굉장히 개발 속도를 느리게 만들지 않는 이상은
대부분이 좋은 일이에요
그 이유가 일단은 유지보수가 되게 주어지고 요 그리고 일단 뭐 나중에
디버그 라던가 아니면 뭐 사람 코디 이해하는지 편해지고
그런 원칙을 지키며 코딩하는 것 자체가
나중에 가서 뒤어서 유지보수 남이 결정이 되게 쉬워지고
그리고 나중에 가면 큰 시스템을 디자인하는 데 도움이 되요
그런것을 보고 싶으면 괜찮은 오픈 소스 등 나쁜 업소가 아니라 괜찮은
오픈 소스를 좀 보기를 원하고
게임 쪽이라면 저는 언리얼 볼을 굉장히 크다고 생각을 해요
참고로 유니티가 오픈 소스 가 안되는 이유는
코드가 될 부리기 때문입니다
그래서 그건 어깨선이 돌고 있는 유니티는 코드를 보는 순간 암 걸린다 고
그래서
뭐 그만큼 이제
유니티의 문제는 조금씩 더 많아지는 반면에 언리얼엔진 좀 더 강해지는
이유이기도 하겠죠
유지보수가 쉽다 는 것 자체가
그래서 그 정도로 정리를 하고 예 뽑혔습니다
