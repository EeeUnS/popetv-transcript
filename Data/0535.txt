[음악]
w
이하늬 와서 뽑습니다 cpu 쪽 그쪽에 최적화를 좀 보시고 cpu
파이프라인이 어떻게 구축이 되는지 아시는 분들은 조건문 분기 문 이런게
굉장히 안 좋다 라는 얘기를 들어보셨을 것 같아요 뭐 들어봤던 알들은
괴이 풍문이 됐든 스위치 문이 됐든 결과적으로 컴파일 되고 똑같은 거니까
입후보 이나 스위치 같은거 많이 쓰지 말아라
특히 이 푸 스위치 한 다음에 그 다음에 반복문을 돌릴 수 있는거면
그렇게 하고 반복문 안에 이 뿜은 놓지 마라 라는 얘기 많이 들어보셨을
거에요
다 좋은 얘기에요 그러나 여기서 한가지 모르시는 것도 있어요 저도
예전부터 알고 있던 거긴 한데 저는 주니어 떼고 달고 있긴 했는데 최근에
그거 관련 최적화 한 번 더 할 일이 있었거든요 그래서 그걸 한번 더
말씀드리려고 하는 겁니다
참고로 말씀드리면 은 그 수위 침은 스위치 문을 보통 얘기를 할 것인데
최적화가 잘 되니까 스위치 문으로 해서 어떤 이넘 깍 같은거 그 이넘
값을 뭐 0 1 2 3 4 이런식으로 하나씩 케이스 만들어 갔고 그 안의
코드를 작성할 하죠
그렇게 작성하는 굉장히 간단한 것들 있잖아요 이프 0이면 은 이거 바나
이프 일이며 는 적어 반할 이프 이면은 적어 반할 이런식 그런 식으로
작성되어 있는 코드는 요 컴파일을 하면 대부분의 경우에 컴파일러 최적화를
해 줘요
풍기 몬 업계 어떻게 분기 문이 어깨 주냐 루 컵 테이블을 만들어 줘요
그냥 그루 컷팅을 뭔지 아시죠 그냥 배열 같은거 잡아놓고 배열 0
들어오면은 일반 안하고 입안하고 3 바라고 이런 식으로 실제 컴파일하면
쥐가 스위치 문을 보고 아 이게 0부터 10까지 아니면 0부터 10까지
인데 중간에 듬성듬성 하는걸 보고 아 이러면 그냥 내가 대여를 만들어
버리고 그 두루 오는 이넘 값을 세긴 으로서 갖고 곧바로 반환 해 주자
이렇게 해서 완벽하게 출력할 해 줘 그래 그 데이터는 당연히 뭐 코드
섹션 이라던가 이런데 데이터 섹션 이라던가 그런데 배열로 들어가 있을
거고 약간 글로벌 배열 비슷하게 그러면 코드는 정말 그 배역을 놓고 팜
번 해 오는것 당연히 메모리가 3번 끌고 오는 거기 때문에 까 메모리
인디아 액션에 따른 비용은 들지만
하지만 cpu 파이프라인 때문에 뭐 파이프라인 22 단계라 8822
10단계 다 그 단계 동안 스토리 니 걸리는 일은 없죠 요거 모르셨던
분들은 앞으로 이넘 같은거 숫자 같은것 작은 숫자들 들어올 때 이 품은
보다는 스위치 글 써서 잘 보이게 하고 그리고 아마도 2+2 치면 똑같이
작동 안하겠지만 은 수위 춤으로 작성하는 순간 컴파일러가 알아서 6화
템을 바뀌죠 근데 최근에 했던것은 그런 최적화를 알고 계신 분이 어느
게임 엔진의 렌더링 엔진의 그거를 넣은 어떤 거기는 해요
어떤 식이 언 냐 면 은 보통 멀티플랫폼 만드니까 크로스 플랫폼 게임을
만드니까 그 모든 플랫폼에 공통되는 어떤 모드 예를 들면 은 뭐 제일
간단한 것을 생각해보면 은 그냥
색상 모드 라고 해보게 색상 폼의 뜰 그 색상 포멧을 다이너 모 로
만들어 두고 그리고 각 플랫폼 마다 이 이놈이 면은 그 플랫폼에 맞는
데이터 퍼맨 이넘이 있을 거 아니에요 그 걸로 바꿔 주는거 그래서 스위치
못쓰고 케이스 간 10개 20개 되는 그런 문을 써 놨어요
엄밀하게 말하면 이거는 당연히 한 번의 루 컵 탭을 만들어서 컴파일러가
해줘요 그걸 알고 만드신 컬 거 같아요 근데 코드를 돌려 봤는데 생각보다
그 코드가 빠르게 나오지 않았어요 생각보다 께 보틀 액으로 잡혔어요
왜냐하면 그 코드가 8 프레임이 1 2천 번 넘게 호출이 되는 코드 긴
했어요 그래서 굉장히 많이 흘리는 코드 그 알수 없게 어디선가 쪼금
느리게 나왔어요 그래서 이게 왜 그러지
나는 거 봤어요 컴파일과 추적하다 안됐나 봤는데 재밌는게 보이는 거야
컴파일러 최적화 는 됐어요 되기는 됐는데 그 중에 한군데 어셈블리어
보다보니까 여전히 컴페어 한 다음에 점프하는 문이 보이는 거예요 그러니
품은 이딴 얘기 것 은 금 1g 코드를 좀더 보니까 어떤 경우엔 냐 면
보통 스위치 케이스를 쓰다보면 요 스위치 케이스 어쩌구 케이스 쪽 케이스
쪽 안 다음에 마지막이 틱 뽈 틀을 넣고 거기다가 어썰트 0 같은걸 놓고
그게 0이면 다시 잘못된 갑시다 라고 바나나 이런식으로 코드를 작성하는
경우가 흔해 요
왜냐하면 은 내가 공통된 플랫폼의 이넘을 하나 추가 했어 근데 내에 플랫
폰 닌텐도 옥 스위트 라던가 그런데도 사용되는 이넘을 매칭되는 이름을
추가할 안 한 거야 그런 경우에 실수 로 추가 난 했기 때문에 그 실수의
잡고 싶은 거 거든요 그래서 어 세트로 넣는 거거든요 그 그런 식으로
만들어 놓은 거에요 근데 중요한것은 다른 것들 그 디폴트 500은 다무
컵 탭을 컴파일러가 만들어 줘 근데 디폴트 인 경우 하나만은 거기다
어썰트 2 하고 이상한 갚아라 반응 하니까 그거 를 따로 노컷 해볼 못
만들더라
그래서 그거는 그냥 테스트 한 다음에 컴페어 한 다음에 점프 해
버리더라구요 그거 하나를 고 침으로 있는 성능 있게 빨라진 경우가 있어요
최근에 좀 웃기죠 말이 안되게 써 그런 것들을 보면서 야 이고 재미
있구나 라고 하면서 이거를 컴파일러가 해준다고 다 믿고 가는건 좋은데
정말 나은 생각도 못한 곳에서 컴파일러가 약간 조금 더 비효율적인 코드를
만들어 주고 그 특히 웬 더 링 같은 코드를 함수 하나가 한 프레임에
12,000 13,000 오툴 되거든요
그런 하나가 신경이 쓰이는 거에요 그래서 저는 그거 를 직접 아예 제
손으로 배열로 만들어 줄 거 팩으로 만들어 왔어요
참고로 말씀드리면 앞에서 그런 루 컵 테이블 안만들고 케이스 문 넣구
어썰트 디폴트에 눈이 실수 막기 위한 것이잖아요 딴 쪽에서 휴가 있는데
내 쪽에서 추가 안한거 그런 실수를 막기 위해서 있는데 크게 막을 내면
오히려 컴파일 타임 컴파일시 튜 풀이라고 있어요
제가 예전에 블로그로 난가 갔을 수도
있고 아닐 수도 있는데 그 매크로 줘 매크로 잘 이용하면 은 하나 추가할
때마다 다른 플랫폼의 더 추가 되는것을 옆에 컴 마로 추가해 놓고 실제
이넘이 라던가 로 컵 테이블을 내 매크로 이용해서 이거 디파인 하고 이거
붙여 놓고 다시 언 디파이 라는 방법으로 컴파일시 q 풀을 만드는 방법이
c 하고 싶은 뿌리 있어요 모르시는분들 거쳐야 보시고 그 방법을 사용
하다보면 실수를 할 수가 없는게 내가 새로운 이 너무나 추가 했어 그러면
그 옆에 컬럼 들의 각 플랫폼에 이름을 넣어야 되요 않는 우승하게 비어
있기 때문 딱 눈에 보이거든 그런 식으로 데이터를 한번에 관리 하되 실제
써야되는 루 컵이나 이런건 컴파일 중에 매크로를 만들 수 있는 방법들이
있어요 그게 훨씬 더 좋은 방법이고 그거를 왜 굳이 안 썼는지 모르겠어요
프로그래머는 머그 프로그래머 늘 다른 여러 가지 문제들 때문에 쪼까
한걸로 알고 있는데 요 무대 때문에 아니었고 이 사람을 보면서 아 이
사라의 분명히 최적화에 대해서 알고 있었구나
이 디폴트 문 말고 스위치는 케이스를 사용하면 추려 카가 되겠군 되는걸
알고 있었구나 생각 들지만 정말 어쩜 불려 까지 보고 이게 왜 타이
20일 나오지 그 생각을 못 했구나
그리고 이 사람은 이 컴파일 c2 풀이라는 방법을 모르고 있었구나 생각을
들었어요 컴파일 슈트 프 저는 예절의 조구 주니어 때 곧 알고 있었던
거거든요 저희 위에 회사 창업하시는 분들이 캡콤 밴쿠버 창업 하셨던 그
분들 켜고 받고 나중에 된거죠
그분들이 ea 에서 일할 때 낙 가지고 나온 기법들을 저도 가서 보고
배웠던 거든요
c 씨 부부 게임 만들 때는 정말 컴파일 gq 풀 잘 사용하면 실수 로
엄청 막을 수 있고 코드도 복잡해 지지 않고 최적화도 짱짱 으로 나오는
방법인데 그걸 왜 좀 몰랐을까 업계에서는 흔히 알려진 방법인데 그리고 그
일을 했었던 무의 제가 알기론 경력이 20년이 넘는 분인데 조금 안타깝긴
했어요 뭐 어쨌든 그 얘긴 그렇고 오늘은 나름 이제 프로그래밍 했죠 그
들으시면서 아 이런게 있구나 라는 깨달을 수 있는 기회가 되셨으면 해요
해서 그냥 가볍게 빨리 짧게 씁니다 붙였습니다
