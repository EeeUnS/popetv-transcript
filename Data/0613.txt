안녕하세요, 포프입니다.

제가 저번 편에서 유닛 테스트하자고 했다가 잘린 친구 이야기를 하면서 '그 회사에는 다른 어마무시한 테스팅 기법이 많이 있었다'는 얘기를 했어요. 오늘 다 얘기할 수 있을지 모르겠는데, 일단 몇 개를 얘기 드리면 여기는 매일 밤마다 도는 자동화 테스트가 있었어요. 게임을 만들고 있는 회사였는데, 어떤 테스트가 돌았냐? 매일 밤에 컴퓨터 하나가 일어나서 게임에 있는 모든 맵의 레벨에 한 번씩 들어가요. 그다음 단계별로 0초에 한 번, 15초에 한 번, 3분에 한 번 이런 식으로 해서 현재 화면의 스크린 샷을 찍어요. 그리고 그 스크린 샷 찍은 걸 어제 찍었던 거랑 비교해요. 그래서 이게 하나라도 바뀌었으면 문제가 있다고 보고해요.

이걸 할 때 한두 가지 정도의 문제가 있었어요. 첫째, 10초나 15초가 지났을 때 게임이 정말 동일한 화면이 열려고 하면 게임 진행 자체가 Deterministic 해야 해요. Frame Rate 자체가 고정적이어야 해요. 옛날에 스타크래프트 할 때처럼 '초당 60번 업데이트한다.' 뭐 이런 식으로. 실제 이 게임을 자동화 테스트를 하기 위해서 처음부터 그렇게 만들었고, 그게 언제나 보장이 됐어요. '어느 컴퓨터에서 돌려도 10초 뒤에는 정확히 동일한 화면이 나온다.'. 물론 10초라는 게 시간상으로 10초가 아니죠. 거기서 프레임이 10초만큼 지났을 때, 프레임마다 일어난 일은 동일하다. 그래서 스크린 샷을 찍었을 때 문제가 있으면 보고하고, 클릭하면 회사 인트라넷 들어가서 어제 화면과 오늘 화면을 보여주게 했어요.

근데 하다 보니까 또 하나의 문제가 생겼어요. Particle System. Particle에는 일반적으로 랜덤한 걸 넣긴 하거든요? 그래서 Particle이 생각보다 랜덤하게 진행되는 문제들이 있었어요. 그래서 이 사진을 찍을 때 처음에는 Particle을 아예 꺼버리고 찍는 방법이 있었고, 나중에는 또 Particle 진행도 Deterministic 하게 만들어서 Random Seed도 동일하게 맞춰서 그걸 동일하게 보여주는 식으로 일을 했어요. 그러면 밤마다 우리가 '게임에 레벨이 한 50개가 있다' 그러면 컴퓨터 하나가 일어나서 50개의 레벨을 들어가서 스크린 샷을 찍어두고, 그 스크린 샷 기록 매일 다 저장해 놓고, 그걸 비교해서 보여주는 대시보드가 있었기 때문에 '만약에 어떤 이유에서든 간에 의도치 않은 큰 변화가 생겼다.' 그러면 이제 우리한테 보고가 오고 우리가 보던 아티스트가 보던 그런 방식으로 일을 진행할 수가 있었죠. 어떤 거 조그만 거 하나 고장 나면 결과적으로는 최종 화면에 그런 문제들이 보이는 경우가 더 많거든요?. 그래서 이게 사실은 웹 쪽에서 말하는 Integration Test나 E2E Test에 가까운 건데, 그런 걸 자동화해서 스크린 샷을 찍는 걸로 대신 할 수가 있었어요. 

다음은 또 비슷한 테스트로 이런 게 있었어요. 그 게임에 등장하는 캐릭터가 제가 몇 명인지는 기억은 안 나는데 이것저것 조합이 됐거든요? 몸통하고 얼굴하고 텍스쳐도 바꿀 수 있고 조합이 됐어요. 그걸 합치면 제 기억이 맞다면 몇천 개 정도의 조합이 나왔을 거예요. 그 몇천 개를 역시 스크린 샷을 찍는 자동화가 있었어요. 다른 컴퓨터가 하나 일어나서 우리 정해진 샌드박스 레벨을 로딩하고 거기다 캐릭터 텍스처 조합 해놓고 찍고 찍고 해서 어제랑 또 비교하기. 이 문제는 또 하나가 뭐였냐면 조명을 누군가 손을 대면 조명이 바뀌기 때문에 뭔가 바뀌겠죠? 그런 날은 못 알아볼 수도 있지만 그건 역시 조명을 빼고 또 '스크린 샷을 찍기' 이런 걸 만들어서 처리했던 것들이 또 있어요. 그래서 이건 아트 쪽에서 '뭐가 바뀌었나?'가 더 궁금해서 만들었던 거죠.

이건 저희가 했던 건 아닌데 다른 회사가 했던 또 괜찮은 그런 자동화 테스트들이 있었어요. 이건 어찌 보면 그냥 단순히 '뭐가 고장이 났다'가 아니라 사람들이 게임을 하다가 어딘가에 빠져서 못 움직이는 경우들이 있잖아요? MMO 할 때도 그런 경우 있죠? 어딘가 빠져서 운영자를 부르면 운영자가 이렇게 딱 텔레포트 시켜주는 거. 그런 거 막기 위해서 했던 부분인데, 브루탈 레전드라는 게임일 거예요. 잭 블랙 아시죠? 스쿨 오브 락 영화 나왔던 애. 걔가 그때 스쿨 오브 락 나왔을 때 메탈 쪽으로 유명하니까 걔를 메인 캐릭터로 해서 헤비메탈 하는 어떤 애, 그리고 탐험하면서 돌아다닐 수 있는 그런 맵을 만들어서 만든 게임이 있어요. 되게 유명한 게임이었고 약간 매드맥스 분위기 나는 게임이에요. 그 게임에서 사람들이 돌아다니다가 이렇게 자꾸만 맵 어딘가에 걸려서 못 나오는 일들이 있으니까, 얘네들은 아예 랜덤하게 캐릭터로 움직이는 테스트를 만들어요. 그래서 그냥 그걸 계속 돌리는 거야. 그러면 캐릭터가 움직이는 거야. 계속 앞으로 한 발짝 오른쪽으로 한 발짝 랜덤하게 오른쪽으로 한 발짝. 그래서 계속 끝도 없이 돌아다니다가 어딘가에 딱 걸렸다? 그러면 그 순간에 걸렸다는 것을 보고했던 걸로 알고 있어요. 그래서 그런 식으로 얘네도 자동화해서 테스트했죠. 그래서 이건 어찌 보면 '그냥 돌아다닐 수 있는 모든 곳에 대해 테스트한다', 역시 E2E Test 개념이고 UI Driven Test거든요? 어떤 의미에서. '스틱을 위로 올린다, 옆으로 옮긴다' 이걸 코드를 작성해서 한 거기 때문에. 그런 식으로 했고, 이 회사인지 다른 회사인지는 모르겠는데 비슷한 개념으로 역시 히트 존을 테스트하는 QA를 하는 회사도 있었어요. 그건 뭐냐면 게임 같은 경우는 '내 게임이 반드시 초당 30프레임을 보장해야 한다.' 그러면 30프레임 가다가 어느 순간 10프레임 떨어지는 경우들이 있거든요? 그런 경우들은 거기를 최적화해야 해요. 보통은 에셋 최적화일 텐데, 그러면 그런 최적화를 하기 위해서 어디가 느려지는지 알아야 하는데 일반적으로는 QA들이 많이 그걸 해주고 근데 그 외에도 이걸 자동화하기 위해서 브루탈 레전드에서 말했던 것처럼 그냥 랜덤하게 움직이는 캐릭터들이 있고, 랜덤하게 움직이다 보면 어느 장면에서 FPS가 떨어지더라. 그럼 위치가 어딘지를 월드 좌표로 기억한 다음에 최종 테스트가 끝난 다음에는 탑다운 뷰로 본 2D맵에 프레임 수가 60 이상이었으면 초록색, 30 이하였으면 노란색, 15 이하였으면 빨간색 이렇게 해서 히트 맵을 아예 만들어서 보여주는 그런 자동화도 한 적이 있었어요.

그래서 이 게임 쪽의 자동화라는 건 애플리케이션 프로그래밍에도 적용이 되는 거거든요? 어쨌든 사용자 중심 프로그램의 자동화라는 건 사용자가 사용하는 입장에서 테스트 자동화를 잘해줘야만 해요. 그렇게 해야지만 사용자가 실제 어떤 불편을 겪는지 아는 거고, 그래서 이런 제품에서 사용자가 사용한다는 것은 UI 쪽으로 뭘 사용하는 게 맞거든요? 게임은 스틱이고 웹이면 어디 어디 클릭하는 거고. 그래서 이런 UI 자동화를 통해서 많은 것들을 테스트하다 보면 실제 제품에 어떤 문제가 있는 것들이 제일 많이 나오고 제일 가성비적으로 좋은 부분이기도 해요. 자동화를 계속 돌릴 수 있으니까요. 웹이나 앱 같은 경우는 이미 UI 자동화가 굉장히 잘 되어 있고요, 자바 시절부터 Selenium 자동화 굉장히 잘 되어 있고, 모바일은 또 여러 가지가 있는데 찾아보면 괜찮은 것들이 몇 개 있어요. 제가 예전에 썼던 건 Appium이라는 걸 썼는데 지금도 그게 많이 쓰이는지 모르겠어요. 그런 식으로 자동화하다 보면 굉장히 많은 문제를 찾을 수 있고 그러면 최종적으로 남은 함수 하나의 기능을 테스트하는 유닛 테스트 같은 경우들은 정말 데이터가 굉장히 잘 정형화된, 데이터와 데이터만을 판단하는 것들 아니면 어떤 실세계에서 정해진 공식 같은 걸 테스트하는 데는 꽤 유용해요. 한마디로 그쪽은 저는 오히려 Data Driven Test 쪽에 가깝다고 생각하고 있었어요. 그래서 게임 쪽에서 이런 어마무시한 것들 했어요.

전편에 얘기하고 이제 연결해 보면 사람들이 봤을 때 흔히 생각하기 쉬운 테스트가 아니에요. 근데 이건 정말 사용자가 보는 입장에서 테스트하는 거고, 그리고 지금 모바일 앱 같은 경우도 테스트 자동화 툴이 많이 나왔거든요? 그중에서 이런 식으로 스크린 샷 찍어서 하는 것들도 있어요. 이게 사용자 중심으로 해서 올바른 방향이고 대단한 거고 만들기도 어려운데, 그 게임 회사가 이미 그걸 만들어서 하고 있던 회사였어요. 그런데 그 앞에 두고 '우리는 소프트웨어 품질이 안 좋은 것 같아. 우리가 유닛 테스트를 안 하면 우리가 소프트웨어 품질을 너무 신경을 안 쓰는 게 아닐까'라고 말했던 퍼포먼스적인 문제가 있던 주니어 프로그래머를 곱게 볼 시니어들은 별로 없을 가능성이 높아요.

그래서 뭔가 회사에서 큰 변화를 가져오고 싶다면 내가 일을 잘하면 충분히 다른 의도가 없겠구나 하고 좀 더 귀 기울여 들어주지만, 그게 아니면 오히려 회사에서 잘하고 있고 이뤄놓은 업적조차 까 내리는 그런 게 될 수도 있어서 네가 뭔데 까내려? 이러면서 기분이 안 좋을 수 있죠. 참고로 말씀드리면 이게 끝이 아니에요. 생각해 보니까 했던 거 또 몇 개 더 있어요. 이게 더 어마무시할 수도 있는데, 비디오가 길어지는 것 같으니까 다음 거 보시라고 또 여기서 끊고 다음 거에서 거기서 했던 또 다른 자동화 테스트를 얘기해 드릴게요. 거긴 좀 더 재밌고 비즈니스적인 측면도 좀 들어있어요. 다음 편에서 뵙겠습니다.

포프였습니다.