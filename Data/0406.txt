안녕하세요 포프입니다.
오늘은
오랫만에 코딩 스탠다드 얘기를 잠깐 해볼려고 해요 사실
이건 c# 코딩 스탠다드 쪽에 많이 관련된 것 같은데
물론 제가 쓰는 코딩스탠다드고, 이 밑에 이제 링크를 달아둘게요
여러번 솔직히 달아놨거든요 예전에도
이거는 코딩 스탠다드를 만들어 두고
이게 이제
예전에 한번 문제를 봤었는데 이런 문제를
그거를 그때부터 아 이 문제가 반복이 되겠다 싶어서  코딩 스탠다드를 올려 놓고도
저도 잘 지키지 못하는 부분 중에 하나예요
그래서 지금 있는 회사에서 비슷한 실수를 하는 경우를 또 봐서
아 이걸 강요를 해야 할까 라는 생각을 하고 있는데
어쨌든지 코딩 스탠다드에 이미 올라가 있는 것 중에 하나죠
이게 뭐냐면
Json파일 알잖아요 제이선
제이선 파일을 제가 예전에 얘기 했는지 안했는지 기억은 안나지만
제이선 파일을 쓸 때
음..
클래스로 아예 만들어 두고
그 클래스에서 시리얼라이즈 디시리얼라이즈, 직렬화 역직렬화 라고 그러나?
시리얼라이즈는 그냥 메모리에 있는 오브젝트를 파일이나 이런거에 쓰는 거고
디시리얼라이제이션은 이제 파일에 있는 것을 다시 메모리 오브젝트로 옮겨 오는 과정이거든요
근데 이제 C#계열에서 제이선 닷넷을 쓰면은
물론 자바쪽에도 GSon이라는게 있어요
제이선 닷넷이 훨씬 편하고 좋아요 사실은
그거를 쓸 때는 말그대로 오브젝트를 만들어 두고
예를 들어서  이제...
예를 드는게 편하니까 예를 들게요
사람이란 오브젝트를 만들었어요 클래스 person 이렇게 만들어 두고
거기에 firstName lastName. 한국말이면 그런게 없으니까
그냥 이름 하고 name. age 나이를  넣어놨다고 생각을 해봐요.
그럼 age는 int 타입일 거고 이름은 당연히 string 타입이겠죠
그러면 거기에 오브젝트를 넣은 다음에
제이선에서 시리얼라이즈를 해버리면 스트링이 나와요. 제이선이라는 스트링이 나와서 'name' 이렇게 들어가고 콜론 들어가고 '김포프'
그리고 밑에 나이 'age' 이렇게 들어가고, 콜론 들어가고 쿼테이션 없이 숫자니까  나이 '18' 세.욕먹겠다.
이렇게 나오는 거예요
그래서 이제
이렇게 제이선으로 가는 오브젝트라던가 순수하게 데이터를 주고받기 위해 쓰는 오브젝트를
데이터 트랜스퍼 오브젝트라고 해요. DTO 라고 해서 data transfer object.
DTO라고 해서 간단하게 만드는데
이제 자바나 c#프로그래밍 많이 해보신 분들은 알겠지만
DTO나 이런걸 쓸 때 특히 클래스에 프로퍼티가 있어요 그냥
C쪽에서 보면은, C가 아니지, C++쪽에서 보면은
세터 게터 이렇게 얘기하는 건데,
SetAge() GetAge() 이런 식으로 있거나 아니면  C#쪽에서는  Age 해놓고
프로퍼티만 하면 자동으로 Get 하고 Set 이 되는거죠.
뭐 자바에서 할래면은 자바가 프로퍼티가 들어왔는지 모르겠지만
제가 알고 있을 때는 없었거든요
그럼 이제 거기서는 그냥 퍼블릭 멤버로 해둬서 그냥 세팅할 수 있게
그럼 재밌는게
c#기준으로 얘기할게요 c#이 여기서는 가장 advanced 한 거 같으니까
new  음...
person이라고 했죠 . new Person 한 다음에 보통은 이제  디폴트 컨스트럭터 () 부르고  디폴트 생성자
그 다음에 밑에서 Person.Age  있고 Age = 18; Person.Name = "Pope"; 이렇게 쓸 거 아니에요?
근데 그걸 좀 더 편하게 하기 위해서 이니셜라이즈 리스트 비슷한 걸 만들었어요
그래서 코드를 쓸 때 실제는 new Person 이라고 해놓고 곧바로 컬리{}... 중괄호죠 이렇게 삐죽하게 생긴
중괄호 열고 그 밑에 Name  = KimPope, Age = 18 하고 세미콜론을 닫으면
e.g. New Person { Name = KimPope, Age = 18};
동시에 이제 오브젝트를 만들면서 멤버변수를 대입하는거에요.
어우 간단한 DTO 할때 정말 좋아요. 정말 좋은데,
여기서 이제 문제가 뭐냐면
이게 조금만 더 복잡해지면 굉장히 실수를 할 가능성이 높아져요
예를 들어서 이미 DTO에 필드가 10개 정도 있다고 생각을 해봐요
거기다 새로운 프로퍼티, 새로운 멤버 변수를 하나 추가를 해요.
그러면 그 멤버변수를 추가하는 순간
이거에 대한 올바른 디폴트 값을 설정해 주지 않는다면
여태까지 오브젝트를 쓰던 모든 곳에 가서 이 값을 대입해 줘야 돼요
예를 들어서 제가 신상정보를 다 집어넣는다고 가정을 해봐요
class Person에 집주소며 뭐며 막 있다가
이제 그게 한 20개가 돼요 제 신상에 관한, 신상이 많이 털렸지
그러고 이제 마지막 줄에 새로운 걸 추가하는거예요.
아 이사람이 자산이 얼만지 추가하자.
그럼 netAsset 한 다음에, 전 자산이 없으니까
3원, 이런 식으로 넣는데,
문제는 다른 Person을 여기저기서 만든 것도 있을 거에요.
그리고 그런 경우에  내 자산이 0원인 사람은 없다고 가정을 하면은
거기다가 여태까지 만들었던 데를 다 찾아서, 그 오브젝트를 만드는데를 다 찾아서,
거기다 그사람의  실 값어치를 넣어야죠
이렇게
삼성 회장님은 몇 조, 이런 식으로
그래서
근데 문제는 코드를 고치는 사람이
코드를 고쳐, 필드를 추가를 했어요.
근데 이사람이 그 모든 걸 찾아서 고쳐야 되는데,
게으르거나 생각을 못해서 못고칠 수가 있어요.
아니면 이 라이브러리가 퍼블릭 라이브러리인데,
퍼블릭 라이브러리가, 외부공개가 아니라
내부 팀이 쓰는 건데, 제가 요 라이브러리 만질 때는
다른 프로젝트가 없는 경우, 이 라이브러리를 쓰는.
그럼 그 프로젝트는 이제 컴파일 잘 되고 잘 도는데
뻑이 나거든요.
그럼, 어이가 없잖아요 그죠.
그래서 이런 경우에
그런 실수를 몇년 전, 몇년 전에 봤고
이제 좀 큰 회사에 있을 때 그래서 이거
이제
이 코딩 스탠다드를 가져 왔다가
그 간단하게 정말 DTO 만들 수 있는 자유가 너무
좋아요 사실은 간단하게 빨리 치고 막 끝났다
깨끗해, 코드도 깨끗하고
그래서 좋았는데, 문제는 이제 지금
저희 실리콘 밸리에 있는 회사 규모가 개발자가 벌써 10명에 가까워지다 보니까
이제 그런 실수를 만드는게 한두번씩 보이는 거고
그게 버그가 되고 테스트를 돌리다가 잡고
이런 식으로 나오는 거에요.
그래서 아 이거를 테스트를 돌리지 않고 컴파일단에서 막아주는게 더 좋은건데
그리고 우리는 실제 그럴 방법이 있었죠 여태까지
그게 바로 생성자라는 거거든요
그래서 Object Oriented Programming
좀전까지 단순한 DTO말고 실제
순수히 데이터를 표현하는게 아니라
오브젝트를 만들고 그 오브젝트 안에
행동이 있고, 그 행동에 따라 내부상태가
변하지만, 외부에서는 상태를
바꾸지 못하는 것들이 있잖아요.
그런게 이제 Person으로 얘기를 하면,
제가 생년월일이 있다 그러면,
현재 나이는 솔직한 얘기로 생년월일에 기반해서
그냥 계산을 해서 돌려줘야 되는 거죠.
GetAge() 하면 얘가 태어난 해가 몇년 이니까
지금이 2018년 인가?
2018년 마이너스 이거 하면 몇살이겠다.
이렇게 계산해서 돌려주면 되는건데,
이거를 이제 Age를 따로 설정 할 수 있게 해주면은
이제 내가 태어난건 65년생인데 나이는 18살이야. 이런 이상한 짓을 할 수가 있는거죠.
그래서 오브젝트에서 그런거는 외부에서 바꾸지 못하게
Setter를 막아두는 경우가 있어요.
그러면 이제 DTO에서도 그런 일이 몇번 있을 수 있거든요.
그러면
이게 결과적으로는 모든 오브젝트 를 만들 때는, 내부에 있는 매개변수들
나중에 상식적으로 이걸 따로따로 바꾸는 게 말이 되지 않는  멤버변수는 세터가 없어야 된다는 결론이 나와요
아까 Person 예를 들면은 다시
제 집주소는 언제든 바뀔 수 있으니까 세터가 들어가는게 맞지만,
제 생년월일은 바뀔 수가 없는 거거든요
그러면 그거는 세터가 없고 생성할 떄 만들어두고, 평생 안바뀌어야 되는 거죠 .
제 나이같은 경우도 이미 생년월일이 있으니까 나이는 그냥 가져오는거지,
나이를 내가 세팅할 수는 없어야 되는 거거든?
그런 식으로 개념을 잡아가야 되는데
그래서 저희가 했던 얘기는 뭐였나면은,
드디어 코딩 스탠다드 얘기를 하는 것 같아요. 죄송합니다 서문이 깁니다.
제가 한 얘기는 뭐냐면,  오브젝트를 만들 때 아까 말했던
이니셜라이즈 리스트,  그리고 모든, 음 순서대로 말해야겠다.
이니셜라이즈 리스트를 만들지 말고,
컨스트럭터를 통해서 오브젝트를 생성하고 매개변수를 넣어줘요 그게 첫번째고
두번째가
오브젝트에서 바꾸지 않아야 되는 값들이 있잖아요
바꾸지 않아야 되는 것들, 아까 말했듯이 나이 같은 것들.
이런 거는 세터를 없애야 된다.
프로퍼티에서 말하면 셋을 private set으로 바꾸는거죠.
이 두개가 원칙상인데, 오브젝트 만들 때
그럼 일단 코드가, 음 한가지 더 문제점은 뭐냐면
컨스트럭터에 매개변수를 20개씩 넣다 보면
사실 이 매개변수 순서가 중요하잖아요. 첫번째는 Age 넣고 두번째는 뭐 넣고 이런거
이렇게 하다 보면 나중에 코드만 봐서는 도무지 이 첫번째가 Age 인지 두번째가 돈인지  모르는 거예요
근데 내가 18하고 3을 넣어 놨는데 내 나이가 3살이고 돈이 18원이  있는건가?  이렇게 생각할 수도 있거든요
그럼 뭔가 틀리잖아요.
그래서 또 그걸 막기 위해서 c#같은 언어는
함수에 매개변수를 넣을 때,  그 매개변수 이름과 값을 같이 넣을 수 있게 되어있어요.
그래서 Age :3
아 age가 3이 아니지,
netWorth 라고 하죠, netAmount, netWorth가 맞겠다.
netWealth인가? 어쨌든 뭐 그거 : 3원,  그리고 age : 18  이렇게 넣으면 들어가요
그러면 이건 나중에 누가 실수로 패러미터를 하나 추가했다
그러면은
매개변수가 아니라 멤버변수를 추가했다
그러면 그 멤버변수를 초기화 하기 위해서
컨스트럭터에 또 매개변수를 추가할 거 아녜요 그럼 매개변수를 추가하는 순간
기존에 컨스트럭터를 호출하고 있던 애들은 다
컴파일이 안되죠 왜냐면 새로운 매개변수 하나가 추가가 됐는데 패스를 안하고 있으니까
그럼 컴파일 시점에는 다 잡을 수 있어요.
잡으면서 아까 말했던 콜론 이렇게 해서 매개변수 집어넣는게 있었잖아요 이름으로
그러면 매개변수 순서가 만약 바뀌더라도
내가 예를 들어서
예전에 int int int 가 있었는데
중간에 새로운 int를 하나 넣더라도 순서가 헷갈리는 경우도 없다는거죠
정말 이러면 이런 문제는 줄일 수 있는데
이게 제가 고민하는 다른 부분이 여기에요.
이렇게 코드를 짜 놓으면
코드가 너무 드러워
그냥 매개변수 엄청 많고
매개변수 이름넣고 콜론 넣고 값 넣고
예전에 정말 이니셜라이즈 짤때 깔끔하게 한줄씩 name = 뭐  age = 18 이렇게 넣던 걸
이거는 콜론이 난무하고 매개변수 한줄에 하나씩 넣기도 되게 애매하고
되게 더러워져요
그래서 그런 드러움 때문에
저희가 코딩 스탠다드가 있음에도 잘 안 썼던 부분이기도 해요.
일단 그거에 대한 고민이 아직 있고
제가 아직도 그 고민을 하고 있어요
과연 이걸 완벽하게 강제를 할 것인지 아니면 말 것인지
DTO에 뭐 하나 추가될 때 마다 사람들이 빼먹는거 때문에 버그나는거  이런것도 되게 많이 봐서
컴파일 단에서 강조할 수 있는데 왜 없을까 이런 생각들
아니면 이제 이거를 또 이제
해결할려는 생각을 제가 좀 다른 방향으로 생각을 하고 있는게
C#쪽에 보면 애트리뷰트를 위에 달 수가 있어요
데이터 밸리데이션 애트리뷰트 중에 리콰이어드 이런 것들이 있거든요
그래서 리콰이어드를 받고
그걸 어떻게 쓸려고 했는데 이런건 보통 런타임 동안에 밸리데이션이 가능해요
근데 지금 c#쪽에서
제가 예전에부터 널 포인터의 문제를 많이 얘기 했었는데
그거를 고치기 위한 프로토타입 쪽으로 실험적으로 c#에서 만들고 있는 기능이 하나가 있어요
그게 이제
레퍼런스 타입은 보통 NULL이 들어오잖아요
근데 레퍼런스 타입에도 기본적으로 NULL이 안 들어오게 하고
NULL을 니가 정말 받고 싶으면  물음표를 옆에 붙이게 하는 변수형 바로 옆에
옛날에는 스트링에다 했으면 스트링에는 널도 들어가고 스트링도 들어가잖아요
얘네 지금 하려는 거든 스트링 질문 집어넣으면
누군가 여기에 이제
널을 집어넣어도 컴파일 중에 ok, 워닝일 거예요 아마. ok 하지만.
질문표 안 넣었는데 물음표를 안 넣었는데 갑자기 예가 널을  대입하고 있다
아니면 초기화를 안 했다.
그러면 그 순간 컴파일러 워닝이 나게 하는 컴파일시 체크를 하는 걸 넣으려고 하고 있어요
그거를 넣으면 조금 더 나아지겠다 생각을 해서 조금은 기다리고 있어요
컨스트럭션 방법보다는, 그래서 이건 조금은 지켜보고 있는데
그리고 컨스트럭터로 100% 갈 수 없는 이유가 뭐냐면
아까 처음에 이제 오브젝트가 있고
제이슨 닷넷으로 시리얼라이제이션이나 디시리얼라이제이션을 한다고 그랬어요
근데 문제는 제이선 닷넷이
이 오브젝트랑 동작하기 위해서는
이거는 제가 예전에 보고 이해한 건데, 100% 맞는지는 모르겠지만
제 상식적으로 생각할 때 컴파일러가 어떻게 돌고 컴퓨터가 어떻게 돌고 서로 다른 라이브러리 오브젝트들이 어떻게 동작한다고 봤을 때
아직도 이렇게 돌 거 같아요
그래서 제가 틀리더라도 어떤 사람이 엄청난 마법을 찾아내서 훌륭한 짓을 했더라도
일단 뭐 그럼 전 좋죠
제가 예전에 봤을 때는 이런 방식이었기 때문에 설명을 일단 드릴게요
최근에 확인해 본 적이 없어서 말을 좀 조심하는 거예요.
그럼 제이선 닷넷이 만약 Person이라는 오브젝트를 시리얼라이즈를 한다 그러면
되게 간단하잖아요 사실은 아 이 오브젝트가 왔어
클래스가 뭐야 Person이야 그러면
이 안에 필드가 뭐가 있어  내가 퍼블릭으로 가져올 수 있는 필드가, 어 이런게 있네
그럼 그거 하나하나 읽으면서 그 타입에 맞춰서  제이선을 만들면 돼요.
런타임 리플렉션 이용하는거죠 여기까진 좋아.
문제는 스트링으로 있는 제이선 파일을
제이선 스트링을 디시리얼라이즈하는거
오브젝트로 바꾸는게 되게 애매해져요 거의 불가능에 가까워요
그 이유가 뭐냐
예가 보고 있는 건 제이선 파일이에요 이게 무슨 타입인지 솔직히 모르잖아요 근데 우리가 보통 이거를
Person타입으로 디시리얼라이즈를 해 라고 하겠죠
그럼 이 라이브러리가 돌 수 있는 방법은
유일하게 하나예요 제가 볼때도 그렇고 예전에 봤을때도 그렇고
Person오브젝트 일단 만들어야 돼요
근데 Person오브젝트 만들때 어떤 패러미터를 어떤 순서로 넣어야 될지는
솔직히 유추가 불가능해요 왜냐면은
컨스트럭터에 있는 패러미터 네임과
실제 멤버변수에 있는 프로퍼티의 이름이 같지 않을 수도 있고
실제 코드로는 같게 짤지라도
Obfuscation(난독화)이라던가 해버리면은
이름이 다 바뀌잖아요 그러면 그건 이제 불가능해요
그러면 예는 할 수 있는게 빈 오브젝트를 만드는게 전부에요 사실.
그럼 빈 오브젝트를 만들려면 디폴트 컨스트럭터가 필요해요
그럼 디폴트 컨스트럭터를 만든다 이미 저희가
멤버변수 이니셜라이즈 안돼게 오브젝트 만드는 게 맞겠다는 취지에 어긋나죠
뭐 어쨌든 만들었다고 쳐요. 만들었어.
그다음에 이제  여러가지 내가 못 바꾸는 정보들을 세팅할려고 하죠
예를 들어서 아까 생년월일 같은거
생년월일 세팅 하려면은 퍼블릭 세터가 필요해요
결과적으로는 프로퍼티에서
set이 퍼블릭으로 되어 있어야 하는 거죠
그러면 결국 모든 프로퍼티
파일에 적고 불러와야 하는 모든 프로퍼티 있잖아요 그거는
퍼블릭 세터가 있어야만 제이선 닷넷이 작동을 한다는 얘기예요.
뭐 그러면 이걸 피하기 위해서
제이선 닷넷 라이브러리에
friend access 를 주는 방법이 있지 않을까
뭐 이런것도 고민할 수는 있죠 근데 그렇게 하는순간 이미 c#에서는 friend라는 개념이 없기 때문에, internal 같은 건 있지만  되게 애매해지는 거예요
그래서 제이선 닷넷 이 편한거 정말 제이션 시리얼라이제션 하는데 이만한 거 없고 당연히 이렇게 가야 하는건데
그게 어찌보면은
현재 있는 오브젝트 구조와
잘 작동을 안 하는 상황이죠
약간 되게 애매한 상황
그거 때문에 제가
코딩 스탠다드를 100% 강요를 못하고 있어요
물론 제이선으로 바뀌지 않는 오브젝트라면 당연히 강요할 수 있겠죠
엔티티 프레임워크 같은 경우에서
DB에 쓰는 DB 레코드 라던가 이런 건 가능할텐데
이렇게 DTO로 쓰게 되는 것들
웹 API 쏴주는, 제이선으로 바꾸는 이런 것들 보면은 정말 애매해지더라구요
아 뭐 쓰는 건 가능하지
파일로 쓰는거 스트링으로 쓰는 거
스트링을 읽어서 오브젝트 만드는게 어려워지는거지
그래서 그 부분이 되게 애매하고
그리고
또 아까 말했던 c#에 새롭게 할련다는 거 있잖아요
널을 반드시 체크하게 하는 그런것들
그게 들어오더라도 스트링에서 오브젝트 바꾸는 건 컴파일 시간에 어떻게 체크할 방법이 없어요
왜냐면 스트링은  런타임에 있는거기 때문에
그래서 그 부분이 여전히 문제고
그거 때문에
힘들어 하고 있다고 하죠
근데 지금 또 하나 얼마전에 든 생각은 이거때문에
아 그러면
이거를 디폴트 컨스트럭터를 결국 제이선 닷넷은 호출하면 되지만
우리가 코드 안에서 호출하면 안된다는 거잖아요
그래서
그런 고민도 하고 있어요 이거를
디폴트 컨스트럭터안에
어서트를 넣던 뭘 넣든간데
이게 현재 제이선 닷넷에서 호출되는 건지
아니면 내 코드에서 호출되는 건지 판단을 해서
내 코드에서 호출되는 거면은 어서트를 때리든 익셉션을 때리든 해버리고
제이선 닷넷에서 호출하는 거만 허용하게 해주자 이런 생각도 해봤는데
아직 그게 가능한지는 더 찾아봐야 돼요. 리플렉션 쓰면 다 가능할거 같긴 한데
드럽게 느릴 거 같고
그리고 두번째는 그렇게 해봐야 퍼블릭 세터를 어떻게  각 퍼블릭 세터마다
그 코드를 따로 하라고? 아니면 애트리뷰트를 만들어서 붙이라고?
되게 애매하죠 그래서
배보다 배꼽이 커지는 것 같고 그러나 이런 문제는
간간히 보이고
그래서
고민을 하고 있는거죠 사실은
뭐 일단은 제가 왜 이런 고민을 하는지에 대한  이유는 설명드렸어요
제 코딩 스탠다드를 100% 따라오던 안 따라오든
그게 왜 있고
이거는 내가 좀 더 여기서는  빡세게 할지
아니면 덜 빡세게 할지 그거는 고민하는 그런
충분히 밑거름? 이런 건 됐다고 생각을 해요.
오늘 포프티비는 이정도로 마치고 다음편에 또 뵙겠습니다. 포프였습니다.
