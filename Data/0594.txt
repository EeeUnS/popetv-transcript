안녕하세요, 포프입니다.

오늘은 되게 간단한 질문에 대한 답을 해 보려고 해요. '개발자인데 ChatGPT나 Copilot을 써야 할까요?'라는 질문. 일단 간단하게 말씀을 드리면 본인이 굉장히 잘하는 개발자고, 본인이 다른 사람을 관리하거나 멘토링을 하는 분이라면 Copilot으로 인해서 굉장히 뛰어난 효율성을 경험하실 거고, 그걸로 인해 본인이 피해를 볼 일도 장기적으로 도움이 안 될 일도 없을 것 같아요. 그래서 무조건 강추고요, ChatGPT는 솔직히 쓸모가 별로 없기 때문에 프로그래머한테 Copilot을 진짜 강추를 드려요. 문제는 인터미디엇인데 잘 못하거나 주니어라던가 아니면 학생들한테 '어떤 게 좋냐?'라는 거죠. 'ChatGPT는 그냥 좋은 대화 벗이고, 뭔가 내가 인터넷에서 꼼꼼히 읽어보기 싫을 때 한 50% 정도의 퀄리티를 가져다주는 나쁘지 않은 요약기다.' 그래서 이 정도로 생각하고 쓰면 나쁘지 않고 실무에서 ChatGPT를 써서 도움 될 일들이 충분히 있기는 한데, 그 50%를 본인이 감당을 못한다면 문제가 생길 수 있어요. 그 문제는 어차피 Copilot하고 동일한 문제이기 때문에 그거랑 같이 얘기할 거예요.

Copilot은 ChatGPT보다는 프로그래머한테 훨씬 뛰어난 애죠? 거의 구현한 대로 코드 제공을 하기도 하고 내가 몰랐던 코드를 작성해 주기도 하고 검색 복사 붙여넣기 좀 바꾸고 컴파일하는 과정을 한 방에 해결해 주는 애라고 보시면 맞아요. 검색어도 힘들게 고민 안 해도 되고 그냥 코딩 짜다 보면 나오기 때문에 어쨌든 빠르게 해 줄 수 있는 거긴 해요. 근데 제가 이전의 Copilot 비디오에서 얘기했었죠? Copilot이 정말 도움 되는 시니어들은 이걸로 인해서 어마무시한 시간 절약을 가져오게 되고요, 그리고 그 사람들은 원래부터 남들이 뭐를 작성을 잘하고 못하고를 판단하고 최종 결정을 내려주는 그런 사람이에요. 어쨌든 판단을 내려야 하고, 그 판단이 대부분 옳은 판단을 내리는 사람들이 사용하는, 최종적으로 퀄리티를 책임지는 사람이기 때문에 문제가 없습니다. 나쁜 퀄리티가 들어오는 걸 본인들이 막을 수 있어서 Copilot이나 ChatGPT 뽕 맞고 이상한 소리 하는 사람을 퇴치할 수 있는 훌륭한 사람들이죠. 그래서 그런 사람들이기 때문에 상관이 없어요. 그러나 인터미디엇급이 Copilot에서 코드를 받았어요. 이해를 못 했어요. 그걸 그냥 넣었어요. 제대로 도는 것 같아요. 그러면 내가 그걸 처음부터 코드를 작성하는 것보다 훨씬 일을 빨리 처리할 겁니다. 그러면 회사에서는 얘가 갑자기 생산성이 확 늘기 때문에 잘하는 사람으로 인정을 받기 시작할 거예요. 그러나 이 똑같은 이야기는 예전에 스택 오버플로에서 코드 복붙하는 사람들이 있었습니다. 처음에는 문제가 발생하지 않아요. 왜냐하면 이해를 못 해도 내가 지금 다루고 있는 데이터 하나만 처리하면 되는 것 같거든요? 문제가 없어서 돌았어요. 실제 어떤 라이브 서버나 아니면 실제 CD로 구워서 나갔는데 거기서 문제가 생기기 시작해요. 버그가 나와요. 그럼 그 버그가 누구한테 가겠어요? 본인한테 옵니다. 그때보다 열심히 이해해서 잘 고치면 상관이 없어요. 근데 처음부터 코드를 이해하지 않고 넣는 사람들은 코드를 본인이 이해하기 싫어서가 아니라 이해할 능력이 안 되고 그 능력을 따라잡을 그런 마음가짐이 안 돼 있기 때문에 안 한 거예요. 버그가 생겨도 안 고치거나 열심히 노력해도 남들도 훨씬 느려요. 그러면 내가 집어넣은 코드에서 버그가 막 터지기 시작해요. 버그가 여러 개가 터졌는데 내가 작성한 코드가 적으면 버그가 적잖아요? 내가 하는 일이 많으면 벌써 버그가 더 많이 터져요. 이걸 고쳐야 하는데 제대로 못 고쳐요. 그럼 어느 순간 누군가 물어보죠. '왜 지금 못 고치고 있어요?' 그럼 그제서야 솔직하게 말하거나 '제가 Copilot에서 복사했는데 잘 모르겠습니다.', '스택 오버플로에서 복사했는데 이게 안 됩니다.' 그럼 이제 그 순간에 '아... 여태까지는 뻥카였구나'가 나오는 거고, 그렇게 말하지 않고 또 이제 거기서 열심히 거짓말하시는 분들이 있죠? '아 제가 이런이런....' 뭐 좋아요. 결과적으로는 회사에서 근무하는 시간이 길어지고 하는 일이 많아질수록 버그 수가 계속 늘어나고 본인은 그걸 고치는 데 시간이 너무 들고 이제 점점 말이 안 되는 이야기들을 하기 때문에 그 코드를 윗사람이 봤는데 '이게 뭐지? 왜 이따위로 짜놨지?' 이런 얘기가 나오는 거예요. 계속 그렇게 되면 처음 6개월은 되게 잘하는 것 같지만 코드를 많이 작성하면 할수록 1년쯤 되면 보통 사람들이 이상하다고 감지를 하지만 그래도 사람은 사람을 믿어주는 게 일반적이기 때문에 그냥 '의심하지 말자' 이러고 있다가 점점 기간이 길어질수록 그 사람은 못하는 사람 처음엔 잘한다고 인정을 받았는데 뒤로 갈수록 왠지 못한다는 평가가 계속 나오는 사람이 되는 거죠. 처음부터 차라리 제대로 이해하고 Copilot이 해주는 코드를 제대로 이해하고 넣는 그 습관이 되어 있는 까칠한 성격이었다면 이 문제는 안 생겨요. 처음엔 빨리 일을 처리할 수도 있어요. '내가 저거 언젠가 터질 수 있으니까 집에 가서 공부해야지' 집에서 몰래몰래 공부하는 거예요. 그런 사람 솔직히 많아요. 하지만 그런 사람도 괜찮아요. 아니면 처음에 좀 늦게 가더라도 '내가 이거 이해하고 넣을 거야'라고 하는 사람도 나쁘지 않아요. 왜냐하면 처음에 경력이 적으면 적을수록 시간을 끄는 거에 대해서 너그럽습니다. 사람들이. '아 공부하는구나.' 그리고 뒤로 갈수록 빨라지면 되는 거야. 근데 문제는 처음에 빠르게 끊었는데 뒤로 갈수록 느려져. 그러면 여러 가지 이유가 있겠지만 결과적으로 회사 입장이나 상급자 입장에서는 '아니구나. 뭔가 우리가 속았거나 저 사람이 마음이 변했구나.' 이런 식으로 생각하는 거예요. 이게 인터미디엇한테 Copilot 줬을 때 약간 위험한 부분이고, 주니어는 되게 애매해요. 왜냐? 주니어한테는 인터미디엇이 스스로 찾아갈 수 있는 뭔가에 대한 약간의 기반이 모자랄 수 있어요. 컴공 기반은 충실히 잡고 오더라도 회사 일에서 여전히 모르는 것들이 많을 수 있어요. 그때 주변에 물어볼 사람들이 없다면 어차피 스택 오버플로에 물어보거나 구글에 물어보거나 할 거거든요? 그때 Copilot이나 ChatGPT에 와도 크게 상관은 없어요. 근데 역시 또 하나의 문제점은 그걸 본인이 이해하려고 해야 하는데 '지금 이해 안 해도 되겠지? 2년 뒤면 알아서 이해되는 거겠지?' 이런 식으로 넘어가시는 분들이 있는 거예요. 아니면 그걸 통해서 내가 컴퓨터 공학의 기본기가 없다는 걸 깨달아야 하는데도 불구하고 '그거 아무도 중요하지 않다고 그랬어. 내가 지금 멘토 듣고 있는 어디 어디 SI 다니시는 2년 차 개발자가 아무 상관 없대. 컴퓨터 공학의 기본기 아무것도 중요하지 않고 그냥 이런 것만 잘하면 잘 성장한대.' 2년이 지났는데 그분이 회사에서 잘리고 하는 일이 없으시네요? 사실 이런 일이 많고요, 그래서 멘토 하시는 분들도 전부 다 퀄리티가 보장된 분들은 아닙니다. 열심히 살아가시는 분 중 하나인 것뿐이지. 결과적으로는 주니어가 가장 애매해요. 그래서 저는 주니어한테 뭐라고 얘기를 하냐면 '이 정보의 습득이라는 거에서는 Copilot이나 ChatGPT를 하나의 검색엔진으로 써라. 하지만 본인이 그거는 이해해야 한다. 본인이 그걸 이해하려는 자기 통제 능력이 없으면 차라리 쓰지 말아라'라고 얘기해요. 학교 때 써도 상관없는데 주니어한테 쓰지 말라고 얘기해요. 그 이유는 뭐냐면 이걸 안 쓰면 어쨌든 타이핑이라도 많이 쳐야 하거든요? 그러면 타이핑을 치는 순간 이 타이핑의 속도가 늘게 돼요. 그리고 어느 순간 이 타이핑의 속도와 생각하는 속도가 비교할 대상이 됩니다. 그래서 잘하는 개발자는 타이핑을 1000타를 치더라도 타이핑보다 생각하는 속도가 빨라요. 그래서 어느 순간 타이핑 속도가 발목을 잡기 때문에 결과적으로는 다른 도구의 도움을 받거나 다른 사람의 도움을 받아야 한다는 걸 알거든요? 그래서 그분들은 열심히 이런 도구 사용하면 아주 그냥 포텐이 팍 터지는 거예요. 근데 만약에 주니어에서 아직 타이핑도 느려요. 타이핑은 솔직히 주니어와 상관없이 초등학교 때부터 열심히 연습하면 늘어야 하는 거예요. 어쨌든 간에 타이핑을 열심히 하는 걸 늘렸어요. 그리고 그 순간에 내 머리의 속도와 타이핑 속도의 상관관계를 깨닫기 시작해요. 그럼 그 순간에 이제 고민을 해볼 수가 있는 거예요. '내가 머리는 그래도 조금 도는데 타이핑이 더럽게 안 늘어' 타이핑을 늘릴 만큼 늘려도 더 이상 늘지 않는 거예요. 그럼 물리적으로 못 늘리는 거거든요? 타이핑을 꾸준히 매일매일 치면서 1년 동안 늘려보는 건 나쁘지 않아요. 그래서 어디까지 찍냐? 한글 기준으로 오타율 없이 내가 초당 1000타를 치냐, 800타를 치냐, 700타를 치냐, 500타를 치냐? 그런 식으로 치는 거예요. 그래서 늘릴 때까지 늘려보고 그다음에 다른 도움이 되는 도구를 찾아야 하는 건데 그중에 좋은 게 Copilot이 될 수는 있어요. 근데 그 과정까지는 가야 하거든요? 그래서 그런 단순한 과정, 단순히 당연히 해야 하는 기초 체력 같은 부분들이죠. 이것들을 키운 다음에 Copilot을 가져가도 문제는 저는 없다고 봐요. 왜냐하면 주니어 때는 오히려 용서를 해주니까.

아니면 또 다른 절충점은 회사 일을 할 때는 Copilot을 쓰지 않아요. 집에서 뭔가를 할 때는 Copilot을 써요. Copilot의 가능성도 보고 회사 일을 할 때는 좀 더 정석적으로 제대로 배우는 게 있죠. 이게 한 가지 옵션. 또 다른 옵션은 회사에선 Copilot 써요. 아까 인터미디엇 얘기했을 때 있죠? 집에 와서는 그걸 다시 다 복기를 제대로 해요. 근데 문제는 여기서는 물리적인 속도는 늘지 않을 수 있다. 그래서 제가 조언을 할 땐 이래요. Copilot이나 ChatGPT를 주니어 같은 분들은 '참고용으로 쓰는 건 좋은데 개발할 때는 그냥 기본적으로 끄고 쓰는 게 훨씬 좋을 거다. 경력 한 1년 되고 2년 되고부터 쓰는 게 훨씬 도움이 될 거다.'라고 얘기를 하는데 결과적으로는 주니어 때 1, 2년을 낭비했을 때 인터미디엇에 가기 전에 고칠 기회는 있습니다. 근데 일단 인터미디엇이 되었는데 자기 기본적인 문제점을 전혀 고칠 생각 안 하고 다른 도구로 어떻게 해결을 해보겠다 그러면 굉장히 빠르게 손절을 당할 수 있어요, 자기 회사에서 개발, 프로그래밍 쪽이 강한 그런 회사라면. 그 이유는 '이 사람 아무리 성장시켜 봐야 Copilot을 제대로 못 다룰 거고 AI를 제대로 못 다룰 거고 밑에 사람 제대로 관리 못할 거니까 그러면 차라리 다른 놈을 키우는 게 낫다', 아니면 '그냥 그 사람을 빼서 관리 비용을 줄이고 시니어한테 Copilot 주는 게 낫다' 이런 결론들이 나오기 시작하는 거예요.

여기까지 얘기하면 일단은 주니어, 인터미디엇 나눠 얘기했는데 만약에 지금 학생이라면 집중해야 할 게 뭔지는 더 떠오를 거예요. '이런 무슨 잡기술이 중요한 게 아니라 실제 내가 원하는 코드를 작성할 수 있을 때 어떤 걸 작성해야 한다'라는 거기까지 올라갈 수 있는 기본 지식을 학교에서 쌓아야 해요. 실무 나와서 쌓기는 더 어려운 거거든요. 컴공의 기본 지식을 쌓는 건 되게 중요한 거고 제가 5, 6년 전에도 얘기했던 '탑 1% 프로그래머가 되기 위해서는 이래야 한다'라고 했던 게 동일하게 적용이 돼요. 이게 이제는 탑 1%가 아닐 수도 있어요. 어느 순간에 그냥 이게 모든 프로그래머가 되고 그 밑에 '우리가 예전에 하위 99% 프로그래머였어요.'하고 했던 사람들이 그냥 AI로 대체될 수도 있어요. 오래 걸릴 일이죠. 하지만 이미 저 아래 최하위 10%의 개발자들은 이미 Copilot으로 대체되고 있어요. 그래서 실제 지금 실무를 보면 주니어 채용이 굉장히 많이 줄어들었어요. 실제 Copilot 제대로 사용해 본 아키텍트급 사람들이 있는 회사에서 하는 얘기가 이거예요. 자동화 기기가 없어서 단순한 일을 해야 했기 때문에 그 일을 해 줄 수 있는 프로그래머를 뽑았는데, 그게 주니어에서 시작하죠? 그리고 또 다른 주니어는 보통 우리가 슈퍼주니어라고 많이 그러거든요? 인터미디엇 올라가고 시니어 올라가고 탄탄대로일 가능성이 높은 애들. 얘네 둘을 다 뽑았었죠. 그래서 얘네 둘 다 똑같이 멘토링을 했는데, 이제는 최하위, 단순 반복 작업을 하는 컴퓨터 프로그래밍을 약간 할 줄 아는 사무직 같은 사람들인 거예요. '이 사람들은 채용할 필요가 없다.' 그래서 처음부터 슈퍼주니어만 채용하려고 하는 트렌드가 굉장히 강해요. 이런 사람을 채용하려면 자기가 잘하는 거 보여줘야 하는데 특별히 보여줄 게 없으면 좀 더 괜찮은 교육을 받은 애들을 선호하게 되는 거죠. 한국은 아직 10%가 대체되는 수준까지는 안 갔는데 북미에서는 일단 시작이 됐고요, 한국도 서서히 따라가기 시작할 거예요. 그래서 취업이 안 된다는 것도 서서히 얘기가 나오고 있는 건데, 한국 사람들이 ChatGPT 뽕을 조금 버리고 Copilot 뽕을 조금 받기 시작한다면 아마 인사에서도 더더욱 그런 일이 발생할 겁니다. 그래서 예전에는 그냥 학교 나와서 코딩만 조금 짤 줄 알면 어느 회사라도 들어가서 할 일이 조금이라도 있었다면 이제는 그 일을 받을 기회조차 없는 거죠. 그 일이 예전에는 한 짧게는 6개월, 길게는 3년까지도 그래도 대충 괜찮은 돈 받으면서 버틸 수 있는 일이었거든요? 이게 굉장히 짧아지거나 아예 없어질 수도 있어요. 굉장히 짧아진다는 얘기는 뭐냐면 될 법할 것 같아서 뽑았어요. 근데 뽑아서 한 6개월 있어 보니까 될 법한 놈이 아니에요. 그러면 맡길 일이 없어요. 그냥 AI 꽂고 조금 잘하는 애가 키보드 몇 번 쳐주면 끝날 일을 의사소통하느라고 30분 낭비하고 코딩 작성해서 온 걸 또 보느라고 30분 낭비하고 그걸 3번을 반복하고 이럴 이유가 없어진다는 거죠. 인건비도 마찬가지고. 사람들이 그냥 묵묵히 자기가 맡은 일만 꾸준히 하고 남의 시간을 뺏지 않을 수 있는 일이 있다면 최저임금이 왕창 올라가지 않는 이상 충분히 가성비로써 할 수 있는 부분들이 있을 거예요. 근데 문제는 개발 쪽 일이 요런 단순한 일들을 할 때도 보통은 윗사람의 검토를 받는 일이 꽤 많아요. 그 검토를 받는 과정에서 잘못된 것들이 계속 잡혀야 하고 완벽히 동일한 일을 반복하는 일들은 거의 데이터 엔트리 급이거든요? 이제는 그런 일들이 많이 없다는 거예요. 그래서 뭔가 새로운 걸 만들고 고쳐가는 과정에서 누군가의 지적 능력이나 주관이 들어갈 수밖에 없는데 그게 자꾸만 틀릴 때, 윗사람이 원하는 걸 못 해올 때, 그걸 여러 번 바꿔야 할 때, 나아지지 않을 때 그런다면 이거는 약간 달라지는 거죠. 그래서 그런 부분에서 어려워질 수도 있다. 하지만 원래부터 포프 TV를 봐 왔고 제가 말하는 거에 동의하던 분이고 아니면 제가 가지고 있는 교육관, 그게 나온 게 POCU 아카데미죠? 여기에 맞춰서 하고 있었고 그걸 목표로 삼고 계신 분이었다면 저는 오히려 AI나 Copilot 이런 게 장기적으로 더 큰 도움이 될 거라고 봐요. 그래서 지금 내가 좀 더 공부하고 싶고 타이핑을 늘리고 싶어서 Copilot 안 쓸 거라고 하시는 분들도 앞으로 1년, 2년 안에는 쓰기 시작할 거기 때문에. 금액도 싸요. 한 달에 미화 10불이에요. 아마 1년 하면 미 달러 100불밖에 안 될걸요? 충분히 낼 수 있는 돈이죠. 그리고 회사 입장에서는 주니어 하나 채용하면 1년에 몇천만 원 줘야 하는데, 제 생각에는 단순히 데이터 입력하는 주니어들 3명 정도 대체할 수 있을 것 같아요. 더 할 수도 있어요. 그래서 어쨌든 간에 저희의 미래는 매우 밝습니다. 이게 모든 프로그램의 미래는 아닐 수 있지만, 원래부터 정도를 걸으시려고 했던 분들의 미래는 밝습니다. 그러니 너무 늦지 않았다면 다른 길로 갔다가 이 일이 재밌어서 넘어온 분들이나 기본기 공부가 모자란 분들은 집중하시고 뭔가를 이해하고 작성하는 습관을 좀 더 들이면 큰 도움을 받으실 거예요.

이거 정도로 할게요. 포프였습니다.