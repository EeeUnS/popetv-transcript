안녕하세요 포프입니다. 오늘은 개발자 베스트 프랙티스에 관한 그거를 설명하는 책들을 소개해드리려고 해요. 

제가 이 말을 하면은 어떤 분들은 "와! 클린 OO라는 책 아니야?"라고 생각할 수 있어요. 참고로 말하면 아닙니다. 그 책은 보는 것보다 안 보는 게 좀 더 좋은 책입니다. 그거에 대한 아주 간단하게 얘기로 넘어가면 어떤 책이나 잘못된 얘기와 올바른 얘기들이 있어요. 그래서 그 비율이 어느 정도가 되느냐에 따라 좋은 책과 나쁜 책이 갈리는데 클린 OO라는 책은 최소 절반 이상은 좋게 말한 거예요. 실무에서 굉장히 노노(呶呶)하는 얘기들을 열심히 하고 있습니다. 그리고 그 책을 쓰신 분, 주저자 그분의 이제 역사적으로 어떤 책을 써 오셨고 어떤 말을 해오셨고 그거에 대한 사람들의 평가가 어땠는지를 보면은 보통은 처음에 뭔가 특이한 얘기 하면 안티가 당연히 있어요. 하지만 그게 10년 20년 정도가 지나면은 그 사람이 옳았다는 게 어느 정도 증명이 되면은 이제 그런 안티들이 좀 많이 줄어들고 그 사람을 좋아하고 그 사람을 믿고 객관적인 곳에서 점점 옳다고 얘기하는 곳이 많아지지만, 이 책을 쓰신 분은 점점 안티가 많아지고 있는 상황입니다.

그리고 제가 좀 더 객관적인 이야기를 해드릴게요. 뭐냐면 이제 본론이죠. 이거는 언제나 베스트 프랙티스 북은 사람들이 보고 싶어 해요. 왜냐하면 머리 아프지 않고 뭔가 쉽게 배울 수 있을 것 같아서 제가 예전에 포프 tv에서 말했던 책이 한 두 권 정도 있어요. 그게 첫 번째가 Code Complete2, 그리고 두 번째가 Writing Secure Code. 이 두 권의 책이 있는데 이거는 예전에 C++ 기반으로 나왔던 책이기는 합니다. 근데 거기에 나왔던 내용들이 어느 언어에서나 굉장히 프로그래머라면 주의해야 될 내용들이 있어요. 그래서 이 책을 추천을 했죠. 그럼 다시 앞에 클린 OO 하고 엮어서 물어볼 거예요. "아니 네가 추천하는 책이 좋다는 객관적인 증거가 있냐?" 세상에 객관적인 증거가 어디겠어요... 그렇죠? 하지만 그나마 더 통계적으로 많은 증거가 있냐? 좀 더 객관화된 증거가 있냐? 클린 OO 보다 낫다는 게 있어야 되지 않겠냐라고 하실 수 있어서 제가 좀 찾아봤는데 아마존 아시죠? 미국 책 판매상 거기 아마존에서 Developer Best Practices라고 23권짜리 목록을 만들어 둔 게 있어요. 그 목록에 Writing Secure Code 하고 Code Complete가 들어가 있고요, 클린 OO는 하나도 들어가 있지 않습니다. 그나마 이게 객관적으로 어느 정도 검증이 된 목록이라고 할 수가 있죠. 그리고 많은 사람들이 동의하는 목록 이라고도 할 수 있고, 실제 많은 사람들이 구매해서 보는 책이라고도 할 수가 있습니다. 그래서 제가 링크는 비디오 더보기에 달아 드릴게요.

이 23권 책 중에서 코딩에 관련된 얘기가 아니라 실제 프로젝트 관리 스크럼이니 애자일이니 뭐 스펙 분석이라는 거 이런 요구사항 분석 그런 거에 대한 책도 있습니다. 그래서 그거를 보고 싶으신 분들은 보셔도 되고 그게 아니라 코딩 쪽만 보고 싶으신 분들은 여기에 있는 목록들을 좀 보시면 괜찮을 것 같아요. 이게 특정 언어를 기반으로 책을 쓰기는 했지만, 그래도 모든 프로그래밍의 거의 99% 적용되는 내용들을 모아놓은 그런 책들입니다. 그래서 이런 걸 보면은 그나마 객관적으로 뭔가를 볼 수 있겠죠? 그래서 Code Complete나 Writing Secure Code 같은 책 같은 것은 반드시 보시고, 그 목록에 코드라는 책 요즘 꽤 유명하던데 그것도 들어가 있어요. 그거는 제가 직접 보지 않았어요 아직. 언제 읽어보고 또 추가적으로 리뷰로 올릴 수 있으면 올릴게요. 

그리고 이거 외에도 베스트 프랙티스를 굉장히 잘 정리한 좋은 책들이 많은데, 제가 소개해드리고 싶은 책이 한 권 더 있기는 해요. 근데 그 책은 베스트 프랙티스를 얘기할 때 기본적으로 얘는 C++의 베스트 프랙티스를 얘기해요. 하지만 거기서 나온 어떤 특정 내용들은 일반적으로 적용할 수도 있거든요? 하지만 앞에서 말했던 Writing Secure Code라던가 Code Complete처럼 99% 적용할 수 있는 게 아니라 C++ 이 아니라면 절반 정도 적용할 수 있지 않을까? 이 정도 생각이 드는 책입니다. 그래서 그 책을 제가 이 비디오에서 설명을 드리는 게 맞을까? 아닐까? 고민을 했는데 제 생각에는 소개해 드리는 게 맞을 것 같아요. 제가 제목이 지금 뭔지 잠깐 기억이 안 나는데 제가 그것도 링크를 달아 드릴게요. 근데 제 기억으로는 O'REILLY 출판사인 것 같고, 그리고 C++ Coding Standards 뒤에 101이 달렸던 것도 같고 아닌 것도 같아요. 그래서 C++ Coding Standards: 101 Rules라는 책인데, 이 책에 보면은 굉장히 좋은 내용이 많아요.

근데 그중에 제가 하나 짚고 넘어가고 싶은 내용이 있는데 이건 다른 에피소드로 만드는 게 사람들이 잘 보고 좋을 것 같거든요? 근데 일단 그게 뭔지만 말하고 비디오는 끊도록 할게요. 그리고 다음 에피소드로 만들도록 할게요. 뭐냐 하면 흔히들 하는 말이 있어요. 저희가 너무 이른 그러니까 섣부른 최적화는 안 좋다, 섣부른 최적화는 악이다 이런 얘기가 있어요. 근데 문제는 그 표현을 곡해해서 내가 최적화할 능력도 없고 최적화가 당연히 되어야 하는 건데 그냥 회피하는 용도로 '아 최적화는 안 해도 돼. 섣부른 최적화는 악이야'라고 넘어가면서 코드를 전문용어로 개떡처럼 짜 놓는 사람들이 있어요. 그래서 그런 사람들 때문에 그런지 그 책에는 섣부르게 최적화하지 말아라. 그다음 줄에 있는 내용이 섣부르게 비관화하지 말아라. 비관화 그러니까 비관적으로 코드를 안 그래도 되는 코드를 엄청 느리게 효율적이지 않게 만들지 마라라는 얘기를 해요. 그래서 그거는 아무래도 따로 말해주는 게 좋을 것 같아서 딴 비디오를 얘기하기로 하고요. 

오늘 거를 정리를 하면은 개발자 베스트 프랙티스 누구나 보고 싶어 해요. 그래서 제 비디오도 보시는 걸 거고 제 비디오도 그런 얘기 많지만 책으로 목록을 잘 정리해 놓은 곳이 있습니다. 아마존입니다. 거기에 있는 책들을 한번 보시라고 제가 링크를 드릴 거고 그중에서 'Code Complete 하고 Writing Secure Code라는 책은 꼭 읽어보시길 바라고 거기에 클린 OO라는 책은 없습니다'라고 말씀을 드리겠습니다. 예 포프였습니다.