예 안녕하세요 포프입니다
오늘은 오랜만에 
다시 C++11 애기를 해보려고 해요
C ++ 1 1
얼마 전에 뭐하다가 그랬더라
아 얼마 전에 무슨
의료 영상 기기? 의료 영상 기기 제작 학과?
아니 뭐 그런거 있어요
그 어디 스타트업이 있었는데 밴쿠버에
거기서 한번 어디 면접
보고 싶냐고 물어봐서
면접을 봤죠
처음 면접을 볼 때 숙제로 내준 문제가
뭐 이런 우리가 이런 시스템
만들려고 하는데 그걸 디자인해서
제출해라 였거든요
3일 정도 주고
그 때 C++로 제작하라고 해서 
했는데
전 아무리 생각해도 이
제가 짜야했던 컴포넌트가 
멀티쓰레딩이 되야 되는거
같더라고요 
그러니깐
다른 쓰레드에서 계속 진행이
돼야 되는 그런 컴포넌트라고
생각을 했기 때문에
그러면은
이 뭐
race condition이라고 하잖아요
멀티쓰레딩 환경에서
여러가지 쓰레드가
하나의 변수를 같이 쓰거나 읽거나 할 때
그 타이밍이 안 맞으면은
서로 덮어쓰는 경우가 생기는거
그것을
mutex를
한 쓰레드에서 그 데이터를 고칠 때마다
mutex를 걸어 주어야하는게 맞잖아요
그래서 이제 mutex를 해야겠다라고 했는데
저는 이제
제가 직접C++11에서 
mutex를 직접 짤 일은 없었거든요
그런데 이제
원래 뭐 critial section 이렇게 짜려고 했는데 
혹시 있지 않을까?
그래서 C++11
그
도큐먼테이션을 잠시 봤어요
그러니깐 mutex가 있더라고요
그래서 이제
아 mutex가 이제 지원이 되는구나
std::mutex 인거 같고요
맞을거에요 아마
예 맞아요 mutex고
이게 뭘 include을 해야 들어오더라
(#include <mutex>)
그건 문서 보시고
그 메모리인가?
메모리인가 일 수 있고
mutex가 따로 헤더 파일 일 수도 있고
mutex하면 mutex lock, unlock 
이렇게만 하면 되잖아요
그래서 이제 변수 바꿀 때마다 
위에서 lock, unlock만 해주면 되니깐
그렇게 하다가
이게 lock하고 unlock을
따로따로 호출해 주다보면은
뭐라 그러죠
어쩌다 까먹고 unlock을 안하게  되면은
이게
deadlock condition이 
발생 할 수 있어요
한 쓰레드에서는 그걸 잡고 있는데
다른 쓰레드에서
그것을 다시 lock 하려고 하면 기다려야하니깐
unlock 될 때까지
그리고 실제 게임 개발 도중에도
그런 경우가 가끔 있고
그래서 이제
또 그게 처음에 코드를 잘 짜더라도
나중에 누군가 고치다
if, else 잘 못 써가지고 
한 조건에서만 unlock이 되는 경우도 있고
뭐 이런 여러가지 그런 상황이거든요
그래서 이제 저희가 많이 쓰는 기법 중 
하나가
scoped lock이라는게 있어요
한마디로
scoped라고 하면은 보통 범위거든요
함수 같은 경우 
예를 들면은
함수 처음에 들어와서부터 
로컬 변수 다 선언 해주면
함수 끝날 때 그 로컬 변수 다 없어지잖아요
그런식으로 범위에 따라서 C나 C++는 알아서
로컬 변수 다 던져주기 때문에
그리고 new로 만든게 아닌 
그냥 오브젝트로 만든거면은
범위가 끝나는 순간 그게 사라지죠
그래서
그것을 그런
behavior라고 하죠
그런 behavior를 이용해서
자동으로 범위를 넘어갈 때
unlock이 되게 하는
그런 방식이 있어요
그걸 scoped lock 이라고 해요
뭐 개념은 사실 간단해요
scoped lock이 뭐냐면
그냥 다른 오브젝트를 하나 만들어요
클래스를
그걸 scoped lock이라고 해놓고
이걸 생성자에
mutex를 받아주는거에요
생성자에서 mutex를 받아가지고
그걸 바로 lock을 하고
그 파괴자
destructor라고 하죠 
소멸자, 파괴자
소멸자에서는
그걸 unlock 한 번 호출해주면 끝이에요
그렇게 하는건데
저는 이것은 C++11 표준에 없을 줄 알았어요
근데
보니까 있더라구요
오
이런 것도 있네 그래가지고
그걸 그냥 써같고 편하게 썼거든요
그것은 뭐라고 불리냐면
뭐라고 불리더라
가드 어쩌고였는데
lock_guard네요
l o c k _
밑줄
g u a r d하고
template (템플릿 매개변수)을 받아요
그 template이
std::mutex를 받으면 되는 거죠
그래서
그렇게 하면은 함수 시작
그러니깐 이 함수 자체가 그
변수 제어 부분을 lock을 해야하는 거라면
함수 시작 할 때 그냥
scope
scope는 lock이 아니지
lock_guard 해놓고
std::mutex 이 템플릿을 해주고
이제 생성자에 들어가는 건
아까 만들었던 mutex
저 같은 경우는 mLock이라고 만들었거든요
mLock을 거기에 집어 넣었고
그리고 이제 함수가 끝날 때는 
자동으로 unlock을 해주고 해제가 되는거죠
일단 그 이건 성능상의 별로 큰 문제는 없어요
왜냐하면
scoped lock 그러니깐 그 guard..
맨날 헤깔려
lock_guard를 만들 때
그
이게 new를 불려서 메모리를 할당 하는게 아니라
그냥 그 스택 메모리 안에서 그냥 object로 만든거 거든요
포인터 없이
그렇기 때문에 해지하는 것은 되게 빨라요
어쨌든간에
그런 성능상의 문제는 크게 없고
그 대신에 프로그래머의 실수를 막아 줄 수 있는
좋은 방법이죠
그런데 이제 뭐
함수 전체에서 lock 걸어야 하지 않고
코드 일부분에서만 걸어야 한다면
lock 걸려야 하는 부분 있잖아요
고 위, 아래로 그냥
그 뭐야
curly brace이라고 하나
뭐라고 하지
이렇게 동그랗게 된 가로 말고
이렇게 삐쭉하게 나온 가로 있죠
curly brace....
(중괄호 {})
모르겠다
curly brace라는거 같은데
저희는 그것을 써요
그래서
그냥 그것을 해주시고
그 안에 scoped lock 걸리면
그
위에 있던 {
그거하고 만나는 밑에 }
나갈 때 알아서 해지 해주니깐
그것도 좋은 방법인 것 같아요
그래서 최근에
예상치도 못하게 찾아낸
그런 C++ 표준이라
나누고 싶었고요
뭐
멀티쓰레딩에서 그 외에도 많죠
뭐 이제 뭐
이렇게 lock 거는게 아무래도
느릴 수가 있으니깐
사실 느리거든요
뭐 context switch 문제도 있고
뭐 어쨌든 이런 저런 느린데
그것 대신에 lock을 걸지 않고
무슨 뭐
lock 없이
lock 없이 거는
그런 것도 있죠
atomic increment라던가 atomic decrement 라던가
그러니깐
lock 없이도
알아서 그냥 할 수 있게 해주는 것을
cpu 자체에서 지원 자체를 하는데
굉장히 기본적인 연산에 대해서
근데 그게 과연 빠르냐 하는것도 
사실은 되게 애매해요
사실은
그 말씀 드렸던 context switch 문제도 있고
그리고 상당히 실수를 많이 할 수 있는 부분이기도 하고
여러가지 쓰는 곳은 있어요
레퍼런스 카운터 이렇게 올려주거나 내려주거나 이럴 때
그럴 때는 조금 쓰는데
뭐
그런데 이것도 자주 쓰면 느려지고 똑같이
lock보다 빨라요 확실히 lock보다는 빠른데
정말 제가 써 본 경험으로는
처음 멀티 스레딩 뭐 만드실 때는
lock으로 쓰시고
그게 나중에 느려진다고 판단이 되면은
그런 atomic increment나 atomic decrement를 
쓰는건 나쁘지 않아요
근데
제가
그 atomic increment는 
제가 하드웨어 레벨에서 많이 써봤기 때문에
CPU 
따라 다르게 쓰는 그 뭐
그런거 있잖아요
어떤 CPU에서 지원하는 
이런 atomic increment라거나
아니면 어떤 특정 컴파일러에서 지원하는
__ 써주고 해주는 그런 함수라던가
그런게 많았는데
그게 C++ 표준으로 올라오지는
올라왔는지 모르겠어요
아니라고 생각은 하는데
그것도 한번 뒤져보긴 뒤져봐야겠어요
제가 확실히 알려면
뭐
뭐든간에 프로그래밍 습관적으로는
그런거보다는 lock이나 unlock을 써주는게
아무래도
안전하니까 일단은
그리고 뭐
웬만한 경우에서 성능의 문제가 되는
bottleneck이 될 가능성이 적기 때문에
그런 bottleneck이 될 때만
고쳐주라고
말씀드리고 싶고
그 때까지 lock, unlock을 써주시고
mutex로 그냥
그리고
lock
unlock 할 때 그걸 두 개로 꼭 맞춰야하니깐 
쌍을
그걸 실수 할 수 있으니깐 
그 대신 아까 말씀해드린
scoped lock 그러니깐 
C++에서는 lock_guard라 하는거
그걸 좀
많이 써주시라고
말씀 드리려고 비디오를 만들었어요
이게
당연히 이렇게 표준으로 지원되는게 더 더욱 좋은거죠
그래서 그렇게 말씀 드리고
그 정도면 끝인거 같네요
오늘은
포프였습니다
