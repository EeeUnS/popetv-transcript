안녕하세요 포프 입니다
머리가 너무 긴거 같아요 짤라야 될 것 같아
아 뭐지 뭐 더라
제가 얼마전에 만든 비디오 언리얼과 유니티5 였던거 같아요
언리얼4 하고 유니티5
그 비디오에서 댓글이 달렸어요
아 댓글 달아주신 분이 있는데 이충완 님인가? 디자이너 출신이라고
그 유니티로 속도가 빠른 게임을 만들려고 했는데
결국 가비지 컬렉션 때문에 속도가 안돼가지고 실패를 했다
뭐 그거 때문에 구글 하고 이런데서 찾아봤는데 마땅히 원하는 결과는 찾지 못했고 어떻게 고쳐야 하는지 왜 찾지 못했는지 저는 모르겠지만
답은 있거든요 그리고 그래서 이제 제가 말했던 ref count있자나요 참조 카운트
참조 카운트에서 그런 방법이 괜찮아 보인다고 해서 그 설명을 해달라고 하셨는데 사실 그냥 글로 남길까 하다가
비디오로 만들 만큼 그렇게 뭐 굉장히 쉬운 얘기라서 답이 그래서
그 걸 안 만들까 하다가 어차피 제가 참조 카운터 하고
아 가비지 컬렉션에 대해서 좀 한번 더 얘기 하려고 했기 때문에
그걸 합니다 연결해서 지금 비디오를 만들게요
처음 몇 분 정도는 그분에게 답을 드리는 것이기 때문에
그냥 뭐 가비지 컬렉션 하고 ref count 쪽 잘 아시는 분들은 굳이 안 보셔도 될거 같아요
대충 스킵하시고
뒷 부분만 들으시면 될 것 같은데
일단 이충원님에게 먼저 말씀드리면
음 첫번째 그 ref count하고 가비지 컬렉션이 어떻게 작동 하나를 설명을 드릴께요
근데 이거는 아 언어 자체에서 지원을 하는게 젤 편하거든요 물론 추가를 할 수도 있지만
C# 같은 경우는 이미 가비지 컬렉션 으로 만들어진 언어이기 때문에 거기다 ref count를 올리는것 자체가 상당히 좀 까다로워요
특히 유니티까지 먹고 들어가면 더더욱 힘들어 질 거에요
그래서 일단 그건 그다지 쉬운 방법은 아닌데 뭐 C에서도 다 하는거기 때문에
할 수 있는데 별로 권해 드리지 않고 설명을 드릴께요
가비지 컬렉션 하고 ref count가 어떻게 도는지
그리고 왜 ref count를 제가 더 낫다고 주장하는지
일단 가비지 컬렉션은 이런 방법이에요
예를 들어서 뭐 오브젝트라고 하지요 저희는
오브젝트를 만들었다
만들어서 이걸 어떤 변수에서 기억을 하고 쓸수 있어요
가장 흔한 예로 이제 뭐 슈팅 게임에서 쓰는 총알이라고 해봐요 
총알 오브젝트를 만들어서 아 이 변수 뭐 총알 bullet이라는 그 변수에 집어넣고
쓰고 있어요 쓰고 있다가 다 썼으니까 이제 그냥 이 변수를 더이상 안쓰는거에요
예를 들어서 뭐 함수 안에서 썼으면 함수에서 이 변수 가
이렇게 레퍼런스를 가지고 있다고 저희는 하거든요  
그 물체 래퍼런스를 가지고 있던걸 이제 함수 밖으로 변수가 나가면 이게 사라지면서
레퍼런스가 없어지잖아요 그럼 이 물체가
그냥 메모리 남아있어요 메모리 남아있어요
근데 그러다가 이제 메모리를 계속 총알을 뭐 몇 백개를 만들 수 있으니까 
그러면 몇 백개의 총알이 계속 메모리에 쌓여 있는 거에요 그러다가
메모리가 어느 정도 이상으로 올라가서 뭐 지금은 500메가 를 썼다
모바일에서 건 좀 말이 안되는 것 같고 한 10메가 이상 썼다
그러면 이제 C# 버추얼 머신 있어요
한마디로 그냥 그것까지 설명하기 귀찮고그러면 그애가 이제 내가
메모리가 10메가가 되니까 메모리 너무 많이 먹는 것 같애 
좀 안쓰는 물체를 지워야 겠다고 생각해서 그때
뭐 언제나 그런건 아니지만 요즘 기본적으론 
모든 프로그램의 실행을 딱 멈추고 그리고 이제 모든 물체를 뒤지는 거에요 메모리에 있는
이 물체 딱 뒤지면서 너를 지금 쓰고 있는 놈이 있냐 변수가 있냐 물어봐요
그래서 보통 카운터 나 뭐 이런걸 가지고 있거나 뭐 여러가지 구현방법이 있는데
그걸 찾아 보는 거에요 그래서 나는 누군가 쓰고 있어 
그럼 안 지워 근데 아까 만들었던 총알이 있잖아요 그러면 딱 봤을때 나는
아무도 나를 reference 하는 애가 없는데 그러면 어 그래 넌 지워야겠다
그래서 이렇게 지우는 과정이 가비지 컬렉션 이에요 그래서 뭐 지금 대충
생각을 하면 아시겠지만 일단 물체가 많고 그리고
그러면 다음을 뒤지면서 봐요 과연 어떤 놈이 누구를 뭐 참조하고 있는지
확인해야 될 거 아니에요 그럼 거기에 걸리는 과정에서 실행이 멈추기 때문에 그게 얼마나 되느냐에 따라
멈칫하는 현상이 나타나는 거에요
특히 게임 같은 경우에는 모바일 쪽은 조금
다르겠지만
컴퓨터 같은 경우에는 60 프레임도 가끔 오히려 그러고 60프레임
그리고 30 프레임은 보통 기본으로 집어넣고 들어가고 30프레임 이면
1 프레임이 3.33 밀리 세컨드에 돌아야 되요
3.33맞나?  33인가?
꼭 헷갈려 요즘 좀 멍청해 진 것 같아
33밀리세컨드 안에 돌아야 해요 그러면
그 33밀리세컨트안에 돌라면 보통 따른게 이미 돌자나요
업데이트 루프 돌고 뭐 렌더링 돌고 이러면서 보통은 굉장히 타이트 해요
왠만큼 단순한 게임이 아닌 이상 그리고 게임이 모델도 많이 그리고 그러면 좋은거니까 최대한 그것을 이용하려고 하면
30밀리세컨드 한다면 29밀리세컨트정도 까지 딱 맞춰 논다구요
근데 그때 가비지 컬렉션의 안되면 계속 돌죠 29밀리 세컨드로 그러다가
가비지 컬렉션 들어오는데
그게 10 밀리세컨드를 먹어 그러면 이게 29밀리 세컨트에서
40밀리세컨드로 가는거에요
40 39밀리세컨드 
그러면 그 순간에 한 프레임이 드랍이
되기 때문에 그 멈칫하는 현상이 보이는 거죠
그리고 그게 뭐 10밀리세컨드가 아니라 그 이상이 넘어가면 더 심한거 고
그렇다고 게임 자체를 그냥 어 그래
가비지 컬렉션 10 밀리 세컨드 걸릴것 예상하고 무조건 19 밀리세컨드안으로
줄인다 그러면 별로 표현할 수 있는 것도 별로 없어요
그리고 이게 60프레임 까지 가보면 더 개판이 되는거구요
16밀리세컨드 안에 16.667밀리 세컨드 모든걸 그려야 되는데
가비지 컬렉션 10 밀리 세컨드 들어가면 이미 그걸로 끝난 거라고요
그래서 이거는 그게 안 된다고 말하는 거예요 그와 반대로 ref count는 뭐냐면
이 물체를 그  ref count를 자체적으로 지원하는 언어들 요즘은 있어요
대표적인게
ios에서 이제 Objective-c 쓰면 아마 그것을 자동으로 킬 수 있었다고 기억을 해요
근데 이 개념은 뭐냐면 이 물체를 생성을 해요
그리고 이 물체를 어딘가에 대입을 하잖아요 뭐 이걸 명시적으로 할 수도 있고
암묵적으로 할수도 있는데 그러면 얘가 물체 안에 모든 물체 안에 그 카운터가 있는 거에요
내가 어떤 놈이 나를 가지고 갔냐 라는게 그러면 어떤 놈은 아니고 몇번을 누가 나를 참조 하고 있냐 그러면 A에 Bullet을 대입을 하면
참조 카운터가 1로 올라가 있는거에요 1로 
그 다음에 이것을 다시 또 B에다가 대입을 하면은 참조카운트가 2로 올라가요
그 다음에 나중에 A가 사라져도 사라질 때 그러니까 뭐 함수에 범위 밖으로 벗어나거나 이럴때 참조 카운터가 하나가 줄어드는 거죠
가운데 손가락은 좀 그렇고
하나가 줄어드는 거죠 그러면 1이 되잖아요 그러면 그때 지워지는 건 아니지만 나중에 B까지 밖으로 사라질 때 그럼 0이 되잖아요
그럼 그 순간에 물체를 지워요
물론 뭐 힙 메모리 아시는 분은 아시겠지만 물체를 생성하고 지우는 것
자체가 속도가 많이 걸리거든요 근데 가비지 컬렉션하고 ref count와 다른 점은
매 프레임마다 지워지는 물체가 있고 사용되는 물체가 있어요
근데 지워지는 순간에 이 물체를 그러니까 참조가 더 이상 안 되는 순간이
물체를 지워져  지워버려주기 때문에 
그 순간에 약간 멈칫하는 것 까지는 눈에 안보여도 있는것이고 0.1밀리세컨드가 든다던가
그것도 안 걸릴꺼에요 사실은
그런거에 속도가 드는건데 가비지 컬렉션은 이거를 그 순간에 안지우니까
그 순간에 빠른데 나중에 왕창 모았다가 수 천 개를 한꺼번에 지우니까 
그걸 0.1밀리세컨드로 수천개 더하면 뭐 그건 이미 100 밀리 세컨드 니까
그런식으로 느려진다는 거죠 그래서
게임 처럼 실시간으로 도는 프로그램에서는 ref counter가 맞다는 거에요
그 한 프레임에 몰아 확 지우는 게 아니라 속도를 확 먹는게 아니라
꾸준히 조금씩 느리게 해주는거 조금씩 느리기 때문에 아 그래 뭐 오브젝트
한 100개정도 생기고 지워지는데 5 밀리 세컨드 뭐 3밀리세컨드 든다 그러면 원래 33밀리세컨드 타깃이니까 거기서 약간 줄여서
28밀리세컨드에 딱 게임 맞춰놓고 그럼 문제 없겠구나
이 정도로 해서 이 예측이 가능하고 멈칫하는 게 없다는 거죠 그래서
그것 때문에 좋다고 하는 거고
아까도 말씀드렸듯이 이거는 언어적인 지원이 보통은 많은 부분이기 때문에
그게 없으면 조금은 힘들어요 물론 C하고 C++ 에서 이제 두 개를 지원을 하긴 하지만 뭐 자체 지원은 아니고 사람들도 열심히
만들었죠 좀 표준에서 좀 뭐 오토 포인터 나왔다가 개판 치고 뭐 이런 것도 있었고
뭐 이외에 원래 고전적인 c/c++ 방법은 아예 ref count이런거 자체가 없죠 사실은 그냥 new 에서 만들고 delete하면 지우는 거였기 때문에
그게 가장 빠르긴 해요
굳이 뭐 카운트 참조 안하고 뭐 이런것도 있기 때문에
근데 이제 문제는 실수로 다른데서 이제 참조하는 걸 지웠을 때 
그게 이제 뭐 댕글링 포인터라고 하는데  한마디로 그 물체가 사라진 거기 떄문에
그때 그걸 쓸려고 하면 뻑이 날 수도 있고 엉뚱한 짓을 할 수 있고
그런 문제고 이제 그것을 조금
그런 일을 조금 막아주고자 손수 안해줘도 되고자라고 하는 의미에서 
약간 성능을 포기하더라도 이제 만든게  ref count 시스템이나 가비지 컬렉션 시스템이고
그런 개념인데 결과적으로 c#에서는 가비지 컬렉션이 배후에 기반으로 있기 때문에 그거를
이용.. 하.. 그것을 버리고 ref count로 전향을 하기가 좀 되게 애매해요 사실은
그러면 이제 아까 하신 말씀 있잖아요 그럼 어떻게 이 문제를 해결을 하냐
저희 벌써 몇년 전 부터 다해왔던 거에요 
옛날에 모바일 폰에서 이제 자바 지원하게 
j2me라고
노키아 폰이 s40이나 s60 이런 시리즈 에서
j2me라고 이제 모바일 에디션 있어요
그 안드로이드 나오기 전이죠 그거 할 때도 똑같죠 자바도 가비지 컬렉션
시스템이 었으니까
결과적으로 c 스타일로 코딩을 짜는 거에요
근데 c스타일로 코딩을 짜되
지워주지 않는거 예를 들어서 아까 말했던 그 총알 같은 경우에는 뭐
총알을 쏘고 사라지면 지워지잖아요 그 아예 레퍼런스가 사라지잖아요
그런 일이 없게 만들면 되요 그냥 모든것을 배열에 처박아 놓으면 돼요 
예를 들어서 내가 현재 게임에서
음.. 뭐라 그래
총알 한번에 화면에 나올 수 있는 총알 숫자가 한 천개 다 그러면 배열을
1000개를 만들고 그 배열 천개 안에
총알 오브젝트 1000개를 만들어 주면 돼요 일단은 그 대신 이제 뭐
유니티의 개념에서는 activation 이나 뭐 active 이런 플래그 있잖아요
프로퍼티가 액티브를 꺼 놓으면 업데이트도 안되고 아무것도 안 되죠
그러면 1000개를 만들어두고
다 꺼 두는 거예요 그러다가 총알을 쏠일이 있으면 이 배열를 훑으면서 여기서
액티브있지 않은거 하나 골라서 그 액티브 시키고 위치 맞춰주고
플레이 한다음에 어느 정도 시간이 지나면 다시 꺼주는 그래서
결과적으로는 이 배열이 모든 오브젝트를 잡고 있기 때문에 가비지가 안생기죠
이게 좀 그게 가능한 얘기냐 라고 물으시는 분이 있는데
저희 c때는 다 그렇게 코딩 해왔고 저도 사실은 xna 라고 이제 c# 기반으로 한
xbox 360에서 도는 그런 플랫폼이 있었어요
그걸로 게임을 만들 때도 그렇게 했어요 
그래서 가비지를 뭔 로딩이나
언로딩 할 때는 안 생길 수가 없어요 
로딩 언로딩 할 때 딱 생겨 놓고
그때 레벨 로딩 한 이후에 가비지 컬랙션 돌릴 수 있거든요
System.GC인가 하면은 그래서 가비지 컬랙션 다 해놓고 게임이 도는 그 순간에는
죽어도 가비지를 질 안 만드는 거예요
그래서 실제 저는 가비지 하나도 안 만드는 게임을 혼자서 만들어 봤고
예전에 xbox360 처음 나왔을 때 
그때는 c 기반 이었지만
그 때도 뭐 ref count이나
가비지 컬랙션 안 쓰고도 그런 식으로 만들어 봤었고
그래서 그런 식으로 미리 allocation 해놓고
보통 메모리 풀 시스템이.. 메모리 풀은 아니고 오브젝트 풀 시스템이라고 많이 해요
결과적으로는 가비지 컬렉션이 들어가는 게임.. 그니까 언어에서 게임을 만들면
그렇게 만드는 수밖에 없어요
실시간으로 이렇게 돌아야하는 게임이면.. 그래서 그게 거의 유일한 방법일 꺼고 지금 현재로는
이제 뭐 그 뒤에 문제가 되는것은 가끔 뭐 os 가 모바일 os 레벨에서 가끔 그런 메세지를 주죠
메모리 너무 많이 먹는다 지워줘라
그럼 그걸 지웠다가 다시 늘릴 수 있는 방법도 생각을 해 봐야 되고
어찌 보면은 이런 방법도 나쁘지 않을 수도 있어요
그냥 물체는 계속 생성하는데 지우지 않고 그냥 계속 어레이나 아까 배열이나
리스트 같은데 처박아 놓는 거에요 
그러고 나중에 메모리..
 그리고 이제 재활용을 하다가
막 재활용 하다가 지우다가 하면 그냥 잡혀 있잖아요
나중에 os에서 왜 os 수준에서 메모리 좀 줄여라 그러면
그거 훑으면서 다 지워 주는 방법도 있죠 그리고 다시 생성하고
그란 방법도 있으니까 그게 아마 가장 중간에서 적절한 방법이 아닐까 싶어요
os 자체에서 이제 메모리가 딸린다고 메시지가 날라 올 정도면은
이미 성능은 줄어든 상태고 어차피 멈칫한 현상을 있을 것이기 때문에
고것 까지는 뭐 어떻게 할 수가 없지만 일반적으로 게임을 할 때 멈칫한 현상은 없..
왠만큼 줄겠죠 거의 없을 수도 있고 
그게 거의 유일한 방법이고
그 여기까지가 이제 아까 그 성함이 어떻게 된다 그랬지?
그분에 대한 답이 될 것 같아요 잠깐만
이충완님에 대한 답이 될 것 같고
디자이너라고 하셨어요 그래서 아마 모르셨던 것 같은데
게임프로그래머 1, 2년 하시거나 C# 조금 쓰시거나 그런 분은 아실꺼 같은데
디자이너니까 그래픽 하시는 분을 의미하는 거겠죠? 한국에서는
여기서는 디자인하면 게임의 기획자 여서..
그 정도고 그리고 또 하나 유의 해야할 점은c# 에서 박싱 하고 언박싱의 개념이 있어요
그것도 좀 살펴 보셔야 할 거에요 뭐 그것까지 구제 설명드릴 필요없고
그냥 c# 에는 오브젝트 타입이 있고 가비지 컬렉션 되는 오브젝트 타입
그 외에 값 타입이 있어요 value type이라고 structure는 다 그 거에요
그래서 그거 같은 경우는 왜 reference counter 같은거 안 해요
이제 ArrayList를 쓰면은.. 쓰지 말아야 되는데 사실은 더 이상
ArrayList를 쓰시면 거기는 오브젝트만 받거든요
거기에 이제 int 라던가 structure 같은걸 넣으면은 내부적으로 오브젝트로 바꿔줘요
그걸 박싱이라고 하는 건데
그러니까 값을 가져다가 박스를 씌운 다는 개념이죠
담궈 놨다가 나중에 뽑을 때는 이걸 박스를 뽑아서 박스를 걷어내고 언 박싱 이라고 해요
그리고 값을 주는 거죠 그럼 이 오브젝트가 생겼다 없어졌다 하는 그게 있잖아요
이 과정에서 가비지가 엄청 생겨요 그래서 그런 값 타입을 저장할 때는
ArrayList는 쓰시면 안되고 
그 제네릭이라고 있어요
리스트하고 이렇게 각 괄호 치고 무슨 형태 적어주는거 그걸 쓰셔야 되고
근데 그거는 그냥 다 쓰시면 되요
ArrayList 자체를 버리시면 되요 더 이상
그건 쓰실 이유가 없어요 더 이상
그냥 다 제네릭 으로 가시면 되는거고
뭐 그정도 그 정도가 이제 이분에 대한 답변이 였고
아 원래 제가 하려고 했던 얘기는
아 까먹었다 가비지 컬렉션하고 ref count가
굉장히 괜찮았어요 사실은 아니 뭐 ref count는
그 뭐 ref count 하나 올리는건 크게 문제가 아니거든 이렇게 무슨 뭐
그래 여기서 뭐 대입 연산자 있을 때 거기 ref count 올려주면 되거든요 그냥
그래서 별거 아니다 라고 생각을 했는데 이게 이제 멀티 스레딩 들어가면서
굉장히 골치가 아파 졌어요 사실은 이게 과연 ref count가 더 빠를까 라는 의심이 될 정도로
이게 그 과연 그만큼 좋을까 라는 생각이 들 정도로
그게 문제가 된 게 뭐냐면
뭐야 그 멀티스레딩이 있으면 멀티스레딩 에서 여러 가지 물체를 접근을 하잖아요
그래서 뭐 스레드A에서도  이 물체 접근하고 스레드B에서도 이 물체 접근 할수가 있고
그럼 ref count를 같이 올려주거나 내려주거나 할 일이 많은데
그 순간에 서로 락을 안 걸어주면은 레이스 컨디션이 일어나 거든요
음 그러면 결과적으로는 ref count 개판 되고 그래서
ref count 올려 줄 때마다 락을 걸어야 되는
단점이 생겨요 이제는
그래서 멀티스레딩에서 ref count를 걸려면 락을 걸어 주는게 일반적이 되서
싱글 스레드에서만 어떤 물체를 쓸 때도
그게 다른.. 보통 ref count 시스템을 하나로
만들어 놓고 상속 받는 게 일반적이라
락을 무조건 걸게 돼서
그 락 걸리는 순간 그 순간에
드는 그 cpu 속도가 아.. cpu 사이클이 은근히 느려져요
되게 웃긴게 뭐 그게 한번 두번 정도로 상관이 없는데
뭐 몇 천 번 일어나면은 업데이트 루프 중에
그래서 그거를 잡느라고 굉장히 고생을 많이 했었어요 저희 게임 만들때도
그래서 별 별 짓을 다 했는데
그래서 멀티 스레딩에서는 ref count 카운트가 뭐 여전히 가바지 컬렉션보다는 낫죠
그래도 참 성능적인 측면에서 별루 구나 라는 생각을 점점 들어가지고
예전에 이거를 뭐 여러가지 방법이 있죠 그냥 뭐
아예  ref counting을 포기 하는 방법도 있고
가끔 어느 순간에는 이쪽 스레드에서 쓸 때는 ref counting을 포기하고
그냥 곧바로 포인터만 받아도 쓸 수 있게 만들자
그래서 그럼  auto ref 같은거를 걷어내고 포인터만 전달해주고 이렇게 하는 경우도 있고
그러면 결국에는 ref counting의 의의를 많이 상실하는 부분이기 때문에 이것을
좀 어떻게 더 제대로 처리할 수 있는 방법이 없나 그 생각이 많이 들어요
뭐 뭐 atomic increase나 atomic decrease이런 요즘 뭐 그거를 지원하는 cpu 도 있지만
그것도 락 거는것 보단 빠른데 그렇게 빠른 건 또 아니거든요
그냥 예전에 싱글 쓰레드에서  ref counting연산 그냥 단순히 할 때보다는
그리고 그게 뭐 수천번 이 되면 한 프레임에 그것도 역시 굉장히 또 느려질 수도 있고
그래서 예전에는 그런 생각도 한번 해봤어요
그 콘솔 같은 경우에는 보통 저희가 코어 수를 딱 정해 놓고 쓰잖아요 예를들어서
뭐 옛날에 x360같은 경우에는 코어가 4개 였나?
뭐 지금 ps4  같은거는 8개인데 뭐 7개만 쓸 수 있을 거고 그럼
결과적으로 내가 게임에 쓸 수 있는 그 코어수는 스레드 수는 7개 라는게 딱 나오거든요
그래서 그 생각됐던 게 뭐냐면
뭐 pc도 비슷하겠죠 사실은 pc가 앞으로 코가 64개가 되든
5만개가 되든 모르겠지만 현재 도는 게임이 뭐 미래의 굳이 그 모든
코어를 잡아 먹을 필요 없으니까 그래서 코어수를 딱 정해 놓고 쓸 수 있다면은
예를 들어 이 생각도 해봤어요
각 오브젝트 마다 ref count수가 각 스레드 마다 있는 거에요 그러니까
어쩌면 망상일 수도 있는데 제가 아직도 실험은 안해봤는데 될 것 같애
그래서 예를 들어서 물체 하나의 ref count가있는데 각 스레드 마다 ref count가 있는 거죠
스레드가 7개 였다면은 7개의 integer가 있는거예요
그래서 그냥 그거를 뭐 ref count를 뭐 증가 감소 할 때 그냥 그 스레드애 대해서 추가 하는 거에요
그럼 락을 걸 이유가 없잖아 
그럼 락을 안걸은 상태에서 계속 추가
감소 를 하다가
감소되서 0이 될 때도 지우질 않는거죠 일단은
하다가 어느 순간 그 씽크 포인트를 하나 만드는 거에요
그거 매 프레임을 한 번씩 싱크를 하는 거야 보통 그런 일을 해야 되 거든요
멀티 스레딩을 해도 웬만해서는
그럼 그 싱크 포인트에서 그 오브젝트들을 싹 뒤지면서
과연 얘가 모든 스레드의 있는 ref count가 0이 되었냐?
이거 를 확인해서 그랬다면은 그 순간에 물체를 지워주면 결국엔 각 프레임 마다 물체를 지워 주는 거고
그 대신 race condition 줄이기 때문에 그거에 대한 딜레이를 줄이는 거고
저는 그것도 괜찮지 않을까 생각을
했어요 그리고 이 0 인것을 판단하는건 사실은 뭐 simd나 뭐 이런거를 도입하면은 아마 거의 한번에 비교가 될것은 같고
왜냐하면 cpu에서 0 을 비교하는 건 굉장히 빠른 연산 이기 때문에
어셈블리 수준이나 기계어 수준에서
그러면은 가능하지 않을까 생각을 했어요 사실은
근데 그러면 결과적으로 한 물체에 들어가는 ref count수를 몇 개까지
지원할 지는 모르겠지만 integer32로 한다면은
아 7개 라면은 뭐 7*4=28, 28 바이트 정도쓰는 거고
그리고 short이라고 하면 14 바이트 정도 뭐
char 에서 255 까지만 지원한다? 그것도
나쁘지 않을 것 같아요
assert 만약 걸어 놓으면 그게 넘어가는 순간에 뭘  할 수도 있고
그러면 심지어 char로 해도 그러면은 4바이트나 8바이트안의 모든.. 4바이트로 하면
cpu 4개까지는 그렇게 지원할 수 있고 cpu 8까지는 8byte이면 할 수 있거든요
그럼 원래 integer로 ref counting  하던거나 별 차이가 없어 같고
뭐 가능하지 않을까 이런 생각을 해봤어요
이제 문제는 각 프레임이 끝날 때 모든 오브젝트를 어떻게 뒤 질 것인가
라는게 단점이기도 한데
아니면은 어떤 쓰레드에서 ref count가 0이 되면은 그 오브젝트를 검사를 해 달라고
레지스트 어디엔가 등록을 하는 방법이 있겠죠 어 그러면 또 그렇게 크게 느릴 거 같진 않고
그런 방법이 있어요 그래서 아니 제가 방법 있는게 아니라 제가 말도 안되게
생각을 한 거야 사실은
그래서 또 망상 인데 혹시라도 이런 생각 해보신 분이 계시거나 아니면 제가 말한
방법에서 엄청난 단점이 있다고 보이시는 분들은 딱 보이는 분들은 한번 이렇게 답을 주셨으면 좋겠어요
제가 ref count 시스템을 좋아하는데
멀티 스레딩에서 오는 속도 저하는 싫으니까 메모리 아주 조금 더 쓰더라도
그렇게 하고 싶다는 생각이기 때문에
그래서 뭐
뭐 아까 그 분에 대한 답도 있고 망상도 심었고 하고 싶던 말
그래서 오늘 포프 tv 는 여기서 끝내기로 하고
사실이 멀티스레딩 얘기가 나왔으니까 아마 다음편은 정도에서는 또 멀티스레딩 얘기를
한번 더 할 것 같아요
제가 이제 멀티스레딩 별로 안 좋아하거든요
그 얘기에 대해서 조금 더 얘기를 할께요
포프 였습니다
0x6b6C7f9f4Ee723273f573973aDdeCd8578a6bF1E
