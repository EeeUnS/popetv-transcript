음 제가 얼마전에 a 씽크 보이드 얘기를 좀 했었어요
메이 싱크 보이 들어 언제 쓸까 말까 이런 비디오 했는데 그 뒤에 제가
거기서 이제 의심과 보이드 가 나쁘다
그냥 이벤트 핸들러 에서만 보던 쓰는게 좋다 왜냐면 이벤트 핸들러는
태스크를 바라는 못하는 경우가 있으니까 라는 얘기까지 했거든요 근데 으
제가 요 비디오를 만드는 시점으로 어제 제가 원래 유쓰 어미 라는
프로그램이 있잖아요 제 유튜브에 자동으로 이렇게 글자와 가지고 왔고 이제
제가 다운받아 업로드할 수 있는 그런 프로그램을 만들어서
음 오픈 소스로 만들어 놓은게 있는데 어제 그 비디오를 많게 하면 1
좀 밀려왔고 썸네일을 만들다 보니까 너무 시간이 들어갈 거야 버튼 클릭
하나로 모든걸 자동화 시키 곳이다
라는 생각이 들어서 아
그 이제 6 썸 이런 프롬 다시 고치기 시작했어요
이제 버튼 하나로 제대로 되게 그럴 내면은 유튜브 도그 인 드 해야되고
왜냐하면 제 비디오가 스케줄 되어 있는 거고 그럼 프라이빗 이 오니까
그거를 음
뭐랄까 남들이 보지 못한 상태에서 썸네일을 받으려면 제 개인 정보가
있어야 되거든요 그래서 그걸 작업하다 보니까 이제 act 클라이언트로 음
유튜브 웨스트 apr 쏘게 되고 그게 이제 ac 크거든요 scp
클라이언트가 점보 요즘은
그래서 그걸 하다보니까 이벤트 핸들러에서 것도 해야되는데 이벤트 그런
보이지만 받기 때문에 어 싱크 보이드를 쓸 일이 더라구요 그러다가
마지막에 프로그램 나갈 때는 이제 뭐라 그럴까
어 그가 프로그램 닫을 때는 이제 토큰 받아 놓은거 억세스 토큰 있으니까
로그인으로 그걸 리 버크 하는 것까지 하면서 제 a19 로쏘 니까 그걸
어 et 가 안되면서 별별 일이 있어 고종에게 쓰다가
결국엔 다시 찾아 봤어요 예전에 읽었던 글을 다시 또 정독을 했는데
결과적으로 이 거에요 어 싱크 보이드 대신 싱크 태스크를 주로 쓰라는
이유
뭐 태스크 하고 형을 받을 수도 있고 타입 그 형이 아니라 그냥 보이드를
하는거면 태스크를 말하는 이유는
태스크를 만드므로 인해서 그 호출하는 따른 프로그램에서 oa 틀을
걸어갔고 그 결과를 받아 할 수가 있어요 컨텍스트를
그 컨텍스트를 캡쳐를 했을 때 만약에 그어 싱크 태스크 안에서
익셉션 이 났다면 이 모든 익셉션 어 싱크로 도는 동안에 섹션이 let
섹션이 라는 곤로와 포함해 다 들어가요 그래서 트라이 캐치 가 돼요
음 물론 뭐
칵 인디비주얼 하니 익셉셔널 내부적으로 봐야 되는거 좀 귀찮을 수도
있지만 그래도 트라이 캐치 oa 태그 구문이 확실히 작동하는 장점이 있고
그리고 이제 oat 된다는 것은 코드가 더 이상 진행을 안하고 거기서
뭐라 그러죠
이제 다시 법은 실행이 되는 거의 엇인가 끝났을 때 그런 개념이 있기
때문에 좋거든요
근데 제어 싱크 보이드를 쓸 때는 문제는 뭐냐면 이 태스크를 반환을 하지
않기 때문에 oat 를 할 수 있는 방법이 없는 거에요 그럼 웨이트 할
수 있는 방법이 없으면 그냥 파이어 n 보게 들어가요 뭐냐면 이 뭐랄까
스레드를 하나 던지고 뭐 태스크는 뜰에 풀리지만 어쨌든
브레드 하나 던지고 그 애가 결과가 어떻게 되든 모른 채 예쁘겠다 이게
훨씬 더 보게 되거든요 그래서 이제
결국엔 이걸 쓸 수밖에 없는 경우가 있으니까 이벤트 핸들러 같은 경우
보이드를 받기 때문에 대부분
그걸 쓰는 경우 그러고 어찌보면 이벤트 핸들러 같은 경우는 대부분이
단순한 ui 쪽 작업이 가나 이런 게 되게 많잖아요 윈폼 이런 쪽에서
그래서 이게 굳이 뭐 결과를 몰라도 되는 경우가 많아요 이거 적응하면
적용 해라 라는 결과가 뭐든지 신경을 안 쓸게
근데 문제는 익셉셔널 꽃 캐치를 못하기 때문에 이런 경우에는 보통 앱
도메인 수준에서 어 전체 애플리케이션 글로벌 수준에서 어느 l 언 핸들도
익셉션 을 잡는 법 있잖아요
까 처리되지 않은 이 섹션을 잡았고 처리하겠다
그래서 이런 식으로 이슈를 받아 고 처리할 수 있는데 뭐 어찌보면 글로벌
수준의 익셉션 이 줘
그래서 a 씽크 보이드 가 반드시 나쁜건 아닌데 이제 가장 큰 문제는
그러더라구요 일단은 이 2t 션에 발생했을 때 그게 어떤 일이 일어날지를
우리가 예측을 할 수가 좀 어렵고
두번째는 어 싱크 보이드 로 해도 그 이 섹션에 캐치할 수 있는 방법이
있어요
coli 전 컨텍스트를 직접 만들어서 하는 것 되는데
웬만한 애플리케이션이 걸 하게 너무 복잡하고 그럼 빠이 차라리 태스크를
걸고 어이 에이트 해라
이게 그러고 이제 코드 유지보수에 기 개념에서 도 굉장히 달라진다는 거죠
예를 들면 이제 태스크를 받아야 하는 그 함수가 있으면 거기서 결과를
곧바로 빼서 못 쓰잖아요
그럼 어이 이 틀에서 써야 되잖아요 디저트를 걸면 되더라 이걸 가능성이
있으니까
달빛 10티어 갈면 되더라 가능성이 있거든요
그 그러면 결국에는 oat 로서의 쓰기 때문에 신택스 적으로 컴파일할 때
2개를 잡힌다고 요아이 걸을 태스크를 바나 가는구나 어있 해야겠구나
내어 싱크 보이드를 해버리면 뭐 하나님 자체가
oo 반환 되는 게 없으니까 상관 없는데 그 함수로 처한 순간 이미
태스크가 받아야 되지 않는다는 것만 봐서는 그냥 코드를 짜는 입장에서는
아 이게 이 함수가 이미 끝났구나 실행이 끝났구나 라고 가정을 하게
되거든요
뭐 그거를 함수 이름에 이제 마지막 에어 싱크를 늦어 와 어쩜 이렇게 좀
더 명확하게 써 주는 법도 있지만 여전히 실수와 가능성은 많다고요
그러면 이게 끝났다는 가져와 에담 오퍼레이션을 돌리는데 그 어플의 전이
뻑 이 날은 거죠 그러니까 이런 저런걸 생각을 하면 결국에는 a 싱크는
태스크를 쓰는 게 맞다 는 이유가 코디 유지 보수성 때문에 왠 사람 머리
자체가
a 하고 b 하고 c 하고 띄지 해야지 이렇게 생각하는 것인데 a 하고
일을 시작해 두고
엄호 def 하다가 이제 삐 가 끝났을 때 씨를 해야지 라는 것은 확실히
깊 뭐랄까 것
로직의 브랜치가 갈리기 때문에 사람이 생각하기에는 조금은 덜 쉬운
방법이에요
언제나 사람들은 순서대로 가는걸 훨씬 쉬워 하고 그래서 a 싱크를 가끔
어려워하시는 분들도 그런 개념인 것 같아요 h 잉크 던져두고 끝날 때
기다린 다음에 이걸 한다 라는 개념 자체가
그래서
이것저것 써 본 결과 음
애기 싱크 뭐라 그럴까요
보이드 는 피할 수 있는 게 좋고 결국에 쓸 수 있는 써야 되는 곳은
유일하게 이벤트 핸들러 로 가는건 좋다
저도 그렇게 생각을 하고요 그 뜻이 이벤트 핸들러에서 보통 이렇게
들어가잖아요 음
이벤트 핸들러가 있으면
아 보통 뭐
뭐랄까 보이드 이벤트 이런식으로 들어오고 그 안에서 a 싱크를 호출 해야
되는데 그렇게 하면 이걸 a 싱크로 바꿔야 1 복잡하니까
얘를 어떻게 가능 거냐면 a 씽크 보이도록 바꾸고 따른 함수를 호출하는
거에요 따른 않습니까 이 안에 그 이벤트 핸들러 자체는 그냥
웹 볼 뿐이었다 함수 호출하는 그럼 따른 함수는 제대로 태스크를 바람을
하고 그리고 거기서 오이 끝에 스크 바나 하니까 따른 함수 다른 함수
이벤 샌들로 많이 따는 함수가 이거 를 호출한다 너희들을 볼 수가 있는데
a 씽크 보이드 그 이벤트 핸들로 이벤트 핸들러 자체에서는 그냥 호출하고
잊어 버리는 거죠 근데 이렇게 하면 장점이 뭐 유니테스트 를 하시는 분도
있을거고 그 함수를 따른 해서 호출한 사람도 있을 텐데
그럴 때는 이 제어 이틀을 걸어서 유이의 테스트를 걸어갔고 a 씨가
끝나는지 볼 수 있다는 장점도 있고 네 저는 그것보다는 그냥
가독성에 의미라고 봐요 ace 가 보기에 딱 들어가 있다는 것 자체가
보이드 안에서 곧바로 따른 a 싱크 함수를 호출하고 있다는 자체가 아
이게 이벤 3 눌러서 잃었는지 나 라는거 아 이제 가독성이 좋기 때문에
그 가독성에 있잖아요 저는 괜찮은 방법이라고 생각을 해요 그래서 딱 보고
아 가독성 에서 음 이게 이렇게 배포하지 걸 부르는 거 보니까 이제 어쩔
수 없이 이벤트 핸들러에서 이걸 피하기 왜 이렇게 하겠다 판 눈에 보이고
그러면 나중에 만약에 그거에 대한 뭐 결과를 기다려야 되는 건 아 그런
여러가지 일들이 있을 때는 곧바로 아 이게 이것때문에 1개 밥 보이잖아요
주석이 없어도 그러면
이걸로 따른 식으로 해야 겠구나 뭐 빚이 웨이트 로 기다리던
아니면 우스 타이머를 시작했고 타이머로 결과를 본 다음에 알려주는
뭐 그런 여러가지 방법을 할 수가 있겠구나 아니면 이제 어느 어느 핸들
디셉션 에 들어가면 그거 따라 있다는건 호출하고 이런식으로 간다 거라
그래서
어 싱크 보기 대해서 제가 좀 이렇게
뭉뚱그려 말하고 왜 이게 나쁜건지 대단한 못한 부분에 대해서 좀 고치려고
말하는 거고 뭐 이걸 제대로 썰고 를 하겠다 그러면 방법이 있는데 제가
볼때는
제가 예전에 되지요 싱크가 좀 시 샵에서 문제가 많다 라고 했던 부분이
이지 기획 자체가 잘못된거 같다 디자인 자체가 잘못된거 같다
그것은 아직도 저는 믿는 봤구요 오히려 이런 부분은 언어적인 부분에서 좀
더 해결이 가능하게 나와야 된다고 봐요
이제 보이드를 기대하는 거에서 태스크의 그 제어 이틀 할 수 있는 것이
텍스 쪽으로 지원해 든다거나 뭐 컴파일 수준에서 잡을 수 있는 그런
것들이 저는 필요하다고 봐요 그리고 빠 이었소 계시면 은 말 그대로
파이어 포멧이 라고 좀더 명시적으로 말할 수 있는 그다 hf 보이드 가
아니라 뭐 a 싱크 하고 뭐 태스크가 있듯이 뭐 뭐 파이어 엘보 계시는
성과 이름이 좀 마음에 안들지만 그런 식으로 키워드 지원으로 해서 좀 더
명확하게 봐야 된다고 보지 뭐
컴퓨터에 어이 드 문제도 그렇고 제어 싱크 보이드 문제도 그렇고 뭐
싱크는
누가 이것을 디자인해서 누가 넣는건 지 모르겠지만 좀 시샤 원래 게 그
뭐랄까 설계자는 아니라고 봐요
그 사람이 설계한 거라 이거랑 은 너무 퀄리티가 많이 나는것 같아요
그정도로 말하고 음
뭐 오랜만에 프로그래머 얘기 했으니까 길게 안할게요 프로그램이 얘기
했으니까 뽑혔습니다
