연이어서 4p 입니다 음 최근들어 이제 c 퍼올 강 의자를 만들고 있는데
만들다가 이제
저는 학생들한테 코딩 스 더 를 강제 할 거거든요
일단은 사회에 나올 때 어느 정도 코딩 스탠드가 되고 어느 정도 깔끔한
코드를 짤 수 있으면 당의 남들보다 훨씬 잘 해 보이기 때문에 그래서
코딩 스탠더드를 이제 얘기 하나가 그러니까
강제 하려고 생각하다 보니까 몇 가지 콘셉트로 설명할 일이 있더라구요
강의자료 해서 그래서 그 중에 나온게 오늘 얘기할 건데
앞으로 몇 가지 코딩 스탠다드 에 대해서 얘기할 것 같아요 왜 이 코딩
스타일 너를 내가 쓰고
왜 이게 좋은 아이디어는 g 첫번째는 이제 10부 레만
이제 한정되는 얘기에요 그
시프 뿔의 이제 보면 웹 토런스 라는게 나왔잖아요 참조 라 그런거 같죠
이 펭귄 모양
이거 쓰는거 엔포스 & 라고 하는거 그러고 싶을 뿌리 나오기 전에
예전에는 장인이 포인터가 있었고 스타
이제 인터뷰 문제이기도 한데 사실 이게
인터뷰 온 애들한테 싶을 한다는 애들한테 물어봐요 야 포인트로 레퍼런스가
있는데 이 과 컴파일하면 은 그 어셈블리어 의 차이가 있을까 이런 질문을
해요
이제 거기서 대답을 못하는 애들은 이제 포인터가 어떻게든 지도가 못찾고
있는 해드리고
에 레퍼런스 허브의 나오는지도 거긴 안 해 보내드리고
거기에 답을 할 수 있는 애들은 이제 그 때 고민에서 했던 아님 그전에
고민에서 햇던 어디서 들었던 이제 그 때 답을 아는 친구들이 고 그래서
결과적으로 얘기하면 은
어셈블리는 똑같아요 그래서
한마디로 얘기해서 씨의 어 없는게
다른 언어의 나왔다 그러면 그거는
그 언어에서 추가한 기능이고 그 언어에서 뭐 컴파일러가 뭐 이상한 짓을
하든 런타임 이상한 짓을 하든 그 기능을 컴퓨터가 이해할 수 있는
기능으로 바꿔 준다고 생각하면 되요
컴파일러가 주면 그나마 효율적이 겠고 이제
자바 같이 비효율적인 언어에서는 비율 저에게 있고 당연히
아 그런 거죠 그래서 이제
웹 프랑스는 어떻게 보면 제 포인터의 문제점을 고치기 위해 나온거라고 건
맞거든요
이제 포인트의 문제점이 뭐냐 포인터는 이제 아무 어디에 쓰나 가리킬 수
있는 그런 변수 니까
이어 드레스를 잘못 넣은 순간 내가 소유하지 않는 메모리에 쓰거나 엉뚱한
데 써 왔고 프로그램이 뻑이 난다거나 이상한 짓이나 올 수 있어요
그 의도하지 않게 버거가 그런 경우 알 수가 있죠 그래서 포인터 쓰는게
되게 위험한 경우도 있죠
4 포인터를 쓰면 효율성 포인터를 써서 이제 가져오는 성능 향상도
엄청나기 때문에 그걸 단순히 무시할 수도 없고요
이거를 아마 고치려고 했던 언어 중에 하나가 맞아 바 였던것 같아요
아무래도 시프 뿔을 만지기 너무 힘들어 하는 그런 프로그래머 드 그거
해서 너무 실수를 많이 많이 좀 프로그램의 솔직히 봤거든요 근데 그
사람들이 이런 걱정 안하고 빨리 쿠루 코딩을 할 수 있게 만들자 제품을
빨리 만들 수 있게 만들자 라는 게 거의 나왔던 게 아마 잡아 쪽 갤러리
어떤 것 같고
원래 목적은 땅 거였다고 하지만 어쨌든 그랬고
뭐 이제 거기서 얘네들이 하니 한 건 뭐냐면 포인터 라는 걸로 없앴다고
생각을 하죠
내 포인터로 없앤 게 아니라
모든 오브젝트를 포인터로 만든 거죠 사실 그 재미 있는게 뭐냐면
이게 포인터가 아니라면 은 만약에
함수에 오브젝트를 건네줄 때 자바에서
그 오브젝트가 값으로 복사의 가야 되죠 정상적이라고 하면은
그러면 함수 안에서 그 값을 바쁘더라도 함수 밖에 값을 안 바뀌어야 돼요
근데
자바에서 이제 그 오브젝트를 매개변수로 전달 해 주면 은 그건 사실은 그
레퍼런스를 전 다 해준 거야 정확히 얘기하면 은 포인터로 전달해 주기
정도에요
오브젝트가 있고 이 오브젝트를 가리키는 주소를
이제 그 뭐랄까 함수의 전달해 주먹 5 함수에서는 이 어드레스에 접근해서
원래 이 트 오브젝트를 고쳐 준 거죠
그렇기 때문에 실제 이거 패스 하는 것은 레퍼런스 에요
그런데 이제 재밌어 지는 게 뭐냐면
그에 비해 잡아서 인테 저를 패스 할 때는 머플러 시나 그런 기본 타입
뜰 그는 값으로 들어가요
그래서 안에 인 트 를 누르고 그 인 트 값을 동시에 바꾸더라도 원래
값을 안 바뀌어요
그래서 눈으로 보기에는 똑같아 보이는데
즉 기본 타입이나 아니면 오브젝 타임 이나 실제 하라는 포인터를 전달하는
거고 하나는
제값을 된다는 거죠 뭐 그래서 어쨌든 간에 포인터로 인해 생길 수 있는
문제는 고쳐 놓은 거에요
그리고 포인터로 언제나 값이 아니라 레퍼런스 전달 하기 때문에 그
오브젝트로 이제는 값이 아니라 웹폰트 전달하기 때문에 속도의 성능저하
복사 때문이라는 것도 많이 줄인 거고 그래서 이렇게 고치고 아 좋다 라고
넘어간 거죠
이제
10불 꾸는 2 뭐라 그럴까
그거를 아 둘다 장점을 살리자
당연히 포인터 란게 존재하며 는 쓸때가 있는거고 포인터 연산을 한 거
되게 중요한 경우가 있거든요
지금 여기서 메모리 가르켰다 다음 메모리 가리킬 수 있는 다거나 이런
여러가지 장점들이 있기 때문에
포인터는 살려두고 대신 포인터를 쓸 때 조금 위험한 것을 막자 크게
정도였어요
그 대표적인 예가 함수의 포인터를 집어 넣었어 그러면 그 함수에서
포인터의 위치를 모이 포인터를 이상하게 찌 이상한 짓을 한다거나 다른
주소로 가서 뭔가 한다거나 그러면 포인터를 받은 거에요 플러스 이라면
다음 주소로 넘어 같거든
거기서 막 쓰기도 하거든요 아 그런게 좀 위험하거나 그러면 아 그게 안
되게 맞자
그래서 많은게 f 하세요 레퍼런스는 그냥 보도 포인터 스타 쓰는데 별표
이것은 f 샌더 찮 아 요
그럼 뭐냐면 실제 가르치는 주소는 변할 수가 없는 거예요 내가 이 변수는
이 오브젝트를 가리키는 건데 그래서 오브젝트를 안하고 여러가지 변수
그니까 그건 좀 포인터 줘 그걸 레퍼런스로 만든 거고
함수에 패스 할 때도 레퍼런스 전 패스하면 잡아 처럼 똑같이 도는 거죠
또 잡아도 똑같이 돌긴 했지만 나중에 정말 내가 무슨 포인터 갔다가
이상한 짓을 해야 될 경우가 있으면 해라 그리고 나쁜 거예요 그 첫 번째
레퍼런스 쓴 이유
두번째는 함수에서 이제 포인터를 받는 건 좋아요 왜냐면 아까 말한 것처럼
패스와 잃을 뻔 했으니까 그 복사가 아니라 레퍼런스로 전달해 주는 거니까
근데 문제는 뭐냐면 내가 포인터를 함수에 받는 순간 어느 미친놈이 너를
지 볼 수 있잖아요
심지어는 왜 뭐 뭐 함수 컴파일이 되니까 내가 어디가 라이브를 만들었어
어 라이브러리가
2편 수업하는 거야 에이 아 고비 하고 혹은 포인터 를 봤네
난 너를 집어 넣어야지 그럼 그 순간 너의 못쓰니까 퍽이나 버리거든요
이런 경우를 막아야 돼서 mfs 가 들어오는 널 포인터가 들어가서는
없으니까 아예 그래서 그거를 안 얼이 아니라는걸 표현하기 위해 도 그렇게
한 거예요 그래서 싶을 뿔 에 너무 너 에서 많은 사람들이 제 포인터로
를 쓰게 는 래퍼 샷은 아라시 고 얘기 않았어요 이거 정말 포인터 연산이
필요한 경우가 아니라면 은 네 이제 되게 재밌어 지는 게 이런 부분이
뭐냐면
여기가 c 플 풀이 여기까지 한거고 여기서 하나에도 나갔으면 좋았는데
한가지 문제가 있어요
그 예를 들어서 이런 함수가 있다고 생각을 해봐요
어떤
포자
벡터 + 볼수가 벡터 + 함수 인데
벡터 나누기로 하죠 벡터 나눔이 안쓰는데
아 나누기 분노 가 0이면 문제가 생기잖아요 모든 란 우기에는 그래서
위통 값으로는 불리언 을 바라는 거에요 그래서 불리언 으로 이게 나누기를
성공 했냐면 일반 안하고
그럼 두 벡터를 더 하는거니까 매개변수로 일단 입력 변수로 뭐 ab 를
받아야 겠고
그리고 이런 니트는 불리언 을 하기 때문에 9 부 변수를 따로 또 받아야
되요 그럼 매개변수가 새해가 되는 거에요 a b 그리고 9
이렇게 새해가 되는데 그럼 이제 이중에 아무거나 라도
널이 되는 건 말이 안 되잖아요 그러면 모두 다 레퍼런스로 받는 거예요
4 펄스 받어 그럼 어떻게 돼 그러면 트라이 아니까 불리언 있고 트라이
벡터 디바이드 있고 그 다음에 벡터 레퍼런스 a 벡터 레퍼런스 b 벡터를
보내서 아웃이 되는 거에요
순간 보면은
뭐 펑션 패러 밑에 이름을 제대로 정해야 쓰니까 펑션 그 헤더를 보면 아
그래 이게 이런 함수 구나 생각을 하게 되요
그런데 재미있는 것은 누군가 그 함수를 써서 코딩을 해 놨어요
이래서 트라이 벡터 디바이드 하고
매개 벗었는데 x 가 이제 틀로 보는 거야 그냥 마녀 abc 를 넣거나
그러면 함수 헤더를 실제 보지 않고 이 코드만 보는 순간
어떤 놈이 아 모시고 어떤 놈이 푸시고 이게 9분이 안돼요
그럼 이제 코드를 읽은 있는 수감 2wd 가 떨어지는 거거든요 또 널
위해서
그러면 이제 아 그러면 코드를 구출한 사람이 이름을 잘 자면 되죠
으로 이름을 잘 짜는 돼요 4 그러한 보장은 없잖아요
내가 나중에 이제 나 밤에 짜놓고 드 코 드리블 반대 못 잡았어
나중에 보다 코드를 보게 됐는데 id 도 아니고
웹에서 다른 코드를 얘기하다가 코드 같이 보이는 거에요 그럼 보면서
이렇게 관측 들으러 가고 있는걸까
이런 고민 할 수도 있고 아니면 뭐가 버그가 있다고 했는데 내가 ide
가 없고 비쥬얼 스튜디오가 당장 외부로 가서 미포 에서 봐야 될 때
보면서 이건 뭘까
이런 고민할 수밖에 없거든요 그래서 이런걸 좀 더 명확하게 하기 위해서
시샵 같은 경우는 9 패러 m 같은 경우에는
맥이 번들 지붕을 더 잘 아웃이 라고 따로 노즐이 돼 있어요
시샵 은 제가 전에도 말했지만 이 랭귀지 디자인 한 사람이 굉장히 뛰어난
사람인 것 같아요
굉장히 사람에 대한 이력 돈 없고 그래서 굉장히 잘 만들어내고 10불
뿔은 그 정도도 못 갔고
모자반 것 한번 그랬던 거고 사실은 더 인 더 옛날 옛날 아닐텐데 어쨌든
뭐
못 갔던 것이었습니다 그래서 싶을 뿔에서 근데 재밌는 게 뭐냐면
포인터가 있기 때문에 이것을 9분할 수 있는 방법이 있더라구요
그리고 실제 이 코딩 스탠다드 는
아 그 두 만든 회사 이드 소프트웨어 쓰던 코딩 카드에요
그래서 어떤 식으로 만드냐 며 는 모든 입력 매개 변수는 다음에 토란
스타
하지만 인력이 아니라 그 9부 때는 매개 변수는 반드시 포인터로 너란
시고 얘기네요
그러면 지금 말했던 벡터 함수가 어떻게 변화하며 는
불리언 앞에 들어가고 틀 i die 터 디바이드 뭐 디바 2d 벡터
이렇게 들어가고
첫번째가 입력 변수 였죠 그럼 벡터 아
em 퍼스 na 두번째가 또 입력 밴드죠 벡터 엠파스 늪 이에요
세번째는 쉬운데 벡터 50대에 문제는 레퍼런스가 아니라 주술로 주는
거잖아요
아 잠깐만 합니다 호출할 때는 어떻게 들어가냐 면
말해 못했어요 부추와 의 벡터 디바이드 이기 때문에
100 abc 가 뱉어 타입이고 그러면 a 를 그냥 노 주죠
왜냐면 은 이게 받는 타입 1의 펄스 받으니까 옐로 주연의 펀치 바다가
줘
p 2 두번째도 져요 씨를 올때는 포인터를 받기 때문에 씨는 패턴 하나요
4 포인터 만나는건 얻을 수 만나는 거 거든요 그런 앞에 어딜 쓰는
선재를 넣어주면 되요 그러니까 a 컴 마빅 엄마 m 퍼센트 넣어주고 씨가
들어가요
그러면 나중에 코드 본 순간에도 어이 랄프 상대 붙었네요 얜 9시 네
라고 딱 알 수 있는거예요 그래서
이런거 레코딩 스탠다드 로 전이 해서 호드를 누구나 쉽게 읽을 수 있게
만드는게 그 목적 이거든요
10불 뿔에서 그렇게 한 사람들이 있고
아 안하는 사람도 있고 이건 뭐 다 한다고 못하겠지만
제 코딩 스토어에서는 추구하고 있는 거야 왜냐면 코드로 보는 순간
깔끔하게 아웃이 고 아닌걸 알고 누가 나중에 코드를 바꾸더라도
그런 코딩 싹을 만든 경우도 있어요 9 흡연 술은 무조건 제일 먼저 오고
그 다음에 인풋 별수가 된다
왜냐하면 보통 뭐 함수 호출 하고 리턴 받은 왼쪽으로 대입을 하니까 그런
식으로 가우디의 먼저 듣는 경우도 있거든요
그럼 코드를 짤 때만 봐도 어 2% 가 중간에 부턴 4 왜 임프 다우 시
섞여 있지 한쪽으로 몰아놓고 인코딩 리뷰를 보게 되기 쉽고 그래서 이제
까 윗 어빌리티를 높이는 과정에서 이 게임 푸시고 아프시면 확실하게 알
수 있게
근데 여기서 이 방식으로 때 한가지 문제는 뭐냐면 그 순간이 제 9호
변수에 너를 집어넣는 이상한 애들이 생긴다는 거죠
이제 여기에 이미 좋아고 널 체크 어떻게 하냐 뭐 두 가지 방식 중
하나요
뭐 아예 널이 들어간지 확인해서 불륜 포스트를 반해버릴 건가 아니면 은
너른 무조건 안 들어온다는 가정의 어서 틀을 걸고 디워 즉 디버그 중에
잡는 하던가
이 라이브러리가 내부에서는 쓴 라이브맨 충분히 그럴 수 있죠
허나 이 라이브러리가 외부의 파는 라이브로 이라면
그게 널이 들어온 수가 익셉셔널 던지기도 해야 겠죠 그래서 제가 예전에
익셉션 비디오 독 조금만 들었는데 아 아 그냥 널이 들어오는 문제가
생길까 익셉셔널 봐야겠다 이런 자세는 안 좋고 그냥 이 코드가 다 우리가
컨트롤할 수 있는 코드 고 외부에 나갈 일이 없는 코드 고 그 상황에서
널이 여기 들어오는 것은 절대 안 되는건데
단지 우리가 지금 이런 코딩 쓴 얻을 쓰고 이런 표준을 써왔고 문제가
생기는 거기 때문에 이건 어썰트 에 문제다 절대 생길 수 없는 예 그럼
어썰트 를 받고 디버깅이 잡는게 맞는 거고
절대 말이 안되는 거지만 내가 이 라이브러리를 외부 해준다면 외부
사람들이 정말 우리 회사가 니 소스 코드 접근이 없는 따른 회사의
얘기하는 거에요
얘 이제 어떻게 될지 모르잖아요 어떻게 먹을 내지 도 모르고 그럼 그런
경우에는
이제 내가 컨트롤할 수 있는 범위와 못하는 범위가 분명하게 갈리는 경제
잖아요 그럼 그 때는 캡션을 쓰는 거에요 네 이제 제가 익셉션 얘기를
하며 는 요즘 점이 익셉션 방향이 이렇게 가고 있어요
제가 얘기한 지 벌써 한 1년이 넘은것 같은데 최근 들어 똑같은 얘기 안
점점 많이 보고 있어요
그래서 이제 익셉션 도 굉장히 사람들이 어 새로운 거야 라고 하면서
굉장히 이상하게 쓰다가
조 무지 인간이 못 들 정도로 깽판 치고 나서 이제 아니다
이 썰전 을 이 센서는 굉장히 주권 할까
소신 있게 써야 되는거 달을 깨달아서 사람들이 점점 이제 제가 말한
방향으로 많이 돌아오고 있고
그런데 재미있는것은 이제 그 정도 생각을 못하는 사람들의 여전히 익셉션
이 최고의 라고 우길 수 밖에 없죠
왜냐면 자기가 아는 건 그게 전부 고 그 이상의 생각을 못하는 경우도
있으니까
그래서 아 익셉션 의 방향은 이제 점점 그렇게 잡혀가고 있는 것 같아요
뭐 아직 뭐 뭐라 그럴까
아직 그 대다수는 잎새 좀 같이 떡칠을 하지만 요즘 세상에 굉장히 많은
디셉션 쓰는 언어 예제 들이 잘못되어 있고
아
요즘 나오는 좀 괜찮은 언어 그리고 괜찮게 문서 다름 는 그런 회사에서
나오는 액션 좀 높게 찾긴 한데 그게 아니라면 중구난방 식으로 예전에
처음 있으셨나요 나왔던 그런 언어들은
여전히 experts 개판이고 그런게 너무 많아 같고 그리고 뭐 익셉션
이나은 이유를 설명하면서 말도 안되는
뭐랄까 이 섹시 없는 코드 갖다놓고
이수 션을 5 봐서 나아진다고 쳤는데 실제 는
액션을 거 저도 똑같은 문제가 생기지만 함수를 이렇게 저렇게 바꿨기
때문에 다르게 보이게 많이 기술이 뛰어나다 이렇게 외치는 되게 유명한
책도 받고 보면서 아 참 세상이 아파하는 사람이 많구나 생각을 했어요
아 뭐든 이해가 여기까지 올라왔는데
하려고 했던 얘기는 결과적으로는 싶을 뿔에서
맵 프랑스 하고 포인터를 매개변수 어떻게 쓴 약이 어떤 것 같아요
임프 매개 변수는 반드시 레터를 쓰고
그리고 잎은 매개변수가 당하지 않는다면 컨테스트 붙이는 것도 잊지 말고요
9품 매개변수는 포인터로 쓰자
제 코딩 쓰나 두고 제가 그냥 밑에 붙여 놓을 께요
1 제 공개되어 있는 코딩 사는 되기 때문에 제가 구글 드라이브에 쏘았고
국을 다 기지 썼고 웹툰 거기 때문에 아직두 밤에는 때마다 고치고 닌데
어 일단 그렇게 하고 있어요 그리고
그거 외에도 제가 시샵 코딩 쓰나 도 있거든요 제가 따로 하는 회사가
시작 회사가 또 않았기 때문에 cto 로 있는 회사가
그때 거기도 자크 포인트를 따르고 있어요
맨날 고민하고 비쥬얼 스튜디오 버전 올라갔고 이제 제 코딩 스탠다드 가
가끔 비주얼스튜디오 안 좋아할 때가 있어요
4 이미 컨벤션을 안마 줘 제보 전에서 그럼 이제 따라가고
개인적으로 이제 아이디가 해주는 부분을 거슬러 거슬러 가면서 까지 코딩
스 하드 만들어 되게 싫어하거든요
그럴 때면 그러면 이제 모든 사람이 인스톨 할 때마다 새로운 코딩 사도
설정 해야 되고 그런 그건 말도 안되는 것들에서 되게 싫어하기 때문에
그러고 있어요 그 링크는 밑에 올게요
오늘 은 그 정도면 된 것 같고 앞으로 기회가 될 때마다 나
제가 쓰고 있는 코딩 스트 나 들을 하나씩 얘기하면서
그거에 대한 이유를 설명을 할게요 뭐 제 코딩 샤드 문서에 적지는 않아요
안좋은 이유가 그 남들 다 이해시키려고 하기엔 너무 귀찮고 또 이해
못하는 애들이 이해한다 그러고 엉뚱한 얘기 하기 때문에 그 흔히들 말하는
있어 이제 진짜 코드 몽키 급의 사람들은 그냥 쓰는게 맞고 한대로 쓰는게
받고
엔지니어 급의 사람들은 지가 이상하다 그러면 그때 이제 이게 이상한 이을
얘기 하겠지만 대부분의 경우에 그 사람들 이 코딩 스테 내가 왜 있는지
알고
그거에 가치를 않다는 거죠 그래서 지금 제가 한 말이 아니라 예전에 무슨
아키텍처 클래스 들었을 때 어떤 강사님이 하신 말이에요 그래서 코딩
살았을 때는 절대 이유를 쓰지 말아라
어차피 코딩 쓴 아들을 보고 익히고 다른 애들은 다 코드 몽키 드리고
걔네들이 이해할 거라 생각하지만 하시고 얘기했어요
하지만 엔지니어 그 배들이 면이 미니 코딩 세 아들이 할 거다
그 봄 왼쪽 되게 웃긴 말인데 그래서
문서가 길어 지는 걸 원치 않기 때문에 저는 짧게 쓸 거고
설명은 그냥 비디오에서 간간히 하는 걸 대체 하려고 해요
음 그 정도면 된 것 같네요 예 뽑혔습니다
