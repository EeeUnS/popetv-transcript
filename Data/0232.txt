c 샵 을 주로 쓰는 as per la s 를 주로 쓰는 이게 왜 회사를
전에 사야 썼거든요 바로 지금 전 회사의
거기서 제가 좀 맘에 안들었던 계 누 계 백해 지었어요
그 누구의 패키지의 뭐 패키지 시스템에 구려서 나와야 되는게 아니라 이
웹 쪽에서 누계 패키지를 잘 모 쓰는거 에 대한 좀 불만이 알았어요
그러니까 누계 패키지 란 개념이 솔직히 이제 c 이쪽에서 보면 은 외무
라이브러리 거든요
외부 라이브러리 가져와서 뭐 링크 걸어서 한다 이 건데 뭐 외부
라이브러리 dll 로드 링크 거는 법이 있고 라이브러리 링크 거는 법
있잖아요
4 에디엘레 로 건너가 똑같다고 봐야죠 그러면
d led 바뀌었을 때 c 잡은 다 장점이 가 c 에서는 좀 신경써야 될
부분이 있는데
시 샵에서는 dll 을 그냥 바꿔 놓는 것만으로 이제 그 새로운
라이브러리 버전을 바꿀 수 있다는 장점이 있죠 뭐 거죠 안에 제안했지만
c 보단 제안 없어요 그래서 얘 뭐 이젠 우 개 같은거는 그래서 외부
라이브러리를 받을 때 그렇게 간단하게 하면 뭐 실제 컴파일할 때는 3
버전 에게 업그레이드 안내 받아 고향 컴파일하는 되니까 패키지 관리
시스템에 되게 좋은거죠
근데 제가 좀 짜증 났던 부분이 뭐냐면 그 회사에서
이 저희가 만드는 플랫폼이 있었어요 왜 머천다이징 플러스 커스터마이징
못하는 플랫폼 이었는데 그 플랫폼의 아무래도 작은 의원들이 있잖아요
뭐 내 보면 플랫폼의 라던가 뭐 프로젝트가 트 오더 마이크의 그거를 달
포인트로 분리해서 이걸 누 개수로 만든 거에요 그래서 그 누 개설 봐볼까
메인이 까
웹사이트 뭐 홈페이지 # 가게에 웹사이트나 저희 밴드 레나는 서버 웹
사이트 이런거 에서 그 두개를 다바다가 컴파일하는 거였는데
문제는 이게 굉장히 액티브하게 개발이 되는 도중 이다 보니까
엄호 새로운 기능을 내면 플랫폼의 넣고 여기에 놓고 랜 서버 같이 넣어야
되요 그러면 저희가 개발할 때 플랫폼 코드 바꿔서
이거를 커밋을 한 다음에 빌드 서버에 선후배 패킷을 구운 다음에 다시 3
보조를 받아 갖고 개발을 해야 된 이런 상황 이었고 이 상황에서 만약에
벅 않아서 대 고장이 난다
그럴수 있잖아요 데이터 회사는 그러면 디버그 락의 2
누계 같이 pbr 아노미 아너 줬기 때문에 그 실수 인거 같은데
디버깅 곧바로 안 돼요 그러면 버그 났을 때 일단 그래 멈추고
소스 서버 도 없었고 그건 뭐 인프라의 문제겠지만
소스 리프 그러니까 리프가 아니라고 서버 있잖아요 소스를 버전별로 모았고
어떤 기회를 pdb 파일 은 그 소수가 넣어놓고 에서 언제든 그 네트워크
드라이브로 이렇게 x 패션 되게 가능하거든요 고 똑 진본 썩어도 없었고
그래서 그 때마다 막 그 포인트로 로컬에서 빌드에서 dll 을 매뉴얼
하게 카 필요해서 다시 리프로 한 다음에 테스트 해야 되거든요 그래서
저는 그게 너무 싫어서 그 팀의 리가 넘겨 받았을 때 다음 프로젝트에서는
모든걸 합쳐 갖고 한 솔루션을 하셨어요 떨어진다 프로젝트로
4 b 게 가능했던 게 저희가 가끔 하자 새로운 누계 팩스 있잖아요 이게
저희만 거의 씁니까 저희만 쓴 누계 패키지 고
저희 팀이 입 솔루션을 왜 밖에는 전혀 안쓰는 느껴졌거든요 그래서 누
개지 서쪽 될 이유 없었어요 그러니까 누계 3 패키지에 대한 개념 자체도
좀 잘못 잡은 사람들 아니면 은 아직 필요하지 않은 드리는 미래의
필요하겠지 라고 생각해서 괜히 복잡하게 만들어 가서 문제가 했던 것
같은데
뭐 그냥 뭐 뭐랄까 도메인을 가르는 기분이라는 그냥 프로젝트를 가라는
건물로 충분하고 녀 사실을
그래서 그거를 넘어서 너무 오버 엔지니어를 했다고 생각을 했어요
그래서 근데 문제는 이게 누 개수로 가든
cs 프로젝트로 가든 결과적으로는 그제 웹솔루션 에디엘레 파일의 각
프로젝트마다 씩 들어 오잖아요
그럼 여기 성능상의 문제가 조금 이 하더라구요
그 저도 그래서 좀 찾아봤는데 금호 뭐 마크 그래요 왜 이름 까먹어 쓰고
이끄 스택 익스체인지 이스 테고 블럭에 유명하신 분이 있는데 그 회사
안되시는분
그분 말에 따르면 이제 dll 이 많아질수록 속도가 느려진다 그러면 이런
라이브러리 dll 을 하나로 합치는 또 무슨 스크립트가 있다는 것을
프로그램이 있대요 제 이름은 까먹었는데 엔젤 이라고 했던것 같아요 걸러서
합칠 수 있다
그런 빌드를 한 다음에 포스트 필드 스텝으로 합쳐서 할 수도 있다고
하는데 저는 기본적으로 커스텀 빌드 스탭이 들어가는 것도 되게 싫어해요
왜냐하면 에러 메세지도 그렇고 모든게 이렇게 잘 눈에 띄지 가 않거든요
그래서 그거는 좀 별로였는데
그러다 갑자기 최근에 생각이 들었어요 그리고 실제 지금 제가 하고 있는
웹 프로젝트를 로 옮겼고
자 마린을 초 최근에 하체가 좀 했잖아요 자 마리나는 동안 자 말이 해서
안드로이드 하고
ios 하고 서로 감에 이제 어떤 동일한 라이벌 공유하려면 포토 올 씨엘
cl 뭐지 클라이드 라이브러리 인가보다
pcl 로 만들거나 쉐어 드 프로젝트 새로 나온 건데 이걸 만들어
된다라고 나왔어요 그래서 쉐어 드 프로이트를 그때 읽은게 있어 걸 좀 더
봤죠
그때 좀 자만이 좋게 쓴것도 있고 쉬어도 프로젝트 개념의 뭐냐면
이거 일단 좋아요 피니까 특정 상황에 좋아요
쉐어 드 프로젝트 가 뭐냐면 음 어떻게 말을 할까
c 에서 보면 스팅 링킹 하는거 dl 에 없이 라이브러리 인기 하는 거
똑같아요
그래서 쉐어 드 플레이트 만들면 이 자체로는 컴파일 안되고 아무것도 안
돼요 그냥 그 쉬워 플레이트 라고 프로젝트 안에 있는 cs 파일 목록이
있는게 전부 곡 그런 네임스페이스 기본 네임스페이스 가 뭐냐
왜냐면 새로운 파일 추가 할 때 내 미스 패스 추가해 줘야 되니까 그
정도가 끝이에요
그리고 모든 파일 리스트가 되어 있는 것입니다 차기 그래서 예를 들어서
아
어떤 예를 들까 뭐 웹 쪽이라면 이제 카트 프로젝터에 대한 카트 쉐어 드
포레스트 만들어 놓고 이렇게 카트를 만들어 놓으면 카트 필요한 코드가 다
있구요
그럼 코드가 컴파일이 안 되잖아요 그러면 이거를 나중에
asp 닷넷 같은 경우에는 쉬어도 플레이트 것보다 가져올 수는 없어요
그러면 일단 그 다음에 이제 클래스 라이브러리 만드는 거에요 예를 들어서
제가 웹사이트를 # 이라고 한다 그러면 # 딴 라이브러리 이렇게 하고 걸
이제 cs 프로젝트 클래스 라이브를 만든 다음에
거기서는 이 쉬어도 프로젝트를 웹 프랑스 할 수가 있어요
그럼 레퍼런스 하면은 2 #8 라이브 을 컴파일할 때 쉬어도 프로이트
코드를 같이 컴파일 해 주는 거예요 그래서 같은 # 딴 라이브러리 빨리
돼야 될 같이 넣어줘야
까 한마디로 제일 간단하게 생각하면 파일 복사 한다는 거에요 컴파일
했는데
옛날에 cs 프로젝트 파일 클래스 라이브러리 파일에서 는 그걸 이제 빨
타 하당 오른쪽 버튼 눌러서
링크로 파이 추가하기 2 기능 있잖아요 그거를 그냥 프로젝트 단위로 바꿔
준 게 전부에요
그래서 그렇게 해서 한 다음에 딜러 리 나오면 asp 닷넷 # 따 # 그
프로젝트의 있다네 프로젝트에서는 요 # 딱 말고 로이 하나만 포함 하면
돈은 거죠 이게 장점이 뭐냐면
이렇게 되면은 제가 만약에 제 코드들을 도메인 별로 나눠 갖고
거 막 프로이트를 100개를 쪼갠 왔어도 투 정적으로 컴파일 되는 dnl
알고는 하나고 # 딴 라이브러리 처음 시작하셔야 밥 웹의 이 웹
프로젝트가 처음 런칭할 때 써야 된 라이브 인디언을 1 기 때문에 그만큼
로딩 속도가 빨라요 그리고 또 장점이 뭐냐면
이렇게 크게 크 에디엘레 를 하다 보면 너무 dl 일이 많았으니까 적당히
적당히 또 합 치거든요
근데 샵이 있고 말이 여기서 딜라이트샵 이 있어
근데 여기서는 여기서 쓰는 그 기능 중에 절반은 필요하거든요 예를 들어서
그러면은 그 절반만 쓰기 위해서는 좀 뒤에 될걸 작게 하기 위해서 프런트
2개나 마포 dl 되게 만들기 되게 복잡하고
근데 여기서는 쉐어 드 프로젝트를 몇 백 개 로 짠 하던 간에 어차피
컴파일 되는 유닛은 하나니까 상관이 없는 거에요
그리고 굉장히 빚을 수도 원치 않은 것도 빠르고
실제 왜 런칭하는 것도 빠르더라구요 빨 그냥 작으면 작을수록 그래서
예전에 한참 종목도 뭐 asp 란 내에 쓴다고 느리다 런칭 이들이다
이런걸 좀 해결할 수 있을 것 같고
그니까 제가 지금 말씀드린 이렇게 쓰는 방법
이게 유일한 건 아니죠 사실은 자만이 쪽에서 중단 라이벌 안 만들어요
그냥
안드로이드 프로젝트에서 쉬어도 프로젝트 링크 한 다음에 그걸 컴파일 하죠
어 이런 방법을 자바스크립트 진영에서는 번 들린 개념이 있잖아요
자바스크립트 밖의 여러 개 모아 놓고 빨래 를 합친 다음에 뭐 뭐 뭐
오피스 k 터라 그러나 그 곳 드럽게 만들고 줄여 버리는 거 그거 돌려
갖고 제 js 파일 하나 만들어 그 로딩 빠르게 하듯이 그 개념 하고
되게 비슷해요 그의 가능하더라구요
장점이 뭐냐면 제가 정말 좋아했던 게 뭐냐면 이게
누계 패키지가 필요 없는 상황 깐 우 개 패키지가 필요한 사항은 있어요
2 패키지 만들었는데 여러명이 쓴다
그런 패키지 좋죠 쓸만해요 그래 이게 말이 왜 불어넣어 줘야 된다
뭐 이런거 좋아요 그 그러면 좋은데 저는 그런 사람도 아니고 대부분이
그런 상황이 아니어서
한 회사에서 적당한 규모의 회사 할 때는 제 제가 만든 라이브 제가 쓰는
경우가 많고 그리고 7 즉 중앙 라이브리 팀이 있다면 개는 이미 패키지를
줘야 되구요 그래서 그것은 전혀
어 제가 말하는 방향과는 다른 것 같아요
그런 상하기 쉬워 플레이트를 쓰면 은 그 도메인 들로 가르기 도 좋고
그리고 컴파일 도한 말라서 좋고
그대 그리고 또 하나가 제가 하는 느낀 게 이게 그 도메인 별로 이렇게
가르랑 얘길 좀 많이 하잖아요 뭐 뭐 이 프로젝트에서 옆으로 에서 막
서로 참조 하지 말고 뭐 데이터 이미 비슷해도 2
여기 프로이트의 쓰는 랩 팬들 클래스 랑 여기서 쓰는 왜 탱크 클래스를
따로 만들어 뭐 이런 방식
그게 자연스럽게 인 볼수가 되더라구요
왜냐하면 은 옛날 같으면 뒤에 레테 대충 박아 놓고 그 참조 창 조
청장은 끗이 거든요 근데 이거는 지금 어떻게 되냐면
제가 하다보니까
예를 들어서 제가 라이브가 두개가 있어요 클래스 라이브러리가
그리고 여기서 둘다 똑같은 쉐어 드 플레이트를 알고 쓴다고 해봐요 #
아니 #2 아니라 까 카트 카트 가 되다 드라이버의 들어 같잖아요
근데 어떤 그 웹 사이트 프로젝트 에서 예중 자를 쓰려고 하면 컨플릭트
않아요 왜냐면 아까 찍은 복사 카피 앤 페이스트 한 다음에 컴파일하는
개념이 잖아요 그래서 너 여기 양쪽 둘다 카트 라는 애가 있었소
컴프리 타서 못 해 주겠어 이런 얘길 해요 그래서 이런 사이클 레퍼런스
관계를 좀 줄이게 도 이렇게 좀 뭐 쓰인 paul's 해주는 것 같고
강요를 하고 그리고 이 쉐어 드 프로이트 끼리 있을 경우에 이 쉐어 드
프로젝트가 a 가 있고 삐 가 있잖아요 예를 들어서 그러면 a 가 b 를
참조 를 직접적으로 못해요
왜냐하면 은 아님 코드 상으로 내 컴파일이 안 되기 때문에 근데 만약에
요 라이벌 에서 이제 b 를 쓴다
욥이 쉐어 드 플레이트 삐 를 쓴다 그 상황에서 컴파일하면 어난 a 가
누군지 몰라 라고 라
그럼 이제 a 를 다시 여기서 또 레퍼런스 둘다 레퍼런스 에서 애써야
되는 거죠 그래서 그런 이런 이런거 따지면 약간 도메인 쪽을 많이 하시는
분들도 메인 준비 잘하셔서 쪽은 쉐어 드 포레 타시면 되게 재밌어 질 것
같아요 그래서 괜찮은 것 같아요
그래서 c 에서 스태프의 링킹 그거를 시프 포레 c 샵 에서 하고 싶다
그러면은 쉐드 포인트 굉장히 괜찮구요
그리고 개인적으로 쓰는 프로젝트 아니면 좀 작은 규모의 팀 내가 만든
라이브러리가
외부의 안 쓸 때 좋고요 그리고 제가 지금 또 생각이 든것은 제가 이거는
어차피 깃이 발전하면서 바뀔 거라고 보는데
현재 기술 미포 단위로 많이 쪼개 잖아요
그러면 이제
뭐라 그럴까 그러면 나중에 솔루션을 할 때는 막 기술 서브 모듈로 박았고
많이 포함한 이런 경우도 많잖아요 근데 쉐어 드 프로젝트를 하면요 좀 더
간단해 지는게
어차피 쉬어 드 프로젝트는
그냥 빨리 목록 리스트가 있을 뿐이니까
그 자체로 컴파일 때는 인해서 아니거든요 그러면 이걸 써 고 모듈로
만들더라도 굉장히 괜찮아 줘 이게 개념의 딱 맞아요
그냥 솔루션의 파일 언제나 프로젝트로 레퍼런스 하는 개념이 잖아요
그 외엔 아무것도 없잖아요 그럼 메 잉 미포 가 있고 거기에 솔루션을
파일이 있어요
그 솔루션 링크 한 다음에 이제 서버 모듈 필요도 없는거 같아요 그
상황에서는 써모 지라 이거 다른 폴 폴더에 이 쉬어도 포인트가 다 클론을
한 다음에 어떤 배치 스킬 테마를 만들어서
셔터 프로젝트 이렇게 링킹 만 시켜주면 잉 클로드 로 건 폴더 이름은 다
주께 바꿀 수 있으니까
그러면 그 순간 컴파일 된 이유인지 나오는 거에요 그래서 매일 리포 가
배치 스펙트라 있었고 메인 리퍼 클러 나고 서브 리폼을 다 흘러 나고 그
다음에 쉐어 드 그러니까 인 링크로 연결해 주게
아니면 뭐 서머 주로 상관없구요 그러면 실제 그 쉐어 드 프로젝트에 있는
리포 자체는 뭐 따로 바이너리가 나오는것도 아니고 뭐 하는 것도 아니기
때문에 어차피 그 순간 컴파일을 하면 은 이 모든 게 제 메인 d
엘레나가 좋은 거잖아요
쉐어 드 프로젝트 dll 이 아니라 다른 라이브로 뒤에 할래
그래서 음
이 방법을 이용하면 은 그냥 그렇게 잘게 잘게 쪼개고 합치는 것도 좀
되게 편할꺼 같아요
즉 개인적인 입장으로는 일반 클래스 라이브러리 루한은 것보다 마음의
굉장히 들어 예 라이트웨이트 고 아무리 딜러에 8살 안 나오고 그 포츠
때마다 그거 버전 어플에 대해 하고 무슨
누계 패키지를 구워야 1 2 0 이라는 것도 좋고 그래서 그런것 같아요
물론 cs 프로 디파일러 에는 굳이 2개 패키지 않고 되지만 뭐 뭐
결과적으로는 제가 좋아하는게
약으로 그것도 있죠 그렇게 cs 프로지 파일로 하게 되면은
그 솔루션의 니까 제가 딱 라이브러리에서 이걸 쓰려고 할 때 그 단내
플레이어 버전 바꿀 때마다 그 라이브러리 버전 좀 생각을 해야 되고 뭐
플레이트 뭐라 그럴까
타이트 있잖아요 포토 거리 인지 아닌지 그거 따라 떡이 되는거 안되는 것
그런 것도 있고
그런 고민이 좀 적어 진다는 거죠 그리고 되게 재미있는 것은 그 씨의
보면 이 fd 파인드 이거면 코드 이렇게 하고 이프 이 검에 저거 하라
이런 코덱스 않은 컴파일러 스 있지 그게
돼요 쉬워도 프로젝트에서 이거 어떻게 작동을 하는 거냐면 이래서 a 란
파일이 있고 여기에 efn 드로이드 그 of ios 이렇게 들어가 있어
봐요
그럼 그 자체가 아무 의미가 없어 얘는 컴파일 된 애가 아니기 때문에
근데 그 이거 를 포함하는 라이브로 있잖아요 아까 말했던 클래스
라이브러리 라던가 4마리 쪽에서 냐 안드로이드 프로젝트 라던가
만들어 이 프로젝트를 빌드할 때 얘는 기본적으로 디파인 을 언더 스코어
언어습관 들어줄 넣어 주거든요
그러면 그거를 이제 이 케어 프로테인 이었다 이런 컴파일할 때 그 뭐야
디버그 컴파일 하는 그 컴필레이션 플래그 라고 하죠
그거 따라 코드를 직진하다 골라주는 그럼 위 돼요 그래서
아 예전 같은 경우에는 무슨 뭐
그 뭐라 그럴까 추상화를 좀 잘못 이용해서
제때 것이라는 것 중 하나인데 이게 폴리머 p&g 의 개념을 잘 못잡아서
이런 경우에는 인터페이스 라는 만들고 각 플랫폼 마다
인플레 매트 좀 안 된거죠 뭐 뭐 이걸 디바이스로 만나면 아이 디바이스
만든 다음에
디바이스 안드로이드 디바이스 ios 쓰고 여기서 컴파일 때 내 디바이스
안드로이드 디버 놓고 여기서 때는 디바 2
ios 했을 때는 디바이스 ios 를 입니다 근데 실제 최종 컴파일
대인이 컴파일 된 그 유 니 돼서는 플랫폼 하루 밖에 없거든요
인터페이스 않으니 플랜트 잖아요 이것은 잘못한 거예요 그래서 이거는
솔직한 얘기로
어떻게 된 라이벌이 쉬어야 겠다는 생각에 인터페이스만 넣고 뭐 이렇게
하자 뭐 이래 줘야 그렇게 됐던 것 같은데
쉐어 드 프로젝트라는 그 문제가 없었어요 그냥 인터페이스인 플래터 시한
알아보기 4 쳐버리고
그 컴파일러 따라 아까 어떤 프로젝트가 이걸 쓰는 지에 따라 안드로이드
하고 io 에서 컴파일러 스위치가 가능하기 때문에 저는 그러면 그냥
인터페이스의 남용을 막고 오히려 깔끔하게 코드가 나올 수 있는 계획을
돼요
뭐 코드를 읽을 때 좀 들어올 수도 있죠 하더니 붓 x 가 있으면 근데
뭐
그거는 이제 코드를 어떻게 잘 죽어야 뭐랄까요
오거나 에디션을 하냐 문제인거 같기도 해요 아니면 이제 시샵 에는 파샤
클래스도 있기 때문에
솔직한 얘기로 파실 클래스 1 파먹고 etf 란 해버리고 i5 했을거 른
하나는 안 들어 줘야 되거든요
그러면은 그냥 파일 하나가 자체가 이제 안드로이드 파일 이게 ios 봐야
되니까 그건 좀 더 깔끔하게 관리가 안 하시고 그래서 그런 여러가지
방법들이 있어요 근데 저는 쉬어 프레드 굉장히 배타고 보고요 지금 번들
잉 해야 미고
그리고 그거 통해서 1 저두 제가 하던 프로젝트를 락 할 때마다 그
거에요 사실은 예전에 하던게
프로젝트 추가해야 대한 애도 많아지는데 이 고민 했는데 지금은 그냥 로지
카라의 풀어주면 추가 추가 벌여 cs 프로 랄까 쉬어도 프로젝트로 그러고
필요한 것만 왜 퍼런 써 그래서 좋은거 같아요 모듈 아이 드렸고 옛날에
c 에서 라이브러리 나눠갖고 막 써클 에이스
래퍼를 못할 때 그렇게 좀 해 놓으면 모든 그 참조가
이렇게 트리 이슈 고 내려 오잖아요 이렇게 원형으로 가는게 아니라 그런
방식으로 좀 인포센터 굉장히 좋고
음 라이브 구조에 대해서 좀더 생각을 하게 되고 그래서 개인적으로 추천해
주고 싶고 모든 것에 다 바꿀 순 없어요 분명히 아까 말했던 몇가지
문제가 있기 때문에
그래서 봐서 쓸 수 있을 법한 부분에
한번씩 써보시길 바래요 재밌을 거에요 에 뽑혔습니다
