안녕하세요, 포프입니다.

오늘은 조금 논란이 있을 수 있는 주제일 수도 있는데, 저는 굳건하게 이게 맞다고 믿고 있습니다. 어설트를 어디에 넣어야 될지 어디에 어떤 어설트를 넣어야 될지 모른다면 당신은 아직 주니어일 가능성이 98%입니다.

무슨 얘기냐? 어설트가 뭔지 모르겠다? 그럼, 그거부터 보고 오세요. 그것도 모르신다면 역시 주니어입니다. 어설트라고 하는 거는 저희가 프로그래밍할 때 이 코드 패스에서는 '이런 일이 일어날 수가 없어. 이런 일이 일어나야만 해'라는 가정하에 코드를 작성하는 거거든요. 왜냐하면 세상 가능한 모든 그런 경우의 수를 코드에 넣을 수는 없어요. 그건 코드가 아니라 그냥 지구를 관리하는 알 수 없는 큰 AI 머신을 만들고 있는 거겠죠. 그런 건 아니고 코드를 작성할 때는 '이게 제대로 실행되기 위해서는 이런 게 있어야 한다', 함수 기반으로 생각하면 그게 선 조건이죠. 그리고 '이게 끝나면 이런 결과가 나와야 한다', 후 조건이죠. 이게 뭔지 모른다? 그럼, 역시 주니어입니다. 가서 공부하세요. 선조건, 후조건, 함수 시그니처 얘기입니다.

이게 왜 중요하냐면 코드를 많이 작성하신 분들은 알 거예요. 코드는 단순하고 이해가 쉬울수록 훨씬 좋습니다. 그게 아니라 코드 한 줄 한 줄마다 온갖 예외 처리 코드가 달려 있다. 얘가 NULL이 될 가능성이 없는데 NULL 체크하고 뒤에 NULL 체크하고 또 뭐 체크하고 체크하고 체크하고, 숫자 2개 더 해도 오버플로우 나는 거 알죠? 그거 다 체크하면서 코딩하세요? 잘 안 하죠? '왜 안 하세요?' '생각을 못 했어요' 결과적으로 그런 겁니다. 근데 쓸데없이 '내가 아는 한도 내에서 완벽하게 코드를 작성하겠다', '실행 중에 완벽한 코드가 실행되게 만들겠다', '실행 중에 모든 경우의 수를 다 처리하게 만들겠다' 그 '모든'이 아니라 당신이 얄팍하게 생각하고 있는 몇 가지입니다. 그래서 실제 코딩 많이 하시고 실력 좋으신 분들은 인간은 모든 경우의 수를 처리하려면 불가능한 걸 알기 때문에 그 경우의 수를 줄이는 데 집중을 합니다. 핵심은 경우의 수를 줄이는 데 집중을 한다. 아인슈타인이 했을지 안 했을지 모르는 그 말 '모든 것을 가능한 한 단순하게 해라'. 정말 '복잡한 정도는 필요한 만큼만 해라'는 얘기랑 똑같은 거예요.

그러면 어설트로 돌아와서, 처음에 어떤 함수를 만들었습니다. 다행히 제가 만든 코딩 표준을 잘 따르고 있어서 시그니처에 NULL인지 아닌지를 명시하고 있습니다. NULL이 들어오는 거는 함수 이름orNull 안 들어온 거는 그냥 함수 이름. 그러면 제일 첫 번째 줄에 들어가야 할 게 뭐냐면 어설트, 이 함수에 들어온 매개 변수는 NULL이 아니다. NULL이 아니라는 가정하에 코드를 작성하고 있는 거거든요. 어설트의 장점이 뭐예요? 몰라요? 역시 주니어입니다. 장점이 뭐냐면 릴리즈 빌드를 하면 어설트는 사라집니다. 디버그 빌드에서만 실행돼요. 즉 내가 개발 중에만 그게 문제가 생기면 거기에 멈춰서 알려주는 겁니다. 그게 어설트의 장점이에요. 개발 중에 개발자가 세운 가정, 그 가정이 맞는지 확인해 주는 코드가 어설트예요. 실행 중에 예외 던지는 거랑은 다른 거예요. 개발의 효율성을 도와주는 게 어설트인 거고 이게 또 코드를 작성할 때, 코드를 나중에 읽을 때 가독성을 어마무시하게 늘려줍니다. 왜냐하면 '이 코드는 이런 경우에 이렇게 가정하고 만들었다'는 의도가 다 들어가 있어요. 주석을 달 일이 적어져요. 그렇게 코드를 작성하면 첫째, 경우의 수가 적어지기 때문에 되게 코드를 단순하게 작성할 수 있어요. 쓸데없이 여기서 '이게 되지 않을까?'하고 if/else 같은 거 안 해요. 그거 하시는 분들은 일반적으로 괜히 문제 생기면 내가 고치기 싫으니까 if/else 넣어서 대충 반환 엉뚱하게 해 놓고 다른 사람이 고치길 바라는 거죠. 여기서 다른 사람은 함수 호출한 놈, 그 얘기를 하는 겁니다.

두 번째, 아까 말했던 가독성. 나중에 실제로 돌아와서 코드를 볼 때 '이 코드가 이렇게 작성이 돼 있는데, 이런 경우의 수를 체크를 안 하는데, 문제가 없을까?' 고민할 수 있어요. 근데 코드에 어설트가 들어가 있어요. 원래부터 그 데이터가 안 들어오게 작성된 코드고, 유닛 테스트 이런 거 다 필요 없이 기본적으로 디버그 빌드에서 개발 중에 이런 예외 상황은 잡혔으니까 '여태까지 그런 경우 없이 제대로 코딩한 거구나' 알 수가 있죠.

그리고 세 번째 실제 코드를 작성하고 디버깅을 하는데 갑자기 어설트에 걸렸어요. '어? 우리가 세운 가정하고 코드가 제대로 실행되지 않겠는데? 코드를 바꾸거나 데이터가 잘못 들어왔겠는데?' 라이브 서버 안 나가고 실제 서버 돌려서 QA까지 안 가도 개발자가 확인할 수 있는 문제점들이 확 보이죠. 개발 도중에, 실행하는 도중에, 로컬에서 테스트하는 도중에. 이렇게 세 가지가 있는 겁니다.

근데 이거를 '열심히 하라'고 하면 어떤 사람들 그래요. '이거 왜 어설트 안 넣었어요?', '이거 넣으시면 좋잖아요.', '왜 어설트 안 넣고 if/else 써요?' 그러면 보통 대답은 이렇게 나와요. '그게 어설트가 아닌 게 좋을 것 같았습니다'. 근데 계속 아니라고 하는데도 몇 번을 반복해요. 그럼 또 물어봐요. 그러면 '제 생각에는 이제 어설트를 안 넣어도 된다고 생각했습니다.' 또 몇 번 실수 똑같이 하다가 나아지면 또 물어봐요. 최종적으로 나오는 답은 이겁니다. '어디에 어설트를 넣어야 할지 모르겠어요' 계속 시정이 안 되는 사람들은 최종 결과가 이렇게 나와요. 그럼 질문해요. '왜, 어디에 넣어야 할지 몰라요?' 그러면 그냥 대답을 잘 못해요. 그 근본적인 이유, 대답을 못 하는 이유는 또 다른 이유가 있을 거예요. 개인적인 문제일 거예요.

제가 확실히 아는 한 가지 성향의 사람들이 이 일을 하는 경우는 봤어요. 회피 성향이 있으신 분들. 다른 이유도 많을 거예요. 근데 회피 성향이 있으신 분들은 어디에 어설트를 넣어야 할지 몰라요. 회피 성향이 있는데 왜 모른다고 얘기하냐면, 결과적으로 내가 어설트를 넣는 순간 '나는 이 코드가 이렇게 실행된다'라고 가정하고 작성했다는 걸 명시적으로 하는 거예요. 그러니까 내 생각과 내 판단을 명시하기 시작합니다. 그럼 누군가 보고 '어설트가 틀렸어요'라고 말할 수도 있어요. '어? 이거 잘못하신 거예요' 그럼 거기에서 괜히 막 저격당하시는 분들이 있어요. '내가 이거 몰랐구나. 되게 x신같고... 아' 막 이러는 분들. 그거를 보일 때마다 자기가 괴로운 거예요. 고쳐서 뭘 하겠다는 생각보다는 그냥 괴로운 거예요. 그러니까 숨기고 싶어요. 그래서 일부러 내 판단이 보이는 코드를 일부러 안 넣습니다. 그렇기 때문에 어설트를 안 넣는 거예요. 못 넣는 게 아니라 안 넣는 거예요. 이거를 넣음으로 인해서 나중에 오는 그 고통이 더 힘든 거라고 생각해요. 그러니까 내가 지금 현상 유지만 하고 싶고 나아지고 싶은 마음도 없어요. 근데 내가 못 한다는 건 보여주기 싫어요. 이런 분들 일단은 뭘까요? 회피 성향이 있으신 분 중에 주니어를 벗어나시는 분들은 거의 없습니다. 왜냐하면 피드백 받고 성장해야 하는데 '나는 성장하고 싶은 마음이 없어'이고, 그냥 주니어로 그대로 유지하고 싶은데 내가 주니어라는 사실은 안 보여주고 싶은 거죠. 그래서 어설트를 안 넣습니다. 참고로 말씀드리면 어설트가 얼마나 많이 들어가야 하냐? 꽤 유명하신 어떤 아키텍트의 얘기에 따르면 '로직 코드 7줄에 어설트가 하나는 들어가야 한다'라고 얘기해요. 그런 식으로 가이드라인을 정하시면 가장 좋아요. 이게 회피 성향이 있으신 분들.

그게 아니라 다른 성향인 분들은 개인적인 이유가 여러 개 있겠지만 최종적으로 이렇게 생각해요. 자, 어설트를 넣지 않아요. 그리고 어디에 넣을지 몰라요. 그래서 안 넣었다고 얘기를 해요. 결과적으로 어설트를 넣지 않는 거잖아요? 그러면 코드가 둘 중의 하나일 거예요. 실행 중에 필요 없는 조건들, 절대 일어나지 않는 조건들 검사해서 이상한 짓을 하고 있거나, 코드 불량이 많아지고 나중에 코드를 읽기 시작할 때 '이런 일이 정말 생겨?'라는 고민을 하게 만드는, 코드 브랜치가 복잡해지죠. 아니면 실제 디버깅 중에 잡아야 하는 문제들을 디버깅 때 못 잡고 라이브에 가서 터지거나. 그중의 하나죠.

그러면 괜히 또 생각하죠. '유닛 테스트를 넣으면 나아질 수 있어' 참고로 말씀드리면 유닛 테스트가 디버그 어설트를 체크하게 바꿀 수도 있습니다. 일단 디버그 어설트를 넣는 게 유닛 테스트를 하는 것보다 훨씬 나은 방법입니다. 근데 굳이 그걸 안 하고 유닛 테스트한다는 거는 말이 안 되는 얘기죠. 사실 그럼 결과적으로는 디버깅 중에 쉽게 잡을 수 있는 것들을 유닛 테스트를 해야만 잡을 수 있을 거고, 유닛 테스트에서도 안 넣는다면, 그것도 안 넣는 순간 라이브 가서 터진다는 거죠. 한마디로 일찍 잡을 수 있는 문제들을 뒤늦게 잡을 거고, 그 뒤늦게 잡는다는 얘기는 뭐냐면 결과적으로 '내 책임이 아니라고 회피할 수 있다'는 가능성이죠? 왜냐하면 내 함수 안에서 깨진 게 아니라, 함수 반환하고 딴 데서 깨졌으니까 딴 사람이 보겠죠. 딴 사람이 본 김에 자기가 고쳐주겠죠. 결과적으로 일이 적어지게 하는 것 같지만, 그 일을 적어지게 한다는 얘기는 남의 일을 많이 만드는 거기 때문에, 남한테 의존해서 코딩한다는 거는 주니어급이죠. 그래서 어떻게 되든 간에 주니어급이 돼버리고 맙니다. 그래서 정말 '내가 어설트를 어디에 넣어야 할지 모르겠다' 그게 본인의 진지한 답변이라면 일단은 어설트를 회피하는 이유가 있는지 본인의 성향에서 찾으시고, 그게 없는데도 모른다고 생각하신다면 그거는 여러 번 제가 말해왔던 '이 코드가 어떤 가정하에 실행되어야 한다' 선 조건, 후 조건을 모르시는 거예요. 그러면 결과적으로 스펙 이해를 못 하고 계신 거거든요? 로직이 안 나오고 있다는 거죠. 이걸 주니어 때 잘할 순 없어요. 배워가고 나아지는 거지. 그게 아직 안 된 겁니다. 그래서 그러면 좀 더 스펙 분석하고, 어떤 코드가 어떻게 나오고, 어떤 게 실제 예외 조건이고, 어떤 게 해피 패스인지 구분하기 시작해야 할 겁니다.

그래서 어쨌든 간에 주니어 시리즈는요, 이런 거예요. 어떻게 내가 이런 대답을 했을 때 이거를 결국 못 하고 있다는 거예요. 이유는 중요하잖아요? 내가 못 하고 있고, 안 하고 있다는 겁니다. 그러면 아직도 주니어라는 거예요. 그 뒤에 있는 수많은 이유, 그 현상을 만들게 하는 수많은 이유는 개인마다 다를 수 있지만, 어쨌든 간에 객관적인 판단 기준을 드리고 있는 겁니다.

오늘도 즐거운 얘기 많이 한 힐링 TV, 포프 TV 여기까지 하겠습니다.