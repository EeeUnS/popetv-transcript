오늘은 3편 연속으로 거의
생각하며 코딩 좀 하자 라는 시리즈 인거 같은데
저번 두 편을 만들고 나서 이번 해서야 시리즈 먼지가
생각이 드는거 같아요 요 네 메타 프로그래밍 c 플러스 퍼서 메탈포인트
의 설명을 좀 해볼게요
2 베타 프로그램이 뭐냐면 메타 라는 말이 들어가면 은
아 어떻게 얘기 하면 좋을까 모든 영어에서 메타가 들어가면 요
이거는 진정한 게 아니다
어떤 부수적인 거다 이런 느낌이 강해요 예를 들어서
뭐 뭐 로우를 많이 하시잖아요 리그오브레전드
거기서 어디에 메타 게임이란 게 있잖아요 뭐냐면 실제 게임에서 있는 룬
아닌데 사람들이 자기 위치를 미리 정해놓고 한다 넘어서 퍼트 못 아버 럼
이런거
그런걸 한다거나 그 외에 뭐 특히 트리는 어떻게 찍는게 좋다 뭐 이런
것들을 이제 그럼 메타 게이밍 이라고 해요
그래서 메타 프로그램도 좀 그런 개념이 요
원칙적으로 이게 올바른 프로그램 방향은 아니 아니면 올바르다는 얘기
보다는 전통적인 프로그램 방향은 아닌데
그 시프 프 에서 제공하는 템플릿이 라는게 있어요
이 템플릿이 원 에 나왔던 이유는 좀 다른 개념인데 그 기능들을 전부
이용해서 프로그래밍을 따자 라는 개념이 에요 그러니까
템플릿에 따 어떻게 되는지 말씀을 드리면
c 샵 은 좀 달라요 싶을 뿔은 예를 들어서 가장 편한 예가 이제 뭐
벡터 같은 그 벡터 그런 지 어레이 리스트
그럼 벡터 같은게 있는데 벡터를 할 때 이렇게 뭐지
세모난 가로를 양쪽으로 열고 타입을 지정해 주면 은 그 타입만 바다는
받아들이는 그런 변수 형 이라고 해야 될까
벡터가 만들어 진다고 보시면 맞아요 그러면 이제 그거 에 따라 고 변수만
찍어볼 수 있게
근데 이게 에너지 언어 차원의 지원을 하는 건데
2 가 깔아 둘이 얼른 순간 뭐가 생기냐 면은
그 시험에서는 이걸 이제 뭐 실시간 철판과 실행중에 처리해 주는 건데 c
에서는 이 가게에 들어온 이 가로가 b 있잖아요
그러면 그 값이 달라지는 경우 예를 들어서 하나는
인테 저고 두 번째 것은 어느 사이드 인테 줘야 그러면 그 두 개 용으로
코드를 완벽히 따로 만들어줘야
그러니까
이걸 이제 실시간 에서 체크 하려면 예전에 모 포인터로 체크 했듯이 뭐
포인터 캐스터가 이런식으로 했던가
직접 메뉴얼로 아니면은 o 타입 데피니션 을 쓴다면
여기서 아이 컨테이너에 있는 타입이 이 거니까 이건 이렇게 처리하고 얘는
이 거니까 저렇게 따라 3 숙주의 처리에 이렇게 해서 실시간 에 브랜치를
달라야 됐는데 실행시에
이 템플릿 있으며 는 그게 컴파일 들이 끝난다는 거에요 컴파일 돌의
끝나서 완벽히 해놓은 코드를 줘 버려요 그래서 이제
그러면 결과적으로 제가 이거를 가지고 그 폴리머 pc 나머지 다양성이
이게 정적 다양성이 라고 부르는 사람도 봤어요
저는 좀 아직 뜨건 동의하지 않지만 뭐 왜 그렇게 부르는지 알겠다는
거에요
실제 는 어레이 리스트 않으니까 대표라는 똑같은 타입인데 그 안에 어떤
그 타입 변수를 노준 에 따라 그거 따라 다른 비해 2배가 나오잖아요
그리고 다른 비해 2배가 컴파일 도중에 결정이 돼 버리니까
이건 정적인 거다 라고 하는거예요 물론 이런 경우인 타고 언 인트를 안현
사인데 인텔을 같은 컨테이너에 모르 초
그래서 이거를 활용해서 만 나온게 이제 캠프 님의 프로그램은 쪽인데
이제 이것도 제가 전편 막 안 소프트웨어 아키텍트 얘기 할 때랑 똑같은
걸로
그때 기아가 똑같은 얘기 할 수 있는게
이게 처음 나왔을때 템플릿 코딩 뭐 이렇게 처음 나한테 사람들이 어휘
권하며 는 코드 탑도 빨라지고 마 굉장하게 따 컴파일 시에 다 해
버리니까 그래서 엄청 나누고 난 거예요
새로운 거니까 써보자 새로운 거니까 써보자 이런식으로
그래서 이걸로 떡칠 된 코드 베이스의 몇번 본적이 있어요 근데 지금은 다
보통 끄집어 냈지요 a 뜨고 쓰고 있는 회사 있으면 그것은
저는 굉장히 걱정이 되요 일단 이게 왜 문제냐 하면
디버깅 하기 가 일단 만만치 않아요
일단 뭐 2 이제는 비주얼 숫자가 좀 나아져서
디버깅 그나마 책인 되는데 브레이크 포인트 걷는 순간 그 예를 들어서
아까 뱉어 라는거 가 오히려 더 배까지 타입을 썼다
그럼 브레이크 포인트가 한순간 100가지 탈이 같이 걸려 버리죠
그러면 나중에 브레이크 포인트 원의 딴거 다 제거하고 내꺼 맛 온다거나
그리구 컴파일 중에 나오는 에 라도 굉장히 좀 기 뭐 해요 왜냐하면 은
컴파일 도중에 냉 단순히 어떻게 하는거냐 면 예를 들어서 제가 이 뱉어
모를 만들고 있다 아니면 이 타입을 만들고 이 클래스 안에서
요타 입에다 어떤 함수를 호출하는 거에요
그런데 컴파일 하기 전까지 내가 이 탑이 뭔지 모르기 때문에 뭐 어떻게
모이게 라고 말이죠 음 번 별로 없고 컴파일에 한순간 할 수 있는 얘기는
어 그 함수가 이후 인테 없어 이게 전부에요
근데 그게 에 좀 뭐라 그럴까
제대로 된 애라고 보기에는 되게 어려운 게 뭐 컨테이너 같은 경우는 되게
단순하게 할 수가 있는데 내가 스스로 템플릿 코드를 만들고 마 이것저것
직원 오타가 뭐하나 바꿨는데 다른 오브젝트 지원하는 게 저거 다 망가진
다던가 뭐 이런 이상한 일들이 생겨요 그래서 일단 코드 가독성이 떨어지고
디버깅할 때 쪼금 애매해 지고 그게 템플릿 메타 프로그램이었던 으로
생각하시면 되냐면 옛날에 그 입술에 프로 해놨고 ex 디파이 뭐 이런거
해봐야 디파인 이구나
# 디파인 해왔고 거기다가 함수를 다 안 된 다음에 그 디파인 써봤고
함수로 야 코드로 바꾸는 경우도 있잖아요 그거를
조금 모두 마 시킨게 템플릿 메타포 맵 오션 맞아요 사실 이제 그것보단
좀 낫죠 뭐 여러가지 체크 라던가
근데
이렇게 템플릿 메타 포럼을 해야 되는 경우가 솔직 그렇게 없거든요
템플릿 매 테프론 하는 경우가 결과 제로 뭐냐 를 고민해 보면 이제 #
디파이 s 덩 걸을 이제 대체하려고 는거 그것은 이미
그럼 빠이 잘 함수로 써라 코어 개선할 수 있는 성능 향상은 이제
무시해도 괜찮을 정도 달하는 게 일반적 인 방향 이잖아요 그래서 굳이
거기서 이유는 못찾고
두번째는 코드 최적화 란 얘기가 있는거예요 아까 말했듯이 타입을 중간에
이프 했으므로 해야 되며 는 코드를 이제 중간에 프렌치를 건 죄다 따라야
되니까 최적화 문제가 있다 검찰의 코드를 2개를 전해 시켰고 하에 브랜치
악성코드가 빠를 수 있다
음 대다 맞을수도 틀릴수도 있어요
현재 되게 모든 수치 스템이 재밌어 징계 캐쉬 사이즈라 던가
하드웨어 cpu 에는 캐시 사이즈 이런 것 때문에 최근에는 100 대부분
언제난 아니에요
코드를 컴파일할 때 코드 사이즈를 작게 컴파일 하는거 함수를 만들더라도
그렇게 함수를 여러번 호출 하더라도 코드 사이즈를 작게 만드는 게
성능의 빠른 경우가
대부분이라고 할 수 없고
성능이 빠른 경우가 성능이 책 유린 경우 보단 많아요
그리고 저는 말고 50% 이상 이라고 하죠 그 정도는 맞아
그래서 심지어는 코드를 이제 컴파일러 싶어 컴파일 코드로 컴파일 할 때도
어떤 경우에 본인 스스로 인라인을 해 볼 수가 있어요 인 라인을 한다는
것은 코드를 복사 겠다는 거에요 함수로 줄 안 해 버리고
그래서 코드를 크게 만드는 대신 함수 호출을 줄이는 방법이 있고 아니면
코드를 작게 만들어 시 함수 호출 더 작게 만든 음
자주 만드는 법이 있죠 현재의 우선은 되게 재미있는게
대부분의 코드 베이스에서 절반 이상은 코드 사이즈가 작은게 성능이 더
빨라요
그런 건 템플릿 코드의 타 프로그램 하고는 전혀 반대 하냐구요
그리고 정말 말그대로 2
뭐라 그럴까
템플릿 메타 프로그램을 써야 되는 경우가 있다
그럼 이거는 저는 라 그대로
최적화 타이핑을 줄이기 위해서 뭐 이정도 인데 생각보다 4
뭐 이제 이제는 메타포로 면서 템플릿 프로그래밍 템플릿 프로그래밍에서
타이핑을 줄일 수 있는 건 맞아요 그래서 저는 컨테이너 쪼그리고 벡터
라던가 얼이 쪽에는 템플릿이 쓰는 것을 허용해 요 사실은 왜냐하면 은
벡터에 무슨 오브젝트가 들어갈지도 모르게 거리 일 이다 어레이를 만들기로
찾고 어레이를 만들어 왔고 무슨 뭐 efs 치기도 귀찮고 그래서 그럼
거기는 재활용은 한데
매스 그러니까 이제 수학 함수 에서 까지도 과연 메타포를 써야 하는건
저는 굉장히 회의적 이에요
특히 게임 쪽에서 매트릭스 라던가 뭐 히어리 요 행렬을 게임 써 있을 때
몇 곱하기 매상을 쓰겠어 2 곱하기 3 곱하기 3 4 곱하기 살아 전
보여요
그러면 여기서 뭘 더 세워 차례 만들고 말지
이걸 왜 굳이 베타 폼에서 복잡하게 만들려구요
그리고 뭐 수 역도 비슷해 보통은 뭐 이제 플롯 계열의 수학 0 1 하고
게임 쪽에서 뭐 흘러간 인트로 끝나죠
머언 사이즈인 템 s 함수를 따로 제공할 필요가 있는 어차피 ce
뭐 이렇게 c 풀풀 에서 플러스에 버림 인트로 곧바로 바 벌어져요 어느
순간 그런 것들을 생각해보면 은
메타 프로그램을 좀 남용하는 경향이 있어요 그래서 물론 이제 제가
말했듯이
아까 말텐데 컨테이너 이런거 좋은거고 그리고 정말 제가 써본 경우 한번
있는게 렌더링 파이프 에 만들다가 1 코드가
이렇게 1 51 라인으로 되는 어떤 한 수가 있어요
근데 그 함수가 렌더링 엔진은 건데 이게 1
한 프레임에 1천 번 정도가 불린다고 마셔요
뭐 천마 구출하는 데 보니까 거기서 호출할 때 폐암의 타라가 있어요
하나는 이거 고 하는 이 거야 카페 랍니다 둘중 하나로 바뀌는데 그
때마다 이 페이스를 돌려야 하는 거에요 그래서 그거를 실제 그 페러
미터를 메타 프로그래밍 화 시켜서 고 부분을 그냥 함수를 2개로 코드
제너레이션 랩에서 코드가 2개로 나오게 해 버리면
톤은 인생의 엄청 나거든요 그래서 그런 경우는
이해가 되요 정말 왜냐면 50 라인 코드를 또 복사해 놓고 공통되는
코드가 별로 없어요 그게 그게 또 문제인데 뭐한 따라 함수가 할 수
있었지만
이걸 2개로 분리해 놓고 유지 보수할 하려 보면 여기 한줄 바꿀 때 여기
자주 바꿔야 되거든요
그게 안되는 거야 까지 그게 뭐랄까 실수를 더 유발하는 거죠 그리고 그런
경우에는 작가는 이해가 되요
이 함수가 정말 미친듯이 그리고 이게 정말 보틀 내기 였거든요
이제 그런 경우에 이제 메타 프로그램 쓰는데
또 그런 경우에 딴 찍어 한 사람도 있어요 이거는 메타포 노바 쓰는게
아니야 라는 걸로 그래서 아까 템플릿 코 프로그래밍을 그래서 이 캠프에
프로는 반드시 모모 타입을 바꾸기에 쓰는 거에요 이런 식의 사람 서
있는데 저는
그것도 아니라고 보거든요 저는 저는 기본적으로
코드가 유지보수가 쉽고 가독성이 중에 최고라고 생각해요 모든 간의 그리고
청 는 현상을 위해서는 당연히 어느 정도의 유 드리는 있어야 되는데 그
거니 자기 판단이 고 자기가 만든 소프트웨어가 어떤건지 에 대한 한달
조건 은 제가 전편에서 말했고
이제 너무 쓸데없이 메타포 남용하는 것을 좀 막자 라는게 제 주셨구요
전에도 말했듯이 새로운 거라고 반드시 다 해야 되는 것은 아니고 새롭게
정립된 때까지는 안 쓰는 게 맞아요 제가 다녀본 소프트웨어 제대로 개발한
회사들은 새로운 기술이 나오면 업그레이드 있다하네요
아무리 좋은 있어도 좀 지켜봐요 업데이트 왕이 나올 때까지는 왜냐하면 은
그 순간에 걸 도입하면 에서 나온 의 문제점들을 고치는 데 있다 인건비를
낭비하게 싫다는 거구요 누군가 4 베타 테스트를 해 주는 건데 내가 하기
싫다 줘
두번째는 그거 이제 문제가 생기고 다시 돌려 놓으면 될 거 아니냐 는
얘기가 나와요 근데 재미있는 게 뭐냐면
임야 3개월을 개발하다가 문제를 발견했어
근데 이걸 되돌리기엔 은 이미 새 기능을 너무 많이 쓰고 있어
근데 이 버그는 굉장히 치명적인 돌리지 못해 이런 경우 있잖아요
그점 뭐든간에
그 제품의 안정성을 좀 추구하시는 파는 분들
그런 분들은 그런 걸 되게 뒤에 요 새로운 기능이 나올 때 일단 쓰고
봐요 아니면 때 자기가 어따 비스킷 슬쩍 2까지 이게 확실히 올바른 거고
여기서 단점이 오는것을 장점이 훨씬 낮기 때문에 가자
이런게 2 대가 내자 한거라 그래서 그런거 되게 중요한 거 같아요 그래서
어 머 다 좋은 개념을 다시 대로 쓰면 좋은데
2 뭔가 제대로 쓴다는 개념이
뭐랄까 c 플러스 플러스 다운 굉장히 자유로운 언어다 보니까 되게 있는것
같아요 그리고 어찌 보면은
더 큰 문제는 시프 펄이 여전히 페코 더 컴퓨터 밸리 지잖아요
후반 호헌 썩 그걸 유지하기 위해 귀 전거를 안방에 는 거에요 자꾸 마라
그게 더 문제일 수도 있어요 이래서 시샵 이라던가 어떤 얻어 보면 가끔
마다 가 어떤 회사가 주도하는 원 얻을
그런거 파이썬 다 뭐 그래도 사실은 그랬거든요 후방 관선 여친한테 우리
여기서 딱 멈추고 새로운 먼저 시작한다고
그게 필요해요 왜냐하면 그건 안 하면 옛날꺼 이미 실수를 많이 할 수
있는 부분에 문제가 있는데 그거 하고 새롭게 실수 안 할 수 있는 부분을
엮으면 서 합쳐지면 실소 다만 하시는 경우도 있거든요 그래서 이건 언어
디자인의 문제고 어찌 보면 이제 시프 풀 컴이 뭐랄까 오픈 컴 애니라
그러나 케네 그 스탠다드 컴이 t 의 문제일 수도 있어요
오픈 gl 도 이제 오픈 죄를 지어 하다 한결 더 덜 칸을 세로 새로
만들 듯이 그런 식으로 어느 순간에는 다음 퍼져 나가야 된다고 보고
파이썬 도 뭐 2점 며 세서 그렇게 3.0 올라가면서 버전 두 개의
유지하고 있잖아 이쯤에서 한번 0
아직도 2점 면서 많이 쓰지만 옛날 그 환호 바서 위해서 새로운 기능들
좀 더 안전한 코드 뭐 이런건 3.0 해도 주로 강화되고 있고 써서
그냥 이것도 제가 봤던 것 중에
굉장히 자유로운 언어와 새로운 스펙이 나오고
어
그 자유로운 써서 얼마 남 많은걸로 망가 태어났는지
그 프로그래머들이
좀 많이 망 가 태어났어요 그런 부분을 그래서
어떤 어딘가 4 기본적인 동작은
전에도 몇번 얘기했지만 실수가 칠수 름
최소한 적게 만들 수 있는 기본적인 동작을 만들어 된다고 보거든요
그리고 정말 그 자유로움을 많고 누릴 수 있는 프로그램들이 있어요 정말
디자이너 디자이너 확실히 보고 뭐가 문제지 도 알고
언어 하이가 언어 이게 공 수 주 너부터 저수준 언어 비롯해서 하드웨어와
시스템과 이 모든게 어떻게 도는지 이해하시는 분들이 있어요
그런 분들 많이 그런 자유를 누리면서 뭔가를 뒤에 바꾸는 게 맞는 거죠
그게 제가 로스트 밴디지 가 좋다고 한 이유가 그 거에요
러스트 엔진은 제가 봤던거 모두 모드는 기본 동작 하나 나는 정말 실수
로 못하는데 그 기본 동쪽을 벗어나서 내가 딴걸 할 수 있는 잘 녹아
있어요
그래서 다시 로 스트링을 좀 말았고 음
그정도 오늘 얘기는 그래서 결과 주 했던 얘기는
메타 프로그래밍 이라는 그 메탈 하는게 들어가는 순간 이미 뭔가 잘못하고
있다는 거고요
템플릿 프로그래밍은 쓸 만한 곳이 있구요
4 주로 컨테이너 왜 는 제가 아직도 크다 큼
그렇게 유성 못 받고 그 범위를 넘어서서 네타 프로그램이나 템플릿 프롬
하는 상황에 와야 되면은
진짜 궁금해 고민해서 이거 왜 필요한지
본인이 확신할 수 있을 때 하세요 이거는 정말 대충 하다가는 코드
유지보수 정말 안 되었거나 정말 힘들어 줘
뭐 그정도 음 예 뽑혔습니다
