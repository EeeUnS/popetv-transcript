'배열은 왜 색인이 0부터 시작하냐?' 이런 얘기를 옛날에는 꽤 많이 했었어요. 요즘은 배열이 1부터 시작하는 언어가 많이 죽어서 거의 모든 언어의 배열이 0으로 시작하죠. 그래서 이제는 굳이 싸우지 않는 것 같은데, 옛날에는 '0으로 시작하는 게 많다.', '1로 시작하는 게 많다.' 얘기가 되게 많았어요. 그럼 이 이야기가 왜 나왔을까?

1로 시작하는 사람들의 개념은 이런 거예요. 프로그래밍 처음 하시는 분들은 헷갈릴 수 있는 거긴 한데 '첫 번째 요소니까 1로 시작하는 게 편하다. 1, 2, 3, 4, 5, 6, 7, 8 세기 쉽지 않냐?'. 맞는 얘기예요. 틀린 얘기는 아닙니다. 그죠? 근데 여기에는 약간 아다리가 안 맞는 부분이 있어요. 일단 첫 번째 배열의 색인이 0으로 시작하는 이유부터 설명할게요. 배열은 사실 메모리 한 덩어리고요, 배열의 색인이라는 거는 '배열의 메모리 한 덩어리의 시작 지점부터 오프셋이 몇이냐?'를 의미하는 거예요. 첫 번째는 오프셋이 0이고, 두 번째는 하나 건너뛰고 오프셋이 1이고 두 개 건너뛰면 오프셋이 2인데, 결과적으로 세 번째 요소를 가리키고 있는 거죠. 그래서 이겁니다. 메모리 오프셋의 개념이기 때문에 0부터 시작하는 거고요. 근데 사람이 생각할 때는 헷갈릴 수 있어요. 이거는 저희가 첫 번째라는 개념과 0부터 시작하면 0이 첫 번째라는 개념이 헷갈려서 그런 겁니다. 무슨 얘기냐면 1부터 세기 시작하면 무조건 숫자는 1이 첫 번째, 2가 두 번째, 3이 세 번째예요. 근데 0부터 세기 시작하면 0이 첫 번째, 1이 두 번째, 2가 세 번째죠. 번째라는 거는 '뭐부터 시작하냐?'의 개념이 아니에요. '제일 앞에서 나열했을 때 몇 번째에 있냐?'라는 개념이고요, 이게 반드시 숫자하고 만날 이유는 없어요. 대표적인 게 10진수 숫자입니다. 10진수 할 때 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 하잖아요? 근데 9까지는 한 자리예요. 10은 두 자리로 올라가요. 어? 이상해요. 왜냐하면 각 자리에 들어갈 수 있는 숫자가 10개라고 했거든요? 10개를 했어요. 1, 2, 3, 4, 5, 6, 7, 8, 9... 10을 세 버렸는데 한 자리가 올라가요. 이상하잖아요? 이걸 제대로 세면 0부터 세어야 해요. 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. 10개죠? 그다음에 한 자리 들어가는 숫자 다 넣었죠? 그다음에 올라가면 10 두 자리가 되는 거예요.

그래서 이런 식으로 숫자를 많이 고민하다 보면 0부터 세는 게 저희가 가진 숫자 체계하고 굉장히 맞아요. 근데 0이라는 개념이 자연수냐 아니냐는 넣는 사람도 있고, 아닌 사람도 있는 것 같은데 기본적으로 자연수는 아니거든요? 제 기준에서. 자연의 어떤 사물을 세기 시작할 때 '0개'라는 개념이 존재했었거든요? '야! 사과 0개 먹자'고 하면 말이 안 되잖아요? '사과 1개 줘', '사과 2개 줘', '사과 3개 줘' 이런 식으로 되는 거지. 그렇기 때문에 이 자연수가 우리가 가장 익숙하게 여기 있는 숫자인데, 이게 우리가 가지고 있는 아라빅 숫자 체계와는 약간 다른 거예요. 사실 아라빅 숫자 체계는 0부터 세기 시작한 숫자가 아라빅 숫자인 것 같더라고요. 그래서 수 체계의 모학을 따져보면 우리가 일반 사람들이 편하게 생각하는 숫자, 그거 개념만 벗어나면 실제 합리적으로 도는 숫자는 0부터가 맞더라고요. 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 그다음에 10으로 올라가는 거. 10은 11번째 요소가 되는 거죠. '이건 몇 번째냐?'라는 거에 따라서 코드에 버그도 많이 나와요. 그래서 실제 프로그래밍을 많이 하시는 분일수록 숫자를 0부터 세는 경우가 되게 많습니다. 하다 보면 변수 이름도 변수1, 변수2, 변수3 이렇게 적는 경우 있잖아요? 근데 코딩을 잘하고 지금 말했던 수 체계 때문에 실수를 덜 하는 훈련이 잘 된 분들은 변수 이름 지을 때도 0부터 시작해요. num0, num1, num2, num3. 그러다 보면 두 자리가 한 번에 바뀐다는 걸 알거든요. 그래서 for문 돌리거나 뭐 하거나 이럴 때도 수 체계가 맞아요. 이게 아닌 사람들은 내가 지금 생각할 때 숫자는 첫 번째, 두 번째, 세 번째로 가정을 하고 1, 2, 3, 4로 가는데, 나중에 이걸 배열로 옮겨서 뭐 하다 보면 색인이 달라지고 헷갈리면서 문제가 생기기 시작하는 거죠.

어쨌든 간에 컴퓨터 언어는 배열의 색인이라는 게 이제는 거의 0부터 시작하는 게 자리를 잡았고요, 1부터 시작하는 컴퓨터 언어는 사용을 덜 하고, 그 상황에서 프로그래머라면 0으로 시작하는 숫자에 대해서 조금 더 익숙해지는 게 색인 때문에 쓸데없는 문제가 생기는 것들을 많이 줄일 수 있게 됩니다. '반드시 0부터 세는 게 맞다.', '1부터 세는 게 가독성이 좋다.' 이 얘기는 안 할게요. 솔직히 첫 번째가 1인 게 좋기는 좋아요. 근데 어쩔 수 없이 배열이라는 개념 자체가 메모리 한 덩어리이기 때문에 메모리 한 덩어리에서는 오프셋 0이 첫 번째 요소가 맞습니다. 그래서 잘 이해가 안 되면 이렇게라도 우기면서 이해하는 게 좋아요. 저도 처음에 이거 헷갈릴 때 오프셋 개념으로 이해하고 나서 그 이후부터는 많이 안 헷갈렸고, 변수명에 숫자를 넣어야 할 때 0부터 시작하게 습관도 점점 만들어 왔어요. 그리고 0부터 시작하면 되게 좋은 것들이 사실은 많아요. 또 한 가지 예를 들면 이런 거죠. 만약에 POCU 아카데미의 수업이 3월 3일 날 시작 해요. 그리고 내부적으로 첫 번째 주를 week0으로 써야 하냐? week1로 써야 하냐? 외부에 얘기할 때 1 주차 얘기하지만, 생각을 해보면 계산이 용이해지려면 첫 번째 주가 0인 게 좋아요. 왜냐하면 시작하는 날짜 + 그 주 * 7일 하면 날짜가 나오거든요. 그죠? 그럼 시작은 0인 게 훨씬 계산도 편하긴 합니다. 그래서 사용자가 볼 때 흔히 말하는 '자! 이번에 0주 차 강의요' 이렇게 말하지는 않잖아요? 보통 '1주 차 강의요' 그러잖아요? 이런 거는 어쩔 수 없이 보는 사람도 편하게 하지만 연산의 용이성이나 그런 걸 따지면은 0으로 되는 숫자 0으로 시작하는 숫자에 익숙해지면 계산이 되게 편해지고 복잡한 계산을 안 하게 돼요. 마지막에 사용자한테 보일 때만 약간만 신경 쓰면 되는 그런 것들이 있습니다.

그래서 '0으로 시작하는 숫자에 익숙해지자. 익숙해지면 확실히 편하다.', '배열은 왜 0으로 시작하냐?'라고 얘기하면 메모리 오프셋이니까. 이렇게 말씀을 드리겠습니다.

포프였습니다.