안녕하세요, 포프입니다.

예전에 제가 '정규식은 이제 그만'이라는 비디오를 만든 적이 있어요. 동의하신 분 되게 많았죠? 여전히 변하지 않았는데, 간단하게 요약하면 '정규식을 안 써도 되는 데는 쓰지 마라'라고 얘기한 거였거든요? 주된 이유는 가독성 문제 때문이었는데, 사실 컴퓨터공학과 공부한 분들은 정규식을 돌리는 코드라고 하죠? 그 자체가 유한 상태 기계라는 걸 알거든요? FSM. 그래서 유한 상태 기계이기 때문에 어차피 실행 도중에 유한 상태 기계를 돌리는 건 내가 손으로 작성해 놓은 코드보다는 느린 게 당연한 거니까 그래서 그런 부분도 사실 있었어요.

근데 여전히 정규식을 써야만 되는 부분들이 있기는 해요. 그럴 때여도 '주석을 좀 예쁘게 달아라.', '함수를 호출해서 이 함수를 이름으로 얘가 뭐 하는지 보여주게 해라. 그래야 나중에 가독성과 디버깅이 좋다.'라고 얘기를 했어요. 역시 제가 말했던 부분들에 대해서 공통으로 고통을 느끼고 있던 분들이 있는 것 같거든요? 마이크로 소프트 쪽에서도 그런 사람들이 있었던 것 같아요. 마이크로소프트의 .NET 7에 들어왔을 거예요. '정규식을 써야 할 때 얘를 미리 컴파일해서 속도도 좀 높여주고 가독성도 좋게 해 주자.' 어떻게? 예쁜 변수명을 설정해 줘서. 어떤 식으로 도는 거냐면 사실 얘가 C#에 있는 Attribute를 사용하는 거거든요. C#에 보면 멤버 변수 같은 거 만들 수 있잖아요? readonly 같은 걸로 만들 수 있고, 그 멤버 변수 위에 Attribute를 달아주는 거예요. Attribute를 달면서 Attribute 이름이 GeneratedRegexAttribute일 거예요. 그러니까 한마디로 'Source Code Generation 하라'는 얘기예요. 그거에 넣고 그 옆에 실제 ReGex에 들어가는 문자열을 넣어놔요. 그리고 아까 말했던 멤버 변수라고 했잖아요? 멤버 변수 이름을 예쁘게 지으면 제가 예전에 말했던 '함수를 호출하는 식으로 해라'라고 하는 것보다도 훨씬 효율적으로 컴파일된 코드가 나올 수 있다는 거예요.

그래서 C# 쪽에는 .NET 버전 몇이었는지부터 모르겠는데 Source Code Gen을 굉장히 열심히 만들었거든요? 그것의 혜택을 보는 거라 생각하고 있어요. 다행히도 프로그래머 입장에서 볼 때는 이제 ReGex를 반드시 써야만 되는 곳이다, 그러니까 ReGex를 if문이나 for문으로 바꾸기에는 너무 어마무시하게 양이 크고 되게 복잡한 로직이 나오고 더 읽기가 힘들어질 수 있을 때 ReGex를 쓰는 경우들이 있어요. 그런 경우에 미리 컴파일된 코드와 가독성을 높이는 변수 이름, 그러면 이제 주석을 달 필요도 없어요. 왜냐면 변수 이름만으로 알 수 있어야 하니까. 그래서 그 방식으로 ReGex를 좀 더 효율적으로 쓸 방법이 나왔다는 거죠.

여전히 ReGex를 많은 프로그래머가 다 마음 깊이 알고 있지 않아요. 프로그래밍 언어에서 쓰는 기본 생성자는 많은 프로그래머가 다 아는데, ReGex로 딱 들어가는 순간 많은 사람들이 헷갈려요. 이런 부분은 웹 쪽에서 ReGex를 해석해 주고 분석해 주고, 아니면 이게 이 문자열과 매칭하는지 확인해 주는 툴들도 많이 나와 있고, 그 외에 ChatGPT가 나왔잖아요? ChatGPT한테 'ReGex 이게 뭔지 설명해 달라' 그러면 설명을 나쁘지 않게 웬만하면 잘해줘요. 그런 툴이 많이 좋아지긴 했어요. 하지만 그것은 역시 코딩을 작성하다가 어딘가에 복붙 해놓고 보고 이런 과정을 거치는 거잖아요? 그만큼 ReGex가 소스코드에 들어가 있으면 프로그래머가 코딩을 작성하거나 읽는 속도는 확연히 떨어지게 돼요. 내 화면에 있는 IDE를 떠나는 순간 무조건 느려지는 게 사실은 프로그래밍이라고 보면 맞거든요. 그런 부분에 있어서는 여전히 ReGex는 최소화하는 게 좋지만 정말 필요하고 ReGex로 인해서 코드가 너무 간단해지고 가독성도 흩어지지 않는 정도라면 이제 '성능 걱정 좀 덜 하고 할 수 있는 방법이 생겼다'라는 정도로 이해하시면 좋을 것 같아요. 제가 옛날에 'ReGex 굉장히 많이 쓰지 말라' 그랬지만 요즘은 조금 더 써도 돼요. '조금 더'라는 걸로 이제 오늘 포프 TV는 마무리하겠습니다.

포프였습니다.